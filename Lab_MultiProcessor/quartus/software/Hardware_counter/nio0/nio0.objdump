
nio0.elf:     file format elf32-littlenios2
nio0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x04000000 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00002224 vaddr 0x04000224 paddr 0x04000224 align 2**12
         filesz 0x0000fe54 memsz 0x0000fe54 flags r-x
    LOAD off    0x00012078 vaddr 0x04010078 paddr 0x04010c44 align 2**12
         filesz 0x00000bcc memsz 0x00000bcc flags rw-
    LOAD off    0x00013810 vaddr 0x04011810 paddr 0x04011810 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-
    LOAD off    0x00013000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08020020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fac8  04000224  04000224  00002224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000038c  0400fcec  0400fcec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000bcc  04010078  04010c44  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  04011810  04011810  00013810  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04011968  04011968  00013020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08020244  08020244  00013020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e50  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022c72  00000000  00000000  00013e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008d1a  00000000  00000000  00036b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b1b9  00000000  00000000  0003f824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022c4  00000000  00000000  0004a9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000395a  00000000  00000000  0004cca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a2f  00000000  00000000  000505fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00068030  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001848  00000000  00000000  00068060  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006cbc6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006cbc9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006cbd5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006cbd6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000006  00000000  00000000  0006cbd7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000006  00000000  00000000  0006cbdd  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000006  00000000  00000000  0006cbe3  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000002  00000000  00000000  0006cbe9  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001c  00000000  00000000  0006cbeb  2**0
                  CONTENTS, READONLY
 27 .jdi          00006f7a  00000000  00000000  0006cc07  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000bc7e9  00000000  00000000  00073b81  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
0400fcec l    d  .rodata	00000000 .rodata
04010078 l    d  .rwdata	00000000 .rwdata
04011810 l    d  .bss	00000000 .bss
04011968 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08020244 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nio0_bsp//obj/HAL/src/crt0.o
0400026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
04010078 l     O .rwdata	0000000a _hex_digits_data.2706
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400fd96 l     O .rodata	00000010 zeroes.4404
04002684 l     F .text	000000bc __sbprintf
0400fda6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04002894 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040043c4 l     F .text	00000008 __fp_unlock
040043d8 l     F .text	0000019c __sinit.part.1
04004574 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04010084 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
040104c8 l     O .rwdata	00000020 lc_ctype_charset
040104a8 l     O .rwdata	00000020 lc_message_charset
040104e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0400fdd8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04006e8c l     F .text	000000fc __sprint_r.part.0
0400ff0c l     O .rodata	00000010 blanks.4348
0400fefc l     O .rodata	00000010 zeroes.4349
04008418 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400cc50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400cd70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400cd9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400ce9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400cf90 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400d07c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400d264 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04010c2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400d4c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400d60c l     F .text	00000038 alt_dev_reg
0400d644 l     F .text	00000050 alt_get_errno
0400d694 l     F .text	0000006c alt_avalon_mutex_reg
04010ad0 l     O .rwdata	00000048 mailbox_simple_0
04010b18 l     O .rwdata	00000010 mutex_0
04010b28 l     O .rwdata	00000010 mutex_1
04010b38 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0400d7bc l     F .text	00000090 altera_avalon_mailbox_identify
0400d84c l     F .text	00000078 altera_avalon_mailbox_post
0400d8c4 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0400d9fc l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0400e11c l     F .text	00000050 alt_get_errno
0400e16c l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0400e5b8 l     F .text	0000009c altera_avalon_uart_irq
0400e654 l     F .text	000000e4 altera_avalon_uart_rxirq
0400e738 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0400e8d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0400eb00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400ed44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400f28c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400f3cc l     F .text	00000050 alt_get_errno
0400f41c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401183c g     O .bss	00000004 alt_instruction_exception_handler
0400699c g     F .text	00000074 _mprec_log10
0400de90 g     F .text	00000150 altera_avalon_mailbox_send
04006a88 g     F .text	0000008c __any_on
04008e70 g     F .text	00000054 _isatty_r
0400fde4 g     O .rodata	00000028 __mprec_tinytens
0400d1a0 g     F .text	0000007c alt_main
04011868 g     O .bss	00000100 alt_irq
04008ec4 g     F .text	00000060 _lseek_r
04010c44 g       *ABS*	00000000 __flash_rwdata_start
0400b77c g     F .text	00000088 .hidden __eqdf2
04011968 g       *ABS*	00000000 __alt_heap_start
04000434 g     F .text	0000003c printf
0400979c g     F .text	0000009c _wcrtomb_r
04006cb4 g     F .text	0000005c __sseek
04004714 g     F .text	00000010 __sinit
04009644 g     F .text	00000140 __swbuf_r
04004d20 g     F .text	0000007c _setlocale_r
0400457c g     F .text	00000068 __sfmoreglue
0400d240 g     F .text	00000024 __malloc_unlock
04008f24 g     F .text	0000015c memmove
040046fc g     F .text	00000018 _cleanup
0400e2a4 g     F .text	00000040 altera_avalon_mutex_trylock
04005b18 g     F .text	000000a8 _Balloc
0400b804 g     F .text	000000dc .hidden __gtdf2
0400f640 g     F .text	00000024 altera_nios2_gen2_irq_init
08020000 g     F .entry	0000001c __reset
0400e338 g     F .text	00000074 altera_avalon_mutex_is_mine
04000000 g       *ABS*	00000000 __flash_exceptions_start
04008958 g     F .text	0000005c _fstat_r
04011828 g     O .bss	00000004 errno
04006c30 g     F .text	00000008 __seofread
04011830 g     O .bss	00000004 alt_argv
04018bfc g       *ABS*	00000000 _gp
0400dfe0 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04010950 g     O .rwdata	00000180 alt_fd_list
0400eef8 g     F .text	00000090 alt_find_dev
040058a8 g     F .text	00000148 memcpy
040043cc g     F .text	0000000c _cleanup_r
0400ca68 g     F .text	000000dc .hidden __floatsidf
0400f350 g     F .text	0000007c alt_io_redirect
0400b8e0 g     F .text	000000f4 .hidden __ltdf2
0400fcec g       *ABS*	00000000 __DTOR_END__
0400f8bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400daa4 g     F .text	00000078 altera_avalon_mailbox_simple_init
04006b14 g     F .text	00000074 __fpclassifyd
040068f8 g     F .text	000000a4 __ratio
040083fc g     F .text	0000001c __vfiprintf_internal
04000404 g     F .text	00000030 _printf_r
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400a52c g     F .text	00000064 .hidden __udivsi3
0400ceec g     F .text	000000a4 isatty
0400fe34 g     O .rodata	000000c8 __mprec_tens
0400de18 g     F .text	00000078 altera_avalon_mailbox_status
0400dd00 g     F .text	00000118 altera_avalon_mailbox_close
04004d9c g     F .text	0000000c __locale_charset
0400f82c g     F .text	00000090 alt_icache_flush
04011824 g     O .bss	00000004 __malloc_top_pad
04010c04 g     O .rwdata	00000004 __mb_cur_max
04004dcc g     F .text	0000000c _localeconv_r
040089b4 g     F .text	000004bc __sfvwrite_r
04005f24 g     F .text	0000003c __i2b
04006b88 g     F .text	00000054 _sbrk_r
04009080 g     F .text	00000060 _read_r
04010c24 g     O .rwdata	00000004 alt_max_fd
0400864c g     F .text	000000f0 _fclose_r
04004394 g     F .text	00000030 fflush
04011820 g     O .bss	00000004 __malloc_max_sbrked_mem
0400a5e8 g     F .text	000008ac .hidden __adddf3
040066a0 g     F .text	0000010c __b2d
04009efc g     F .text	00000538 .hidden __umoddi3
0400d0cc g     F .text	000000d4 lseek
0400e3ac g     F .text	00000050 altera_avalon_mutex_first_lock
04010bfc g     O .rwdata	00000004 _global_impure_ptr
040090e0 g     F .text	00000564 _realloc_r
04011968 g       *ABS*	00000000 __bss_end
0400f19c g     F .text	000000f0 alt_iic_isr_register
04009984 g     F .text	00000578 .hidden __udivdi3
040088b4 g     F .text	00000024 _fputwc_r
0400fe0c g     O .rodata	00000028 __mprec_bigtens
04005d08 g     F .text	00000104 __s2b
0400cb44 g     F .text	000000a8 .hidden __floatunsidf
040063e0 g     F .text	00000060 __mcmp
0400e50c g     F .text	000000ac altera_avalon_uart_init
04004734 g     F .text	00000018 __fp_lock_all
0400f150 g     F .text	0000004c alt_ic_irq_enabled
04000270 g     F .text	00000044 value_showhex
04011838 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
04010928 g     O .rwdata	00000028 alt_dev_null
0400e1e8 g     F .text	00000054 altera_avalon_mutex_open
0400ecfc g     F .text	00000048 alt_dcache_flush_all
04005e0c g     F .text	00000068 __hi0bits
0400c9e8 g     F .text	00000080 .hidden __fixdfsi
04010c44 g       *ABS*	00000000 __ram_rwdata_end
04010c1c g     O .rwdata	00000008 alt_dev_list
0400d514 g     F .text	000000f8 write
04010c38 g     O .rwdata	00000008 alt_mutex_list
04010078 g       *ABS*	00000000 __ram_rodata_end
0400cdec g     F .text	000000b0 fstat
0400b8e0 g     F .text	000000f4 .hidden __ledf2
04006158 g     F .text	00000140 __pow5mult
04006fa0 g     F .text	0000145c ___vfiprintf_internal_r
04011818 g     O .bss	00000004 __nlocale_changed
0400a590 g     F .text	00000058 .hidden __umodsi3
04011968 g       *ABS*	00000000 end
0400eb50 g     F .text	000001ac altera_avalon_uart_write
080201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0400fcec g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400e45c g     F .text	00000060 altera_avalon_uart_write_fd
0400cbec g     F .text	00000064 .hidden __clzsi2
0400e4bc g     F .text	00000050 altera_avalon_uart_close_fd
04004724 g     F .text	00000004 __sfp_lock_acquire
040057c4 g     F .text	000000e4 memchr
04000470 g     F .text	000021f8 ___vfprintf_internal_r
04004888 g     F .text	00000310 _free_r
04004da8 g     F .text	00000010 __locale_mb_cur_max
0400fb38 g     F .text	00000180 __call_exitprocs
04011814 g     O .bss	00000004 __mlocale_changed
04010c08 g     O .rwdata	00000004 __malloc_sbrk_base
04000224 g     F .text	0000004c _start
04006298 g     F .text	00000148 __lshift
0400d2b4 g     F .text	000000fc read
0400d738 g     F .text	00000084 alt_sys_init
0400fa20 g     F .text	00000118 __register_exitproc
0400e2e4 g     F .text	00000054 altera_avalon_mutex_unlock
04005f60 g     F .text	000001f8 __multiply
04010078 g       *ABS*	00000000 __ram_rwdata_start
0400fcec g       *ABS*	00000000 __ram_rodata_start
04011840 g     O .bss	00000028 __malloc_current_mallinfo
040067ac g     F .text	0000014c __d2b
0400f778 g     F .text	000000b4 alt_get_fd
04008534 g     F .text	00000054 _close_r
0400f9a4 g     F .text	0000007c memcmp
04011968 g       *ABS*	00000000 __alt_stack_base
04002740 g     F .text	00000154 __swsetup_r
0400ae94 g     F .text	000008e8 .hidden __divdf3
040045e4 g     F .text	00000118 __sfp
04006a10 g     F .text	00000078 __copybits
04010520 g     O .rwdata	00000408 __malloc_av_
04004730 g     F .text	00000004 __sinit_lock_release
0400b9d4 g     F .text	00000718 .hidden __muldf3
04006bdc g     F .text	00000054 __sread
0400f664 g     F .text	00000114 alt_find_file
0400ed94 g     F .text	000000a4 alt_dev_llist_insert
0400d21c g     F .text	00000024 __malloc_lock
0400d414 g     F .text	000000b0 sbrk
04004338 g     F .text	0000005c _fflush_r
04008588 g     F .text	000000c4 _calloc_r
04011810 g       *ABS*	00000000 __bss_start
040059f0 g     F .text	00000128 memset
040002b4 g     F .text	00000150 main
04011834 g     O .bss	00000004 alt_envp
0401181c g     O .bss	00000004 __malloc_max_total_mem
04009784 g     F .text	00000018 __swbuf
04006d10 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400873c g     F .text	00000014 fclose
0400e260 g     F .text	00000044 altera_avalon_mutex_lock
04002a94 g     F .text	00001688 _dtoa_r
04004fb8 g     F .text	0000080c _malloc_r
040098f8 g     F .text	00000030 __ascii_wctomb
04010c28 g     O .rwdata	00000004 alt_errno
04004b98 g     F .text	000000c4 _fwalk
0400a434 g     F .text	00000084 .hidden __divsi3
04004764 g     F .text	00000124 _malloc_trim_r
0400fcec g       *ABS*	00000000 __CTOR_END__
04006d18 g     F .text	000000dc strcmp
0400fcec g       *ABS*	00000000 __flash_rodata_start
0400fcec g       *ABS*	00000000 __DTOR_LIST__
0400b77c g     F .text	00000088 .hidden __nedf2
0400d700 g     F .text	00000038 alt_irq_init
0400d3b0 g     F .text	00000064 alt_release_fd
0400ff1c g     O .rodata	00000100 .hidden __clz_tab
04011810 g     O .bss	00000004 _PathLocale
0400f958 g     F .text	00000014 atexit
040084d4 g     F .text	00000060 _write_r
04004dd8 g     F .text	00000018 setlocale
04010c00 g     O .rwdata	00000004 _impure_ptr
0401182c g     O .bss	00000004 alt_argc
0400411c g     F .text	0000021c __sflush_r
0400ee98 g     F .text	00000060 _do_dtors
04004dc4 g     F .text	00000008 __locale_cjk_lang
08020020 g       .exceptions	00000000 alt_irq_entry
0400663c g     F .text	00000064 __ulp
0400474c g     F .text	00000018 __fp_unlock_all
04010c14 g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
04004df0 g     F .text	0000000c localeconv
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0400efbc g     F .text	00000050 alt_ic_isr_register
04010c44 g       *ABS*	00000000 _edata
0400e3fc g     F .text	00000060 altera_avalon_uart_read_fd
04011968 g       *ABS*	00000000 _end
04008750 g     F .text	00000164 __fputwc
08020244 g       *ABS*	00000000 __ram_exceptions_end
0400f0ac g     F .text	000000a4 alt_ic_irq_disable
04010c30 g     O .rwdata	00000008 alt_mailbox_simple_list
04006c38 g     F .text	0000007c __swrite
04010c0c g     O .rwdata	00000004 __malloc_trim_threshold
04004db8 g     F .text	0000000c __locale_msgcharset
0400f96c g     F .text	00000038 exit
04004c5c g     F .text	000000c4 _fwalk_reent
04006440 g     F .text	000001fc __mdiff
0400a4b8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
04004728 g     F .text	00000004 __sfp_lock_release
0400e880 g     F .text	00000054 altera_avalon_uart_close
0400db1c g     F .text	000001e4 altera_avalon_mailbox_open
0400fcb8 g     F .text	00000034 _exit
04004dfc g     F .text	000001bc __smakebuf_r
04006df4 g     F .text	00000098 strlen
0400f4e8 g     F .text	00000158 open
0400b804 g     F .text	000000dc .hidden __gedf2
04010c10 g     O .rwdata	00000004 __wctomb
04006f88 g     F .text	00000018 __sprint_r
0400ef88 g     F .text	00000034 alt_icache_flush_all
04010c40 g     O .rwdata	00000004 alt_priority_mask
0400f00c g     F .text	000000a0 alt_ic_irq_enable
04002668 g     F .text	0000001c __vfprintf_internal
0400e23c g     F .text	00000024 altera_avalon_mutex_close
0400e924 g     F .text	000001dc altera_avalon_uart_read
04009928 g     F .text	0000005c _wctomb_r
0400c0ec g     F .text	000008fc .hidden __subdf3
04005e74 g     F .text	000000b0 __lo0bits
0400ee38 g     F .text	00000060 _do_ctors
04009838 g     F .text	000000c0 wcrtomb
0400cca0 g     F .text	000000d0 close
0400cff8 g     F .text	00000084 alt_load
040088d8 g     F .text	00000080 fputwc
0400472c g     F .text	00000004 __sinit_lock_acquire
04005be8 g     F .text	00000120 __multadd
04005bc0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__ram_exceptions_end+0xfffffdc0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8020014:	08408914 	ori	at,at,548
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	00810074 	movhi	r2,1025
 8020140:	10861a04 	addi	r2,r2,6248
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	00810074 	movhi	r2,1025
 8020158:	10861a04 	addi	r2,r2,6248
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__ram_exceptions_end+0xfffffee8>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__ram_exceptions_end+0xfffffedc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e4:	000531fa 	rdctl	r2,exception
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201ec:	e0bffd17 	ldw	r2,-12(fp)
 80201f0:	10801f0c 	andi	r2,r2,124
 80201f4:	1004d0ba 	srli	r2,r2,2
 80201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80201fc:	0005333a 	rdctl	r2,badaddr
 8020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020204:	d0a31017 	ldw	r2,-29632(gp)
 8020208:	10000726 	beq	r2,zero,8020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 802020c:	d0a31017 	ldw	r2,-29632(gp)
 8020210:	e0fffd17 	ldw	r3,-12(fp)
 8020214:	e1bffe17 	ldw	r6,-8(fp)
 8020218:	e17fff17 	ldw	r5,-4(fp)
 802021c:	1809883a 	mov	r4,r3
 8020220:	103ee83a 	callr	r2
 8020224:	00000206 	br	8020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 802022c:	0005883a 	mov	r2,zero
}
 8020230:	e037883a 	mov	sp,fp
 8020234:	dfc00117 	ldw	ra,4(sp)
 8020238:	df000017 	ldw	fp,0(sp)
 802023c:	dec00204 	addi	sp,sp,8
 8020240:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000224:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000228:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400022c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000230:	00bffd16 	blt	zero,r2,4000228 <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000234:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400023c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000240:	d6a2ff14 	ori	gp,gp,35836
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000244:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000248:	10860414 	ori	r2,r2,6160

    movhi r3, %hi(__bss_end)
 400024c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000250:	18c65a14 	ori	r3,r3,6504

    beq r2, r3, 1f
 4000254:	10c00326 	beq	r2,r3,4000264 <_start+0x40>

0:
    stw zero, (r2)
 4000258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000260:	10fffd36 	bltu	r2,r3,4000258 <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000264:	400cff80 	call	400cff8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000268:	400d1a00 	call	400d1a0 <alt_main>

0400026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400026c:	003fff06 	br	400026c <__ram_exceptions_end+0xfbfe0028>

04000270 <value_showhex>:
#define WRITE_OFFSET 4
#define SET_OFFSET 12
#define CLEAR_OFFSET 16

int value_showhex(int value)
{
 4000270:	defffd04 	addi	sp,sp,-12
 4000274:	df000215 	stw	fp,8(sp)
 4000278:	df000204 	addi	fp,sp,8
 400027c:	e13fff15 	stw	r4,-4(fp)
	static unsigned char _hex_digits_data[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
	int led_value;
	led_value = _hex_digits_data[value & 0xF];
 4000280:	e0bfff17 	ldw	r2,-4(fp)
 4000284:	10c003cc 	andi	r3,r2,15
 4000288:	00810074 	movhi	r2,1025
 400028c:	10801e04 	addi	r2,r2,120
 4000290:	10c5883a 	add	r2,r2,r3
 4000294:	10800003 	ldbu	r2,0(r2)
 4000298:	10803fcc 	andi	r2,r2,255
 400029c:	e0bffe15 	stw	r2,-8(fp)
	//printf("led value %d\n",led_value);
	return led_value;
 40002a0:	e0bffe17 	ldw	r2,-8(fp)
}
 40002a4:	e037883a 	mov	sp,fp
 40002a8:	df000017 	ldw	fp,0(sp)
 40002ac:	dec00104 	addi	sp,sp,4
 40002b0:	f800283a 	ret

040002b4 <main>:

int main()
{
 40002b4:	defffb04 	addi	sp,sp,-20
 40002b8:	dfc00415 	stw	ra,16(sp)
 40002bc:	df000315 	stw	fp,12(sp)
 40002c0:	df000304 	addi	fp,sp,12
	printf("Hello from Nios II %d \n",ALT_CPU_CPU_ID_VALUE);
 40002c4:	000b883a 	mov	r5,zero
 40002c8:	01010074 	movhi	r4,1025
 40002cc:	213f3b04 	addi	r4,r4,-788
 40002d0:	40004340 	call	4000434 <printf>
	alt_mutex_dev* mutex=altera_avalon_mutex_open(MUTEX_0_NAME);
 40002d4:	01010074 	movhi	r4,1025
 40002d8:	213f4104 	addi	r4,r4,-764
 40002dc:	400e1e80 	call	400e1e8 <altera_avalon_mutex_open>
 40002e0:	e0bfff15 	stw	r2,-4(fp)

	printf("Hello from Nios II %d \n",ALT_CPU_CPU_ID_VALUE);
 40002e4:	000b883a 	mov	r5,zero
 40002e8:	01010074 	movhi	r4,1025
 40002ec:	213f3b04 	addi	r4,r4,-788
 40002f0:	40004340 	call	4000434 <printf>
	int i=0;
 40002f4:	e03ffd15 	stw	zero,-12(fp)
	int read;
	int j;
	for(j=0;j<315000;j++)
 40002f8:	e03ffe15 	stw	zero,-8(fp)
 40002fc:	00000306 	br	400030c <main+0x58>
 4000300:	e0bffe17 	ldw	r2,-8(fp)
 4000304:	10800044 	addi	r2,r2,1
 4000308:	e0bffe15 	stw	r2,-8(fp)
 400030c:	e0fffe17 	ldw	r3,-8(fp)
 4000310:	00800174 	movhi	r2,5
 4000314:	10b39dc4 	addi	r2,r2,-12681
 4000318:	10fff90e 	bge	r2,r3,4000300 <__ram_exceptions_end+0xfbfe00bc>
	{

	}
	printf("counter_start %d\n",IORD_32DIRECT(PROG_COUNTER_2_BASE, START_COUNTER));
 400031c:	00820134 	movhi	r2,2052
 4000320:	10841204 	addi	r2,r2,4168
 4000324:	10800037 	ldwio	r2,0(r2)
 4000328:	100b883a 	mov	r5,r2
 400032c:	01010074 	movhi	r4,1025
 4000330:	213f4504 	addi	r4,r4,-748
 4000334:	40004340 	call	4000434 <printf>

	while(i<=1000){
 4000338:	00002906 	br	40003e0 <main+0x12c>
		for(j=0;j<31500;j++)
 400033c:	e03ffe15 	stw	zero,-8(fp)
 4000340:	00000306 	br	4000350 <main+0x9c>
 4000344:	e0bffe17 	ldw	r2,-8(fp)
 4000348:	10800044 	addi	r2,r2,1
 400034c:	e0bffe15 	stw	r2,-8(fp)
 4000350:	e0bffe17 	ldw	r2,-8(fp)
 4000354:	109ec310 	cmplti	r2,r2,31500
 4000358:	103ffa1e 	bne	r2,zero,4000344 <__ram_exceptions_end+0xfbfe0100>
		{

		}
		altera_avalon_mutex_lock(mutex,1);
 400035c:	01400044 	movi	r5,1
 4000360:	e13fff17 	ldw	r4,-4(fp)
 4000364:	400e2600 	call	400e260 <altera_avalon_mutex_lock>

		printf("nios0 read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 4000368:	00820134 	movhi	r2,2052
 400036c:	10841004 	addi	r2,r2,4160
 4000370:	10800037 	ldwio	r2,0(r2)
 4000374:	100b883a 	mov	r5,r2
 4000378:	01010074 	movhi	r4,1025
 400037c:	213f4a04 	addi	r4,r4,-728
 4000380:	40004340 	call	4000434 <printf>
		IOWR_32DIRECT(PROG_COUNTER_2_BASE, STOP_COUNTER, 0);
 4000384:	0007883a 	mov	r3,zero
 4000388:	00820134 	movhi	r2,2052
 400038c:	10841304 	addi	r2,r2,4172
 4000390:	10c00035 	stwio	r3,0(r2)
		printf("nios0 after stop read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 4000394:	00820134 	movhi	r2,2052
 4000398:	10841004 	addi	r2,r2,4160
 400039c:	10800037 	ldwio	r2,0(r2)
 40003a0:	100b883a 	mov	r5,r2
 40003a4:	01010074 	movhi	r4,1025
 40003a8:	213f4e04 	addi	r4,r4,-712
 40003ac:	40004340 	call	4000434 <printf>
		printf("nios0 after stop read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 40003b0:	00820134 	movhi	r2,2052
 40003b4:	10841004 	addi	r2,r2,4160
 40003b8:	10800037 	ldwio	r2,0(r2)
 40003bc:	100b883a 	mov	r5,r2
 40003c0:	01010074 	movhi	r4,1025
 40003c4:	213f4e04 	addi	r4,r4,-712
 40003c8:	40004340 	call	4000434 <printf>

		altera_avalon_mutex_unlock(mutex);
 40003cc:	e13fff17 	ldw	r4,-4(fp)
 40003d0:	400e2e40 	call	400e2e4 <altera_avalon_mutex_unlock>
		i++;
 40003d4:	e0bffd17 	ldw	r2,-12(fp)
 40003d8:	10800044 	addi	r2,r2,1
 40003dc:	e0bffd15 	stw	r2,-12(fp)
	{

	}
	printf("counter_start %d\n",IORD_32DIRECT(PROG_COUNTER_2_BASE, START_COUNTER));

	while(i<=1000){
 40003e0:	e0bffd17 	ldw	r2,-12(fp)
 40003e4:	1080fa50 	cmplti	r2,r2,1001
 40003e8:	103fd41e 	bne	r2,zero,400033c <__ram_exceptions_end+0xfbfe00f8>

		altera_avalon_mutex_unlock(mutex);
		i++;
	}

  return 0;
 40003ec:	0005883a 	mov	r2,zero

}
 40003f0:	e037883a 	mov	sp,fp
 40003f4:	dfc00117 	ldw	ra,4(sp)
 40003f8:	df000017 	ldw	fp,0(sp)
 40003fc:	dec00204 	addi	sp,sp,8
 4000400:	f800283a 	ret

04000404 <_printf_r>:
 4000404:	defffd04 	addi	sp,sp,-12
 4000408:	2805883a 	mov	r2,r5
 400040c:	dfc00015 	stw	ra,0(sp)
 4000410:	d9800115 	stw	r6,4(sp)
 4000414:	d9c00215 	stw	r7,8(sp)
 4000418:	21400217 	ldw	r5,8(r4)
 400041c:	d9c00104 	addi	r7,sp,4
 4000420:	100d883a 	mov	r6,r2
 4000424:	40004700 	call	4000470 <___vfprintf_internal_r>
 4000428:	dfc00017 	ldw	ra,0(sp)
 400042c:	dec00304 	addi	sp,sp,12
 4000430:	f800283a 	ret

04000434 <printf>:
 4000434:	defffc04 	addi	sp,sp,-16
 4000438:	dfc00015 	stw	ra,0(sp)
 400043c:	d9400115 	stw	r5,4(sp)
 4000440:	d9800215 	stw	r6,8(sp)
 4000444:	d9c00315 	stw	r7,12(sp)
 4000448:	00810074 	movhi	r2,1025
 400044c:	10830004 	addi	r2,r2,3072
 4000450:	10800017 	ldw	r2,0(r2)
 4000454:	200b883a 	mov	r5,r4
 4000458:	d9800104 	addi	r6,sp,4
 400045c:	11000217 	ldw	r4,8(r2)
 4000460:	40026680 	call	4002668 <__vfprintf_internal>
 4000464:	dfc00017 	ldw	ra,0(sp)
 4000468:	dec00404 	addi	sp,sp,16
 400046c:	f800283a 	ret

04000470 <___vfprintf_internal_r>:
 4000470:	deffb804 	addi	sp,sp,-288
 4000474:	dfc04715 	stw	ra,284(sp)
 4000478:	ddc04515 	stw	r23,276(sp)
 400047c:	dd404315 	stw	r21,268(sp)
 4000480:	d9002c15 	stw	r4,176(sp)
 4000484:	282f883a 	mov	r23,r5
 4000488:	302b883a 	mov	r21,r6
 400048c:	d9c02d15 	stw	r7,180(sp)
 4000490:	df004615 	stw	fp,280(sp)
 4000494:	dd804415 	stw	r22,272(sp)
 4000498:	dd004215 	stw	r20,264(sp)
 400049c:	dcc04115 	stw	r19,260(sp)
 40004a0:	dc804015 	stw	r18,256(sp)
 40004a4:	dc403f15 	stw	r17,252(sp)
 40004a8:	dc003e15 	stw	r16,248(sp)
 40004ac:	4004dcc0 	call	4004dcc <_localeconv_r>
 40004b0:	10800017 	ldw	r2,0(r2)
 40004b4:	1009883a 	mov	r4,r2
 40004b8:	d8803415 	stw	r2,208(sp)
 40004bc:	4006df40 	call	4006df4 <strlen>
 40004c0:	d8803715 	stw	r2,220(sp)
 40004c4:	d8802c17 	ldw	r2,176(sp)
 40004c8:	10000226 	beq	r2,zero,40004d4 <___vfprintf_internal_r+0x64>
 40004cc:	10800e17 	ldw	r2,56(r2)
 40004d0:	1000f926 	beq	r2,zero,40008b8 <___vfprintf_internal_r+0x448>
 40004d4:	b880030b 	ldhu	r2,12(r23)
 40004d8:	10c8000c 	andi	r3,r2,8192
 40004dc:	1800061e 	bne	r3,zero,40004f8 <___vfprintf_internal_r+0x88>
 40004e0:	b9001917 	ldw	r4,100(r23)
 40004e4:	00f7ffc4 	movi	r3,-8193
 40004e8:	10880014 	ori	r2,r2,8192
 40004ec:	20c6703a 	and	r3,r4,r3
 40004f0:	b880030d 	sth	r2,12(r23)
 40004f4:	b8c01915 	stw	r3,100(r23)
 40004f8:	10c0020c 	andi	r3,r2,8
 40004fc:	1800c126 	beq	r3,zero,4000804 <___vfprintf_internal_r+0x394>
 4000500:	b8c00417 	ldw	r3,16(r23)
 4000504:	1800bf26 	beq	r3,zero,4000804 <___vfprintf_internal_r+0x394>
 4000508:	1080068c 	andi	r2,r2,26
 400050c:	00c00284 	movi	r3,10
 4000510:	10c0c426 	beq	r2,r3,4000824 <___vfprintf_internal_r+0x3b4>
 4000514:	d8c00404 	addi	r3,sp,16
 4000518:	05010074 	movhi	r20,1025
 400051c:	d9001e04 	addi	r4,sp,120
 4000520:	a53f6584 	addi	r20,r20,-618
 4000524:	d8c01e15 	stw	r3,120(sp)
 4000528:	d8002015 	stw	zero,128(sp)
 400052c:	d8001f15 	stw	zero,124(sp)
 4000530:	d8003315 	stw	zero,204(sp)
 4000534:	d8003615 	stw	zero,216(sp)
 4000538:	d8003815 	stw	zero,224(sp)
 400053c:	1811883a 	mov	r8,r3
 4000540:	d8003915 	stw	zero,228(sp)
 4000544:	d8003a15 	stw	zero,232(sp)
 4000548:	d8002f15 	stw	zero,188(sp)
 400054c:	d9002815 	stw	r4,160(sp)
 4000550:	a8800007 	ldb	r2,0(r21)
 4000554:	10027b26 	beq	r2,zero,4000f44 <___vfprintf_internal_r+0xad4>
 4000558:	00c00944 	movi	r3,37
 400055c:	a821883a 	mov	r16,r21
 4000560:	10c0021e 	bne	r2,r3,400056c <___vfprintf_internal_r+0xfc>
 4000564:	00001406 	br	40005b8 <___vfprintf_internal_r+0x148>
 4000568:	10c00326 	beq	r2,r3,4000578 <___vfprintf_internal_r+0x108>
 400056c:	84000044 	addi	r16,r16,1
 4000570:	80800007 	ldb	r2,0(r16)
 4000574:	103ffc1e 	bne	r2,zero,4000568 <__ram_exceptions_end+0xfbfe0324>
 4000578:	8563c83a 	sub	r17,r16,r21
 400057c:	88000e26 	beq	r17,zero,40005b8 <___vfprintf_internal_r+0x148>
 4000580:	d8c02017 	ldw	r3,128(sp)
 4000584:	d8801f17 	ldw	r2,124(sp)
 4000588:	45400015 	stw	r21,0(r8)
 400058c:	1c47883a 	add	r3,r3,r17
 4000590:	10800044 	addi	r2,r2,1
 4000594:	d8c02015 	stw	r3,128(sp)
 4000598:	44400115 	stw	r17,4(r8)
 400059c:	d8801f15 	stw	r2,124(sp)
 40005a0:	00c001c4 	movi	r3,7
 40005a4:	1880a716 	blt	r3,r2,4000844 <___vfprintf_internal_r+0x3d4>
 40005a8:	42000204 	addi	r8,r8,8
 40005ac:	d9402f17 	ldw	r5,188(sp)
 40005b0:	2c4b883a 	add	r5,r5,r17
 40005b4:	d9402f15 	stw	r5,188(sp)
 40005b8:	80800007 	ldb	r2,0(r16)
 40005bc:	1000a826 	beq	r2,zero,4000860 <___vfprintf_internal_r+0x3f0>
 40005c0:	84400047 	ldb	r17,1(r16)
 40005c4:	00bfffc4 	movi	r2,-1
 40005c8:	85400044 	addi	r21,r16,1
 40005cc:	d8002785 	stb	zero,158(sp)
 40005d0:	0007883a 	mov	r3,zero
 40005d4:	000f883a 	mov	r7,zero
 40005d8:	d8802915 	stw	r2,164(sp)
 40005dc:	d8003115 	stw	zero,196(sp)
 40005e0:	0025883a 	mov	r18,zero
 40005e4:	01401604 	movi	r5,88
 40005e8:	01800244 	movi	r6,9
 40005ec:	02800a84 	movi	r10,42
 40005f0:	02401b04 	movi	r9,108
 40005f4:	ad400044 	addi	r21,r21,1
 40005f8:	88bff804 	addi	r2,r17,-32
 40005fc:	28830436 	bltu	r5,r2,4001210 <___vfprintf_internal_r+0xda0>
 4000600:	100490ba 	slli	r2,r2,2
 4000604:	01010034 	movhi	r4,1024
 4000608:	21018604 	addi	r4,r4,1560
 400060c:	1105883a 	add	r2,r2,r4
 4000610:	10800017 	ldw	r2,0(r2)
 4000614:	1000683a 	jmp	r2
 4000618:	04001130 	cmpltui	r16,zero,68
 400061c:	04001210 	cmplti	r16,zero,72
 4000620:	04001210 	cmplti	r16,zero,72
 4000624:	04001150 	cmplti	r16,zero,69
 4000628:	04001210 	cmplti	r16,zero,72
 400062c:	04001210 	cmplti	r16,zero,72
 4000630:	04001210 	cmplti	r16,zero,72
 4000634:	04001210 	cmplti	r16,zero,72
 4000638:	04001210 	cmplti	r16,zero,72
 400063c:	04001210 	cmplti	r16,zero,72
 4000640:	040008c4 	movi	r16,35
 4000644:	0400106c 	andhi	r16,zero,65
 4000648:	04001210 	cmplti	r16,zero,72
 400064c:	0400078c 	andi	r16,zero,30
 4000650:	040008ec 	andhi	r16,zero,35
 4000654:	04001210 	cmplti	r16,zero,72
 4000658:	0400092c 	andhi	r16,zero,36
 400065c:	04000938 	rdprs	r16,zero,36
 4000660:	04000938 	rdprs	r16,zero,36
 4000664:	04000938 	rdprs	r16,zero,36
 4000668:	04000938 	rdprs	r16,zero,36
 400066c:	04000938 	rdprs	r16,zero,36
 4000670:	04000938 	rdprs	r16,zero,36
 4000674:	04000938 	rdprs	r16,zero,36
 4000678:	04000938 	rdprs	r16,zero,36
 400067c:	04000938 	rdprs	r16,zero,36
 4000680:	04001210 	cmplti	r16,zero,72
 4000684:	04001210 	cmplti	r16,zero,72
 4000688:	04001210 	cmplti	r16,zero,72
 400068c:	04001210 	cmplti	r16,zero,72
 4000690:	04001210 	cmplti	r16,zero,72
 4000694:	04001210 	cmplti	r16,zero,72
 4000698:	04001210 	cmplti	r16,zero,72
 400069c:	04001210 	cmplti	r16,zero,72
 40006a0:	04001210 	cmplti	r16,zero,72
 40006a4:	04001210 	cmplti	r16,zero,72
 40006a8:	0400096c 	andhi	r16,zero,37
 40006ac:	04000a28 	cmpgeui	r16,zero,40
 40006b0:	04001210 	cmplti	r16,zero,72
 40006b4:	04000a28 	cmpgeui	r16,zero,40
 40006b8:	04001210 	cmplti	r16,zero,72
 40006bc:	04001210 	cmplti	r16,zero,72
 40006c0:	04001210 	cmplti	r16,zero,72
 40006c4:	04001210 	cmplti	r16,zero,72
 40006c8:	04000ac8 	cmpgei	r16,zero,43
 40006cc:	04001210 	cmplti	r16,zero,72
 40006d0:	04001210 	cmplti	r16,zero,72
 40006d4:	04000ad4 	movui	r16,43
 40006d8:	04001210 	cmplti	r16,zero,72
 40006dc:	04001210 	cmplti	r16,zero,72
 40006e0:	04001210 	cmplti	r16,zero,72
 40006e4:	04001210 	cmplti	r16,zero,72
 40006e8:	04001210 	cmplti	r16,zero,72
 40006ec:	04000f4c 	andi	r16,zero,61
 40006f0:	04001210 	cmplti	r16,zero,72
 40006f4:	04001210 	cmplti	r16,zero,72
 40006f8:	04000fac 	andhi	r16,zero,62
 40006fc:	04001210 	cmplti	r16,zero,72
 4000700:	04001210 	cmplti	r16,zero,72
 4000704:	04001210 	cmplti	r16,zero,72
 4000708:	04001210 	cmplti	r16,zero,72
 400070c:	04001210 	cmplti	r16,zero,72
 4000710:	04001210 	cmplti	r16,zero,72
 4000714:	04001210 	cmplti	r16,zero,72
 4000718:	04001210 	cmplti	r16,zero,72
 400071c:	04001210 	cmplti	r16,zero,72
 4000720:	04001210 	cmplti	r16,zero,72
 4000724:	040011bc 	xorhi	r16,zero,70
 4000728:	0400115c 	xori	r16,zero,69
 400072c:	04000a28 	cmpgeui	r16,zero,40
 4000730:	04000a28 	cmpgeui	r16,zero,40
 4000734:	04000a28 	cmpgeui	r16,zero,40
 4000738:	0400116c 	andhi	r16,zero,69
 400073c:	0400115c 	xori	r16,zero,69
 4000740:	04001210 	cmplti	r16,zero,72
 4000744:	04001210 	cmplti	r16,zero,72
 4000748:	04001178 	rdprs	r16,zero,69
 400074c:	04001210 	cmplti	r16,zero,72
 4000750:	04001188 	cmpgei	r16,zero,70
 4000754:	0400105c 	xori	r16,zero,65
 4000758:	04000798 	cmpnei	r16,zero,30
 400075c:	0400107c 	xorhi	r16,zero,65
 4000760:	04001210 	cmplti	r16,zero,72
 4000764:	04001088 	cmpgei	r16,zero,66
 4000768:	04001210 	cmplti	r16,zero,72
 400076c:	040010e4 	muli	r16,zero,67
 4000770:	04001210 	cmplti	r16,zero,72
 4000774:	04001210 	cmplti	r16,zero,72
 4000778:	040010f4 	movhi	r16,67
 400077c:	d9003117 	ldw	r4,196(sp)
 4000780:	d8802d15 	stw	r2,180(sp)
 4000784:	0109c83a 	sub	r4,zero,r4
 4000788:	d9003115 	stw	r4,196(sp)
 400078c:	94800114 	ori	r18,r18,4
 4000790:	ac400007 	ldb	r17,0(r21)
 4000794:	003f9706 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4000798:	00800c04 	movi	r2,48
 400079c:	d9002d17 	ldw	r4,180(sp)
 40007a0:	d9402917 	ldw	r5,164(sp)
 40007a4:	d8802705 	stb	r2,156(sp)
 40007a8:	00801e04 	movi	r2,120
 40007ac:	d8802745 	stb	r2,157(sp)
 40007b0:	d8002785 	stb	zero,158(sp)
 40007b4:	20c00104 	addi	r3,r4,4
 40007b8:	24c00017 	ldw	r19,0(r4)
 40007bc:	002d883a 	mov	r22,zero
 40007c0:	90800094 	ori	r2,r18,2
 40007c4:	28029a16 	blt	r5,zero,4001230 <___vfprintf_internal_r+0xdc0>
 40007c8:	00bfdfc4 	movi	r2,-129
 40007cc:	90a4703a 	and	r18,r18,r2
 40007d0:	d8c02d15 	stw	r3,180(sp)
 40007d4:	94800094 	ori	r18,r18,2
 40007d8:	9802871e 	bne	r19,zero,40011f8 <___vfprintf_internal_r+0xd88>
 40007dc:	00810074 	movhi	r2,1025
 40007e0:	10bf5e04 	addi	r2,r2,-648
 40007e4:	d8803915 	stw	r2,228(sp)
 40007e8:	04401e04 	movi	r17,120
 40007ec:	d8802917 	ldw	r2,164(sp)
 40007f0:	0039883a 	mov	fp,zero
 40007f4:	1001e926 	beq	r2,zero,4000f9c <___vfprintf_internal_r+0xb2c>
 40007f8:	0027883a 	mov	r19,zero
 40007fc:	002d883a 	mov	r22,zero
 4000800:	00020506 	br	4001018 <___vfprintf_internal_r+0xba8>
 4000804:	d9002c17 	ldw	r4,176(sp)
 4000808:	b80b883a 	mov	r5,r23
 400080c:	40027400 	call	4002740 <__swsetup_r>
 4000810:	1005ac1e 	bne	r2,zero,4001ec4 <___vfprintf_internal_r+0x1a54>
 4000814:	b880030b 	ldhu	r2,12(r23)
 4000818:	00c00284 	movi	r3,10
 400081c:	1080068c 	andi	r2,r2,26
 4000820:	10ff3c1e 	bne	r2,r3,4000514 <__ram_exceptions_end+0xfbfe02d0>
 4000824:	b880038f 	ldh	r2,14(r23)
 4000828:	103f3a16 	blt	r2,zero,4000514 <__ram_exceptions_end+0xfbfe02d0>
 400082c:	d9c02d17 	ldw	r7,180(sp)
 4000830:	d9002c17 	ldw	r4,176(sp)
 4000834:	a80d883a 	mov	r6,r21
 4000838:	b80b883a 	mov	r5,r23
 400083c:	40026840 	call	4002684 <__sbprintf>
 4000840:	00001106 	br	4000888 <___vfprintf_internal_r+0x418>
 4000844:	d9002c17 	ldw	r4,176(sp)
 4000848:	d9801e04 	addi	r6,sp,120
 400084c:	b80b883a 	mov	r5,r23
 4000850:	4006f880 	call	4006f88 <__sprint_r>
 4000854:	1000081e 	bne	r2,zero,4000878 <___vfprintf_internal_r+0x408>
 4000858:	da000404 	addi	r8,sp,16
 400085c:	003f5306 	br	40005ac <__ram_exceptions_end+0xfbfe0368>
 4000860:	d8802017 	ldw	r2,128(sp)
 4000864:	10000426 	beq	r2,zero,4000878 <___vfprintf_internal_r+0x408>
 4000868:	d9002c17 	ldw	r4,176(sp)
 400086c:	d9801e04 	addi	r6,sp,120
 4000870:	b80b883a 	mov	r5,r23
 4000874:	4006f880 	call	4006f88 <__sprint_r>
 4000878:	b880030b 	ldhu	r2,12(r23)
 400087c:	1080100c 	andi	r2,r2,64
 4000880:	1005901e 	bne	r2,zero,4001ec4 <___vfprintf_internal_r+0x1a54>
 4000884:	d8802f17 	ldw	r2,188(sp)
 4000888:	dfc04717 	ldw	ra,284(sp)
 400088c:	df004617 	ldw	fp,280(sp)
 4000890:	ddc04517 	ldw	r23,276(sp)
 4000894:	dd804417 	ldw	r22,272(sp)
 4000898:	dd404317 	ldw	r21,268(sp)
 400089c:	dd004217 	ldw	r20,264(sp)
 40008a0:	dcc04117 	ldw	r19,260(sp)
 40008a4:	dc804017 	ldw	r18,256(sp)
 40008a8:	dc403f17 	ldw	r17,252(sp)
 40008ac:	dc003e17 	ldw	r16,248(sp)
 40008b0:	dec04804 	addi	sp,sp,288
 40008b4:	f800283a 	ret
 40008b8:	d9002c17 	ldw	r4,176(sp)
 40008bc:	40047140 	call	4004714 <__sinit>
 40008c0:	003f0406 	br	40004d4 <__ram_exceptions_end+0xfbfe0290>
 40008c4:	d8802d17 	ldw	r2,180(sp)
 40008c8:	d9002d17 	ldw	r4,180(sp)
 40008cc:	10800017 	ldw	r2,0(r2)
 40008d0:	d8803115 	stw	r2,196(sp)
 40008d4:	20800104 	addi	r2,r4,4
 40008d8:	d9003117 	ldw	r4,196(sp)
 40008dc:	203fa716 	blt	r4,zero,400077c <__ram_exceptions_end+0xfbfe0538>
 40008e0:	d8802d15 	stw	r2,180(sp)
 40008e4:	ac400007 	ldb	r17,0(r21)
 40008e8:	003f4206 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 40008ec:	ac400007 	ldb	r17,0(r21)
 40008f0:	aac00044 	addi	r11,r21,1
 40008f4:	8a872826 	beq	r17,r10,4002598 <___vfprintf_internal_r+0x2128>
 40008f8:	88bff404 	addi	r2,r17,-48
 40008fc:	0009883a 	mov	r4,zero
 4000900:	30867d36 	bltu	r6,r2,40022f8 <___vfprintf_internal_r+0x1e88>
 4000904:	5c400007 	ldb	r17,0(r11)
 4000908:	210002a4 	muli	r4,r4,10
 400090c:	5d400044 	addi	r21,r11,1
 4000910:	a817883a 	mov	r11,r21
 4000914:	2089883a 	add	r4,r4,r2
 4000918:	88bff404 	addi	r2,r17,-48
 400091c:	30bff92e 	bgeu	r6,r2,4000904 <__ram_exceptions_end+0xfbfe06c0>
 4000920:	2005c916 	blt	r4,zero,4002048 <___vfprintf_internal_r+0x1bd8>
 4000924:	d9002915 	stw	r4,164(sp)
 4000928:	003f3306 	br	40005f8 <__ram_exceptions_end+0xfbfe03b4>
 400092c:	94802014 	ori	r18,r18,128
 4000930:	ac400007 	ldb	r17,0(r21)
 4000934:	003f2f06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4000938:	a809883a 	mov	r4,r21
 400093c:	d8003115 	stw	zero,196(sp)
 4000940:	88bff404 	addi	r2,r17,-48
 4000944:	0017883a 	mov	r11,zero
 4000948:	24400007 	ldb	r17,0(r4)
 400094c:	5ac002a4 	muli	r11,r11,10
 4000950:	ad400044 	addi	r21,r21,1
 4000954:	a809883a 	mov	r4,r21
 4000958:	12d7883a 	add	r11,r2,r11
 400095c:	88bff404 	addi	r2,r17,-48
 4000960:	30bff92e 	bgeu	r6,r2,4000948 <__ram_exceptions_end+0xfbfe0704>
 4000964:	dac03115 	stw	r11,196(sp)
 4000968:	003f2306 	br	40005f8 <__ram_exceptions_end+0xfbfe03b4>
 400096c:	18c03fcc 	andi	r3,r3,255
 4000970:	18072b1e 	bne	r3,zero,4002620 <___vfprintf_internal_r+0x21b0>
 4000974:	94800414 	ori	r18,r18,16
 4000978:	9080080c 	andi	r2,r18,32
 400097c:	10037b26 	beq	r2,zero,400176c <___vfprintf_internal_r+0x12fc>
 4000980:	d9402d17 	ldw	r5,180(sp)
 4000984:	28800117 	ldw	r2,4(r5)
 4000988:	2cc00017 	ldw	r19,0(r5)
 400098c:	29400204 	addi	r5,r5,8
 4000990:	d9402d15 	stw	r5,180(sp)
 4000994:	102d883a 	mov	r22,r2
 4000998:	10044b16 	blt	r2,zero,4001ac8 <___vfprintf_internal_r+0x1658>
 400099c:	d9402917 	ldw	r5,164(sp)
 40009a0:	df002783 	ldbu	fp,158(sp)
 40009a4:	2803bc16 	blt	r5,zero,4001898 <___vfprintf_internal_r+0x1428>
 40009a8:	00ffdfc4 	movi	r3,-129
 40009ac:	9d84b03a 	or	r2,r19,r22
 40009b0:	90e4703a 	and	r18,r18,r3
 40009b4:	10017726 	beq	r2,zero,4000f94 <___vfprintf_internal_r+0xb24>
 40009b8:	b0038326 	beq	r22,zero,40017c8 <___vfprintf_internal_r+0x1358>
 40009bc:	dc402a15 	stw	r17,168(sp)
 40009c0:	dc001e04 	addi	r16,sp,120
 40009c4:	b023883a 	mov	r17,r22
 40009c8:	402d883a 	mov	r22,r8
 40009cc:	9809883a 	mov	r4,r19
 40009d0:	880b883a 	mov	r5,r17
 40009d4:	01800284 	movi	r6,10
 40009d8:	000f883a 	mov	r7,zero
 40009dc:	4009efc0 	call	4009efc <__umoddi3>
 40009e0:	10800c04 	addi	r2,r2,48
 40009e4:	843fffc4 	addi	r16,r16,-1
 40009e8:	9809883a 	mov	r4,r19
 40009ec:	880b883a 	mov	r5,r17
 40009f0:	80800005 	stb	r2,0(r16)
 40009f4:	01800284 	movi	r6,10
 40009f8:	000f883a 	mov	r7,zero
 40009fc:	40099840 	call	4009984 <__udivdi3>
 4000a00:	1027883a 	mov	r19,r2
 4000a04:	10c4b03a 	or	r2,r2,r3
 4000a08:	1823883a 	mov	r17,r3
 4000a0c:	103fef1e 	bne	r2,zero,40009cc <__ram_exceptions_end+0xfbfe0788>
 4000a10:	d8c02817 	ldw	r3,160(sp)
 4000a14:	dc402a17 	ldw	r17,168(sp)
 4000a18:	b011883a 	mov	r8,r22
 4000a1c:	1c07c83a 	sub	r3,r3,r16
 4000a20:	d8c02e15 	stw	r3,184(sp)
 4000a24:	00005906 	br	4000b8c <___vfprintf_internal_r+0x71c>
 4000a28:	18c03fcc 	andi	r3,r3,255
 4000a2c:	1806fa1e 	bne	r3,zero,4002618 <___vfprintf_internal_r+0x21a8>
 4000a30:	9080020c 	andi	r2,r18,8
 4000a34:	10048a26 	beq	r2,zero,4001c60 <___vfprintf_internal_r+0x17f0>
 4000a38:	d8c02d17 	ldw	r3,180(sp)
 4000a3c:	d9002d17 	ldw	r4,180(sp)
 4000a40:	d9402d17 	ldw	r5,180(sp)
 4000a44:	18c00017 	ldw	r3,0(r3)
 4000a48:	21000117 	ldw	r4,4(r4)
 4000a4c:	29400204 	addi	r5,r5,8
 4000a50:	d8c03615 	stw	r3,216(sp)
 4000a54:	d9003815 	stw	r4,224(sp)
 4000a58:	d9402d15 	stw	r5,180(sp)
 4000a5c:	d9003617 	ldw	r4,216(sp)
 4000a60:	d9403817 	ldw	r5,224(sp)
 4000a64:	da003d15 	stw	r8,244(sp)
 4000a68:	04000044 	movi	r16,1
 4000a6c:	4006b140 	call	4006b14 <__fpclassifyd>
 4000a70:	da003d17 	ldw	r8,244(sp)
 4000a74:	14041f1e 	bne	r2,r16,4001af4 <___vfprintf_internal_r+0x1684>
 4000a78:	d9003617 	ldw	r4,216(sp)
 4000a7c:	d9403817 	ldw	r5,224(sp)
 4000a80:	000d883a 	mov	r6,zero
 4000a84:	000f883a 	mov	r7,zero
 4000a88:	400b8e00 	call	400b8e0 <__ledf2>
 4000a8c:	da003d17 	ldw	r8,244(sp)
 4000a90:	1005be16 	blt	r2,zero,400218c <___vfprintf_internal_r+0x1d1c>
 4000a94:	df002783 	ldbu	fp,158(sp)
 4000a98:	008011c4 	movi	r2,71
 4000a9c:	1445330e 	bge	r2,r17,4001f6c <___vfprintf_internal_r+0x1afc>
 4000aa0:	04010074 	movhi	r16,1025
 4000aa4:	843f5604 	addi	r16,r16,-680
 4000aa8:	00c000c4 	movi	r3,3
 4000aac:	00bfdfc4 	movi	r2,-129
 4000ab0:	d8c02a15 	stw	r3,168(sp)
 4000ab4:	90a4703a 	and	r18,r18,r2
 4000ab8:	d8c02e15 	stw	r3,184(sp)
 4000abc:	d8002915 	stw	zero,164(sp)
 4000ac0:	d8003215 	stw	zero,200(sp)
 4000ac4:	00003706 	br	4000ba4 <___vfprintf_internal_r+0x734>
 4000ac8:	94800214 	ori	r18,r18,8
 4000acc:	ac400007 	ldb	r17,0(r21)
 4000ad0:	003ec806 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4000ad4:	18c03fcc 	andi	r3,r3,255
 4000ad8:	1806db1e 	bne	r3,zero,4002648 <___vfprintf_internal_r+0x21d8>
 4000adc:	94800414 	ori	r18,r18,16
 4000ae0:	9080080c 	andi	r2,r18,32
 4000ae4:	1002d826 	beq	r2,zero,4001648 <___vfprintf_internal_r+0x11d8>
 4000ae8:	d9402d17 	ldw	r5,180(sp)
 4000aec:	d8c02917 	ldw	r3,164(sp)
 4000af0:	d8002785 	stb	zero,158(sp)
 4000af4:	28800204 	addi	r2,r5,8
 4000af8:	2cc00017 	ldw	r19,0(r5)
 4000afc:	2d800117 	ldw	r22,4(r5)
 4000b00:	18048f16 	blt	r3,zero,4001d40 <___vfprintf_internal_r+0x18d0>
 4000b04:	013fdfc4 	movi	r4,-129
 4000b08:	9d86b03a 	or	r3,r19,r22
 4000b0c:	d8802d15 	stw	r2,180(sp)
 4000b10:	9124703a 	and	r18,r18,r4
 4000b14:	1802d91e 	bne	r3,zero,400167c <___vfprintf_internal_r+0x120c>
 4000b18:	d8c02917 	ldw	r3,164(sp)
 4000b1c:	0039883a 	mov	fp,zero
 4000b20:	1805c326 	beq	r3,zero,4002230 <___vfprintf_internal_r+0x1dc0>
 4000b24:	0027883a 	mov	r19,zero
 4000b28:	002d883a 	mov	r22,zero
 4000b2c:	dc001e04 	addi	r16,sp,120
 4000b30:	9806d0fa 	srli	r3,r19,3
 4000b34:	b008977a 	slli	r4,r22,29
 4000b38:	b02cd0fa 	srli	r22,r22,3
 4000b3c:	9cc001cc 	andi	r19,r19,7
 4000b40:	98800c04 	addi	r2,r19,48
 4000b44:	843fffc4 	addi	r16,r16,-1
 4000b48:	20e6b03a 	or	r19,r4,r3
 4000b4c:	80800005 	stb	r2,0(r16)
 4000b50:	9d86b03a 	or	r3,r19,r22
 4000b54:	183ff61e 	bne	r3,zero,4000b30 <__ram_exceptions_end+0xfbfe08ec>
 4000b58:	90c0004c 	andi	r3,r18,1
 4000b5c:	18013b26 	beq	r3,zero,400104c <___vfprintf_internal_r+0xbdc>
 4000b60:	10803fcc 	andi	r2,r2,255
 4000b64:	1080201c 	xori	r2,r2,128
 4000b68:	10bfe004 	addi	r2,r2,-128
 4000b6c:	00c00c04 	movi	r3,48
 4000b70:	10c13626 	beq	r2,r3,400104c <___vfprintf_internal_r+0xbdc>
 4000b74:	80ffffc5 	stb	r3,-1(r16)
 4000b78:	d8c02817 	ldw	r3,160(sp)
 4000b7c:	80bfffc4 	addi	r2,r16,-1
 4000b80:	1021883a 	mov	r16,r2
 4000b84:	1887c83a 	sub	r3,r3,r2
 4000b88:	d8c02e15 	stw	r3,184(sp)
 4000b8c:	d8802e17 	ldw	r2,184(sp)
 4000b90:	d9002917 	ldw	r4,164(sp)
 4000b94:	1100010e 	bge	r2,r4,4000b9c <___vfprintf_internal_r+0x72c>
 4000b98:	2005883a 	mov	r2,r4
 4000b9c:	d8802a15 	stw	r2,168(sp)
 4000ba0:	d8003215 	stw	zero,200(sp)
 4000ba4:	e7003fcc 	andi	fp,fp,255
 4000ba8:	e700201c 	xori	fp,fp,128
 4000bac:	e73fe004 	addi	fp,fp,-128
 4000bb0:	e0000326 	beq	fp,zero,4000bc0 <___vfprintf_internal_r+0x750>
 4000bb4:	d8c02a17 	ldw	r3,168(sp)
 4000bb8:	18c00044 	addi	r3,r3,1
 4000bbc:	d8c02a15 	stw	r3,168(sp)
 4000bc0:	90c0008c 	andi	r3,r18,2
 4000bc4:	d8c02b15 	stw	r3,172(sp)
 4000bc8:	18000326 	beq	r3,zero,4000bd8 <___vfprintf_internal_r+0x768>
 4000bcc:	d8c02a17 	ldw	r3,168(sp)
 4000bd0:	18c00084 	addi	r3,r3,2
 4000bd4:	d8c02a15 	stw	r3,168(sp)
 4000bd8:	90c0210c 	andi	r3,r18,132
 4000bdc:	d8c03015 	stw	r3,192(sp)
 4000be0:	1801a31e 	bne	r3,zero,4001270 <___vfprintf_internal_r+0xe00>
 4000be4:	d9003117 	ldw	r4,196(sp)
 4000be8:	d8c02a17 	ldw	r3,168(sp)
 4000bec:	20e7c83a 	sub	r19,r4,r3
 4000bf0:	04c19f0e 	bge	zero,r19,4001270 <___vfprintf_internal_r+0xe00>
 4000bf4:	02400404 	movi	r9,16
 4000bf8:	d8c02017 	ldw	r3,128(sp)
 4000bfc:	d8801f17 	ldw	r2,124(sp)
 4000c00:	4cc50d0e 	bge	r9,r19,4002038 <___vfprintf_internal_r+0x1bc8>
 4000c04:	01410074 	movhi	r5,1025
 4000c08:	297f6984 	addi	r5,r5,-602
 4000c0c:	dc403b15 	stw	r17,236(sp)
 4000c10:	d9403515 	stw	r5,212(sp)
 4000c14:	9823883a 	mov	r17,r19
 4000c18:	482d883a 	mov	r22,r9
 4000c1c:	9027883a 	mov	r19,r18
 4000c20:	070001c4 	movi	fp,7
 4000c24:	8025883a 	mov	r18,r16
 4000c28:	dc002c17 	ldw	r16,176(sp)
 4000c2c:	00000306 	br	4000c3c <___vfprintf_internal_r+0x7cc>
 4000c30:	8c7ffc04 	addi	r17,r17,-16
 4000c34:	42000204 	addi	r8,r8,8
 4000c38:	b440130e 	bge	r22,r17,4000c88 <___vfprintf_internal_r+0x818>
 4000c3c:	01010074 	movhi	r4,1025
 4000c40:	18c00404 	addi	r3,r3,16
 4000c44:	10800044 	addi	r2,r2,1
 4000c48:	213f6984 	addi	r4,r4,-602
 4000c4c:	41000015 	stw	r4,0(r8)
 4000c50:	45800115 	stw	r22,4(r8)
 4000c54:	d8c02015 	stw	r3,128(sp)
 4000c58:	d8801f15 	stw	r2,124(sp)
 4000c5c:	e0bff40e 	bge	fp,r2,4000c30 <__ram_exceptions_end+0xfbfe09ec>
 4000c60:	d9801e04 	addi	r6,sp,120
 4000c64:	b80b883a 	mov	r5,r23
 4000c68:	8009883a 	mov	r4,r16
 4000c6c:	4006f880 	call	4006f88 <__sprint_r>
 4000c70:	103f011e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4000c74:	8c7ffc04 	addi	r17,r17,-16
 4000c78:	d8c02017 	ldw	r3,128(sp)
 4000c7c:	d8801f17 	ldw	r2,124(sp)
 4000c80:	da000404 	addi	r8,sp,16
 4000c84:	b47fed16 	blt	r22,r17,4000c3c <__ram_exceptions_end+0xfbfe09f8>
 4000c88:	9021883a 	mov	r16,r18
 4000c8c:	9825883a 	mov	r18,r19
 4000c90:	8827883a 	mov	r19,r17
 4000c94:	dc403b17 	ldw	r17,236(sp)
 4000c98:	d9403517 	ldw	r5,212(sp)
 4000c9c:	98c7883a 	add	r3,r19,r3
 4000ca0:	10800044 	addi	r2,r2,1
 4000ca4:	41400015 	stw	r5,0(r8)
 4000ca8:	44c00115 	stw	r19,4(r8)
 4000cac:	d8c02015 	stw	r3,128(sp)
 4000cb0:	d8801f15 	stw	r2,124(sp)
 4000cb4:	010001c4 	movi	r4,7
 4000cb8:	2082a316 	blt	r4,r2,4001748 <___vfprintf_internal_r+0x12d8>
 4000cbc:	df002787 	ldb	fp,158(sp)
 4000cc0:	42000204 	addi	r8,r8,8
 4000cc4:	e0000c26 	beq	fp,zero,4000cf8 <___vfprintf_internal_r+0x888>
 4000cc8:	d8801f17 	ldw	r2,124(sp)
 4000ccc:	d9002784 	addi	r4,sp,158
 4000cd0:	18c00044 	addi	r3,r3,1
 4000cd4:	10800044 	addi	r2,r2,1
 4000cd8:	41000015 	stw	r4,0(r8)
 4000cdc:	01000044 	movi	r4,1
 4000ce0:	41000115 	stw	r4,4(r8)
 4000ce4:	d8c02015 	stw	r3,128(sp)
 4000ce8:	d8801f15 	stw	r2,124(sp)
 4000cec:	010001c4 	movi	r4,7
 4000cf0:	20823c16 	blt	r4,r2,40015e4 <___vfprintf_internal_r+0x1174>
 4000cf4:	42000204 	addi	r8,r8,8
 4000cf8:	d8802b17 	ldw	r2,172(sp)
 4000cfc:	10000c26 	beq	r2,zero,4000d30 <___vfprintf_internal_r+0x8c0>
 4000d00:	d8801f17 	ldw	r2,124(sp)
 4000d04:	d9002704 	addi	r4,sp,156
 4000d08:	18c00084 	addi	r3,r3,2
 4000d0c:	10800044 	addi	r2,r2,1
 4000d10:	41000015 	stw	r4,0(r8)
 4000d14:	01000084 	movi	r4,2
 4000d18:	41000115 	stw	r4,4(r8)
 4000d1c:	d8c02015 	stw	r3,128(sp)
 4000d20:	d8801f15 	stw	r2,124(sp)
 4000d24:	010001c4 	movi	r4,7
 4000d28:	20823616 	blt	r4,r2,4001604 <___vfprintf_internal_r+0x1194>
 4000d2c:	42000204 	addi	r8,r8,8
 4000d30:	d9003017 	ldw	r4,192(sp)
 4000d34:	00802004 	movi	r2,128
 4000d38:	20819926 	beq	r4,r2,40013a0 <___vfprintf_internal_r+0xf30>
 4000d3c:	d9402917 	ldw	r5,164(sp)
 4000d40:	d8802e17 	ldw	r2,184(sp)
 4000d44:	28adc83a 	sub	r22,r5,r2
 4000d48:	0580310e 	bge	zero,r22,4000e10 <___vfprintf_internal_r+0x9a0>
 4000d4c:	07000404 	movi	fp,16
 4000d50:	d8801f17 	ldw	r2,124(sp)
 4000d54:	e584140e 	bge	fp,r22,4001da8 <___vfprintf_internal_r+0x1938>
 4000d58:	01410074 	movhi	r5,1025
 4000d5c:	297f6584 	addi	r5,r5,-618
 4000d60:	dc402915 	stw	r17,164(sp)
 4000d64:	d9402b15 	stw	r5,172(sp)
 4000d68:	b023883a 	mov	r17,r22
 4000d6c:	04c001c4 	movi	r19,7
 4000d70:	a82d883a 	mov	r22,r21
 4000d74:	902b883a 	mov	r21,r18
 4000d78:	8025883a 	mov	r18,r16
 4000d7c:	dc002c17 	ldw	r16,176(sp)
 4000d80:	00000306 	br	4000d90 <___vfprintf_internal_r+0x920>
 4000d84:	8c7ffc04 	addi	r17,r17,-16
 4000d88:	42000204 	addi	r8,r8,8
 4000d8c:	e440110e 	bge	fp,r17,4000dd4 <___vfprintf_internal_r+0x964>
 4000d90:	18c00404 	addi	r3,r3,16
 4000d94:	10800044 	addi	r2,r2,1
 4000d98:	45000015 	stw	r20,0(r8)
 4000d9c:	47000115 	stw	fp,4(r8)
 4000da0:	d8c02015 	stw	r3,128(sp)
 4000da4:	d8801f15 	stw	r2,124(sp)
 4000da8:	98bff60e 	bge	r19,r2,4000d84 <__ram_exceptions_end+0xfbfe0b40>
 4000dac:	d9801e04 	addi	r6,sp,120
 4000db0:	b80b883a 	mov	r5,r23
 4000db4:	8009883a 	mov	r4,r16
 4000db8:	4006f880 	call	4006f88 <__sprint_r>
 4000dbc:	103eae1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4000dc0:	8c7ffc04 	addi	r17,r17,-16
 4000dc4:	d8c02017 	ldw	r3,128(sp)
 4000dc8:	d8801f17 	ldw	r2,124(sp)
 4000dcc:	da000404 	addi	r8,sp,16
 4000dd0:	e47fef16 	blt	fp,r17,4000d90 <__ram_exceptions_end+0xfbfe0b4c>
 4000dd4:	9021883a 	mov	r16,r18
 4000dd8:	a825883a 	mov	r18,r21
 4000ddc:	b02b883a 	mov	r21,r22
 4000de0:	882d883a 	mov	r22,r17
 4000de4:	dc402917 	ldw	r17,164(sp)
 4000de8:	d9002b17 	ldw	r4,172(sp)
 4000dec:	1d87883a 	add	r3,r3,r22
 4000df0:	10800044 	addi	r2,r2,1
 4000df4:	41000015 	stw	r4,0(r8)
 4000df8:	45800115 	stw	r22,4(r8)
 4000dfc:	d8c02015 	stw	r3,128(sp)
 4000e00:	d8801f15 	stw	r2,124(sp)
 4000e04:	010001c4 	movi	r4,7
 4000e08:	2081ee16 	blt	r4,r2,40015c4 <___vfprintf_internal_r+0x1154>
 4000e0c:	42000204 	addi	r8,r8,8
 4000e10:	9080400c 	andi	r2,r18,256
 4000e14:	1001181e 	bne	r2,zero,4001278 <___vfprintf_internal_r+0xe08>
 4000e18:	d9402e17 	ldw	r5,184(sp)
 4000e1c:	d8801f17 	ldw	r2,124(sp)
 4000e20:	44000015 	stw	r16,0(r8)
 4000e24:	1947883a 	add	r3,r3,r5
 4000e28:	10800044 	addi	r2,r2,1
 4000e2c:	41400115 	stw	r5,4(r8)
 4000e30:	d8c02015 	stw	r3,128(sp)
 4000e34:	d8801f15 	stw	r2,124(sp)
 4000e38:	010001c4 	movi	r4,7
 4000e3c:	2081d316 	blt	r4,r2,400158c <___vfprintf_internal_r+0x111c>
 4000e40:	42000204 	addi	r8,r8,8
 4000e44:	9480010c 	andi	r18,r18,4
 4000e48:	90003226 	beq	r18,zero,4000f14 <___vfprintf_internal_r+0xaa4>
 4000e4c:	d9403117 	ldw	r5,196(sp)
 4000e50:	d8802a17 	ldw	r2,168(sp)
 4000e54:	28a1c83a 	sub	r16,r5,r2
 4000e58:	04002e0e 	bge	zero,r16,4000f14 <___vfprintf_internal_r+0xaa4>
 4000e5c:	04400404 	movi	r17,16
 4000e60:	d8801f17 	ldw	r2,124(sp)
 4000e64:	8c04a20e 	bge	r17,r16,40020f0 <___vfprintf_internal_r+0x1c80>
 4000e68:	01410074 	movhi	r5,1025
 4000e6c:	297f6984 	addi	r5,r5,-602
 4000e70:	d9403515 	stw	r5,212(sp)
 4000e74:	048001c4 	movi	r18,7
 4000e78:	dcc02c17 	ldw	r19,176(sp)
 4000e7c:	00000306 	br	4000e8c <___vfprintf_internal_r+0xa1c>
 4000e80:	843ffc04 	addi	r16,r16,-16
 4000e84:	42000204 	addi	r8,r8,8
 4000e88:	8c00130e 	bge	r17,r16,4000ed8 <___vfprintf_internal_r+0xa68>
 4000e8c:	01010074 	movhi	r4,1025
 4000e90:	18c00404 	addi	r3,r3,16
 4000e94:	10800044 	addi	r2,r2,1
 4000e98:	213f6984 	addi	r4,r4,-602
 4000e9c:	41000015 	stw	r4,0(r8)
 4000ea0:	44400115 	stw	r17,4(r8)
 4000ea4:	d8c02015 	stw	r3,128(sp)
 4000ea8:	d8801f15 	stw	r2,124(sp)
 4000eac:	90bff40e 	bge	r18,r2,4000e80 <__ram_exceptions_end+0xfbfe0c3c>
 4000eb0:	d9801e04 	addi	r6,sp,120
 4000eb4:	b80b883a 	mov	r5,r23
 4000eb8:	9809883a 	mov	r4,r19
 4000ebc:	4006f880 	call	4006f88 <__sprint_r>
 4000ec0:	103e6d1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4000ec4:	843ffc04 	addi	r16,r16,-16
 4000ec8:	d8c02017 	ldw	r3,128(sp)
 4000ecc:	d8801f17 	ldw	r2,124(sp)
 4000ed0:	da000404 	addi	r8,sp,16
 4000ed4:	8c3fed16 	blt	r17,r16,4000e8c <__ram_exceptions_end+0xfbfe0c48>
 4000ed8:	d9403517 	ldw	r5,212(sp)
 4000edc:	1c07883a 	add	r3,r3,r16
 4000ee0:	10800044 	addi	r2,r2,1
 4000ee4:	41400015 	stw	r5,0(r8)
 4000ee8:	44000115 	stw	r16,4(r8)
 4000eec:	d8c02015 	stw	r3,128(sp)
 4000ef0:	d8801f15 	stw	r2,124(sp)
 4000ef4:	010001c4 	movi	r4,7
 4000ef8:	2080060e 	bge	r4,r2,4000f14 <___vfprintf_internal_r+0xaa4>
 4000efc:	d9002c17 	ldw	r4,176(sp)
 4000f00:	d9801e04 	addi	r6,sp,120
 4000f04:	b80b883a 	mov	r5,r23
 4000f08:	4006f880 	call	4006f88 <__sprint_r>
 4000f0c:	103e5a1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4000f10:	d8c02017 	ldw	r3,128(sp)
 4000f14:	d8803117 	ldw	r2,196(sp)
 4000f18:	d9002a17 	ldw	r4,168(sp)
 4000f1c:	1100010e 	bge	r2,r4,4000f24 <___vfprintf_internal_r+0xab4>
 4000f20:	2005883a 	mov	r2,r4
 4000f24:	d9402f17 	ldw	r5,188(sp)
 4000f28:	288b883a 	add	r5,r5,r2
 4000f2c:	d9402f15 	stw	r5,188(sp)
 4000f30:	18019e1e 	bne	r3,zero,40015ac <___vfprintf_internal_r+0x113c>
 4000f34:	a8800007 	ldb	r2,0(r21)
 4000f38:	d8001f15 	stw	zero,124(sp)
 4000f3c:	da000404 	addi	r8,sp,16
 4000f40:	103d851e 	bne	r2,zero,4000558 <__ram_exceptions_end+0xfbfe0314>
 4000f44:	a821883a 	mov	r16,r21
 4000f48:	003d9b06 	br	40005b8 <__ram_exceptions_end+0xfbfe0374>
 4000f4c:	18c03fcc 	andi	r3,r3,255
 4000f50:	1805c11e 	bne	r3,zero,4002658 <___vfprintf_internal_r+0x21e8>
 4000f54:	94800414 	ori	r18,r18,16
 4000f58:	9080080c 	andi	r2,r18,32
 4000f5c:	10020c26 	beq	r2,zero,4001790 <___vfprintf_internal_r+0x1320>
 4000f60:	d8802d17 	ldw	r2,180(sp)
 4000f64:	d9002917 	ldw	r4,164(sp)
 4000f68:	d8002785 	stb	zero,158(sp)
 4000f6c:	10c00204 	addi	r3,r2,8
 4000f70:	14c00017 	ldw	r19,0(r2)
 4000f74:	15800117 	ldw	r22,4(r2)
 4000f78:	20040f16 	blt	r4,zero,4001fb8 <___vfprintf_internal_r+0x1b48>
 4000f7c:	013fdfc4 	movi	r4,-129
 4000f80:	9d84b03a 	or	r2,r19,r22
 4000f84:	d8c02d15 	stw	r3,180(sp)
 4000f88:	9124703a 	and	r18,r18,r4
 4000f8c:	0039883a 	mov	fp,zero
 4000f90:	103e891e 	bne	r2,zero,40009b8 <__ram_exceptions_end+0xfbfe0774>
 4000f94:	d9002917 	ldw	r4,164(sp)
 4000f98:	2002c11e 	bne	r4,zero,4001aa0 <___vfprintf_internal_r+0x1630>
 4000f9c:	d8002915 	stw	zero,164(sp)
 4000fa0:	d8002e15 	stw	zero,184(sp)
 4000fa4:	dc001e04 	addi	r16,sp,120
 4000fa8:	003ef806 	br	4000b8c <__ram_exceptions_end+0xfbfe0948>
 4000fac:	18c03fcc 	andi	r3,r3,255
 4000fb0:	18059d1e 	bne	r3,zero,4002628 <___vfprintf_internal_r+0x21b8>
 4000fb4:	01410074 	movhi	r5,1025
 4000fb8:	297f5904 	addi	r5,r5,-668
 4000fbc:	d9403915 	stw	r5,228(sp)
 4000fc0:	9080080c 	andi	r2,r18,32
 4000fc4:	10005226 	beq	r2,zero,4001110 <___vfprintf_internal_r+0xca0>
 4000fc8:	d8802d17 	ldw	r2,180(sp)
 4000fcc:	14c00017 	ldw	r19,0(r2)
 4000fd0:	15800117 	ldw	r22,4(r2)
 4000fd4:	10800204 	addi	r2,r2,8
 4000fd8:	d8802d15 	stw	r2,180(sp)
 4000fdc:	9080004c 	andi	r2,r18,1
 4000fe0:	10019026 	beq	r2,zero,4001624 <___vfprintf_internal_r+0x11b4>
 4000fe4:	9d84b03a 	or	r2,r19,r22
 4000fe8:	10036926 	beq	r2,zero,4001d90 <___vfprintf_internal_r+0x1920>
 4000fec:	d8c02917 	ldw	r3,164(sp)
 4000ff0:	00800c04 	movi	r2,48
 4000ff4:	d8802705 	stb	r2,156(sp)
 4000ff8:	dc402745 	stb	r17,157(sp)
 4000ffc:	d8002785 	stb	zero,158(sp)
 4001000:	90800094 	ori	r2,r18,2
 4001004:	18045d16 	blt	r3,zero,400217c <___vfprintf_internal_r+0x1d0c>
 4001008:	00bfdfc4 	movi	r2,-129
 400100c:	90a4703a 	and	r18,r18,r2
 4001010:	94800094 	ori	r18,r18,2
 4001014:	0039883a 	mov	fp,zero
 4001018:	d9003917 	ldw	r4,228(sp)
 400101c:	dc001e04 	addi	r16,sp,120
 4001020:	988003cc 	andi	r2,r19,15
 4001024:	b006973a 	slli	r3,r22,28
 4001028:	2085883a 	add	r2,r4,r2
 400102c:	9826d13a 	srli	r19,r19,4
 4001030:	10800003 	ldbu	r2,0(r2)
 4001034:	b02cd13a 	srli	r22,r22,4
 4001038:	843fffc4 	addi	r16,r16,-1
 400103c:	1ce6b03a 	or	r19,r3,r19
 4001040:	80800005 	stb	r2,0(r16)
 4001044:	9d84b03a 	or	r2,r19,r22
 4001048:	103ff51e 	bne	r2,zero,4001020 <__ram_exceptions_end+0xfbfe0ddc>
 400104c:	d8c02817 	ldw	r3,160(sp)
 4001050:	1c07c83a 	sub	r3,r3,r16
 4001054:	d8c02e15 	stw	r3,184(sp)
 4001058:	003ecc06 	br	4000b8c <__ram_exceptions_end+0xfbfe0948>
 400105c:	18c03fcc 	andi	r3,r3,255
 4001060:	183e9f26 	beq	r3,zero,4000ae0 <__ram_exceptions_end+0xfbfe089c>
 4001064:	d9c02785 	stb	r7,158(sp)
 4001068:	003e9d06 	br	4000ae0 <__ram_exceptions_end+0xfbfe089c>
 400106c:	00c00044 	movi	r3,1
 4001070:	01c00ac4 	movi	r7,43
 4001074:	ac400007 	ldb	r17,0(r21)
 4001078:	003d5e06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 400107c:	94800814 	ori	r18,r18,32
 4001080:	ac400007 	ldb	r17,0(r21)
 4001084:	003d5b06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001088:	d8c02d17 	ldw	r3,180(sp)
 400108c:	d8002785 	stb	zero,158(sp)
 4001090:	1c000017 	ldw	r16,0(r3)
 4001094:	1cc00104 	addi	r19,r3,4
 4001098:	80041926 	beq	r16,zero,4002100 <___vfprintf_internal_r+0x1c90>
 400109c:	d9002917 	ldw	r4,164(sp)
 40010a0:	2003d016 	blt	r4,zero,4001fe4 <___vfprintf_internal_r+0x1b74>
 40010a4:	200d883a 	mov	r6,r4
 40010a8:	000b883a 	mov	r5,zero
 40010ac:	8009883a 	mov	r4,r16
 40010b0:	da003d15 	stw	r8,244(sp)
 40010b4:	40057c40 	call	40057c4 <memchr>
 40010b8:	da003d17 	ldw	r8,244(sp)
 40010bc:	10045426 	beq	r2,zero,4002210 <___vfprintf_internal_r+0x1da0>
 40010c0:	1405c83a 	sub	r2,r2,r16
 40010c4:	d8802e15 	stw	r2,184(sp)
 40010c8:	1003cc16 	blt	r2,zero,4001ffc <___vfprintf_internal_r+0x1b8c>
 40010cc:	df002783 	ldbu	fp,158(sp)
 40010d0:	d8802a15 	stw	r2,168(sp)
 40010d4:	dcc02d15 	stw	r19,180(sp)
 40010d8:	d8002915 	stw	zero,164(sp)
 40010dc:	d8003215 	stw	zero,200(sp)
 40010e0:	003eb006 	br	4000ba4 <__ram_exceptions_end+0xfbfe0960>
 40010e4:	18c03fcc 	andi	r3,r3,255
 40010e8:	183f9b26 	beq	r3,zero,4000f58 <__ram_exceptions_end+0xfbfe0d14>
 40010ec:	d9c02785 	stb	r7,158(sp)
 40010f0:	003f9906 	br	4000f58 <__ram_exceptions_end+0xfbfe0d14>
 40010f4:	18c03fcc 	andi	r3,r3,255
 40010f8:	1805551e 	bne	r3,zero,4002650 <___vfprintf_internal_r+0x21e0>
 40010fc:	01410074 	movhi	r5,1025
 4001100:	297f5e04 	addi	r5,r5,-648
 4001104:	d9403915 	stw	r5,228(sp)
 4001108:	9080080c 	andi	r2,r18,32
 400110c:	103fae1e 	bne	r2,zero,4000fc8 <__ram_exceptions_end+0xfbfe0d84>
 4001110:	9080040c 	andi	r2,r18,16
 4001114:	1002de26 	beq	r2,zero,4001c90 <___vfprintf_internal_r+0x1820>
 4001118:	d8c02d17 	ldw	r3,180(sp)
 400111c:	002d883a 	mov	r22,zero
 4001120:	1cc00017 	ldw	r19,0(r3)
 4001124:	18c00104 	addi	r3,r3,4
 4001128:	d8c02d15 	stw	r3,180(sp)
 400112c:	003fab06 	br	4000fdc <__ram_exceptions_end+0xfbfe0d98>
 4001130:	38803fcc 	andi	r2,r7,255
 4001134:	1080201c 	xori	r2,r2,128
 4001138:	10bfe004 	addi	r2,r2,-128
 400113c:	1002d21e 	bne	r2,zero,4001c88 <___vfprintf_internal_r+0x1818>
 4001140:	00c00044 	movi	r3,1
 4001144:	01c00804 	movi	r7,32
 4001148:	ac400007 	ldb	r17,0(r21)
 400114c:	003d2906 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001150:	94800054 	ori	r18,r18,1
 4001154:	ac400007 	ldb	r17,0(r21)
 4001158:	003d2606 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 400115c:	18c03fcc 	andi	r3,r3,255
 4001160:	183e0526 	beq	r3,zero,4000978 <__ram_exceptions_end+0xfbfe0734>
 4001164:	d9c02785 	stb	r7,158(sp)
 4001168:	003e0306 	br	4000978 <__ram_exceptions_end+0xfbfe0734>
 400116c:	94801014 	ori	r18,r18,64
 4001170:	ac400007 	ldb	r17,0(r21)
 4001174:	003d1f06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001178:	ac400007 	ldb	r17,0(r21)
 400117c:	8a438726 	beq	r17,r9,4001f9c <___vfprintf_internal_r+0x1b2c>
 4001180:	94800414 	ori	r18,r18,16
 4001184:	003d1b06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001188:	18c03fcc 	andi	r3,r3,255
 400118c:	1805341e 	bne	r3,zero,4002660 <___vfprintf_internal_r+0x21f0>
 4001190:	9080080c 	andi	r2,r18,32
 4001194:	1002cd26 	beq	r2,zero,4001ccc <___vfprintf_internal_r+0x185c>
 4001198:	d9402d17 	ldw	r5,180(sp)
 400119c:	d9002f17 	ldw	r4,188(sp)
 40011a0:	28800017 	ldw	r2,0(r5)
 40011a4:	2007d7fa 	srai	r3,r4,31
 40011a8:	29400104 	addi	r5,r5,4
 40011ac:	d9402d15 	stw	r5,180(sp)
 40011b0:	11000015 	stw	r4,0(r2)
 40011b4:	10c00115 	stw	r3,4(r2)
 40011b8:	003ce506 	br	4000550 <__ram_exceptions_end+0xfbfe030c>
 40011bc:	d8c02d17 	ldw	r3,180(sp)
 40011c0:	d9002d17 	ldw	r4,180(sp)
 40011c4:	d8002785 	stb	zero,158(sp)
 40011c8:	18800017 	ldw	r2,0(r3)
 40011cc:	21000104 	addi	r4,r4,4
 40011d0:	00c00044 	movi	r3,1
 40011d4:	d8c02a15 	stw	r3,168(sp)
 40011d8:	d8801405 	stb	r2,80(sp)
 40011dc:	d9002d15 	stw	r4,180(sp)
 40011e0:	d8c02e15 	stw	r3,184(sp)
 40011e4:	d8002915 	stw	zero,164(sp)
 40011e8:	d8003215 	stw	zero,200(sp)
 40011ec:	dc001404 	addi	r16,sp,80
 40011f0:	0039883a 	mov	fp,zero
 40011f4:	003e7206 	br	4000bc0 <__ram_exceptions_end+0xfbfe097c>
 40011f8:	01010074 	movhi	r4,1025
 40011fc:	213f5e04 	addi	r4,r4,-648
 4001200:	0039883a 	mov	fp,zero
 4001204:	d9003915 	stw	r4,228(sp)
 4001208:	04401e04 	movi	r17,120
 400120c:	003f8206 	br	4001018 <__ram_exceptions_end+0xfbfe0dd4>
 4001210:	18c03fcc 	andi	r3,r3,255
 4001214:	1805061e 	bne	r3,zero,4002630 <___vfprintf_internal_r+0x21c0>
 4001218:	883d9126 	beq	r17,zero,4000860 <__ram_exceptions_end+0xfbfe061c>
 400121c:	00c00044 	movi	r3,1
 4001220:	d8c02a15 	stw	r3,168(sp)
 4001224:	dc401405 	stb	r17,80(sp)
 4001228:	d8002785 	stb	zero,158(sp)
 400122c:	003fec06 	br	40011e0 <__ram_exceptions_end+0xfbfe0f9c>
 4001230:	01410074 	movhi	r5,1025
 4001234:	297f5e04 	addi	r5,r5,-648
 4001238:	d9403915 	stw	r5,228(sp)
 400123c:	d8c02d15 	stw	r3,180(sp)
 4001240:	1025883a 	mov	r18,r2
 4001244:	04401e04 	movi	r17,120
 4001248:	9d84b03a 	or	r2,r19,r22
 400124c:	1000fc1e 	bne	r2,zero,4001640 <___vfprintf_internal_r+0x11d0>
 4001250:	0039883a 	mov	fp,zero
 4001254:	00800084 	movi	r2,2
 4001258:	10803fcc 	andi	r2,r2,255
 400125c:	00c00044 	movi	r3,1
 4001260:	10c20f26 	beq	r2,r3,4001aa0 <___vfprintf_internal_r+0x1630>
 4001264:	00c00084 	movi	r3,2
 4001268:	10fd6326 	beq	r2,r3,40007f8 <__ram_exceptions_end+0xfbfe05b4>
 400126c:	003e2d06 	br	4000b24 <__ram_exceptions_end+0xfbfe08e0>
 4001270:	d8c02017 	ldw	r3,128(sp)
 4001274:	003e9306 	br	4000cc4 <__ram_exceptions_end+0xfbfe0a80>
 4001278:	00801944 	movi	r2,101
 400127c:	14407e0e 	bge	r2,r17,4001478 <___vfprintf_internal_r+0x1008>
 4001280:	d9003617 	ldw	r4,216(sp)
 4001284:	d9403817 	ldw	r5,224(sp)
 4001288:	000d883a 	mov	r6,zero
 400128c:	000f883a 	mov	r7,zero
 4001290:	d8c03c15 	stw	r3,240(sp)
 4001294:	da003d15 	stw	r8,244(sp)
 4001298:	400b77c0 	call	400b77c <__eqdf2>
 400129c:	d8c03c17 	ldw	r3,240(sp)
 40012a0:	da003d17 	ldw	r8,244(sp)
 40012a4:	1000f71e 	bne	r2,zero,4001684 <___vfprintf_internal_r+0x1214>
 40012a8:	d8801f17 	ldw	r2,124(sp)
 40012ac:	01010074 	movhi	r4,1025
 40012b0:	213f6504 	addi	r4,r4,-620
 40012b4:	18c00044 	addi	r3,r3,1
 40012b8:	10800044 	addi	r2,r2,1
 40012bc:	41000015 	stw	r4,0(r8)
 40012c0:	01000044 	movi	r4,1
 40012c4:	41000115 	stw	r4,4(r8)
 40012c8:	d8c02015 	stw	r3,128(sp)
 40012cc:	d8801f15 	stw	r2,124(sp)
 40012d0:	010001c4 	movi	r4,7
 40012d4:	2082b816 	blt	r4,r2,4001db8 <___vfprintf_internal_r+0x1948>
 40012d8:	42000204 	addi	r8,r8,8
 40012dc:	d8802617 	ldw	r2,152(sp)
 40012e0:	d9403317 	ldw	r5,204(sp)
 40012e4:	11400216 	blt	r2,r5,40012f0 <___vfprintf_internal_r+0xe80>
 40012e8:	9080004c 	andi	r2,r18,1
 40012ec:	103ed526 	beq	r2,zero,4000e44 <__ram_exceptions_end+0xfbfe0c00>
 40012f0:	d8803717 	ldw	r2,220(sp)
 40012f4:	d9003417 	ldw	r4,208(sp)
 40012f8:	d9403717 	ldw	r5,220(sp)
 40012fc:	1887883a 	add	r3,r3,r2
 4001300:	d8801f17 	ldw	r2,124(sp)
 4001304:	41000015 	stw	r4,0(r8)
 4001308:	41400115 	stw	r5,4(r8)
 400130c:	10800044 	addi	r2,r2,1
 4001310:	d8c02015 	stw	r3,128(sp)
 4001314:	d8801f15 	stw	r2,124(sp)
 4001318:	010001c4 	movi	r4,7
 400131c:	20832916 	blt	r4,r2,4001fc4 <___vfprintf_internal_r+0x1b54>
 4001320:	42000204 	addi	r8,r8,8
 4001324:	d8803317 	ldw	r2,204(sp)
 4001328:	143fffc4 	addi	r16,r2,-1
 400132c:	043ec50e 	bge	zero,r16,4000e44 <__ram_exceptions_end+0xfbfe0c00>
 4001330:	04400404 	movi	r17,16
 4001334:	d8801f17 	ldw	r2,124(sp)
 4001338:	8c00880e 	bge	r17,r16,400155c <___vfprintf_internal_r+0x10ec>
 400133c:	01410074 	movhi	r5,1025
 4001340:	297f6584 	addi	r5,r5,-618
 4001344:	d9402b15 	stw	r5,172(sp)
 4001348:	058001c4 	movi	r22,7
 400134c:	dcc02c17 	ldw	r19,176(sp)
 4001350:	00000306 	br	4001360 <___vfprintf_internal_r+0xef0>
 4001354:	42000204 	addi	r8,r8,8
 4001358:	843ffc04 	addi	r16,r16,-16
 400135c:	8c00820e 	bge	r17,r16,4001568 <___vfprintf_internal_r+0x10f8>
 4001360:	18c00404 	addi	r3,r3,16
 4001364:	10800044 	addi	r2,r2,1
 4001368:	45000015 	stw	r20,0(r8)
 400136c:	44400115 	stw	r17,4(r8)
 4001370:	d8c02015 	stw	r3,128(sp)
 4001374:	d8801f15 	stw	r2,124(sp)
 4001378:	b0bff60e 	bge	r22,r2,4001354 <__ram_exceptions_end+0xfbfe1110>
 400137c:	d9801e04 	addi	r6,sp,120
 4001380:	b80b883a 	mov	r5,r23
 4001384:	9809883a 	mov	r4,r19
 4001388:	4006f880 	call	4006f88 <__sprint_r>
 400138c:	103d3a1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001390:	d8c02017 	ldw	r3,128(sp)
 4001394:	d8801f17 	ldw	r2,124(sp)
 4001398:	da000404 	addi	r8,sp,16
 400139c:	003fee06 	br	4001358 <__ram_exceptions_end+0xfbfe1114>
 40013a0:	d9403117 	ldw	r5,196(sp)
 40013a4:	d8802a17 	ldw	r2,168(sp)
 40013a8:	28adc83a 	sub	r22,r5,r2
 40013ac:	05be630e 	bge	zero,r22,4000d3c <__ram_exceptions_end+0xfbfe0af8>
 40013b0:	07000404 	movi	fp,16
 40013b4:	d8801f17 	ldw	r2,124(sp)
 40013b8:	e5838f0e 	bge	fp,r22,40021f8 <___vfprintf_internal_r+0x1d88>
 40013bc:	01410074 	movhi	r5,1025
 40013c0:	297f6584 	addi	r5,r5,-618
 40013c4:	dc403015 	stw	r17,192(sp)
 40013c8:	d9402b15 	stw	r5,172(sp)
 40013cc:	b023883a 	mov	r17,r22
 40013d0:	04c001c4 	movi	r19,7
 40013d4:	a82d883a 	mov	r22,r21
 40013d8:	902b883a 	mov	r21,r18
 40013dc:	8025883a 	mov	r18,r16
 40013e0:	dc002c17 	ldw	r16,176(sp)
 40013e4:	00000306 	br	40013f4 <___vfprintf_internal_r+0xf84>
 40013e8:	8c7ffc04 	addi	r17,r17,-16
 40013ec:	42000204 	addi	r8,r8,8
 40013f0:	e440110e 	bge	fp,r17,4001438 <___vfprintf_internal_r+0xfc8>
 40013f4:	18c00404 	addi	r3,r3,16
 40013f8:	10800044 	addi	r2,r2,1
 40013fc:	45000015 	stw	r20,0(r8)
 4001400:	47000115 	stw	fp,4(r8)
 4001404:	d8c02015 	stw	r3,128(sp)
 4001408:	d8801f15 	stw	r2,124(sp)
 400140c:	98bff60e 	bge	r19,r2,40013e8 <__ram_exceptions_end+0xfbfe11a4>
 4001410:	d9801e04 	addi	r6,sp,120
 4001414:	b80b883a 	mov	r5,r23
 4001418:	8009883a 	mov	r4,r16
 400141c:	4006f880 	call	4006f88 <__sprint_r>
 4001420:	103d151e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001424:	8c7ffc04 	addi	r17,r17,-16
 4001428:	d8c02017 	ldw	r3,128(sp)
 400142c:	d8801f17 	ldw	r2,124(sp)
 4001430:	da000404 	addi	r8,sp,16
 4001434:	e47fef16 	blt	fp,r17,40013f4 <__ram_exceptions_end+0xfbfe11b0>
 4001438:	9021883a 	mov	r16,r18
 400143c:	a825883a 	mov	r18,r21
 4001440:	b02b883a 	mov	r21,r22
 4001444:	882d883a 	mov	r22,r17
 4001448:	dc403017 	ldw	r17,192(sp)
 400144c:	d9002b17 	ldw	r4,172(sp)
 4001450:	1d87883a 	add	r3,r3,r22
 4001454:	10800044 	addi	r2,r2,1
 4001458:	41000015 	stw	r4,0(r8)
 400145c:	45800115 	stw	r22,4(r8)
 4001460:	d8c02015 	stw	r3,128(sp)
 4001464:	d8801f15 	stw	r2,124(sp)
 4001468:	010001c4 	movi	r4,7
 400146c:	20818e16 	blt	r4,r2,4001aa8 <___vfprintf_internal_r+0x1638>
 4001470:	42000204 	addi	r8,r8,8
 4001474:	003e3106 	br	4000d3c <__ram_exceptions_end+0xfbfe0af8>
 4001478:	d9403317 	ldw	r5,204(sp)
 400147c:	00800044 	movi	r2,1
 4001480:	18c00044 	addi	r3,r3,1
 4001484:	1141530e 	bge	r2,r5,40019d4 <___vfprintf_internal_r+0x1564>
 4001488:	dc401f17 	ldw	r17,124(sp)
 400148c:	00800044 	movi	r2,1
 4001490:	40800115 	stw	r2,4(r8)
 4001494:	8c400044 	addi	r17,r17,1
 4001498:	44000015 	stw	r16,0(r8)
 400149c:	d8c02015 	stw	r3,128(sp)
 40014a0:	dc401f15 	stw	r17,124(sp)
 40014a4:	008001c4 	movi	r2,7
 40014a8:	14416b16 	blt	r2,r17,4001a58 <___vfprintf_internal_r+0x15e8>
 40014ac:	42000204 	addi	r8,r8,8
 40014b0:	d8803717 	ldw	r2,220(sp)
 40014b4:	d9003417 	ldw	r4,208(sp)
 40014b8:	8c400044 	addi	r17,r17,1
 40014bc:	10c7883a 	add	r3,r2,r3
 40014c0:	40800115 	stw	r2,4(r8)
 40014c4:	41000015 	stw	r4,0(r8)
 40014c8:	d8c02015 	stw	r3,128(sp)
 40014cc:	dc401f15 	stw	r17,124(sp)
 40014d0:	008001c4 	movi	r2,7
 40014d4:	14416916 	blt	r2,r17,4001a7c <___vfprintf_internal_r+0x160c>
 40014d8:	45800204 	addi	r22,r8,8
 40014dc:	d9003617 	ldw	r4,216(sp)
 40014e0:	d9403817 	ldw	r5,224(sp)
 40014e4:	000d883a 	mov	r6,zero
 40014e8:	000f883a 	mov	r7,zero
 40014ec:	d8c03c15 	stw	r3,240(sp)
 40014f0:	400b77c0 	call	400b77c <__eqdf2>
 40014f4:	d8c03c17 	ldw	r3,240(sp)
 40014f8:	1000bc26 	beq	r2,zero,40017ec <___vfprintf_internal_r+0x137c>
 40014fc:	d9403317 	ldw	r5,204(sp)
 4001500:	84000044 	addi	r16,r16,1
 4001504:	8c400044 	addi	r17,r17,1
 4001508:	28bfffc4 	addi	r2,r5,-1
 400150c:	1887883a 	add	r3,r3,r2
 4001510:	b0800115 	stw	r2,4(r22)
 4001514:	b4000015 	stw	r16,0(r22)
 4001518:	d8c02015 	stw	r3,128(sp)
 400151c:	dc401f15 	stw	r17,124(sp)
 4001520:	008001c4 	movi	r2,7
 4001524:	14414316 	blt	r2,r17,4001a34 <___vfprintf_internal_r+0x15c4>
 4001528:	b5800204 	addi	r22,r22,8
 400152c:	d9003a17 	ldw	r4,232(sp)
 4001530:	df0022c4 	addi	fp,sp,139
 4001534:	8c400044 	addi	r17,r17,1
 4001538:	20c7883a 	add	r3,r4,r3
 400153c:	b7000015 	stw	fp,0(r22)
 4001540:	b1000115 	stw	r4,4(r22)
 4001544:	d8c02015 	stw	r3,128(sp)
 4001548:	dc401f15 	stw	r17,124(sp)
 400154c:	008001c4 	movi	r2,7
 4001550:	14400e16 	blt	r2,r17,400158c <___vfprintf_internal_r+0x111c>
 4001554:	b2000204 	addi	r8,r22,8
 4001558:	003e3a06 	br	4000e44 <__ram_exceptions_end+0xfbfe0c00>
 400155c:	01010074 	movhi	r4,1025
 4001560:	213f6584 	addi	r4,r4,-618
 4001564:	d9002b15 	stw	r4,172(sp)
 4001568:	d9002b17 	ldw	r4,172(sp)
 400156c:	1c07883a 	add	r3,r3,r16
 4001570:	44000115 	stw	r16,4(r8)
 4001574:	41000015 	stw	r4,0(r8)
 4001578:	10800044 	addi	r2,r2,1
 400157c:	d8c02015 	stw	r3,128(sp)
 4001580:	d8801f15 	stw	r2,124(sp)
 4001584:	010001c4 	movi	r4,7
 4001588:	20be2d0e 	bge	r4,r2,4000e40 <__ram_exceptions_end+0xfbfe0bfc>
 400158c:	d9002c17 	ldw	r4,176(sp)
 4001590:	d9801e04 	addi	r6,sp,120
 4001594:	b80b883a 	mov	r5,r23
 4001598:	4006f880 	call	4006f88 <__sprint_r>
 400159c:	103cb61e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40015a0:	d8c02017 	ldw	r3,128(sp)
 40015a4:	da000404 	addi	r8,sp,16
 40015a8:	003e2606 	br	4000e44 <__ram_exceptions_end+0xfbfe0c00>
 40015ac:	d9002c17 	ldw	r4,176(sp)
 40015b0:	d9801e04 	addi	r6,sp,120
 40015b4:	b80b883a 	mov	r5,r23
 40015b8:	4006f880 	call	4006f88 <__sprint_r>
 40015bc:	103e5d26 	beq	r2,zero,4000f34 <__ram_exceptions_end+0xfbfe0cf0>
 40015c0:	003cad06 	br	4000878 <__ram_exceptions_end+0xfbfe0634>
 40015c4:	d9002c17 	ldw	r4,176(sp)
 40015c8:	d9801e04 	addi	r6,sp,120
 40015cc:	b80b883a 	mov	r5,r23
 40015d0:	4006f880 	call	4006f88 <__sprint_r>
 40015d4:	103ca81e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40015d8:	d8c02017 	ldw	r3,128(sp)
 40015dc:	da000404 	addi	r8,sp,16
 40015e0:	003e0b06 	br	4000e10 <__ram_exceptions_end+0xfbfe0bcc>
 40015e4:	d9002c17 	ldw	r4,176(sp)
 40015e8:	d9801e04 	addi	r6,sp,120
 40015ec:	b80b883a 	mov	r5,r23
 40015f0:	4006f880 	call	4006f88 <__sprint_r>
 40015f4:	103ca01e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40015f8:	d8c02017 	ldw	r3,128(sp)
 40015fc:	da000404 	addi	r8,sp,16
 4001600:	003dbd06 	br	4000cf8 <__ram_exceptions_end+0xfbfe0ab4>
 4001604:	d9002c17 	ldw	r4,176(sp)
 4001608:	d9801e04 	addi	r6,sp,120
 400160c:	b80b883a 	mov	r5,r23
 4001610:	4006f880 	call	4006f88 <__sprint_r>
 4001614:	103c981e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001618:	d8c02017 	ldw	r3,128(sp)
 400161c:	da000404 	addi	r8,sp,16
 4001620:	003dc306 	br	4000d30 <__ram_exceptions_end+0xfbfe0aec>
 4001624:	d8802917 	ldw	r2,164(sp)
 4001628:	d8002785 	stb	zero,158(sp)
 400162c:	103f0616 	blt	r2,zero,4001248 <__ram_exceptions_end+0xfbfe1004>
 4001630:	00ffdfc4 	movi	r3,-129
 4001634:	9d84b03a 	or	r2,r19,r22
 4001638:	90e4703a 	and	r18,r18,r3
 400163c:	103c6b26 	beq	r2,zero,40007ec <__ram_exceptions_end+0xfbfe05a8>
 4001640:	0039883a 	mov	fp,zero
 4001644:	003e7406 	br	4001018 <__ram_exceptions_end+0xfbfe0dd4>
 4001648:	9080040c 	andi	r2,r18,16
 400164c:	1001b326 	beq	r2,zero,4001d1c <___vfprintf_internal_r+0x18ac>
 4001650:	d9002d17 	ldw	r4,180(sp)
 4001654:	d9402917 	ldw	r5,164(sp)
 4001658:	d8002785 	stb	zero,158(sp)
 400165c:	20800104 	addi	r2,r4,4
 4001660:	24c00017 	ldw	r19,0(r4)
 4001664:	002d883a 	mov	r22,zero
 4001668:	2801b516 	blt	r5,zero,4001d40 <___vfprintf_internal_r+0x18d0>
 400166c:	00ffdfc4 	movi	r3,-129
 4001670:	d8802d15 	stw	r2,180(sp)
 4001674:	90e4703a 	and	r18,r18,r3
 4001678:	983d2726 	beq	r19,zero,4000b18 <__ram_exceptions_end+0xfbfe08d4>
 400167c:	0039883a 	mov	fp,zero
 4001680:	003d2a06 	br	4000b2c <__ram_exceptions_end+0xfbfe08e8>
 4001684:	dc402617 	ldw	r17,152(sp)
 4001688:	0441d30e 	bge	zero,r17,4001dd8 <___vfprintf_internal_r+0x1968>
 400168c:	dc403217 	ldw	r17,200(sp)
 4001690:	d8803317 	ldw	r2,204(sp)
 4001694:	1440010e 	bge	r2,r17,400169c <___vfprintf_internal_r+0x122c>
 4001698:	1023883a 	mov	r17,r2
 400169c:	04400a0e 	bge	zero,r17,40016c8 <___vfprintf_internal_r+0x1258>
 40016a0:	d8801f17 	ldw	r2,124(sp)
 40016a4:	1c47883a 	add	r3,r3,r17
 40016a8:	44000015 	stw	r16,0(r8)
 40016ac:	10800044 	addi	r2,r2,1
 40016b0:	44400115 	stw	r17,4(r8)
 40016b4:	d8c02015 	stw	r3,128(sp)
 40016b8:	d8801f15 	stw	r2,124(sp)
 40016bc:	010001c4 	movi	r4,7
 40016c0:	20826516 	blt	r4,r2,4002058 <___vfprintf_internal_r+0x1be8>
 40016c4:	42000204 	addi	r8,r8,8
 40016c8:	88026116 	blt	r17,zero,4002050 <___vfprintf_internal_r+0x1be0>
 40016cc:	d9003217 	ldw	r4,200(sp)
 40016d0:	2463c83a 	sub	r17,r4,r17
 40016d4:	04407b0e 	bge	zero,r17,40018c4 <___vfprintf_internal_r+0x1454>
 40016d8:	05800404 	movi	r22,16
 40016dc:	d8801f17 	ldw	r2,124(sp)
 40016e0:	b4419d0e 	bge	r22,r17,4001d58 <___vfprintf_internal_r+0x18e8>
 40016e4:	01010074 	movhi	r4,1025
 40016e8:	213f6584 	addi	r4,r4,-618
 40016ec:	d9002b15 	stw	r4,172(sp)
 40016f0:	070001c4 	movi	fp,7
 40016f4:	dcc02c17 	ldw	r19,176(sp)
 40016f8:	00000306 	br	4001708 <___vfprintf_internal_r+0x1298>
 40016fc:	42000204 	addi	r8,r8,8
 4001700:	8c7ffc04 	addi	r17,r17,-16
 4001704:	b441970e 	bge	r22,r17,4001d64 <___vfprintf_internal_r+0x18f4>
 4001708:	18c00404 	addi	r3,r3,16
 400170c:	10800044 	addi	r2,r2,1
 4001710:	45000015 	stw	r20,0(r8)
 4001714:	45800115 	stw	r22,4(r8)
 4001718:	d8c02015 	stw	r3,128(sp)
 400171c:	d8801f15 	stw	r2,124(sp)
 4001720:	e0bff60e 	bge	fp,r2,40016fc <__ram_exceptions_end+0xfbfe14b8>
 4001724:	d9801e04 	addi	r6,sp,120
 4001728:	b80b883a 	mov	r5,r23
 400172c:	9809883a 	mov	r4,r19
 4001730:	4006f880 	call	4006f88 <__sprint_r>
 4001734:	103c501e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001738:	d8c02017 	ldw	r3,128(sp)
 400173c:	d8801f17 	ldw	r2,124(sp)
 4001740:	da000404 	addi	r8,sp,16
 4001744:	003fee06 	br	4001700 <__ram_exceptions_end+0xfbfe14bc>
 4001748:	d9002c17 	ldw	r4,176(sp)
 400174c:	d9801e04 	addi	r6,sp,120
 4001750:	b80b883a 	mov	r5,r23
 4001754:	4006f880 	call	4006f88 <__sprint_r>
 4001758:	103c471e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 400175c:	d8c02017 	ldw	r3,128(sp)
 4001760:	df002787 	ldb	fp,158(sp)
 4001764:	da000404 	addi	r8,sp,16
 4001768:	003d5606 	br	4000cc4 <__ram_exceptions_end+0xfbfe0a80>
 400176c:	9080040c 	andi	r2,r18,16
 4001770:	10016126 	beq	r2,zero,4001cf8 <___vfprintf_internal_r+0x1888>
 4001774:	d8802d17 	ldw	r2,180(sp)
 4001778:	14c00017 	ldw	r19,0(r2)
 400177c:	10800104 	addi	r2,r2,4
 4001780:	d8802d15 	stw	r2,180(sp)
 4001784:	982dd7fa 	srai	r22,r19,31
 4001788:	b005883a 	mov	r2,r22
 400178c:	003c8206 	br	4000998 <__ram_exceptions_end+0xfbfe0754>
 4001790:	9080040c 	andi	r2,r18,16
 4001794:	10003526 	beq	r2,zero,400186c <___vfprintf_internal_r+0x13fc>
 4001798:	d9402d17 	ldw	r5,180(sp)
 400179c:	d8c02917 	ldw	r3,164(sp)
 40017a0:	d8002785 	stb	zero,158(sp)
 40017a4:	28800104 	addi	r2,r5,4
 40017a8:	2cc00017 	ldw	r19,0(r5)
 40017ac:	002d883a 	mov	r22,zero
 40017b0:	18003716 	blt	r3,zero,4001890 <___vfprintf_internal_r+0x1420>
 40017b4:	00ffdfc4 	movi	r3,-129
 40017b8:	d8802d15 	stw	r2,180(sp)
 40017bc:	90e4703a 	and	r18,r18,r3
 40017c0:	0039883a 	mov	fp,zero
 40017c4:	983df326 	beq	r19,zero,4000f94 <__ram_exceptions_end+0xfbfe0d50>
 40017c8:	00800244 	movi	r2,9
 40017cc:	14fc7b36 	bltu	r2,r19,40009bc <__ram_exceptions_end+0xfbfe0778>
 40017d0:	d8c02817 	ldw	r3,160(sp)
 40017d4:	dc001dc4 	addi	r16,sp,119
 40017d8:	9cc00c04 	addi	r19,r19,48
 40017dc:	1c07c83a 	sub	r3,r3,r16
 40017e0:	dcc01dc5 	stb	r19,119(sp)
 40017e4:	d8c02e15 	stw	r3,184(sp)
 40017e8:	003ce806 	br	4000b8c <__ram_exceptions_end+0xfbfe0948>
 40017ec:	d8803317 	ldw	r2,204(sp)
 40017f0:	143fffc4 	addi	r16,r2,-1
 40017f4:	043f4d0e 	bge	zero,r16,400152c <__ram_exceptions_end+0xfbfe12e8>
 40017f8:	07000404 	movi	fp,16
 40017fc:	e400810e 	bge	fp,r16,4001a04 <___vfprintf_internal_r+0x1594>
 4001800:	01410074 	movhi	r5,1025
 4001804:	297f6584 	addi	r5,r5,-618
 4001808:	d9402b15 	stw	r5,172(sp)
 400180c:	01c001c4 	movi	r7,7
 4001810:	dcc02c17 	ldw	r19,176(sp)
 4001814:	00000306 	br	4001824 <___vfprintf_internal_r+0x13b4>
 4001818:	b5800204 	addi	r22,r22,8
 400181c:	843ffc04 	addi	r16,r16,-16
 4001820:	e4007b0e 	bge	fp,r16,4001a10 <___vfprintf_internal_r+0x15a0>
 4001824:	18c00404 	addi	r3,r3,16
 4001828:	8c400044 	addi	r17,r17,1
 400182c:	b5000015 	stw	r20,0(r22)
 4001830:	b7000115 	stw	fp,4(r22)
 4001834:	d8c02015 	stw	r3,128(sp)
 4001838:	dc401f15 	stw	r17,124(sp)
 400183c:	3c7ff60e 	bge	r7,r17,4001818 <__ram_exceptions_end+0xfbfe15d4>
 4001840:	d9801e04 	addi	r6,sp,120
 4001844:	b80b883a 	mov	r5,r23
 4001848:	9809883a 	mov	r4,r19
 400184c:	d9c03c15 	stw	r7,240(sp)
 4001850:	4006f880 	call	4006f88 <__sprint_r>
 4001854:	d9c03c17 	ldw	r7,240(sp)
 4001858:	103c071e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 400185c:	d8c02017 	ldw	r3,128(sp)
 4001860:	dc401f17 	ldw	r17,124(sp)
 4001864:	dd800404 	addi	r22,sp,16
 4001868:	003fec06 	br	400181c <__ram_exceptions_end+0xfbfe15d8>
 400186c:	9080100c 	andi	r2,r18,64
 4001870:	d8002785 	stb	zero,158(sp)
 4001874:	10010e26 	beq	r2,zero,4001cb0 <___vfprintf_internal_r+0x1840>
 4001878:	d9002d17 	ldw	r4,180(sp)
 400187c:	d9402917 	ldw	r5,164(sp)
 4001880:	002d883a 	mov	r22,zero
 4001884:	20800104 	addi	r2,r4,4
 4001888:	24c0000b 	ldhu	r19,0(r4)
 400188c:	283fc90e 	bge	r5,zero,40017b4 <__ram_exceptions_end+0xfbfe1570>
 4001890:	d8802d15 	stw	r2,180(sp)
 4001894:	0039883a 	mov	fp,zero
 4001898:	9d84b03a 	or	r2,r19,r22
 400189c:	103c461e 	bne	r2,zero,40009b8 <__ram_exceptions_end+0xfbfe0774>
 40018a0:	00800044 	movi	r2,1
 40018a4:	003e6c06 	br	4001258 <__ram_exceptions_end+0xfbfe1014>
 40018a8:	d9002c17 	ldw	r4,176(sp)
 40018ac:	d9801e04 	addi	r6,sp,120
 40018b0:	b80b883a 	mov	r5,r23
 40018b4:	4006f880 	call	4006f88 <__sprint_r>
 40018b8:	103bef1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40018bc:	d8c02017 	ldw	r3,128(sp)
 40018c0:	da000404 	addi	r8,sp,16
 40018c4:	d9003217 	ldw	r4,200(sp)
 40018c8:	d8802617 	ldw	r2,152(sp)
 40018cc:	d9403317 	ldw	r5,204(sp)
 40018d0:	8123883a 	add	r17,r16,r4
 40018d4:	11400216 	blt	r2,r5,40018e0 <___vfprintf_internal_r+0x1470>
 40018d8:	9100004c 	andi	r4,r18,1
 40018dc:	20000d26 	beq	r4,zero,4001914 <___vfprintf_internal_r+0x14a4>
 40018e0:	d9003717 	ldw	r4,220(sp)
 40018e4:	d9403417 	ldw	r5,208(sp)
 40018e8:	1907883a 	add	r3,r3,r4
 40018ec:	d9001f17 	ldw	r4,124(sp)
 40018f0:	41400015 	stw	r5,0(r8)
 40018f4:	d9403717 	ldw	r5,220(sp)
 40018f8:	21000044 	addi	r4,r4,1
 40018fc:	d8c02015 	stw	r3,128(sp)
 4001900:	41400115 	stw	r5,4(r8)
 4001904:	d9001f15 	stw	r4,124(sp)
 4001908:	014001c4 	movi	r5,7
 400190c:	2901e816 	blt	r5,r4,40020b0 <___vfprintf_internal_r+0x1c40>
 4001910:	42000204 	addi	r8,r8,8
 4001914:	d9003317 	ldw	r4,204(sp)
 4001918:	8121883a 	add	r16,r16,r4
 400191c:	2085c83a 	sub	r2,r4,r2
 4001920:	8461c83a 	sub	r16,r16,r17
 4001924:	1400010e 	bge	r2,r16,400192c <___vfprintf_internal_r+0x14bc>
 4001928:	1021883a 	mov	r16,r2
 400192c:	04000a0e 	bge	zero,r16,4001958 <___vfprintf_internal_r+0x14e8>
 4001930:	d9001f17 	ldw	r4,124(sp)
 4001934:	1c07883a 	add	r3,r3,r16
 4001938:	44400015 	stw	r17,0(r8)
 400193c:	21000044 	addi	r4,r4,1
 4001940:	44000115 	stw	r16,4(r8)
 4001944:	d8c02015 	stw	r3,128(sp)
 4001948:	d9001f15 	stw	r4,124(sp)
 400194c:	014001c4 	movi	r5,7
 4001950:	2901fb16 	blt	r5,r4,4002140 <___vfprintf_internal_r+0x1cd0>
 4001954:	42000204 	addi	r8,r8,8
 4001958:	8001f716 	blt	r16,zero,4002138 <___vfprintf_internal_r+0x1cc8>
 400195c:	1421c83a 	sub	r16,r2,r16
 4001960:	043d380e 	bge	zero,r16,4000e44 <__ram_exceptions_end+0xfbfe0c00>
 4001964:	04400404 	movi	r17,16
 4001968:	d8801f17 	ldw	r2,124(sp)
 400196c:	8c3efb0e 	bge	r17,r16,400155c <__ram_exceptions_end+0xfbfe1318>
 4001970:	01410074 	movhi	r5,1025
 4001974:	297f6584 	addi	r5,r5,-618
 4001978:	d9402b15 	stw	r5,172(sp)
 400197c:	058001c4 	movi	r22,7
 4001980:	dcc02c17 	ldw	r19,176(sp)
 4001984:	00000306 	br	4001994 <___vfprintf_internal_r+0x1524>
 4001988:	42000204 	addi	r8,r8,8
 400198c:	843ffc04 	addi	r16,r16,-16
 4001990:	8c3ef50e 	bge	r17,r16,4001568 <__ram_exceptions_end+0xfbfe1324>
 4001994:	18c00404 	addi	r3,r3,16
 4001998:	10800044 	addi	r2,r2,1
 400199c:	45000015 	stw	r20,0(r8)
 40019a0:	44400115 	stw	r17,4(r8)
 40019a4:	d8c02015 	stw	r3,128(sp)
 40019a8:	d8801f15 	stw	r2,124(sp)
 40019ac:	b0bff60e 	bge	r22,r2,4001988 <__ram_exceptions_end+0xfbfe1744>
 40019b0:	d9801e04 	addi	r6,sp,120
 40019b4:	b80b883a 	mov	r5,r23
 40019b8:	9809883a 	mov	r4,r19
 40019bc:	4006f880 	call	4006f88 <__sprint_r>
 40019c0:	103bad1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40019c4:	d8c02017 	ldw	r3,128(sp)
 40019c8:	d8801f17 	ldw	r2,124(sp)
 40019cc:	da000404 	addi	r8,sp,16
 40019d0:	003fee06 	br	400198c <__ram_exceptions_end+0xfbfe1748>
 40019d4:	9088703a 	and	r4,r18,r2
 40019d8:	203eab1e 	bne	r4,zero,4001488 <__ram_exceptions_end+0xfbfe1244>
 40019dc:	dc401f17 	ldw	r17,124(sp)
 40019e0:	40800115 	stw	r2,4(r8)
 40019e4:	44000015 	stw	r16,0(r8)
 40019e8:	8c400044 	addi	r17,r17,1
 40019ec:	d8c02015 	stw	r3,128(sp)
 40019f0:	dc401f15 	stw	r17,124(sp)
 40019f4:	008001c4 	movi	r2,7
 40019f8:	14400e16 	blt	r2,r17,4001a34 <___vfprintf_internal_r+0x15c4>
 40019fc:	45800204 	addi	r22,r8,8
 4001a00:	003eca06 	br	400152c <__ram_exceptions_end+0xfbfe12e8>
 4001a04:	01010074 	movhi	r4,1025
 4001a08:	213f6584 	addi	r4,r4,-618
 4001a0c:	d9002b15 	stw	r4,172(sp)
 4001a10:	d8802b17 	ldw	r2,172(sp)
 4001a14:	1c07883a 	add	r3,r3,r16
 4001a18:	8c400044 	addi	r17,r17,1
 4001a1c:	b0800015 	stw	r2,0(r22)
 4001a20:	b4000115 	stw	r16,4(r22)
 4001a24:	d8c02015 	stw	r3,128(sp)
 4001a28:	dc401f15 	stw	r17,124(sp)
 4001a2c:	008001c4 	movi	r2,7
 4001a30:	147ebd0e 	bge	r2,r17,4001528 <__ram_exceptions_end+0xfbfe12e4>
 4001a34:	d9002c17 	ldw	r4,176(sp)
 4001a38:	d9801e04 	addi	r6,sp,120
 4001a3c:	b80b883a 	mov	r5,r23
 4001a40:	4006f880 	call	4006f88 <__sprint_r>
 4001a44:	103b8c1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001a48:	d8c02017 	ldw	r3,128(sp)
 4001a4c:	dc401f17 	ldw	r17,124(sp)
 4001a50:	dd800404 	addi	r22,sp,16
 4001a54:	003eb506 	br	400152c <__ram_exceptions_end+0xfbfe12e8>
 4001a58:	d9002c17 	ldw	r4,176(sp)
 4001a5c:	d9801e04 	addi	r6,sp,120
 4001a60:	b80b883a 	mov	r5,r23
 4001a64:	4006f880 	call	4006f88 <__sprint_r>
 4001a68:	103b831e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001a6c:	d8c02017 	ldw	r3,128(sp)
 4001a70:	dc401f17 	ldw	r17,124(sp)
 4001a74:	da000404 	addi	r8,sp,16
 4001a78:	003e8d06 	br	40014b0 <__ram_exceptions_end+0xfbfe126c>
 4001a7c:	d9002c17 	ldw	r4,176(sp)
 4001a80:	d9801e04 	addi	r6,sp,120
 4001a84:	b80b883a 	mov	r5,r23
 4001a88:	4006f880 	call	4006f88 <__sprint_r>
 4001a8c:	103b7a1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001a90:	d8c02017 	ldw	r3,128(sp)
 4001a94:	dc401f17 	ldw	r17,124(sp)
 4001a98:	dd800404 	addi	r22,sp,16
 4001a9c:	003e8f06 	br	40014dc <__ram_exceptions_end+0xfbfe1298>
 4001aa0:	0027883a 	mov	r19,zero
 4001aa4:	003f4a06 	br	40017d0 <__ram_exceptions_end+0xfbfe158c>
 4001aa8:	d9002c17 	ldw	r4,176(sp)
 4001aac:	d9801e04 	addi	r6,sp,120
 4001ab0:	b80b883a 	mov	r5,r23
 4001ab4:	4006f880 	call	4006f88 <__sprint_r>
 4001ab8:	103b6f1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001abc:	d8c02017 	ldw	r3,128(sp)
 4001ac0:	da000404 	addi	r8,sp,16
 4001ac4:	003c9d06 	br	4000d3c <__ram_exceptions_end+0xfbfe0af8>
 4001ac8:	04e7c83a 	sub	r19,zero,r19
 4001acc:	9804c03a 	cmpne	r2,r19,zero
 4001ad0:	05adc83a 	sub	r22,zero,r22
 4001ad4:	b0adc83a 	sub	r22,r22,r2
 4001ad8:	d8802917 	ldw	r2,164(sp)
 4001adc:	07000b44 	movi	fp,45
 4001ae0:	df002785 	stb	fp,158(sp)
 4001ae4:	10017b16 	blt	r2,zero,40020d4 <___vfprintf_internal_r+0x1c64>
 4001ae8:	00bfdfc4 	movi	r2,-129
 4001aec:	90a4703a 	and	r18,r18,r2
 4001af0:	003bb106 	br	40009b8 <__ram_exceptions_end+0xfbfe0774>
 4001af4:	d9003617 	ldw	r4,216(sp)
 4001af8:	d9403817 	ldw	r5,224(sp)
 4001afc:	da003d15 	stw	r8,244(sp)
 4001b00:	4006b140 	call	4006b14 <__fpclassifyd>
 4001b04:	da003d17 	ldw	r8,244(sp)
 4001b08:	1000f026 	beq	r2,zero,4001ecc <___vfprintf_internal_r+0x1a5c>
 4001b0c:	d9002917 	ldw	r4,164(sp)
 4001b10:	05bff7c4 	movi	r22,-33
 4001b14:	00bfffc4 	movi	r2,-1
 4001b18:	8dac703a 	and	r22,r17,r22
 4001b1c:	20820026 	beq	r4,r2,4002320 <___vfprintf_internal_r+0x1eb0>
 4001b20:	008011c4 	movi	r2,71
 4001b24:	b081f726 	beq	r22,r2,4002304 <___vfprintf_internal_r+0x1e94>
 4001b28:	d9003817 	ldw	r4,224(sp)
 4001b2c:	90c04014 	ori	r3,r18,256
 4001b30:	d8c02b15 	stw	r3,172(sp)
 4001b34:	20021516 	blt	r4,zero,400238c <___vfprintf_internal_r+0x1f1c>
 4001b38:	dcc03817 	ldw	r19,224(sp)
 4001b3c:	d8002a05 	stb	zero,168(sp)
 4001b40:	00801984 	movi	r2,102
 4001b44:	8881f926 	beq	r17,r2,400232c <___vfprintf_internal_r+0x1ebc>
 4001b48:	00801184 	movi	r2,70
 4001b4c:	88821c26 	beq	r17,r2,40023c0 <___vfprintf_internal_r+0x1f50>
 4001b50:	00801144 	movi	r2,69
 4001b54:	b081ef26 	beq	r22,r2,4002314 <___vfprintf_internal_r+0x1ea4>
 4001b58:	d8c02917 	ldw	r3,164(sp)
 4001b5c:	d8802104 	addi	r2,sp,132
 4001b60:	d8800315 	stw	r2,12(sp)
 4001b64:	d9403617 	ldw	r5,216(sp)
 4001b68:	d8802504 	addi	r2,sp,148
 4001b6c:	d9002c17 	ldw	r4,176(sp)
 4001b70:	d8800215 	stw	r2,8(sp)
 4001b74:	d8802604 	addi	r2,sp,152
 4001b78:	d8c00015 	stw	r3,0(sp)
 4001b7c:	d8800115 	stw	r2,4(sp)
 4001b80:	01c00084 	movi	r7,2
 4001b84:	980d883a 	mov	r6,r19
 4001b88:	d8c03c15 	stw	r3,240(sp)
 4001b8c:	da003d15 	stw	r8,244(sp)
 4001b90:	4002a940 	call	4002a94 <_dtoa_r>
 4001b94:	1021883a 	mov	r16,r2
 4001b98:	008019c4 	movi	r2,103
 4001b9c:	d8c03c17 	ldw	r3,240(sp)
 4001ba0:	da003d17 	ldw	r8,244(sp)
 4001ba4:	88817126 	beq	r17,r2,400216c <___vfprintf_internal_r+0x1cfc>
 4001ba8:	008011c4 	movi	r2,71
 4001bac:	88829226 	beq	r17,r2,40025f8 <___vfprintf_internal_r+0x2188>
 4001bb0:	80f9883a 	add	fp,r16,r3
 4001bb4:	d9003617 	ldw	r4,216(sp)
 4001bb8:	000d883a 	mov	r6,zero
 4001bbc:	000f883a 	mov	r7,zero
 4001bc0:	980b883a 	mov	r5,r19
 4001bc4:	da003d15 	stw	r8,244(sp)
 4001bc8:	400b77c0 	call	400b77c <__eqdf2>
 4001bcc:	da003d17 	ldw	r8,244(sp)
 4001bd0:	10018d26 	beq	r2,zero,4002208 <___vfprintf_internal_r+0x1d98>
 4001bd4:	d8802117 	ldw	r2,132(sp)
 4001bd8:	1700062e 	bgeu	r2,fp,4001bf4 <___vfprintf_internal_r+0x1784>
 4001bdc:	01000c04 	movi	r4,48
 4001be0:	10c00044 	addi	r3,r2,1
 4001be4:	d8c02115 	stw	r3,132(sp)
 4001be8:	11000005 	stb	r4,0(r2)
 4001bec:	d8802117 	ldw	r2,132(sp)
 4001bf0:	173ffb36 	bltu	r2,fp,4001be0 <__ram_exceptions_end+0xfbfe199c>
 4001bf4:	1405c83a 	sub	r2,r2,r16
 4001bf8:	d8803315 	stw	r2,204(sp)
 4001bfc:	008011c4 	movi	r2,71
 4001c00:	b0817626 	beq	r22,r2,40021dc <___vfprintf_internal_r+0x1d6c>
 4001c04:	00801944 	movi	r2,101
 4001c08:	1442810e 	bge	r2,r17,4002610 <___vfprintf_internal_r+0x21a0>
 4001c0c:	d8c02617 	ldw	r3,152(sp)
 4001c10:	00801984 	movi	r2,102
 4001c14:	d8c03215 	stw	r3,200(sp)
 4001c18:	8881fe26 	beq	r17,r2,4002414 <___vfprintf_internal_r+0x1fa4>
 4001c1c:	d8c03217 	ldw	r3,200(sp)
 4001c20:	d9003317 	ldw	r4,204(sp)
 4001c24:	1901dd16 	blt	r3,r4,400239c <___vfprintf_internal_r+0x1f2c>
 4001c28:	9480004c 	andi	r18,r18,1
 4001c2c:	90022b1e 	bne	r18,zero,40024dc <___vfprintf_internal_r+0x206c>
 4001c30:	1805883a 	mov	r2,r3
 4001c34:	18028016 	blt	r3,zero,4002638 <___vfprintf_internal_r+0x21c8>
 4001c38:	d8c03217 	ldw	r3,200(sp)
 4001c3c:	044019c4 	movi	r17,103
 4001c40:	d8c02e15 	stw	r3,184(sp)
 4001c44:	df002a07 	ldb	fp,168(sp)
 4001c48:	e001531e 	bne	fp,zero,4002198 <___vfprintf_internal_r+0x1d28>
 4001c4c:	df002783 	ldbu	fp,158(sp)
 4001c50:	d8802a15 	stw	r2,168(sp)
 4001c54:	dc802b17 	ldw	r18,172(sp)
 4001c58:	d8002915 	stw	zero,164(sp)
 4001c5c:	003bd106 	br	4000ba4 <__ram_exceptions_end+0xfbfe0960>
 4001c60:	d8802d17 	ldw	r2,180(sp)
 4001c64:	d8c02d17 	ldw	r3,180(sp)
 4001c68:	d9002d17 	ldw	r4,180(sp)
 4001c6c:	10800017 	ldw	r2,0(r2)
 4001c70:	18c00117 	ldw	r3,4(r3)
 4001c74:	21000204 	addi	r4,r4,8
 4001c78:	d8803615 	stw	r2,216(sp)
 4001c7c:	d8c03815 	stw	r3,224(sp)
 4001c80:	d9002d15 	stw	r4,180(sp)
 4001c84:	003b7506 	br	4000a5c <__ram_exceptions_end+0xfbfe0818>
 4001c88:	ac400007 	ldb	r17,0(r21)
 4001c8c:	003a5906 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001c90:	9080100c 	andi	r2,r18,64
 4001c94:	1000a826 	beq	r2,zero,4001f38 <___vfprintf_internal_r+0x1ac8>
 4001c98:	d9002d17 	ldw	r4,180(sp)
 4001c9c:	002d883a 	mov	r22,zero
 4001ca0:	24c0000b 	ldhu	r19,0(r4)
 4001ca4:	21000104 	addi	r4,r4,4
 4001ca8:	d9002d15 	stw	r4,180(sp)
 4001cac:	003ccb06 	br	4000fdc <__ram_exceptions_end+0xfbfe0d98>
 4001cb0:	d8c02d17 	ldw	r3,180(sp)
 4001cb4:	d9002917 	ldw	r4,164(sp)
 4001cb8:	002d883a 	mov	r22,zero
 4001cbc:	18800104 	addi	r2,r3,4
 4001cc0:	1cc00017 	ldw	r19,0(r3)
 4001cc4:	203ebb0e 	bge	r4,zero,40017b4 <__ram_exceptions_end+0xfbfe1570>
 4001cc8:	003ef106 	br	4001890 <__ram_exceptions_end+0xfbfe164c>
 4001ccc:	9080040c 	andi	r2,r18,16
 4001cd0:	1000921e 	bne	r2,zero,4001f1c <___vfprintf_internal_r+0x1aac>
 4001cd4:	9480100c 	andi	r18,r18,64
 4001cd8:	90013926 	beq	r18,zero,40021c0 <___vfprintf_internal_r+0x1d50>
 4001cdc:	d9002d17 	ldw	r4,180(sp)
 4001ce0:	d9402f17 	ldw	r5,188(sp)
 4001ce4:	20800017 	ldw	r2,0(r4)
 4001ce8:	21000104 	addi	r4,r4,4
 4001cec:	d9002d15 	stw	r4,180(sp)
 4001cf0:	1140000d 	sth	r5,0(r2)
 4001cf4:	003a1606 	br	4000550 <__ram_exceptions_end+0xfbfe030c>
 4001cf8:	9080100c 	andi	r2,r18,64
 4001cfc:	10008026 	beq	r2,zero,4001f00 <___vfprintf_internal_r+0x1a90>
 4001d00:	d8c02d17 	ldw	r3,180(sp)
 4001d04:	1cc0000f 	ldh	r19,0(r3)
 4001d08:	18c00104 	addi	r3,r3,4
 4001d0c:	d8c02d15 	stw	r3,180(sp)
 4001d10:	982dd7fa 	srai	r22,r19,31
 4001d14:	b005883a 	mov	r2,r22
 4001d18:	003b1f06 	br	4000998 <__ram_exceptions_end+0xfbfe0754>
 4001d1c:	9080100c 	andi	r2,r18,64
 4001d20:	d8002785 	stb	zero,158(sp)
 4001d24:	10008a1e 	bne	r2,zero,4001f50 <___vfprintf_internal_r+0x1ae0>
 4001d28:	d9402d17 	ldw	r5,180(sp)
 4001d2c:	d8c02917 	ldw	r3,164(sp)
 4001d30:	002d883a 	mov	r22,zero
 4001d34:	28800104 	addi	r2,r5,4
 4001d38:	2cc00017 	ldw	r19,0(r5)
 4001d3c:	183e4b0e 	bge	r3,zero,400166c <__ram_exceptions_end+0xfbfe1428>
 4001d40:	9d86b03a 	or	r3,r19,r22
 4001d44:	d8802d15 	stw	r2,180(sp)
 4001d48:	183e4c1e 	bne	r3,zero,400167c <__ram_exceptions_end+0xfbfe1438>
 4001d4c:	0039883a 	mov	fp,zero
 4001d50:	0005883a 	mov	r2,zero
 4001d54:	003d4006 	br	4001258 <__ram_exceptions_end+0xfbfe1014>
 4001d58:	01410074 	movhi	r5,1025
 4001d5c:	297f6584 	addi	r5,r5,-618
 4001d60:	d9402b15 	stw	r5,172(sp)
 4001d64:	d9402b17 	ldw	r5,172(sp)
 4001d68:	1c47883a 	add	r3,r3,r17
 4001d6c:	10800044 	addi	r2,r2,1
 4001d70:	41400015 	stw	r5,0(r8)
 4001d74:	44400115 	stw	r17,4(r8)
 4001d78:	d8c02015 	stw	r3,128(sp)
 4001d7c:	d8801f15 	stw	r2,124(sp)
 4001d80:	010001c4 	movi	r4,7
 4001d84:	20bec816 	blt	r4,r2,40018a8 <__ram_exceptions_end+0xfbfe1664>
 4001d88:	42000204 	addi	r8,r8,8
 4001d8c:	003ecd06 	br	40018c4 <__ram_exceptions_end+0xfbfe1680>
 4001d90:	d9002917 	ldw	r4,164(sp)
 4001d94:	d8002785 	stb	zero,158(sp)
 4001d98:	203d2d16 	blt	r4,zero,4001250 <__ram_exceptions_end+0xfbfe100c>
 4001d9c:	00bfdfc4 	movi	r2,-129
 4001da0:	90a4703a 	and	r18,r18,r2
 4001da4:	003a9106 	br	40007ec <__ram_exceptions_end+0xfbfe05a8>
 4001da8:	01010074 	movhi	r4,1025
 4001dac:	213f6584 	addi	r4,r4,-618
 4001db0:	d9002b15 	stw	r4,172(sp)
 4001db4:	003c0c06 	br	4000de8 <__ram_exceptions_end+0xfbfe0ba4>
 4001db8:	d9002c17 	ldw	r4,176(sp)
 4001dbc:	d9801e04 	addi	r6,sp,120
 4001dc0:	b80b883a 	mov	r5,r23
 4001dc4:	4006f880 	call	4006f88 <__sprint_r>
 4001dc8:	103aab1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001dcc:	d8c02017 	ldw	r3,128(sp)
 4001dd0:	da000404 	addi	r8,sp,16
 4001dd4:	003d4106 	br	40012dc <__ram_exceptions_end+0xfbfe1098>
 4001dd8:	d8801f17 	ldw	r2,124(sp)
 4001ddc:	01410074 	movhi	r5,1025
 4001de0:	01000044 	movi	r4,1
 4001de4:	18c00044 	addi	r3,r3,1
 4001de8:	10800044 	addi	r2,r2,1
 4001dec:	297f6504 	addi	r5,r5,-620
 4001df0:	41000115 	stw	r4,4(r8)
 4001df4:	41400015 	stw	r5,0(r8)
 4001df8:	d8c02015 	stw	r3,128(sp)
 4001dfc:	d8801f15 	stw	r2,124(sp)
 4001e00:	010001c4 	movi	r4,7
 4001e04:	20805c16 	blt	r4,r2,4001f78 <___vfprintf_internal_r+0x1b08>
 4001e08:	42000204 	addi	r8,r8,8
 4001e0c:	8800041e 	bne	r17,zero,4001e20 <___vfprintf_internal_r+0x19b0>
 4001e10:	d8803317 	ldw	r2,204(sp)
 4001e14:	1000021e 	bne	r2,zero,4001e20 <___vfprintf_internal_r+0x19b0>
 4001e18:	9080004c 	andi	r2,r18,1
 4001e1c:	103c0926 	beq	r2,zero,4000e44 <__ram_exceptions_end+0xfbfe0c00>
 4001e20:	d9003717 	ldw	r4,220(sp)
 4001e24:	d8801f17 	ldw	r2,124(sp)
 4001e28:	d9403417 	ldw	r5,208(sp)
 4001e2c:	20c7883a 	add	r3,r4,r3
 4001e30:	10800044 	addi	r2,r2,1
 4001e34:	41000115 	stw	r4,4(r8)
 4001e38:	41400015 	stw	r5,0(r8)
 4001e3c:	d8c02015 	stw	r3,128(sp)
 4001e40:	d8801f15 	stw	r2,124(sp)
 4001e44:	010001c4 	movi	r4,7
 4001e48:	20812116 	blt	r4,r2,40022d0 <___vfprintf_internal_r+0x1e60>
 4001e4c:	42000204 	addi	r8,r8,8
 4001e50:	0463c83a 	sub	r17,zero,r17
 4001e54:	0440730e 	bge	zero,r17,4002024 <___vfprintf_internal_r+0x1bb4>
 4001e58:	05800404 	movi	r22,16
 4001e5c:	b440860e 	bge	r22,r17,4002078 <___vfprintf_internal_r+0x1c08>
 4001e60:	01410074 	movhi	r5,1025
 4001e64:	297f6584 	addi	r5,r5,-618
 4001e68:	d9402b15 	stw	r5,172(sp)
 4001e6c:	070001c4 	movi	fp,7
 4001e70:	dcc02c17 	ldw	r19,176(sp)
 4001e74:	00000306 	br	4001e84 <___vfprintf_internal_r+0x1a14>
 4001e78:	42000204 	addi	r8,r8,8
 4001e7c:	8c7ffc04 	addi	r17,r17,-16
 4001e80:	b440800e 	bge	r22,r17,4002084 <___vfprintf_internal_r+0x1c14>
 4001e84:	18c00404 	addi	r3,r3,16
 4001e88:	10800044 	addi	r2,r2,1
 4001e8c:	45000015 	stw	r20,0(r8)
 4001e90:	45800115 	stw	r22,4(r8)
 4001e94:	d8c02015 	stw	r3,128(sp)
 4001e98:	d8801f15 	stw	r2,124(sp)
 4001e9c:	e0bff60e 	bge	fp,r2,4001e78 <__ram_exceptions_end+0xfbfe1c34>
 4001ea0:	d9801e04 	addi	r6,sp,120
 4001ea4:	b80b883a 	mov	r5,r23
 4001ea8:	9809883a 	mov	r4,r19
 4001eac:	4006f880 	call	4006f88 <__sprint_r>
 4001eb0:	103a711e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001eb4:	d8c02017 	ldw	r3,128(sp)
 4001eb8:	d8801f17 	ldw	r2,124(sp)
 4001ebc:	da000404 	addi	r8,sp,16
 4001ec0:	003fee06 	br	4001e7c <__ram_exceptions_end+0xfbfe1c38>
 4001ec4:	00bfffc4 	movi	r2,-1
 4001ec8:	003a6f06 	br	4000888 <__ram_exceptions_end+0xfbfe0644>
 4001ecc:	008011c4 	movi	r2,71
 4001ed0:	1440b816 	blt	r2,r17,40021b4 <___vfprintf_internal_r+0x1d44>
 4001ed4:	04010074 	movhi	r16,1025
 4001ed8:	843f5704 	addi	r16,r16,-676
 4001edc:	00c000c4 	movi	r3,3
 4001ee0:	00bfdfc4 	movi	r2,-129
 4001ee4:	d8c02a15 	stw	r3,168(sp)
 4001ee8:	90a4703a 	and	r18,r18,r2
 4001eec:	df002783 	ldbu	fp,158(sp)
 4001ef0:	d8c02e15 	stw	r3,184(sp)
 4001ef4:	d8002915 	stw	zero,164(sp)
 4001ef8:	d8003215 	stw	zero,200(sp)
 4001efc:	003b2906 	br	4000ba4 <__ram_exceptions_end+0xfbfe0960>
 4001f00:	d9002d17 	ldw	r4,180(sp)
 4001f04:	24c00017 	ldw	r19,0(r4)
 4001f08:	21000104 	addi	r4,r4,4
 4001f0c:	d9002d15 	stw	r4,180(sp)
 4001f10:	982dd7fa 	srai	r22,r19,31
 4001f14:	b005883a 	mov	r2,r22
 4001f18:	003a9f06 	br	4000998 <__ram_exceptions_end+0xfbfe0754>
 4001f1c:	d9402d17 	ldw	r5,180(sp)
 4001f20:	d8c02f17 	ldw	r3,188(sp)
 4001f24:	28800017 	ldw	r2,0(r5)
 4001f28:	29400104 	addi	r5,r5,4
 4001f2c:	d9402d15 	stw	r5,180(sp)
 4001f30:	10c00015 	stw	r3,0(r2)
 4001f34:	00398606 	br	4000550 <__ram_exceptions_end+0xfbfe030c>
 4001f38:	d9402d17 	ldw	r5,180(sp)
 4001f3c:	002d883a 	mov	r22,zero
 4001f40:	2cc00017 	ldw	r19,0(r5)
 4001f44:	29400104 	addi	r5,r5,4
 4001f48:	d9402d15 	stw	r5,180(sp)
 4001f4c:	003c2306 	br	4000fdc <__ram_exceptions_end+0xfbfe0d98>
 4001f50:	d8c02d17 	ldw	r3,180(sp)
 4001f54:	d9002917 	ldw	r4,164(sp)
 4001f58:	002d883a 	mov	r22,zero
 4001f5c:	18800104 	addi	r2,r3,4
 4001f60:	1cc0000b 	ldhu	r19,0(r3)
 4001f64:	203dc10e 	bge	r4,zero,400166c <__ram_exceptions_end+0xfbfe1428>
 4001f68:	003f7506 	br	4001d40 <__ram_exceptions_end+0xfbfe1afc>
 4001f6c:	04010074 	movhi	r16,1025
 4001f70:	843f5504 	addi	r16,r16,-684
 4001f74:	003acc06 	br	4000aa8 <__ram_exceptions_end+0xfbfe0864>
 4001f78:	d9002c17 	ldw	r4,176(sp)
 4001f7c:	d9801e04 	addi	r6,sp,120
 4001f80:	b80b883a 	mov	r5,r23
 4001f84:	4006f880 	call	4006f88 <__sprint_r>
 4001f88:	103a3b1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001f8c:	dc402617 	ldw	r17,152(sp)
 4001f90:	d8c02017 	ldw	r3,128(sp)
 4001f94:	da000404 	addi	r8,sp,16
 4001f98:	003f9c06 	br	4001e0c <__ram_exceptions_end+0xfbfe1bc8>
 4001f9c:	ac400043 	ldbu	r17,1(r21)
 4001fa0:	94800814 	ori	r18,r18,32
 4001fa4:	ad400044 	addi	r21,r21,1
 4001fa8:	8c403fcc 	andi	r17,r17,255
 4001fac:	8c40201c 	xori	r17,r17,128
 4001fb0:	8c7fe004 	addi	r17,r17,-128
 4001fb4:	00398f06 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 4001fb8:	d8c02d15 	stw	r3,180(sp)
 4001fbc:	0039883a 	mov	fp,zero
 4001fc0:	003e3506 	br	4001898 <__ram_exceptions_end+0xfbfe1654>
 4001fc4:	d9002c17 	ldw	r4,176(sp)
 4001fc8:	d9801e04 	addi	r6,sp,120
 4001fcc:	b80b883a 	mov	r5,r23
 4001fd0:	4006f880 	call	4006f88 <__sprint_r>
 4001fd4:	103a281e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4001fd8:	d8c02017 	ldw	r3,128(sp)
 4001fdc:	da000404 	addi	r8,sp,16
 4001fe0:	003cd006 	br	4001324 <__ram_exceptions_end+0xfbfe10e0>
 4001fe4:	8009883a 	mov	r4,r16
 4001fe8:	da003d15 	stw	r8,244(sp)
 4001fec:	4006df40 	call	4006df4 <strlen>
 4001ff0:	d8802e15 	stw	r2,184(sp)
 4001ff4:	da003d17 	ldw	r8,244(sp)
 4001ff8:	103c340e 	bge	r2,zero,40010cc <__ram_exceptions_end+0xfbfe0e88>
 4001ffc:	0005883a 	mov	r2,zero
 4002000:	003c3206 	br	40010cc <__ram_exceptions_end+0xfbfe0e88>
 4002004:	d9002c17 	ldw	r4,176(sp)
 4002008:	d9801e04 	addi	r6,sp,120
 400200c:	b80b883a 	mov	r5,r23
 4002010:	4006f880 	call	4006f88 <__sprint_r>
 4002014:	103a181e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4002018:	d8c02017 	ldw	r3,128(sp)
 400201c:	d8801f17 	ldw	r2,124(sp)
 4002020:	da000404 	addi	r8,sp,16
 4002024:	d9403317 	ldw	r5,204(sp)
 4002028:	10800044 	addi	r2,r2,1
 400202c:	44000015 	stw	r16,0(r8)
 4002030:	28c7883a 	add	r3,r5,r3
 4002034:	003b7d06 	br	4000e2c <__ram_exceptions_end+0xfbfe0be8>
 4002038:	01010074 	movhi	r4,1025
 400203c:	213f6984 	addi	r4,r4,-602
 4002040:	d9003515 	stw	r4,212(sp)
 4002044:	003b1406 	br	4000c98 <__ram_exceptions_end+0xfbfe0a54>
 4002048:	013fffc4 	movi	r4,-1
 400204c:	003a3506 	br	4000924 <__ram_exceptions_end+0xfbfe06e0>
 4002050:	0023883a 	mov	r17,zero
 4002054:	003d9d06 	br	40016cc <__ram_exceptions_end+0xfbfe1488>
 4002058:	d9002c17 	ldw	r4,176(sp)
 400205c:	d9801e04 	addi	r6,sp,120
 4002060:	b80b883a 	mov	r5,r23
 4002064:	4006f880 	call	4006f88 <__sprint_r>
 4002068:	103a031e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 400206c:	d8c02017 	ldw	r3,128(sp)
 4002070:	da000404 	addi	r8,sp,16
 4002074:	003d9406 	br	40016c8 <__ram_exceptions_end+0xfbfe1484>
 4002078:	01010074 	movhi	r4,1025
 400207c:	213f6584 	addi	r4,r4,-618
 4002080:	d9002b15 	stw	r4,172(sp)
 4002084:	d9002b17 	ldw	r4,172(sp)
 4002088:	1c47883a 	add	r3,r3,r17
 400208c:	10800044 	addi	r2,r2,1
 4002090:	41000015 	stw	r4,0(r8)
 4002094:	44400115 	stw	r17,4(r8)
 4002098:	d8c02015 	stw	r3,128(sp)
 400209c:	d8801f15 	stw	r2,124(sp)
 40020a0:	010001c4 	movi	r4,7
 40020a4:	20bfd716 	blt	r4,r2,4002004 <__ram_exceptions_end+0xfbfe1dc0>
 40020a8:	42000204 	addi	r8,r8,8
 40020ac:	003fdd06 	br	4002024 <__ram_exceptions_end+0xfbfe1de0>
 40020b0:	d9002c17 	ldw	r4,176(sp)
 40020b4:	d9801e04 	addi	r6,sp,120
 40020b8:	b80b883a 	mov	r5,r23
 40020bc:	4006f880 	call	4006f88 <__sprint_r>
 40020c0:	1039ed1e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40020c4:	d8802617 	ldw	r2,152(sp)
 40020c8:	d8c02017 	ldw	r3,128(sp)
 40020cc:	da000404 	addi	r8,sp,16
 40020d0:	003e1006 	br	4001914 <__ram_exceptions_end+0xfbfe16d0>
 40020d4:	00800044 	movi	r2,1
 40020d8:	10803fcc 	andi	r2,r2,255
 40020dc:	00c00044 	movi	r3,1
 40020e0:	10fa3526 	beq	r2,r3,40009b8 <__ram_exceptions_end+0xfbfe0774>
 40020e4:	00c00084 	movi	r3,2
 40020e8:	10fbcb26 	beq	r2,r3,4001018 <__ram_exceptions_end+0xfbfe0dd4>
 40020ec:	003a8f06 	br	4000b2c <__ram_exceptions_end+0xfbfe08e8>
 40020f0:	01010074 	movhi	r4,1025
 40020f4:	213f6984 	addi	r4,r4,-602
 40020f8:	d9003515 	stw	r4,212(sp)
 40020fc:	003b7606 	br	4000ed8 <__ram_exceptions_end+0xfbfe0c94>
 4002100:	d8802917 	ldw	r2,164(sp)
 4002104:	00c00184 	movi	r3,6
 4002108:	1880012e 	bgeu	r3,r2,4002110 <___vfprintf_internal_r+0x1ca0>
 400210c:	1805883a 	mov	r2,r3
 4002110:	d8802e15 	stw	r2,184(sp)
 4002114:	1000ef16 	blt	r2,zero,40024d4 <___vfprintf_internal_r+0x2064>
 4002118:	04010074 	movhi	r16,1025
 400211c:	d8802a15 	stw	r2,168(sp)
 4002120:	dcc02d15 	stw	r19,180(sp)
 4002124:	d8002915 	stw	zero,164(sp)
 4002128:	d8003215 	stw	zero,200(sp)
 400212c:	843f6304 	addi	r16,r16,-628
 4002130:	0039883a 	mov	fp,zero
 4002134:	003aa206 	br	4000bc0 <__ram_exceptions_end+0xfbfe097c>
 4002138:	0021883a 	mov	r16,zero
 400213c:	003e0706 	br	400195c <__ram_exceptions_end+0xfbfe1718>
 4002140:	d9002c17 	ldw	r4,176(sp)
 4002144:	d9801e04 	addi	r6,sp,120
 4002148:	b80b883a 	mov	r5,r23
 400214c:	4006f880 	call	4006f88 <__sprint_r>
 4002150:	1039c91e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 4002154:	d8802617 	ldw	r2,152(sp)
 4002158:	d9403317 	ldw	r5,204(sp)
 400215c:	d8c02017 	ldw	r3,128(sp)
 4002160:	da000404 	addi	r8,sp,16
 4002164:	2885c83a 	sub	r2,r5,r2
 4002168:	003dfb06 	br	4001958 <__ram_exceptions_end+0xfbfe1714>
 400216c:	9080004c 	andi	r2,r18,1
 4002170:	103e8f1e 	bne	r2,zero,4001bb0 <__ram_exceptions_end+0xfbfe196c>
 4002174:	d8802117 	ldw	r2,132(sp)
 4002178:	003e9e06 	br	4001bf4 <__ram_exceptions_end+0xfbfe19b0>
 400217c:	1025883a 	mov	r18,r2
 4002180:	0039883a 	mov	fp,zero
 4002184:	00800084 	movi	r2,2
 4002188:	003fd306 	br	40020d8 <__ram_exceptions_end+0xfbfe1e94>
 400218c:	07000b44 	movi	fp,45
 4002190:	df002785 	stb	fp,158(sp)
 4002194:	003a4006 	br	4000a98 <__ram_exceptions_end+0xfbfe0854>
 4002198:	00c00b44 	movi	r3,45
 400219c:	d8c02785 	stb	r3,158(sp)
 40021a0:	d8802a15 	stw	r2,168(sp)
 40021a4:	dc802b17 	ldw	r18,172(sp)
 40021a8:	d8002915 	stw	zero,164(sp)
 40021ac:	07000b44 	movi	fp,45
 40021b0:	003a8006 	br	4000bb4 <__ram_exceptions_end+0xfbfe0970>
 40021b4:	04010074 	movhi	r16,1025
 40021b8:	843f5804 	addi	r16,r16,-672
 40021bc:	003f4706 	br	4001edc <__ram_exceptions_end+0xfbfe1c98>
 40021c0:	d8c02d17 	ldw	r3,180(sp)
 40021c4:	d9002f17 	ldw	r4,188(sp)
 40021c8:	18800017 	ldw	r2,0(r3)
 40021cc:	18c00104 	addi	r3,r3,4
 40021d0:	d8c02d15 	stw	r3,180(sp)
 40021d4:	11000015 	stw	r4,0(r2)
 40021d8:	0038dd06 	br	4000550 <__ram_exceptions_end+0xfbfe030c>
 40021dc:	dd802617 	ldw	r22,152(sp)
 40021e0:	00bfff44 	movi	r2,-3
 40021e4:	b0801c16 	blt	r22,r2,4002258 <___vfprintf_internal_r+0x1de8>
 40021e8:	d9402917 	ldw	r5,164(sp)
 40021ec:	2d801a16 	blt	r5,r22,4002258 <___vfprintf_internal_r+0x1de8>
 40021f0:	dd803215 	stw	r22,200(sp)
 40021f4:	003e8906 	br	4001c1c <__ram_exceptions_end+0xfbfe19d8>
 40021f8:	01010074 	movhi	r4,1025
 40021fc:	213f6584 	addi	r4,r4,-618
 4002200:	d9002b15 	stw	r4,172(sp)
 4002204:	003c9106 	br	400144c <__ram_exceptions_end+0xfbfe1208>
 4002208:	e005883a 	mov	r2,fp
 400220c:	003e7906 	br	4001bf4 <__ram_exceptions_end+0xfbfe19b0>
 4002210:	d9402917 	ldw	r5,164(sp)
 4002214:	df002783 	ldbu	fp,158(sp)
 4002218:	dcc02d15 	stw	r19,180(sp)
 400221c:	d9402a15 	stw	r5,168(sp)
 4002220:	d9402e15 	stw	r5,184(sp)
 4002224:	d8002915 	stw	zero,164(sp)
 4002228:	d8003215 	stw	zero,200(sp)
 400222c:	003a5d06 	br	4000ba4 <__ram_exceptions_end+0xfbfe0960>
 4002230:	9080004c 	andi	r2,r18,1
 4002234:	0039883a 	mov	fp,zero
 4002238:	10000426 	beq	r2,zero,400224c <___vfprintf_internal_r+0x1ddc>
 400223c:	00800c04 	movi	r2,48
 4002240:	dc001dc4 	addi	r16,sp,119
 4002244:	d8801dc5 	stb	r2,119(sp)
 4002248:	003b8006 	br	400104c <__ram_exceptions_end+0xfbfe0e08>
 400224c:	d8002e15 	stw	zero,184(sp)
 4002250:	dc001e04 	addi	r16,sp,120
 4002254:	003a4d06 	br	4000b8c <__ram_exceptions_end+0xfbfe0948>
 4002258:	8c7fff84 	addi	r17,r17,-2
 400225c:	b5bfffc4 	addi	r22,r22,-1
 4002260:	dd802615 	stw	r22,152(sp)
 4002264:	dc4022c5 	stb	r17,139(sp)
 4002268:	b000bf16 	blt	r22,zero,4002568 <___vfprintf_internal_r+0x20f8>
 400226c:	00800ac4 	movi	r2,43
 4002270:	d8802305 	stb	r2,140(sp)
 4002274:	00800244 	movi	r2,9
 4002278:	15807016 	blt	r2,r22,400243c <___vfprintf_internal_r+0x1fcc>
 400227c:	00800c04 	movi	r2,48
 4002280:	b5800c04 	addi	r22,r22,48
 4002284:	d8802345 	stb	r2,141(sp)
 4002288:	dd802385 	stb	r22,142(sp)
 400228c:	d88023c4 	addi	r2,sp,143
 4002290:	df0022c4 	addi	fp,sp,139
 4002294:	d8c03317 	ldw	r3,204(sp)
 4002298:	1739c83a 	sub	fp,r2,fp
 400229c:	d9003317 	ldw	r4,204(sp)
 40022a0:	e0c7883a 	add	r3,fp,r3
 40022a4:	df003a15 	stw	fp,232(sp)
 40022a8:	d8c02e15 	stw	r3,184(sp)
 40022ac:	00800044 	movi	r2,1
 40022b0:	1100b30e 	bge	r2,r4,4002580 <___vfprintf_internal_r+0x2110>
 40022b4:	d8c02e17 	ldw	r3,184(sp)
 40022b8:	18c00044 	addi	r3,r3,1
 40022bc:	d8c02e15 	stw	r3,184(sp)
 40022c0:	1805883a 	mov	r2,r3
 40022c4:	1800ac16 	blt	r3,zero,4002578 <___vfprintf_internal_r+0x2108>
 40022c8:	d8003215 	stw	zero,200(sp)
 40022cc:	003e5d06 	br	4001c44 <__ram_exceptions_end+0xfbfe1a00>
 40022d0:	d9002c17 	ldw	r4,176(sp)
 40022d4:	d9801e04 	addi	r6,sp,120
 40022d8:	b80b883a 	mov	r5,r23
 40022dc:	4006f880 	call	4006f88 <__sprint_r>
 40022e0:	1039651e 	bne	r2,zero,4000878 <__ram_exceptions_end+0xfbfe0634>
 40022e4:	dc402617 	ldw	r17,152(sp)
 40022e8:	d8c02017 	ldw	r3,128(sp)
 40022ec:	d8801f17 	ldw	r2,124(sp)
 40022f0:	da000404 	addi	r8,sp,16
 40022f4:	003ed606 	br	4001e50 <__ram_exceptions_end+0xfbfe1c0c>
 40022f8:	582b883a 	mov	r21,r11
 40022fc:	d8002915 	stw	zero,164(sp)
 4002300:	0038bd06 	br	40005f8 <__ram_exceptions_end+0xfbfe03b4>
 4002304:	d8802917 	ldw	r2,164(sp)
 4002308:	103e071e 	bne	r2,zero,4001b28 <__ram_exceptions_end+0xfbfe18e4>
 400230c:	dc002915 	stw	r16,164(sp)
 4002310:	003e0506 	br	4001b28 <__ram_exceptions_end+0xfbfe18e4>
 4002314:	d9002917 	ldw	r4,164(sp)
 4002318:	20c00044 	addi	r3,r4,1
 400231c:	003e0f06 	br	4001b5c <__ram_exceptions_end+0xfbfe1918>
 4002320:	01400184 	movi	r5,6
 4002324:	d9402915 	stw	r5,164(sp)
 4002328:	003dff06 	br	4001b28 <__ram_exceptions_end+0xfbfe18e4>
 400232c:	d8802104 	addi	r2,sp,132
 4002330:	d8800315 	stw	r2,12(sp)
 4002334:	d8802504 	addi	r2,sp,148
 4002338:	d8800215 	stw	r2,8(sp)
 400233c:	d8802604 	addi	r2,sp,152
 4002340:	d8800115 	stw	r2,4(sp)
 4002344:	d8802917 	ldw	r2,164(sp)
 4002348:	d9403617 	ldw	r5,216(sp)
 400234c:	d9002c17 	ldw	r4,176(sp)
 4002350:	d8800015 	stw	r2,0(sp)
 4002354:	01c000c4 	movi	r7,3
 4002358:	980d883a 	mov	r6,r19
 400235c:	da003d15 	stw	r8,244(sp)
 4002360:	4002a940 	call	4002a94 <_dtoa_r>
 4002364:	d8c02917 	ldw	r3,164(sp)
 4002368:	da003d17 	ldw	r8,244(sp)
 400236c:	1021883a 	mov	r16,r2
 4002370:	10f9883a 	add	fp,r2,r3
 4002374:	81000007 	ldb	r4,0(r16)
 4002378:	00800c04 	movi	r2,48
 400237c:	20805e26 	beq	r4,r2,40024f8 <___vfprintf_internal_r+0x2088>
 4002380:	d8c02617 	ldw	r3,152(sp)
 4002384:	e0f9883a 	add	fp,fp,r3
 4002388:	003e0a06 	br	4001bb4 <__ram_exceptions_end+0xfbfe1970>
 400238c:	00c00b44 	movi	r3,45
 4002390:	24e0003c 	xorhi	r19,r4,32768
 4002394:	d8c02a05 	stb	r3,168(sp)
 4002398:	003de906 	br	4001b40 <__ram_exceptions_end+0xfbfe18fc>
 400239c:	d8c03217 	ldw	r3,200(sp)
 40023a0:	00c07a0e 	bge	zero,r3,400258c <___vfprintf_internal_r+0x211c>
 40023a4:	00800044 	movi	r2,1
 40023a8:	d9003317 	ldw	r4,204(sp)
 40023ac:	1105883a 	add	r2,r2,r4
 40023b0:	d8802e15 	stw	r2,184(sp)
 40023b4:	10004e16 	blt	r2,zero,40024f0 <___vfprintf_internal_r+0x2080>
 40023b8:	044019c4 	movi	r17,103
 40023bc:	003e2106 	br	4001c44 <__ram_exceptions_end+0xfbfe1a00>
 40023c0:	d9002917 	ldw	r4,164(sp)
 40023c4:	d8802104 	addi	r2,sp,132
 40023c8:	d8800315 	stw	r2,12(sp)
 40023cc:	d9000015 	stw	r4,0(sp)
 40023d0:	d8802504 	addi	r2,sp,148
 40023d4:	d9403617 	ldw	r5,216(sp)
 40023d8:	d9002c17 	ldw	r4,176(sp)
 40023dc:	d8800215 	stw	r2,8(sp)
 40023e0:	d8802604 	addi	r2,sp,152
 40023e4:	d8800115 	stw	r2,4(sp)
 40023e8:	01c000c4 	movi	r7,3
 40023ec:	980d883a 	mov	r6,r19
 40023f0:	da003d15 	stw	r8,244(sp)
 40023f4:	4002a940 	call	4002a94 <_dtoa_r>
 40023f8:	d8c02917 	ldw	r3,164(sp)
 40023fc:	da003d17 	ldw	r8,244(sp)
 4002400:	1021883a 	mov	r16,r2
 4002404:	00801184 	movi	r2,70
 4002408:	80f9883a 	add	fp,r16,r3
 400240c:	88bfd926 	beq	r17,r2,4002374 <__ram_exceptions_end+0xfbfe2130>
 4002410:	003de806 	br	4001bb4 <__ram_exceptions_end+0xfbfe1970>
 4002414:	d9002917 	ldw	r4,164(sp)
 4002418:	00c04d0e 	bge	zero,r3,4002550 <___vfprintf_internal_r+0x20e0>
 400241c:	2000441e 	bne	r4,zero,4002530 <___vfprintf_internal_r+0x20c0>
 4002420:	9480004c 	andi	r18,r18,1
 4002424:	9000421e 	bne	r18,zero,4002530 <___vfprintf_internal_r+0x20c0>
 4002428:	1805883a 	mov	r2,r3
 400242c:	18007016 	blt	r3,zero,40025f0 <___vfprintf_internal_r+0x2180>
 4002430:	d8c03217 	ldw	r3,200(sp)
 4002434:	d8c02e15 	stw	r3,184(sp)
 4002438:	003e0206 	br	4001c44 <__ram_exceptions_end+0xfbfe1a00>
 400243c:	df0022c4 	addi	fp,sp,139
 4002440:	dc002915 	stw	r16,164(sp)
 4002444:	4027883a 	mov	r19,r8
 4002448:	e021883a 	mov	r16,fp
 400244c:	b009883a 	mov	r4,r22
 4002450:	01400284 	movi	r5,10
 4002454:	400a4b80 	call	400a4b8 <__modsi3>
 4002458:	10800c04 	addi	r2,r2,48
 400245c:	843fffc4 	addi	r16,r16,-1
 4002460:	b009883a 	mov	r4,r22
 4002464:	01400284 	movi	r5,10
 4002468:	80800005 	stb	r2,0(r16)
 400246c:	400a4340 	call	400a434 <__divsi3>
 4002470:	102d883a 	mov	r22,r2
 4002474:	00800244 	movi	r2,9
 4002478:	15bff416 	blt	r2,r22,400244c <__ram_exceptions_end+0xfbfe2208>
 400247c:	9811883a 	mov	r8,r19
 4002480:	b0800c04 	addi	r2,r22,48
 4002484:	8027883a 	mov	r19,r16
 4002488:	997fffc4 	addi	r5,r19,-1
 400248c:	98bfffc5 	stb	r2,-1(r19)
 4002490:	dc002917 	ldw	r16,164(sp)
 4002494:	2f006a2e 	bgeu	r5,fp,4002640 <___vfprintf_internal_r+0x21d0>
 4002498:	d9c02384 	addi	r7,sp,142
 400249c:	3ccfc83a 	sub	r7,r7,r19
 40024a0:	d9002344 	addi	r4,sp,141
 40024a4:	e1cf883a 	add	r7,fp,r7
 40024a8:	00000106 	br	40024b0 <___vfprintf_internal_r+0x2040>
 40024ac:	28800003 	ldbu	r2,0(r5)
 40024b0:	20800005 	stb	r2,0(r4)
 40024b4:	21000044 	addi	r4,r4,1
 40024b8:	29400044 	addi	r5,r5,1
 40024bc:	393ffb1e 	bne	r7,r4,40024ac <__ram_exceptions_end+0xfbfe2268>
 40024c0:	d8802304 	addi	r2,sp,140
 40024c4:	14c5c83a 	sub	r2,r2,r19
 40024c8:	d8c02344 	addi	r3,sp,141
 40024cc:	1885883a 	add	r2,r3,r2
 40024d0:	003f7006 	br	4002294 <__ram_exceptions_end+0xfbfe2050>
 40024d4:	0005883a 	mov	r2,zero
 40024d8:	003f0f06 	br	4002118 <__ram_exceptions_end+0xfbfe1ed4>
 40024dc:	d8c03217 	ldw	r3,200(sp)
 40024e0:	18c00044 	addi	r3,r3,1
 40024e4:	d8c02e15 	stw	r3,184(sp)
 40024e8:	1805883a 	mov	r2,r3
 40024ec:	183fb20e 	bge	r3,zero,40023b8 <__ram_exceptions_end+0xfbfe2174>
 40024f0:	0005883a 	mov	r2,zero
 40024f4:	003fb006 	br	40023b8 <__ram_exceptions_end+0xfbfe2174>
 40024f8:	d9003617 	ldw	r4,216(sp)
 40024fc:	000d883a 	mov	r6,zero
 4002500:	000f883a 	mov	r7,zero
 4002504:	980b883a 	mov	r5,r19
 4002508:	d8c03c15 	stw	r3,240(sp)
 400250c:	da003d15 	stw	r8,244(sp)
 4002510:	400b77c0 	call	400b77c <__eqdf2>
 4002514:	d8c03c17 	ldw	r3,240(sp)
 4002518:	da003d17 	ldw	r8,244(sp)
 400251c:	103f9826 	beq	r2,zero,4002380 <__ram_exceptions_end+0xfbfe213c>
 4002520:	00800044 	movi	r2,1
 4002524:	10c7c83a 	sub	r3,r2,r3
 4002528:	d8c02615 	stw	r3,152(sp)
 400252c:	003f9506 	br	4002384 <__ram_exceptions_end+0xfbfe2140>
 4002530:	d9002917 	ldw	r4,164(sp)
 4002534:	d8c03217 	ldw	r3,200(sp)
 4002538:	20800044 	addi	r2,r4,1
 400253c:	1885883a 	add	r2,r3,r2
 4002540:	d8802e15 	stw	r2,184(sp)
 4002544:	103dbf0e 	bge	r2,zero,4001c44 <__ram_exceptions_end+0xfbfe1a00>
 4002548:	0005883a 	mov	r2,zero
 400254c:	003dbd06 	br	4001c44 <__ram_exceptions_end+0xfbfe1a00>
 4002550:	2000211e 	bne	r4,zero,40025d8 <___vfprintf_internal_r+0x2168>
 4002554:	9480004c 	andi	r18,r18,1
 4002558:	90001f1e 	bne	r18,zero,40025d8 <___vfprintf_internal_r+0x2168>
 400255c:	00800044 	movi	r2,1
 4002560:	d8802e15 	stw	r2,184(sp)
 4002564:	003db706 	br	4001c44 <__ram_exceptions_end+0xfbfe1a00>
 4002568:	00800b44 	movi	r2,45
 400256c:	05adc83a 	sub	r22,zero,r22
 4002570:	d8802305 	stb	r2,140(sp)
 4002574:	003f3f06 	br	4002274 <__ram_exceptions_end+0xfbfe2030>
 4002578:	0005883a 	mov	r2,zero
 400257c:	003f5206 	br	40022c8 <__ram_exceptions_end+0xfbfe2084>
 4002580:	90a4703a 	and	r18,r18,r2
 4002584:	903f4e26 	beq	r18,zero,40022c0 <__ram_exceptions_end+0xfbfe207c>
 4002588:	003f4a06 	br	40022b4 <__ram_exceptions_end+0xfbfe2070>
 400258c:	00800084 	movi	r2,2
 4002590:	10c5c83a 	sub	r2,r2,r3
 4002594:	003f8406 	br	40023a8 <__ram_exceptions_end+0xfbfe2164>
 4002598:	d8802d17 	ldw	r2,180(sp)
 400259c:	d9002d17 	ldw	r4,180(sp)
 40025a0:	ac400043 	ldbu	r17,1(r21)
 40025a4:	10800017 	ldw	r2,0(r2)
 40025a8:	582b883a 	mov	r21,r11
 40025ac:	d8802915 	stw	r2,164(sp)
 40025b0:	20800104 	addi	r2,r4,4
 40025b4:	d9002917 	ldw	r4,164(sp)
 40025b8:	d8802d15 	stw	r2,180(sp)
 40025bc:	203e7a0e 	bge	r4,zero,4001fa8 <__ram_exceptions_end+0xfbfe1d64>
 40025c0:	8c403fcc 	andi	r17,r17,255
 40025c4:	00bfffc4 	movi	r2,-1
 40025c8:	8c40201c 	xori	r17,r17,128
 40025cc:	d8802915 	stw	r2,164(sp)
 40025d0:	8c7fe004 	addi	r17,r17,-128
 40025d4:	00380706 	br	40005f4 <__ram_exceptions_end+0xfbfe03b0>
 40025d8:	d8c02917 	ldw	r3,164(sp)
 40025dc:	18c00084 	addi	r3,r3,2
 40025e0:	d8c02e15 	stw	r3,184(sp)
 40025e4:	1805883a 	mov	r2,r3
 40025e8:	183d960e 	bge	r3,zero,4001c44 <__ram_exceptions_end+0xfbfe1a00>
 40025ec:	003fd606 	br	4002548 <__ram_exceptions_end+0xfbfe2304>
 40025f0:	0005883a 	mov	r2,zero
 40025f4:	003f8e06 	br	4002430 <__ram_exceptions_end+0xfbfe21ec>
 40025f8:	9080004c 	andi	r2,r18,1
 40025fc:	103f811e 	bne	r2,zero,4002404 <__ram_exceptions_end+0xfbfe21c0>
 4002600:	d8802117 	ldw	r2,132(sp)
 4002604:	1405c83a 	sub	r2,r2,r16
 4002608:	d8803315 	stw	r2,204(sp)
 400260c:	b47ef326 	beq	r22,r17,40021dc <__ram_exceptions_end+0xfbfe1f98>
 4002610:	dd802617 	ldw	r22,152(sp)
 4002614:	003f1106 	br	400225c <__ram_exceptions_end+0xfbfe2018>
 4002618:	d9c02785 	stb	r7,158(sp)
 400261c:	00390406 	br	4000a30 <__ram_exceptions_end+0xfbfe07ec>
 4002620:	d9c02785 	stb	r7,158(sp)
 4002624:	0038d306 	br	4000974 <__ram_exceptions_end+0xfbfe0730>
 4002628:	d9c02785 	stb	r7,158(sp)
 400262c:	003a6106 	br	4000fb4 <__ram_exceptions_end+0xfbfe0d70>
 4002630:	d9c02785 	stb	r7,158(sp)
 4002634:	003af806 	br	4001218 <__ram_exceptions_end+0xfbfe0fd4>
 4002638:	0005883a 	mov	r2,zero
 400263c:	003d7e06 	br	4001c38 <__ram_exceptions_end+0xfbfe19f4>
 4002640:	d8802344 	addi	r2,sp,141
 4002644:	003f1306 	br	4002294 <__ram_exceptions_end+0xfbfe2050>
 4002648:	d9c02785 	stb	r7,158(sp)
 400264c:	00392306 	br	4000adc <__ram_exceptions_end+0xfbfe0898>
 4002650:	d9c02785 	stb	r7,158(sp)
 4002654:	003aa906 	br	40010fc <__ram_exceptions_end+0xfbfe0eb8>
 4002658:	d9c02785 	stb	r7,158(sp)
 400265c:	003a3d06 	br	4000f54 <__ram_exceptions_end+0xfbfe0d10>
 4002660:	d9c02785 	stb	r7,158(sp)
 4002664:	003aca06 	br	4001190 <__ram_exceptions_end+0xfbfe0f4c>

04002668 <__vfprintf_internal>:
 4002668:	00810074 	movhi	r2,1025
 400266c:	10830004 	addi	r2,r2,3072
 4002670:	300f883a 	mov	r7,r6
 4002674:	280d883a 	mov	r6,r5
 4002678:	200b883a 	mov	r5,r4
 400267c:	11000017 	ldw	r4,0(r2)
 4002680:	40004701 	jmpi	4000470 <___vfprintf_internal_r>

04002684 <__sbprintf>:
 4002684:	2880030b 	ldhu	r2,12(r5)
 4002688:	2ac01917 	ldw	r11,100(r5)
 400268c:	2a80038b 	ldhu	r10,14(r5)
 4002690:	2a400717 	ldw	r9,28(r5)
 4002694:	2a000917 	ldw	r8,36(r5)
 4002698:	defee204 	addi	sp,sp,-1144
 400269c:	00c10004 	movi	r3,1024
 40026a0:	dc011a15 	stw	r16,1128(sp)
 40026a4:	10bfff4c 	andi	r2,r2,65533
 40026a8:	2821883a 	mov	r16,r5
 40026ac:	d8cb883a 	add	r5,sp,r3
 40026b0:	dc811c15 	stw	r18,1136(sp)
 40026b4:	dc411b15 	stw	r17,1132(sp)
 40026b8:	dfc11d15 	stw	ra,1140(sp)
 40026bc:	2025883a 	mov	r18,r4
 40026c0:	d881030d 	sth	r2,1036(sp)
 40026c4:	dac11915 	stw	r11,1124(sp)
 40026c8:	da81038d 	sth	r10,1038(sp)
 40026cc:	da410715 	stw	r9,1052(sp)
 40026d0:	da010915 	stw	r8,1060(sp)
 40026d4:	dec10015 	stw	sp,1024(sp)
 40026d8:	dec10415 	stw	sp,1040(sp)
 40026dc:	d8c10215 	stw	r3,1032(sp)
 40026e0:	d8c10515 	stw	r3,1044(sp)
 40026e4:	d8010615 	stw	zero,1048(sp)
 40026e8:	40004700 	call	4000470 <___vfprintf_internal_r>
 40026ec:	1023883a 	mov	r17,r2
 40026f0:	10000416 	blt	r2,zero,4002704 <__sbprintf+0x80>
 40026f4:	d9410004 	addi	r5,sp,1024
 40026f8:	9009883a 	mov	r4,r18
 40026fc:	40043380 	call	4004338 <_fflush_r>
 4002700:	10000d1e 	bne	r2,zero,4002738 <__sbprintf+0xb4>
 4002704:	d881030b 	ldhu	r2,1036(sp)
 4002708:	1080100c 	andi	r2,r2,64
 400270c:	10000326 	beq	r2,zero,400271c <__sbprintf+0x98>
 4002710:	8080030b 	ldhu	r2,12(r16)
 4002714:	10801014 	ori	r2,r2,64
 4002718:	8080030d 	sth	r2,12(r16)
 400271c:	8805883a 	mov	r2,r17
 4002720:	dfc11d17 	ldw	ra,1140(sp)
 4002724:	dc811c17 	ldw	r18,1136(sp)
 4002728:	dc411b17 	ldw	r17,1132(sp)
 400272c:	dc011a17 	ldw	r16,1128(sp)
 4002730:	dec11e04 	addi	sp,sp,1144
 4002734:	f800283a 	ret
 4002738:	047fffc4 	movi	r17,-1
 400273c:	003ff106 	br	4002704 <__ram_exceptions_end+0xfbfe24c0>

04002740 <__swsetup_r>:
 4002740:	00810074 	movhi	r2,1025
 4002744:	defffd04 	addi	sp,sp,-12
 4002748:	10830004 	addi	r2,r2,3072
 400274c:	dc400115 	stw	r17,4(sp)
 4002750:	2023883a 	mov	r17,r4
 4002754:	11000017 	ldw	r4,0(r2)
 4002758:	dc000015 	stw	r16,0(sp)
 400275c:	dfc00215 	stw	ra,8(sp)
 4002760:	2821883a 	mov	r16,r5
 4002764:	20000226 	beq	r4,zero,4002770 <__swsetup_r+0x30>
 4002768:	20800e17 	ldw	r2,56(r4)
 400276c:	10003126 	beq	r2,zero,4002834 <__swsetup_r+0xf4>
 4002770:	8080030b 	ldhu	r2,12(r16)
 4002774:	10c0020c 	andi	r3,r2,8
 4002778:	1009883a 	mov	r4,r2
 400277c:	18000f26 	beq	r3,zero,40027bc <__swsetup_r+0x7c>
 4002780:	80c00417 	ldw	r3,16(r16)
 4002784:	18001526 	beq	r3,zero,40027dc <__swsetup_r+0x9c>
 4002788:	1100004c 	andi	r4,r2,1
 400278c:	20001c1e 	bne	r4,zero,4002800 <__swsetup_r+0xc0>
 4002790:	1080008c 	andi	r2,r2,2
 4002794:	1000291e 	bne	r2,zero,400283c <__swsetup_r+0xfc>
 4002798:	80800517 	ldw	r2,20(r16)
 400279c:	80800215 	stw	r2,8(r16)
 40027a0:	18001c26 	beq	r3,zero,4002814 <__swsetup_r+0xd4>
 40027a4:	0005883a 	mov	r2,zero
 40027a8:	dfc00217 	ldw	ra,8(sp)
 40027ac:	dc400117 	ldw	r17,4(sp)
 40027b0:	dc000017 	ldw	r16,0(sp)
 40027b4:	dec00304 	addi	sp,sp,12
 40027b8:	f800283a 	ret
 40027bc:	2080040c 	andi	r2,r4,16
 40027c0:	10002e26 	beq	r2,zero,400287c <__swsetup_r+0x13c>
 40027c4:	2080010c 	andi	r2,r4,4
 40027c8:	10001e1e 	bne	r2,zero,4002844 <__swsetup_r+0x104>
 40027cc:	80c00417 	ldw	r3,16(r16)
 40027d0:	20800214 	ori	r2,r4,8
 40027d4:	8080030d 	sth	r2,12(r16)
 40027d8:	183feb1e 	bne	r3,zero,4002788 <__ram_exceptions_end+0xfbfe2544>
 40027dc:	1100a00c 	andi	r4,r2,640
 40027e0:	01408004 	movi	r5,512
 40027e4:	217fe826 	beq	r4,r5,4002788 <__ram_exceptions_end+0xfbfe2544>
 40027e8:	800b883a 	mov	r5,r16
 40027ec:	8809883a 	mov	r4,r17
 40027f0:	4004dfc0 	call	4004dfc <__smakebuf_r>
 40027f4:	8080030b 	ldhu	r2,12(r16)
 40027f8:	80c00417 	ldw	r3,16(r16)
 40027fc:	003fe206 	br	4002788 <__ram_exceptions_end+0xfbfe2544>
 4002800:	80800517 	ldw	r2,20(r16)
 4002804:	80000215 	stw	zero,8(r16)
 4002808:	0085c83a 	sub	r2,zero,r2
 400280c:	80800615 	stw	r2,24(r16)
 4002810:	183fe41e 	bne	r3,zero,40027a4 <__ram_exceptions_end+0xfbfe2560>
 4002814:	80c0030b 	ldhu	r3,12(r16)
 4002818:	0005883a 	mov	r2,zero
 400281c:	1900200c 	andi	r4,r3,128
 4002820:	203fe126 	beq	r4,zero,40027a8 <__ram_exceptions_end+0xfbfe2564>
 4002824:	18c01014 	ori	r3,r3,64
 4002828:	80c0030d 	sth	r3,12(r16)
 400282c:	00bfffc4 	movi	r2,-1
 4002830:	003fdd06 	br	40027a8 <__ram_exceptions_end+0xfbfe2564>
 4002834:	40047140 	call	4004714 <__sinit>
 4002838:	003fcd06 	br	4002770 <__ram_exceptions_end+0xfbfe252c>
 400283c:	0005883a 	mov	r2,zero
 4002840:	003fd606 	br	400279c <__ram_exceptions_end+0xfbfe2558>
 4002844:	81400c17 	ldw	r5,48(r16)
 4002848:	28000626 	beq	r5,zero,4002864 <__swsetup_r+0x124>
 400284c:	80801004 	addi	r2,r16,64
 4002850:	28800326 	beq	r5,r2,4002860 <__swsetup_r+0x120>
 4002854:	8809883a 	mov	r4,r17
 4002858:	40048880 	call	4004888 <_free_r>
 400285c:	8100030b 	ldhu	r4,12(r16)
 4002860:	80000c15 	stw	zero,48(r16)
 4002864:	80c00417 	ldw	r3,16(r16)
 4002868:	00bff6c4 	movi	r2,-37
 400286c:	1108703a 	and	r4,r2,r4
 4002870:	80000115 	stw	zero,4(r16)
 4002874:	80c00015 	stw	r3,0(r16)
 4002878:	003fd506 	br	40027d0 <__ram_exceptions_end+0xfbfe258c>
 400287c:	00800244 	movi	r2,9
 4002880:	88800015 	stw	r2,0(r17)
 4002884:	20801014 	ori	r2,r4,64
 4002888:	8080030d 	sth	r2,12(r16)
 400288c:	00bfffc4 	movi	r2,-1
 4002890:	003fc506 	br	40027a8 <__ram_exceptions_end+0xfbfe2564>

04002894 <quorem>:
 4002894:	defff704 	addi	sp,sp,-36
 4002898:	dc800215 	stw	r18,8(sp)
 400289c:	20800417 	ldw	r2,16(r4)
 40028a0:	2c800417 	ldw	r18,16(r5)
 40028a4:	dfc00815 	stw	ra,32(sp)
 40028a8:	ddc00715 	stw	r23,28(sp)
 40028ac:	dd800615 	stw	r22,24(sp)
 40028b0:	dd400515 	stw	r21,20(sp)
 40028b4:	dd000415 	stw	r20,16(sp)
 40028b8:	dcc00315 	stw	r19,12(sp)
 40028bc:	dc400115 	stw	r17,4(sp)
 40028c0:	dc000015 	stw	r16,0(sp)
 40028c4:	14807116 	blt	r2,r18,4002a8c <quorem+0x1f8>
 40028c8:	94bfffc4 	addi	r18,r18,-1
 40028cc:	94ad883a 	add	r22,r18,r18
 40028d0:	b5ad883a 	add	r22,r22,r22
 40028d4:	2c400504 	addi	r17,r5,20
 40028d8:	8da9883a 	add	r20,r17,r22
 40028dc:	25400504 	addi	r21,r4,20
 40028e0:	282f883a 	mov	r23,r5
 40028e4:	adad883a 	add	r22,r21,r22
 40028e8:	a1400017 	ldw	r5,0(r20)
 40028ec:	2021883a 	mov	r16,r4
 40028f0:	b1000017 	ldw	r4,0(r22)
 40028f4:	29400044 	addi	r5,r5,1
 40028f8:	400a52c0 	call	400a52c <__udivsi3>
 40028fc:	1027883a 	mov	r19,r2
 4002900:	10002c26 	beq	r2,zero,40029b4 <quorem+0x120>
 4002904:	a813883a 	mov	r9,r21
 4002908:	880b883a 	mov	r5,r17
 400290c:	0009883a 	mov	r4,zero
 4002910:	000d883a 	mov	r6,zero
 4002914:	2a000017 	ldw	r8,0(r5)
 4002918:	49c00017 	ldw	r7,0(r9)
 400291c:	29400104 	addi	r5,r5,4
 4002920:	40bfffcc 	andi	r2,r8,65535
 4002924:	14c5383a 	mul	r2,r2,r19
 4002928:	4010d43a 	srli	r8,r8,16
 400292c:	38ffffcc 	andi	r3,r7,65535
 4002930:	1105883a 	add	r2,r2,r4
 4002934:	1008d43a 	srli	r4,r2,16
 4002938:	44d1383a 	mul	r8,r8,r19
 400293c:	198d883a 	add	r6,r3,r6
 4002940:	10ffffcc 	andi	r3,r2,65535
 4002944:	30c7c83a 	sub	r3,r6,r3
 4002948:	380ed43a 	srli	r7,r7,16
 400294c:	4105883a 	add	r2,r8,r4
 4002950:	180dd43a 	srai	r6,r3,16
 4002954:	113fffcc 	andi	r4,r2,65535
 4002958:	390fc83a 	sub	r7,r7,r4
 400295c:	398d883a 	add	r6,r7,r6
 4002960:	300e943a 	slli	r7,r6,16
 4002964:	18ffffcc 	andi	r3,r3,65535
 4002968:	1008d43a 	srli	r4,r2,16
 400296c:	38ceb03a 	or	r7,r7,r3
 4002970:	49c00015 	stw	r7,0(r9)
 4002974:	300dd43a 	srai	r6,r6,16
 4002978:	4a400104 	addi	r9,r9,4
 400297c:	a17fe52e 	bgeu	r20,r5,4002914 <__ram_exceptions_end+0xfbfe26d0>
 4002980:	b0800017 	ldw	r2,0(r22)
 4002984:	10000b1e 	bne	r2,zero,40029b4 <quorem+0x120>
 4002988:	b0bfff04 	addi	r2,r22,-4
 400298c:	a880082e 	bgeu	r21,r2,40029b0 <quorem+0x11c>
 4002990:	b0ffff17 	ldw	r3,-4(r22)
 4002994:	18000326 	beq	r3,zero,40029a4 <quorem+0x110>
 4002998:	00000506 	br	40029b0 <quorem+0x11c>
 400299c:	10c00017 	ldw	r3,0(r2)
 40029a0:	1800031e 	bne	r3,zero,40029b0 <quorem+0x11c>
 40029a4:	10bfff04 	addi	r2,r2,-4
 40029a8:	94bfffc4 	addi	r18,r18,-1
 40029ac:	a8bffb36 	bltu	r21,r2,400299c <__ram_exceptions_end+0xfbfe2758>
 40029b0:	84800415 	stw	r18,16(r16)
 40029b4:	b80b883a 	mov	r5,r23
 40029b8:	8009883a 	mov	r4,r16
 40029bc:	40063e00 	call	40063e0 <__mcmp>
 40029c0:	10002616 	blt	r2,zero,4002a5c <quorem+0x1c8>
 40029c4:	9cc00044 	addi	r19,r19,1
 40029c8:	a805883a 	mov	r2,r21
 40029cc:	000b883a 	mov	r5,zero
 40029d0:	11000017 	ldw	r4,0(r2)
 40029d4:	89800017 	ldw	r6,0(r17)
 40029d8:	10800104 	addi	r2,r2,4
 40029dc:	20ffffcc 	andi	r3,r4,65535
 40029e0:	194b883a 	add	r5,r3,r5
 40029e4:	30ffffcc 	andi	r3,r6,65535
 40029e8:	28c7c83a 	sub	r3,r5,r3
 40029ec:	300cd43a 	srli	r6,r6,16
 40029f0:	2008d43a 	srli	r4,r4,16
 40029f4:	180bd43a 	srai	r5,r3,16
 40029f8:	18ffffcc 	andi	r3,r3,65535
 40029fc:	2189c83a 	sub	r4,r4,r6
 4002a00:	2149883a 	add	r4,r4,r5
 4002a04:	200c943a 	slli	r6,r4,16
 4002a08:	8c400104 	addi	r17,r17,4
 4002a0c:	200bd43a 	srai	r5,r4,16
 4002a10:	30c6b03a 	or	r3,r6,r3
 4002a14:	10ffff15 	stw	r3,-4(r2)
 4002a18:	a47fed2e 	bgeu	r20,r17,40029d0 <__ram_exceptions_end+0xfbfe278c>
 4002a1c:	9485883a 	add	r2,r18,r18
 4002a20:	1085883a 	add	r2,r2,r2
 4002a24:	a887883a 	add	r3,r21,r2
 4002a28:	18800017 	ldw	r2,0(r3)
 4002a2c:	10000b1e 	bne	r2,zero,4002a5c <quorem+0x1c8>
 4002a30:	18bfff04 	addi	r2,r3,-4
 4002a34:	a880082e 	bgeu	r21,r2,4002a58 <quorem+0x1c4>
 4002a38:	18ffff17 	ldw	r3,-4(r3)
 4002a3c:	18000326 	beq	r3,zero,4002a4c <quorem+0x1b8>
 4002a40:	00000506 	br	4002a58 <quorem+0x1c4>
 4002a44:	10c00017 	ldw	r3,0(r2)
 4002a48:	1800031e 	bne	r3,zero,4002a58 <quorem+0x1c4>
 4002a4c:	10bfff04 	addi	r2,r2,-4
 4002a50:	94bfffc4 	addi	r18,r18,-1
 4002a54:	a8bffb36 	bltu	r21,r2,4002a44 <__ram_exceptions_end+0xfbfe2800>
 4002a58:	84800415 	stw	r18,16(r16)
 4002a5c:	9805883a 	mov	r2,r19
 4002a60:	dfc00817 	ldw	ra,32(sp)
 4002a64:	ddc00717 	ldw	r23,28(sp)
 4002a68:	dd800617 	ldw	r22,24(sp)
 4002a6c:	dd400517 	ldw	r21,20(sp)
 4002a70:	dd000417 	ldw	r20,16(sp)
 4002a74:	dcc00317 	ldw	r19,12(sp)
 4002a78:	dc800217 	ldw	r18,8(sp)
 4002a7c:	dc400117 	ldw	r17,4(sp)
 4002a80:	dc000017 	ldw	r16,0(sp)
 4002a84:	dec00904 	addi	sp,sp,36
 4002a88:	f800283a 	ret
 4002a8c:	0005883a 	mov	r2,zero
 4002a90:	003ff306 	br	4002a60 <__ram_exceptions_end+0xfbfe281c>

04002a94 <_dtoa_r>:
 4002a94:	20801017 	ldw	r2,64(r4)
 4002a98:	deffde04 	addi	sp,sp,-136
 4002a9c:	df002015 	stw	fp,128(sp)
 4002aa0:	dcc01b15 	stw	r19,108(sp)
 4002aa4:	dc801a15 	stw	r18,104(sp)
 4002aa8:	dc401915 	stw	r17,100(sp)
 4002aac:	dc001815 	stw	r16,96(sp)
 4002ab0:	dfc02115 	stw	ra,132(sp)
 4002ab4:	ddc01f15 	stw	r23,124(sp)
 4002ab8:	dd801e15 	stw	r22,120(sp)
 4002abc:	dd401d15 	stw	r21,116(sp)
 4002ac0:	dd001c15 	stw	r20,112(sp)
 4002ac4:	d9c00315 	stw	r7,12(sp)
 4002ac8:	2039883a 	mov	fp,r4
 4002acc:	3023883a 	mov	r17,r6
 4002ad0:	2825883a 	mov	r18,r5
 4002ad4:	dc002417 	ldw	r16,144(sp)
 4002ad8:	3027883a 	mov	r19,r6
 4002adc:	10000826 	beq	r2,zero,4002b00 <_dtoa_r+0x6c>
 4002ae0:	21801117 	ldw	r6,68(r4)
 4002ae4:	00c00044 	movi	r3,1
 4002ae8:	100b883a 	mov	r5,r2
 4002aec:	1986983a 	sll	r3,r3,r6
 4002af0:	11800115 	stw	r6,4(r2)
 4002af4:	10c00215 	stw	r3,8(r2)
 4002af8:	4005bc00 	call	4005bc0 <_Bfree>
 4002afc:	e0001015 	stw	zero,64(fp)
 4002b00:	88002e16 	blt	r17,zero,4002bbc <_dtoa_r+0x128>
 4002b04:	80000015 	stw	zero,0(r16)
 4002b08:	889ffc2c 	andhi	r2,r17,32752
 4002b0c:	00dffc34 	movhi	r3,32752
 4002b10:	10c01c26 	beq	r2,r3,4002b84 <_dtoa_r+0xf0>
 4002b14:	000d883a 	mov	r6,zero
 4002b18:	000f883a 	mov	r7,zero
 4002b1c:	9009883a 	mov	r4,r18
 4002b20:	980b883a 	mov	r5,r19
 4002b24:	400b77c0 	call	400b77c <__eqdf2>
 4002b28:	10002b1e 	bne	r2,zero,4002bd8 <_dtoa_r+0x144>
 4002b2c:	d9c02317 	ldw	r7,140(sp)
 4002b30:	00800044 	movi	r2,1
 4002b34:	38800015 	stw	r2,0(r7)
 4002b38:	d8802517 	ldw	r2,148(sp)
 4002b3c:	10019e26 	beq	r2,zero,40031b8 <_dtoa_r+0x724>
 4002b40:	d8c02517 	ldw	r3,148(sp)
 4002b44:	00810074 	movhi	r2,1025
 4002b48:	10bf6544 	addi	r2,r2,-619
 4002b4c:	18800015 	stw	r2,0(r3)
 4002b50:	10bfffc4 	addi	r2,r2,-1
 4002b54:	dfc02117 	ldw	ra,132(sp)
 4002b58:	df002017 	ldw	fp,128(sp)
 4002b5c:	ddc01f17 	ldw	r23,124(sp)
 4002b60:	dd801e17 	ldw	r22,120(sp)
 4002b64:	dd401d17 	ldw	r21,116(sp)
 4002b68:	dd001c17 	ldw	r20,112(sp)
 4002b6c:	dcc01b17 	ldw	r19,108(sp)
 4002b70:	dc801a17 	ldw	r18,104(sp)
 4002b74:	dc401917 	ldw	r17,100(sp)
 4002b78:	dc001817 	ldw	r16,96(sp)
 4002b7c:	dec02204 	addi	sp,sp,136
 4002b80:	f800283a 	ret
 4002b84:	d8c02317 	ldw	r3,140(sp)
 4002b88:	0089c3c4 	movi	r2,9999
 4002b8c:	18800015 	stw	r2,0(r3)
 4002b90:	90017726 	beq	r18,zero,4003170 <_dtoa_r+0x6dc>
 4002b94:	00810074 	movhi	r2,1025
 4002b98:	10bf7104 	addi	r2,r2,-572
 4002b9c:	d9002517 	ldw	r4,148(sp)
 4002ba0:	203fec26 	beq	r4,zero,4002b54 <__ram_exceptions_end+0xfbfe2910>
 4002ba4:	10c000c7 	ldb	r3,3(r2)
 4002ba8:	1801781e 	bne	r3,zero,400318c <_dtoa_r+0x6f8>
 4002bac:	10c000c4 	addi	r3,r2,3
 4002bb0:	d9802517 	ldw	r6,148(sp)
 4002bb4:	30c00015 	stw	r3,0(r6)
 4002bb8:	003fe606 	br	4002b54 <__ram_exceptions_end+0xfbfe2910>
 4002bbc:	04e00034 	movhi	r19,32768
 4002bc0:	9cffffc4 	addi	r19,r19,-1
 4002bc4:	00800044 	movi	r2,1
 4002bc8:	8ce6703a 	and	r19,r17,r19
 4002bcc:	80800015 	stw	r2,0(r16)
 4002bd0:	9823883a 	mov	r17,r19
 4002bd4:	003fcc06 	br	4002b08 <__ram_exceptions_end+0xfbfe28c4>
 4002bd8:	d8800204 	addi	r2,sp,8
 4002bdc:	d8800015 	stw	r2,0(sp)
 4002be0:	d9c00104 	addi	r7,sp,4
 4002be4:	900b883a 	mov	r5,r18
 4002be8:	980d883a 	mov	r6,r19
 4002bec:	e009883a 	mov	r4,fp
 4002bf0:	8820d53a 	srli	r16,r17,20
 4002bf4:	40067ac0 	call	40067ac <__d2b>
 4002bf8:	d8800915 	stw	r2,36(sp)
 4002bfc:	8001651e 	bne	r16,zero,4003194 <_dtoa_r+0x700>
 4002c00:	dd800217 	ldw	r22,8(sp)
 4002c04:	dc000117 	ldw	r16,4(sp)
 4002c08:	00800804 	movi	r2,32
 4002c0c:	b421883a 	add	r16,r22,r16
 4002c10:	80c10c84 	addi	r3,r16,1074
 4002c14:	10c2d10e 	bge	r2,r3,400375c <_dtoa_r+0xcc8>
 4002c18:	00801004 	movi	r2,64
 4002c1c:	81010484 	addi	r4,r16,1042
 4002c20:	10c7c83a 	sub	r3,r2,r3
 4002c24:	9108d83a 	srl	r4,r18,r4
 4002c28:	88e2983a 	sll	r17,r17,r3
 4002c2c:	2448b03a 	or	r4,r4,r17
 4002c30:	400cb440 	call	400cb44 <__floatunsidf>
 4002c34:	017f8434 	movhi	r5,65040
 4002c38:	01800044 	movi	r6,1
 4002c3c:	1009883a 	mov	r4,r2
 4002c40:	194b883a 	add	r5,r3,r5
 4002c44:	843fffc4 	addi	r16,r16,-1
 4002c48:	d9801115 	stw	r6,68(sp)
 4002c4c:	000d883a 	mov	r6,zero
 4002c50:	01cffe34 	movhi	r7,16376
 4002c54:	400c0ec0 	call	400c0ec <__subdf3>
 4002c58:	0198dbf4 	movhi	r6,25455
 4002c5c:	01cff4f4 	movhi	r7,16339
 4002c60:	3190d844 	addi	r6,r6,17249
 4002c64:	39e1e9c4 	addi	r7,r7,-30809
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	180b883a 	mov	r5,r3
 4002c70:	400b9d40 	call	400b9d4 <__muldf3>
 4002c74:	01a2d874 	movhi	r6,35681
 4002c78:	01cff1f4 	movhi	r7,16327
 4002c7c:	31b22cc4 	addi	r6,r6,-14157
 4002c80:	39e28a04 	addi	r7,r7,-30168
 4002c84:	180b883a 	mov	r5,r3
 4002c88:	1009883a 	mov	r4,r2
 4002c8c:	400a5e80 	call	400a5e8 <__adddf3>
 4002c90:	8009883a 	mov	r4,r16
 4002c94:	1029883a 	mov	r20,r2
 4002c98:	1823883a 	mov	r17,r3
 4002c9c:	400ca680 	call	400ca68 <__floatsidf>
 4002ca0:	019427f4 	movhi	r6,20639
 4002ca4:	01cff4f4 	movhi	r7,16339
 4002ca8:	319e7ec4 	addi	r6,r6,31227
 4002cac:	39d104c4 	addi	r7,r7,17427
 4002cb0:	1009883a 	mov	r4,r2
 4002cb4:	180b883a 	mov	r5,r3
 4002cb8:	400b9d40 	call	400b9d4 <__muldf3>
 4002cbc:	100d883a 	mov	r6,r2
 4002cc0:	180f883a 	mov	r7,r3
 4002cc4:	a009883a 	mov	r4,r20
 4002cc8:	880b883a 	mov	r5,r17
 4002ccc:	400a5e80 	call	400a5e8 <__adddf3>
 4002cd0:	1009883a 	mov	r4,r2
 4002cd4:	180b883a 	mov	r5,r3
 4002cd8:	1029883a 	mov	r20,r2
 4002cdc:	1823883a 	mov	r17,r3
 4002ce0:	400c9e80 	call	400c9e8 <__fixdfsi>
 4002ce4:	000d883a 	mov	r6,zero
 4002ce8:	000f883a 	mov	r7,zero
 4002cec:	a009883a 	mov	r4,r20
 4002cf0:	880b883a 	mov	r5,r17
 4002cf4:	d8800515 	stw	r2,20(sp)
 4002cf8:	400b8e00 	call	400b8e0 <__ledf2>
 4002cfc:	10028716 	blt	r2,zero,400371c <_dtoa_r+0xc88>
 4002d00:	d8c00517 	ldw	r3,20(sp)
 4002d04:	00800584 	movi	r2,22
 4002d08:	10c27536 	bltu	r2,r3,40036e0 <_dtoa_r+0xc4c>
 4002d0c:	180490fa 	slli	r2,r3,3
 4002d10:	00c10074 	movhi	r3,1025
 4002d14:	18ff8d04 	addi	r3,r3,-460
 4002d18:	1885883a 	add	r2,r3,r2
 4002d1c:	11000017 	ldw	r4,0(r2)
 4002d20:	11400117 	ldw	r5,4(r2)
 4002d24:	900d883a 	mov	r6,r18
 4002d28:	980f883a 	mov	r7,r19
 4002d2c:	400b8040 	call	400b804 <__gedf2>
 4002d30:	00828d0e 	bge	zero,r2,4003768 <_dtoa_r+0xcd4>
 4002d34:	d9000517 	ldw	r4,20(sp)
 4002d38:	d8000e15 	stw	zero,56(sp)
 4002d3c:	213fffc4 	addi	r4,r4,-1
 4002d40:	d9000515 	stw	r4,20(sp)
 4002d44:	b42dc83a 	sub	r22,r22,r16
 4002d48:	b5bfffc4 	addi	r22,r22,-1
 4002d4c:	b0026f16 	blt	r22,zero,400370c <_dtoa_r+0xc78>
 4002d50:	d8000815 	stw	zero,32(sp)
 4002d54:	d9c00517 	ldw	r7,20(sp)
 4002d58:	38026416 	blt	r7,zero,40036ec <_dtoa_r+0xc58>
 4002d5c:	b1ed883a 	add	r22,r22,r7
 4002d60:	d9c00d15 	stw	r7,52(sp)
 4002d64:	d8000a15 	stw	zero,40(sp)
 4002d68:	d9800317 	ldw	r6,12(sp)
 4002d6c:	00800244 	movi	r2,9
 4002d70:	11811436 	bltu	r2,r6,40031c4 <_dtoa_r+0x730>
 4002d74:	00800144 	movi	r2,5
 4002d78:	1184e10e 	bge	r2,r6,4004100 <_dtoa_r+0x166c>
 4002d7c:	31bfff04 	addi	r6,r6,-4
 4002d80:	d9800315 	stw	r6,12(sp)
 4002d84:	0023883a 	mov	r17,zero
 4002d88:	d9800317 	ldw	r6,12(sp)
 4002d8c:	008000c4 	movi	r2,3
 4002d90:	30836726 	beq	r6,r2,4003b30 <_dtoa_r+0x109c>
 4002d94:	1183410e 	bge	r2,r6,4003a9c <_dtoa_r+0x1008>
 4002d98:	d9c00317 	ldw	r7,12(sp)
 4002d9c:	00800104 	movi	r2,4
 4002da0:	38827c26 	beq	r7,r2,4003794 <_dtoa_r+0xd00>
 4002da4:	00800144 	movi	r2,5
 4002da8:	3884c41e 	bne	r7,r2,40040bc <_dtoa_r+0x1628>
 4002dac:	00800044 	movi	r2,1
 4002db0:	d8800b15 	stw	r2,44(sp)
 4002db4:	d8c00517 	ldw	r3,20(sp)
 4002db8:	d9002217 	ldw	r4,136(sp)
 4002dbc:	1907883a 	add	r3,r3,r4
 4002dc0:	19800044 	addi	r6,r3,1
 4002dc4:	d8c00c15 	stw	r3,48(sp)
 4002dc8:	d9800615 	stw	r6,24(sp)
 4002dcc:	0183a40e 	bge	zero,r6,4003c60 <_dtoa_r+0x11cc>
 4002dd0:	d9800617 	ldw	r6,24(sp)
 4002dd4:	3021883a 	mov	r16,r6
 4002dd8:	e0001115 	stw	zero,68(fp)
 4002ddc:	008005c4 	movi	r2,23
 4002de0:	1184c92e 	bgeu	r2,r6,4004108 <_dtoa_r+0x1674>
 4002de4:	00c00044 	movi	r3,1
 4002de8:	00800104 	movi	r2,4
 4002dec:	1085883a 	add	r2,r2,r2
 4002df0:	11000504 	addi	r4,r2,20
 4002df4:	180b883a 	mov	r5,r3
 4002df8:	18c00044 	addi	r3,r3,1
 4002dfc:	313ffb2e 	bgeu	r6,r4,4002dec <__ram_exceptions_end+0xfbfe2ba8>
 4002e00:	e1401115 	stw	r5,68(fp)
 4002e04:	e009883a 	mov	r4,fp
 4002e08:	4005b180 	call	4005b18 <_Balloc>
 4002e0c:	d8800715 	stw	r2,28(sp)
 4002e10:	e0801015 	stw	r2,64(fp)
 4002e14:	00800384 	movi	r2,14
 4002e18:	1400f736 	bltu	r2,r16,40031f8 <_dtoa_r+0x764>
 4002e1c:	8800f626 	beq	r17,zero,40031f8 <_dtoa_r+0x764>
 4002e20:	d9c00517 	ldw	r7,20(sp)
 4002e24:	01c39a0e 	bge	zero,r7,4003c90 <_dtoa_r+0x11fc>
 4002e28:	388003cc 	andi	r2,r7,15
 4002e2c:	100490fa 	slli	r2,r2,3
 4002e30:	382bd13a 	srai	r21,r7,4
 4002e34:	00c10074 	movhi	r3,1025
 4002e38:	18ff8d04 	addi	r3,r3,-460
 4002e3c:	1885883a 	add	r2,r3,r2
 4002e40:	a8c0040c 	andi	r3,r21,16
 4002e44:	12400017 	ldw	r9,0(r2)
 4002e48:	12000117 	ldw	r8,4(r2)
 4002e4c:	18037926 	beq	r3,zero,4003c34 <_dtoa_r+0x11a0>
 4002e50:	00810074 	movhi	r2,1025
 4002e54:	10bf8304 	addi	r2,r2,-500
 4002e58:	11800817 	ldw	r6,32(r2)
 4002e5c:	11c00917 	ldw	r7,36(r2)
 4002e60:	9009883a 	mov	r4,r18
 4002e64:	980b883a 	mov	r5,r19
 4002e68:	da001715 	stw	r8,92(sp)
 4002e6c:	da401615 	stw	r9,88(sp)
 4002e70:	400ae940 	call	400ae94 <__divdf3>
 4002e74:	da001717 	ldw	r8,92(sp)
 4002e78:	da401617 	ldw	r9,88(sp)
 4002e7c:	ad4003cc 	andi	r21,r21,15
 4002e80:	040000c4 	movi	r16,3
 4002e84:	1023883a 	mov	r17,r2
 4002e88:	1829883a 	mov	r20,r3
 4002e8c:	a8001126 	beq	r21,zero,4002ed4 <_dtoa_r+0x440>
 4002e90:	05c10074 	movhi	r23,1025
 4002e94:	bdff8304 	addi	r23,r23,-500
 4002e98:	4805883a 	mov	r2,r9
 4002e9c:	4007883a 	mov	r3,r8
 4002ea0:	a980004c 	andi	r6,r21,1
 4002ea4:	1009883a 	mov	r4,r2
 4002ea8:	a82bd07a 	srai	r21,r21,1
 4002eac:	180b883a 	mov	r5,r3
 4002eb0:	30000426 	beq	r6,zero,4002ec4 <_dtoa_r+0x430>
 4002eb4:	b9800017 	ldw	r6,0(r23)
 4002eb8:	b9c00117 	ldw	r7,4(r23)
 4002ebc:	84000044 	addi	r16,r16,1
 4002ec0:	400b9d40 	call	400b9d4 <__muldf3>
 4002ec4:	bdc00204 	addi	r23,r23,8
 4002ec8:	a83ff51e 	bne	r21,zero,4002ea0 <__ram_exceptions_end+0xfbfe2c5c>
 4002ecc:	1013883a 	mov	r9,r2
 4002ed0:	1811883a 	mov	r8,r3
 4002ed4:	480d883a 	mov	r6,r9
 4002ed8:	400f883a 	mov	r7,r8
 4002edc:	8809883a 	mov	r4,r17
 4002ee0:	a00b883a 	mov	r5,r20
 4002ee4:	400ae940 	call	400ae94 <__divdf3>
 4002ee8:	d8800f15 	stw	r2,60(sp)
 4002eec:	d8c01015 	stw	r3,64(sp)
 4002ef0:	d8c00e17 	ldw	r3,56(sp)
 4002ef4:	18000626 	beq	r3,zero,4002f10 <_dtoa_r+0x47c>
 4002ef8:	d9000f17 	ldw	r4,60(sp)
 4002efc:	d9401017 	ldw	r5,64(sp)
 4002f00:	000d883a 	mov	r6,zero
 4002f04:	01cffc34 	movhi	r7,16368
 4002f08:	400b8e00 	call	400b8e0 <__ledf2>
 4002f0c:	10040b16 	blt	r2,zero,4003f3c <_dtoa_r+0x14a8>
 4002f10:	8009883a 	mov	r4,r16
 4002f14:	400ca680 	call	400ca68 <__floatsidf>
 4002f18:	d9800f17 	ldw	r6,60(sp)
 4002f1c:	d9c01017 	ldw	r7,64(sp)
 4002f20:	1009883a 	mov	r4,r2
 4002f24:	180b883a 	mov	r5,r3
 4002f28:	400b9d40 	call	400b9d4 <__muldf3>
 4002f2c:	000d883a 	mov	r6,zero
 4002f30:	01d00734 	movhi	r7,16412
 4002f34:	1009883a 	mov	r4,r2
 4002f38:	180b883a 	mov	r5,r3
 4002f3c:	400a5e80 	call	400a5e8 <__adddf3>
 4002f40:	1021883a 	mov	r16,r2
 4002f44:	d8800617 	ldw	r2,24(sp)
 4002f48:	047f3034 	movhi	r17,64704
 4002f4c:	1c63883a 	add	r17,r3,r17
 4002f50:	10031826 	beq	r2,zero,4003bb4 <_dtoa_r+0x1120>
 4002f54:	d8c00517 	ldw	r3,20(sp)
 4002f58:	db000617 	ldw	r12,24(sp)
 4002f5c:	d8c01315 	stw	r3,76(sp)
 4002f60:	d9000b17 	ldw	r4,44(sp)
 4002f64:	20038f26 	beq	r4,zero,4003da4 <_dtoa_r+0x1310>
 4002f68:	60bfffc4 	addi	r2,r12,-1
 4002f6c:	100490fa 	slli	r2,r2,3
 4002f70:	00c10074 	movhi	r3,1025
 4002f74:	18ff8d04 	addi	r3,r3,-460
 4002f78:	1885883a 	add	r2,r3,r2
 4002f7c:	11800017 	ldw	r6,0(r2)
 4002f80:	11c00117 	ldw	r7,4(r2)
 4002f84:	d8800717 	ldw	r2,28(sp)
 4002f88:	0009883a 	mov	r4,zero
 4002f8c:	014ff834 	movhi	r5,16352
 4002f90:	db001615 	stw	r12,88(sp)
 4002f94:	15c00044 	addi	r23,r2,1
 4002f98:	400ae940 	call	400ae94 <__divdf3>
 4002f9c:	800d883a 	mov	r6,r16
 4002fa0:	880f883a 	mov	r7,r17
 4002fa4:	1009883a 	mov	r4,r2
 4002fa8:	180b883a 	mov	r5,r3
 4002fac:	400c0ec0 	call	400c0ec <__subdf3>
 4002fb0:	d9401017 	ldw	r5,64(sp)
 4002fb4:	d9000f17 	ldw	r4,60(sp)
 4002fb8:	102b883a 	mov	r21,r2
 4002fbc:	d8c01215 	stw	r3,72(sp)
 4002fc0:	400c9e80 	call	400c9e8 <__fixdfsi>
 4002fc4:	1009883a 	mov	r4,r2
 4002fc8:	1029883a 	mov	r20,r2
 4002fcc:	400ca680 	call	400ca68 <__floatsidf>
 4002fd0:	d9000f17 	ldw	r4,60(sp)
 4002fd4:	d9401017 	ldw	r5,64(sp)
 4002fd8:	100d883a 	mov	r6,r2
 4002fdc:	180f883a 	mov	r7,r3
 4002fe0:	400c0ec0 	call	400c0ec <__subdf3>
 4002fe4:	1823883a 	mov	r17,r3
 4002fe8:	d8c00717 	ldw	r3,28(sp)
 4002fec:	d9401217 	ldw	r5,72(sp)
 4002ff0:	a2000c04 	addi	r8,r20,48
 4002ff4:	1021883a 	mov	r16,r2
 4002ff8:	1a000005 	stb	r8,0(r3)
 4002ffc:	800d883a 	mov	r6,r16
 4003000:	880f883a 	mov	r7,r17
 4003004:	a809883a 	mov	r4,r21
 4003008:	4029883a 	mov	r20,r8
 400300c:	400b8040 	call	400b804 <__gedf2>
 4003010:	00841d16 	blt	zero,r2,4004088 <_dtoa_r+0x15f4>
 4003014:	800d883a 	mov	r6,r16
 4003018:	880f883a 	mov	r7,r17
 400301c:	0009883a 	mov	r4,zero
 4003020:	014ffc34 	movhi	r5,16368
 4003024:	400c0ec0 	call	400c0ec <__subdf3>
 4003028:	d9401217 	ldw	r5,72(sp)
 400302c:	100d883a 	mov	r6,r2
 4003030:	180f883a 	mov	r7,r3
 4003034:	a809883a 	mov	r4,r21
 4003038:	400b8040 	call	400b804 <__gedf2>
 400303c:	db001617 	ldw	r12,88(sp)
 4003040:	00840e16 	blt	zero,r2,400407c <_dtoa_r+0x15e8>
 4003044:	00800044 	movi	r2,1
 4003048:	13006b0e 	bge	r2,r12,40031f8 <_dtoa_r+0x764>
 400304c:	d9000717 	ldw	r4,28(sp)
 4003050:	dd800f15 	stw	r22,60(sp)
 4003054:	dcc01015 	stw	r19,64(sp)
 4003058:	2319883a 	add	r12,r4,r12
 400305c:	dcc01217 	ldw	r19,72(sp)
 4003060:	602d883a 	mov	r22,r12
 4003064:	dc801215 	stw	r18,72(sp)
 4003068:	b825883a 	mov	r18,r23
 400306c:	00000906 	br	4003094 <_dtoa_r+0x600>
 4003070:	400c0ec0 	call	400c0ec <__subdf3>
 4003074:	a80d883a 	mov	r6,r21
 4003078:	980f883a 	mov	r7,r19
 400307c:	1009883a 	mov	r4,r2
 4003080:	180b883a 	mov	r5,r3
 4003084:	400b8e00 	call	400b8e0 <__ledf2>
 4003088:	1003e816 	blt	r2,zero,400402c <_dtoa_r+0x1598>
 400308c:	b825883a 	mov	r18,r23
 4003090:	bd83e926 	beq	r23,r22,4004038 <_dtoa_r+0x15a4>
 4003094:	a809883a 	mov	r4,r21
 4003098:	980b883a 	mov	r5,r19
 400309c:	000d883a 	mov	r6,zero
 40030a0:	01d00934 	movhi	r7,16420
 40030a4:	400b9d40 	call	400b9d4 <__muldf3>
 40030a8:	000d883a 	mov	r6,zero
 40030ac:	01d00934 	movhi	r7,16420
 40030b0:	8009883a 	mov	r4,r16
 40030b4:	880b883a 	mov	r5,r17
 40030b8:	102b883a 	mov	r21,r2
 40030bc:	1827883a 	mov	r19,r3
 40030c0:	400b9d40 	call	400b9d4 <__muldf3>
 40030c4:	180b883a 	mov	r5,r3
 40030c8:	1009883a 	mov	r4,r2
 40030cc:	1821883a 	mov	r16,r3
 40030d0:	1023883a 	mov	r17,r2
 40030d4:	400c9e80 	call	400c9e8 <__fixdfsi>
 40030d8:	1009883a 	mov	r4,r2
 40030dc:	1029883a 	mov	r20,r2
 40030e0:	400ca680 	call	400ca68 <__floatsidf>
 40030e4:	8809883a 	mov	r4,r17
 40030e8:	800b883a 	mov	r5,r16
 40030ec:	100d883a 	mov	r6,r2
 40030f0:	180f883a 	mov	r7,r3
 40030f4:	400c0ec0 	call	400c0ec <__subdf3>
 40030f8:	a5000c04 	addi	r20,r20,48
 40030fc:	a80d883a 	mov	r6,r21
 4003100:	980f883a 	mov	r7,r19
 4003104:	1009883a 	mov	r4,r2
 4003108:	180b883a 	mov	r5,r3
 400310c:	95000005 	stb	r20,0(r18)
 4003110:	1021883a 	mov	r16,r2
 4003114:	1823883a 	mov	r17,r3
 4003118:	400b8e00 	call	400b8e0 <__ledf2>
 400311c:	bdc00044 	addi	r23,r23,1
 4003120:	800d883a 	mov	r6,r16
 4003124:	880f883a 	mov	r7,r17
 4003128:	0009883a 	mov	r4,zero
 400312c:	014ffc34 	movhi	r5,16368
 4003130:	103fcf0e 	bge	r2,zero,4003070 <__ram_exceptions_end+0xfbfe2e2c>
 4003134:	d8c01317 	ldw	r3,76(sp)
 4003138:	d8c00515 	stw	r3,20(sp)
 400313c:	d9400917 	ldw	r5,36(sp)
 4003140:	e009883a 	mov	r4,fp
 4003144:	4005bc00 	call	4005bc0 <_Bfree>
 4003148:	d9000517 	ldw	r4,20(sp)
 400314c:	d9802317 	ldw	r6,140(sp)
 4003150:	d9c02517 	ldw	r7,148(sp)
 4003154:	b8000005 	stb	zero,0(r23)
 4003158:	20800044 	addi	r2,r4,1
 400315c:	30800015 	stw	r2,0(r6)
 4003160:	3802aa26 	beq	r7,zero,4003c0c <_dtoa_r+0x1178>
 4003164:	3dc00015 	stw	r23,0(r7)
 4003168:	d8800717 	ldw	r2,28(sp)
 400316c:	003e7906 	br	4002b54 <__ram_exceptions_end+0xfbfe2910>
 4003170:	00800434 	movhi	r2,16
 4003174:	10bfffc4 	addi	r2,r2,-1
 4003178:	88a2703a 	and	r17,r17,r2
 400317c:	883e851e 	bne	r17,zero,4002b94 <__ram_exceptions_end+0xfbfe2950>
 4003180:	00810074 	movhi	r2,1025
 4003184:	10bf6e04 	addi	r2,r2,-584
 4003188:	003e8406 	br	4002b9c <__ram_exceptions_end+0xfbfe2958>
 400318c:	10c00204 	addi	r3,r2,8
 4003190:	003e8706 	br	4002bb0 <__ram_exceptions_end+0xfbfe296c>
 4003194:	01400434 	movhi	r5,16
 4003198:	297fffc4 	addi	r5,r5,-1
 400319c:	994a703a 	and	r5,r19,r5
 40031a0:	9009883a 	mov	r4,r18
 40031a4:	843f0044 	addi	r16,r16,-1023
 40031a8:	294ffc34 	orhi	r5,r5,16368
 40031ac:	dd800217 	ldw	r22,8(sp)
 40031b0:	d8001115 	stw	zero,68(sp)
 40031b4:	003ea506 	br	4002c4c <__ram_exceptions_end+0xfbfe2a08>
 40031b8:	00810074 	movhi	r2,1025
 40031bc:	10bf6504 	addi	r2,r2,-620
 40031c0:	003e6406 	br	4002b54 <__ram_exceptions_end+0xfbfe2910>
 40031c4:	e0001115 	stw	zero,68(fp)
 40031c8:	000b883a 	mov	r5,zero
 40031cc:	e009883a 	mov	r4,fp
 40031d0:	4005b180 	call	4005b18 <_Balloc>
 40031d4:	01bfffc4 	movi	r6,-1
 40031d8:	01c00044 	movi	r7,1
 40031dc:	d8800715 	stw	r2,28(sp)
 40031e0:	d9800c15 	stw	r6,48(sp)
 40031e4:	e0801015 	stw	r2,64(fp)
 40031e8:	d8000315 	stw	zero,12(sp)
 40031ec:	d9c00b15 	stw	r7,44(sp)
 40031f0:	d9800615 	stw	r6,24(sp)
 40031f4:	d8002215 	stw	zero,136(sp)
 40031f8:	d8800117 	ldw	r2,4(sp)
 40031fc:	10008916 	blt	r2,zero,4003424 <_dtoa_r+0x990>
 4003200:	d9000517 	ldw	r4,20(sp)
 4003204:	00c00384 	movi	r3,14
 4003208:	19008616 	blt	r3,r4,4003424 <_dtoa_r+0x990>
 400320c:	200490fa 	slli	r2,r4,3
 4003210:	00c10074 	movhi	r3,1025
 4003214:	d9802217 	ldw	r6,136(sp)
 4003218:	18ff8d04 	addi	r3,r3,-460
 400321c:	1885883a 	add	r2,r3,r2
 4003220:	14000017 	ldw	r16,0(r2)
 4003224:	14400117 	ldw	r17,4(r2)
 4003228:	30016316 	blt	r6,zero,40037b8 <_dtoa_r+0xd24>
 400322c:	800d883a 	mov	r6,r16
 4003230:	880f883a 	mov	r7,r17
 4003234:	9009883a 	mov	r4,r18
 4003238:	980b883a 	mov	r5,r19
 400323c:	400ae940 	call	400ae94 <__divdf3>
 4003240:	180b883a 	mov	r5,r3
 4003244:	1009883a 	mov	r4,r2
 4003248:	400c9e80 	call	400c9e8 <__fixdfsi>
 400324c:	1009883a 	mov	r4,r2
 4003250:	102b883a 	mov	r21,r2
 4003254:	400ca680 	call	400ca68 <__floatsidf>
 4003258:	800d883a 	mov	r6,r16
 400325c:	880f883a 	mov	r7,r17
 4003260:	1009883a 	mov	r4,r2
 4003264:	180b883a 	mov	r5,r3
 4003268:	400b9d40 	call	400b9d4 <__muldf3>
 400326c:	100d883a 	mov	r6,r2
 4003270:	180f883a 	mov	r7,r3
 4003274:	9009883a 	mov	r4,r18
 4003278:	980b883a 	mov	r5,r19
 400327c:	400c0ec0 	call	400c0ec <__subdf3>
 4003280:	d9c00717 	ldw	r7,28(sp)
 4003284:	1009883a 	mov	r4,r2
 4003288:	a8800c04 	addi	r2,r21,48
 400328c:	38800005 	stb	r2,0(r7)
 4003290:	3dc00044 	addi	r23,r7,1
 4003294:	d9c00617 	ldw	r7,24(sp)
 4003298:	01800044 	movi	r6,1
 400329c:	180b883a 	mov	r5,r3
 40032a0:	2005883a 	mov	r2,r4
 40032a4:	39803826 	beq	r7,r6,4003388 <_dtoa_r+0x8f4>
 40032a8:	000d883a 	mov	r6,zero
 40032ac:	01d00934 	movhi	r7,16420
 40032b0:	400b9d40 	call	400b9d4 <__muldf3>
 40032b4:	000d883a 	mov	r6,zero
 40032b8:	000f883a 	mov	r7,zero
 40032bc:	1009883a 	mov	r4,r2
 40032c0:	180b883a 	mov	r5,r3
 40032c4:	1025883a 	mov	r18,r2
 40032c8:	1827883a 	mov	r19,r3
 40032cc:	400b77c0 	call	400b77c <__eqdf2>
 40032d0:	103f9a26 	beq	r2,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 40032d4:	d9c00617 	ldw	r7,24(sp)
 40032d8:	d8c00717 	ldw	r3,28(sp)
 40032dc:	b829883a 	mov	r20,r23
 40032e0:	38bfffc4 	addi	r2,r7,-1
 40032e4:	18ad883a 	add	r22,r3,r2
 40032e8:	00000a06 	br	4003314 <_dtoa_r+0x880>
 40032ec:	400b9d40 	call	400b9d4 <__muldf3>
 40032f0:	000d883a 	mov	r6,zero
 40032f4:	000f883a 	mov	r7,zero
 40032f8:	1009883a 	mov	r4,r2
 40032fc:	180b883a 	mov	r5,r3
 4003300:	1025883a 	mov	r18,r2
 4003304:	1827883a 	mov	r19,r3
 4003308:	b829883a 	mov	r20,r23
 400330c:	400b77c0 	call	400b77c <__eqdf2>
 4003310:	103f8a26 	beq	r2,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 4003314:	800d883a 	mov	r6,r16
 4003318:	880f883a 	mov	r7,r17
 400331c:	9009883a 	mov	r4,r18
 4003320:	980b883a 	mov	r5,r19
 4003324:	400ae940 	call	400ae94 <__divdf3>
 4003328:	180b883a 	mov	r5,r3
 400332c:	1009883a 	mov	r4,r2
 4003330:	400c9e80 	call	400c9e8 <__fixdfsi>
 4003334:	1009883a 	mov	r4,r2
 4003338:	102b883a 	mov	r21,r2
 400333c:	400ca680 	call	400ca68 <__floatsidf>
 4003340:	800d883a 	mov	r6,r16
 4003344:	880f883a 	mov	r7,r17
 4003348:	1009883a 	mov	r4,r2
 400334c:	180b883a 	mov	r5,r3
 4003350:	400b9d40 	call	400b9d4 <__muldf3>
 4003354:	100d883a 	mov	r6,r2
 4003358:	180f883a 	mov	r7,r3
 400335c:	9009883a 	mov	r4,r18
 4003360:	980b883a 	mov	r5,r19
 4003364:	400c0ec0 	call	400c0ec <__subdf3>
 4003368:	aa000c04 	addi	r8,r21,48
 400336c:	a2000005 	stb	r8,0(r20)
 4003370:	000d883a 	mov	r6,zero
 4003374:	01d00934 	movhi	r7,16420
 4003378:	1009883a 	mov	r4,r2
 400337c:	180b883a 	mov	r5,r3
 4003380:	a5c00044 	addi	r23,r20,1
 4003384:	b53fd91e 	bne	r22,r20,40032ec <__ram_exceptions_end+0xfbfe30a8>
 4003388:	100d883a 	mov	r6,r2
 400338c:	180f883a 	mov	r7,r3
 4003390:	1009883a 	mov	r4,r2
 4003394:	180b883a 	mov	r5,r3
 4003398:	400a5e80 	call	400a5e8 <__adddf3>
 400339c:	100d883a 	mov	r6,r2
 40033a0:	180f883a 	mov	r7,r3
 40033a4:	8009883a 	mov	r4,r16
 40033a8:	880b883a 	mov	r5,r17
 40033ac:	1027883a 	mov	r19,r2
 40033b0:	1825883a 	mov	r18,r3
 40033b4:	400b8e00 	call	400b8e0 <__ledf2>
 40033b8:	10000816 	blt	r2,zero,40033dc <_dtoa_r+0x948>
 40033bc:	980d883a 	mov	r6,r19
 40033c0:	900f883a 	mov	r7,r18
 40033c4:	8009883a 	mov	r4,r16
 40033c8:	880b883a 	mov	r5,r17
 40033cc:	400b77c0 	call	400b77c <__eqdf2>
 40033d0:	103f5a1e 	bne	r2,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 40033d4:	ad40004c 	andi	r21,r21,1
 40033d8:	a83f5826 	beq	r21,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 40033dc:	bd3fffc3 	ldbu	r20,-1(r23)
 40033e0:	b8bfffc4 	addi	r2,r23,-1
 40033e4:	1007883a 	mov	r3,r2
 40033e8:	01400e44 	movi	r5,57
 40033ec:	d9800717 	ldw	r6,28(sp)
 40033f0:	00000506 	br	4003408 <_dtoa_r+0x974>
 40033f4:	18ffffc4 	addi	r3,r3,-1
 40033f8:	11824726 	beq	r2,r6,4003d18 <_dtoa_r+0x1284>
 40033fc:	1d000003 	ldbu	r20,0(r3)
 4003400:	102f883a 	mov	r23,r2
 4003404:	10bfffc4 	addi	r2,r2,-1
 4003408:	a1003fcc 	andi	r4,r20,255
 400340c:	2100201c 	xori	r4,r4,128
 4003410:	213fe004 	addi	r4,r4,-128
 4003414:	217ff726 	beq	r4,r5,40033f4 <__ram_exceptions_end+0xfbfe31b0>
 4003418:	a2000044 	addi	r8,r20,1
 400341c:	12000005 	stb	r8,0(r2)
 4003420:	003f4606 	br	400313c <__ram_exceptions_end+0xfbfe2ef8>
 4003424:	d9000b17 	ldw	r4,44(sp)
 4003428:	2000c826 	beq	r4,zero,400374c <_dtoa_r+0xcb8>
 400342c:	d9800317 	ldw	r6,12(sp)
 4003430:	00c00044 	movi	r3,1
 4003434:	1980f90e 	bge	r3,r6,400381c <_dtoa_r+0xd88>
 4003438:	d8800617 	ldw	r2,24(sp)
 400343c:	d8c00a17 	ldw	r3,40(sp)
 4003440:	157fffc4 	addi	r21,r2,-1
 4003444:	1d41f316 	blt	r3,r21,4003c14 <_dtoa_r+0x1180>
 4003448:	1d6bc83a 	sub	r21,r3,r21
 400344c:	d9c00617 	ldw	r7,24(sp)
 4003450:	3802aa16 	blt	r7,zero,4003efc <_dtoa_r+0x1468>
 4003454:	dd000817 	ldw	r20,32(sp)
 4003458:	d8800617 	ldw	r2,24(sp)
 400345c:	d8c00817 	ldw	r3,32(sp)
 4003460:	01400044 	movi	r5,1
 4003464:	e009883a 	mov	r4,fp
 4003468:	1887883a 	add	r3,r3,r2
 400346c:	d8c00815 	stw	r3,32(sp)
 4003470:	b0ad883a 	add	r22,r22,r2
 4003474:	4005f240 	call	4005f24 <__i2b>
 4003478:	1023883a 	mov	r17,r2
 400347c:	a0000826 	beq	r20,zero,40034a0 <_dtoa_r+0xa0c>
 4003480:	0580070e 	bge	zero,r22,40034a0 <_dtoa_r+0xa0c>
 4003484:	a005883a 	mov	r2,r20
 4003488:	b500b916 	blt	r22,r20,4003770 <_dtoa_r+0xcdc>
 400348c:	d9000817 	ldw	r4,32(sp)
 4003490:	a0a9c83a 	sub	r20,r20,r2
 4003494:	b0adc83a 	sub	r22,r22,r2
 4003498:	2089c83a 	sub	r4,r4,r2
 400349c:	d9000815 	stw	r4,32(sp)
 40034a0:	d9800a17 	ldw	r6,40(sp)
 40034a4:	0181810e 	bge	zero,r6,4003aac <_dtoa_r+0x1018>
 40034a8:	d9c00b17 	ldw	r7,44(sp)
 40034ac:	3800b326 	beq	r7,zero,400377c <_dtoa_r+0xce8>
 40034b0:	a800b226 	beq	r21,zero,400377c <_dtoa_r+0xce8>
 40034b4:	880b883a 	mov	r5,r17
 40034b8:	a80d883a 	mov	r6,r21
 40034bc:	e009883a 	mov	r4,fp
 40034c0:	40061580 	call	4006158 <__pow5mult>
 40034c4:	d9800917 	ldw	r6,36(sp)
 40034c8:	100b883a 	mov	r5,r2
 40034cc:	e009883a 	mov	r4,fp
 40034d0:	1023883a 	mov	r17,r2
 40034d4:	4005f600 	call	4005f60 <__multiply>
 40034d8:	1021883a 	mov	r16,r2
 40034dc:	d8800a17 	ldw	r2,40(sp)
 40034e0:	d9400917 	ldw	r5,36(sp)
 40034e4:	e009883a 	mov	r4,fp
 40034e8:	1545c83a 	sub	r2,r2,r21
 40034ec:	d8800a15 	stw	r2,40(sp)
 40034f0:	4005bc00 	call	4005bc0 <_Bfree>
 40034f4:	d8c00a17 	ldw	r3,40(sp)
 40034f8:	18009f1e 	bne	r3,zero,4003778 <_dtoa_r+0xce4>
 40034fc:	05c00044 	movi	r23,1
 4003500:	e009883a 	mov	r4,fp
 4003504:	b80b883a 	mov	r5,r23
 4003508:	4005f240 	call	4005f24 <__i2b>
 400350c:	d9000d17 	ldw	r4,52(sp)
 4003510:	102b883a 	mov	r21,r2
 4003514:	2000ce26 	beq	r4,zero,4003850 <_dtoa_r+0xdbc>
 4003518:	200d883a 	mov	r6,r4
 400351c:	100b883a 	mov	r5,r2
 4003520:	e009883a 	mov	r4,fp
 4003524:	40061580 	call	4006158 <__pow5mult>
 4003528:	d9800317 	ldw	r6,12(sp)
 400352c:	102b883a 	mov	r21,r2
 4003530:	b981810e 	bge	r23,r6,4003b38 <_dtoa_r+0x10a4>
 4003534:	0027883a 	mov	r19,zero
 4003538:	a8800417 	ldw	r2,16(r21)
 400353c:	05c00804 	movi	r23,32
 4003540:	10800104 	addi	r2,r2,4
 4003544:	1085883a 	add	r2,r2,r2
 4003548:	1085883a 	add	r2,r2,r2
 400354c:	a885883a 	add	r2,r21,r2
 4003550:	11000017 	ldw	r4,0(r2)
 4003554:	4005e0c0 	call	4005e0c <__hi0bits>
 4003558:	b885c83a 	sub	r2,r23,r2
 400355c:	1585883a 	add	r2,r2,r22
 4003560:	108007cc 	andi	r2,r2,31
 4003564:	1000b326 	beq	r2,zero,4003834 <_dtoa_r+0xda0>
 4003568:	00c00804 	movi	r3,32
 400356c:	1887c83a 	sub	r3,r3,r2
 4003570:	01000104 	movi	r4,4
 4003574:	20c2cd0e 	bge	r4,r3,40040ac <_dtoa_r+0x1618>
 4003578:	00c00704 	movi	r3,28
 400357c:	1885c83a 	sub	r2,r3,r2
 4003580:	d8c00817 	ldw	r3,32(sp)
 4003584:	a0a9883a 	add	r20,r20,r2
 4003588:	b0ad883a 	add	r22,r22,r2
 400358c:	1887883a 	add	r3,r3,r2
 4003590:	d8c00815 	stw	r3,32(sp)
 4003594:	d9800817 	ldw	r6,32(sp)
 4003598:	0180040e 	bge	zero,r6,40035ac <_dtoa_r+0xb18>
 400359c:	800b883a 	mov	r5,r16
 40035a0:	e009883a 	mov	r4,fp
 40035a4:	40062980 	call	4006298 <__lshift>
 40035a8:	1021883a 	mov	r16,r2
 40035ac:	0580050e 	bge	zero,r22,40035c4 <_dtoa_r+0xb30>
 40035b0:	a80b883a 	mov	r5,r21
 40035b4:	b00d883a 	mov	r6,r22
 40035b8:	e009883a 	mov	r4,fp
 40035bc:	40062980 	call	4006298 <__lshift>
 40035c0:	102b883a 	mov	r21,r2
 40035c4:	d9c00e17 	ldw	r7,56(sp)
 40035c8:	3801211e 	bne	r7,zero,4003a50 <_dtoa_r+0xfbc>
 40035cc:	d9800617 	ldw	r6,24(sp)
 40035d0:	0181380e 	bge	zero,r6,4003ab4 <_dtoa_r+0x1020>
 40035d4:	d8c00b17 	ldw	r3,44(sp)
 40035d8:	1800ab1e 	bne	r3,zero,4003888 <_dtoa_r+0xdf4>
 40035dc:	dc800717 	ldw	r18,28(sp)
 40035e0:	dcc00617 	ldw	r19,24(sp)
 40035e4:	9029883a 	mov	r20,r18
 40035e8:	00000206 	br	40035f4 <_dtoa_r+0xb60>
 40035ec:	4005be80 	call	4005be8 <__multadd>
 40035f0:	1021883a 	mov	r16,r2
 40035f4:	a80b883a 	mov	r5,r21
 40035f8:	8009883a 	mov	r4,r16
 40035fc:	40028940 	call	4002894 <quorem>
 4003600:	10800c04 	addi	r2,r2,48
 4003604:	90800005 	stb	r2,0(r18)
 4003608:	94800044 	addi	r18,r18,1
 400360c:	9507c83a 	sub	r3,r18,r20
 4003610:	000f883a 	mov	r7,zero
 4003614:	01800284 	movi	r6,10
 4003618:	800b883a 	mov	r5,r16
 400361c:	e009883a 	mov	r4,fp
 4003620:	1cfff216 	blt	r3,r19,40035ec <__ram_exceptions_end+0xfbfe33a8>
 4003624:	1011883a 	mov	r8,r2
 4003628:	d8800617 	ldw	r2,24(sp)
 400362c:	0082370e 	bge	zero,r2,4003f0c <_dtoa_r+0x1478>
 4003630:	d9000717 	ldw	r4,28(sp)
 4003634:	0025883a 	mov	r18,zero
 4003638:	20af883a 	add	r23,r4,r2
 400363c:	01800044 	movi	r6,1
 4003640:	800b883a 	mov	r5,r16
 4003644:	e009883a 	mov	r4,fp
 4003648:	da001715 	stw	r8,92(sp)
 400364c:	40062980 	call	4006298 <__lshift>
 4003650:	a80b883a 	mov	r5,r21
 4003654:	1009883a 	mov	r4,r2
 4003658:	d8800915 	stw	r2,36(sp)
 400365c:	40063e00 	call	40063e0 <__mcmp>
 4003660:	da001717 	ldw	r8,92(sp)
 4003664:	0081800e 	bge	zero,r2,4003c68 <_dtoa_r+0x11d4>
 4003668:	b93fffc3 	ldbu	r4,-1(r23)
 400366c:	b8bfffc4 	addi	r2,r23,-1
 4003670:	1007883a 	mov	r3,r2
 4003674:	01800e44 	movi	r6,57
 4003678:	d9c00717 	ldw	r7,28(sp)
 400367c:	00000506 	br	4003694 <_dtoa_r+0xc00>
 4003680:	18ffffc4 	addi	r3,r3,-1
 4003684:	11c12326 	beq	r2,r7,4003b14 <_dtoa_r+0x1080>
 4003688:	19000003 	ldbu	r4,0(r3)
 400368c:	102f883a 	mov	r23,r2
 4003690:	10bfffc4 	addi	r2,r2,-1
 4003694:	21403fcc 	andi	r5,r4,255
 4003698:	2940201c 	xori	r5,r5,128
 400369c:	297fe004 	addi	r5,r5,-128
 40036a0:	29bff726 	beq	r5,r6,4003680 <__ram_exceptions_end+0xfbfe343c>
 40036a4:	21000044 	addi	r4,r4,1
 40036a8:	11000005 	stb	r4,0(r2)
 40036ac:	a80b883a 	mov	r5,r21
 40036b0:	e009883a 	mov	r4,fp
 40036b4:	4005bc00 	call	4005bc0 <_Bfree>
 40036b8:	883ea026 	beq	r17,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 40036bc:	90000426 	beq	r18,zero,40036d0 <_dtoa_r+0xc3c>
 40036c0:	94400326 	beq	r18,r17,40036d0 <_dtoa_r+0xc3c>
 40036c4:	900b883a 	mov	r5,r18
 40036c8:	e009883a 	mov	r4,fp
 40036cc:	4005bc00 	call	4005bc0 <_Bfree>
 40036d0:	880b883a 	mov	r5,r17
 40036d4:	e009883a 	mov	r4,fp
 40036d8:	4005bc00 	call	4005bc0 <_Bfree>
 40036dc:	003e9706 	br	400313c <__ram_exceptions_end+0xfbfe2ef8>
 40036e0:	01800044 	movi	r6,1
 40036e4:	d9800e15 	stw	r6,56(sp)
 40036e8:	003d9606 	br	4002d44 <__ram_exceptions_end+0xfbfe2b00>
 40036ec:	d8800817 	ldw	r2,32(sp)
 40036f0:	d8c00517 	ldw	r3,20(sp)
 40036f4:	d8000d15 	stw	zero,52(sp)
 40036f8:	10c5c83a 	sub	r2,r2,r3
 40036fc:	00c9c83a 	sub	r4,zero,r3
 4003700:	d8800815 	stw	r2,32(sp)
 4003704:	d9000a15 	stw	r4,40(sp)
 4003708:	003d9706 	br	4002d68 <__ram_exceptions_end+0xfbfe2b24>
 400370c:	05adc83a 	sub	r22,zero,r22
 4003710:	dd800815 	stw	r22,32(sp)
 4003714:	002d883a 	mov	r22,zero
 4003718:	003d8e06 	br	4002d54 <__ram_exceptions_end+0xfbfe2b10>
 400371c:	d9000517 	ldw	r4,20(sp)
 4003720:	400ca680 	call	400ca68 <__floatsidf>
 4003724:	100d883a 	mov	r6,r2
 4003728:	180f883a 	mov	r7,r3
 400372c:	a009883a 	mov	r4,r20
 4003730:	880b883a 	mov	r5,r17
 4003734:	400b77c0 	call	400b77c <__eqdf2>
 4003738:	103d7126 	beq	r2,zero,4002d00 <__ram_exceptions_end+0xfbfe2abc>
 400373c:	d9c00517 	ldw	r7,20(sp)
 4003740:	39ffffc4 	addi	r7,r7,-1
 4003744:	d9c00515 	stw	r7,20(sp)
 4003748:	003d6d06 	br	4002d00 <__ram_exceptions_end+0xfbfe2abc>
 400374c:	dd400a17 	ldw	r21,40(sp)
 4003750:	dd000817 	ldw	r20,32(sp)
 4003754:	0023883a 	mov	r17,zero
 4003758:	003f4806 	br	400347c <__ram_exceptions_end+0xfbfe3238>
 400375c:	10e3c83a 	sub	r17,r2,r3
 4003760:	9448983a 	sll	r4,r18,r17
 4003764:	003d3206 	br	4002c30 <__ram_exceptions_end+0xfbfe29ec>
 4003768:	d8000e15 	stw	zero,56(sp)
 400376c:	003d7506 	br	4002d44 <__ram_exceptions_end+0xfbfe2b00>
 4003770:	b005883a 	mov	r2,r22
 4003774:	003f4506 	br	400348c <__ram_exceptions_end+0xfbfe3248>
 4003778:	dc000915 	stw	r16,36(sp)
 400377c:	d9800a17 	ldw	r6,40(sp)
 4003780:	d9400917 	ldw	r5,36(sp)
 4003784:	e009883a 	mov	r4,fp
 4003788:	40061580 	call	4006158 <__pow5mult>
 400378c:	1021883a 	mov	r16,r2
 4003790:	003f5a06 	br	40034fc <__ram_exceptions_end+0xfbfe32b8>
 4003794:	01c00044 	movi	r7,1
 4003798:	d9c00b15 	stw	r7,44(sp)
 400379c:	d8802217 	ldw	r2,136(sp)
 40037a0:	0081280e 	bge	zero,r2,4003c44 <_dtoa_r+0x11b0>
 40037a4:	100d883a 	mov	r6,r2
 40037a8:	1021883a 	mov	r16,r2
 40037ac:	d8800c15 	stw	r2,48(sp)
 40037b0:	d8800615 	stw	r2,24(sp)
 40037b4:	003d8806 	br	4002dd8 <__ram_exceptions_end+0xfbfe2b94>
 40037b8:	d8800617 	ldw	r2,24(sp)
 40037bc:	00be9b16 	blt	zero,r2,400322c <__ram_exceptions_end+0xfbfe2fe8>
 40037c0:	10010f1e 	bne	r2,zero,4003c00 <_dtoa_r+0x116c>
 40037c4:	880b883a 	mov	r5,r17
 40037c8:	000d883a 	mov	r6,zero
 40037cc:	01d00534 	movhi	r7,16404
 40037d0:	8009883a 	mov	r4,r16
 40037d4:	400b9d40 	call	400b9d4 <__muldf3>
 40037d8:	900d883a 	mov	r6,r18
 40037dc:	980f883a 	mov	r7,r19
 40037e0:	1009883a 	mov	r4,r2
 40037e4:	180b883a 	mov	r5,r3
 40037e8:	400b8040 	call	400b804 <__gedf2>
 40037ec:	002b883a 	mov	r21,zero
 40037f0:	0023883a 	mov	r17,zero
 40037f4:	1000bf16 	blt	r2,zero,4003af4 <_dtoa_r+0x1060>
 40037f8:	d9802217 	ldw	r6,136(sp)
 40037fc:	ddc00717 	ldw	r23,28(sp)
 4003800:	018c303a 	nor	r6,zero,r6
 4003804:	d9800515 	stw	r6,20(sp)
 4003808:	a80b883a 	mov	r5,r21
 400380c:	e009883a 	mov	r4,fp
 4003810:	4005bc00 	call	4005bc0 <_Bfree>
 4003814:	883e4926 	beq	r17,zero,400313c <__ram_exceptions_end+0xfbfe2ef8>
 4003818:	003fad06 	br	40036d0 <__ram_exceptions_end+0xfbfe348c>
 400381c:	d9c01117 	ldw	r7,68(sp)
 4003820:	3801bc26 	beq	r7,zero,4003f14 <_dtoa_r+0x1480>
 4003824:	10810cc4 	addi	r2,r2,1075
 4003828:	dd400a17 	ldw	r21,40(sp)
 400382c:	dd000817 	ldw	r20,32(sp)
 4003830:	003f0a06 	br	400345c <__ram_exceptions_end+0xfbfe3218>
 4003834:	00800704 	movi	r2,28
 4003838:	d9000817 	ldw	r4,32(sp)
 400383c:	a0a9883a 	add	r20,r20,r2
 4003840:	b0ad883a 	add	r22,r22,r2
 4003844:	2089883a 	add	r4,r4,r2
 4003848:	d9000815 	stw	r4,32(sp)
 400384c:	003f5106 	br	4003594 <__ram_exceptions_end+0xfbfe3350>
 4003850:	d8c00317 	ldw	r3,12(sp)
 4003854:	b8c1fc0e 	bge	r23,r3,4004048 <_dtoa_r+0x15b4>
 4003858:	0027883a 	mov	r19,zero
 400385c:	b805883a 	mov	r2,r23
 4003860:	003f3e06 	br	400355c <__ram_exceptions_end+0xfbfe3318>
 4003864:	880b883a 	mov	r5,r17
 4003868:	e009883a 	mov	r4,fp
 400386c:	000f883a 	mov	r7,zero
 4003870:	01800284 	movi	r6,10
 4003874:	4005be80 	call	4005be8 <__multadd>
 4003878:	d9000c17 	ldw	r4,48(sp)
 400387c:	1023883a 	mov	r17,r2
 4003880:	0102040e 	bge	zero,r4,4004094 <_dtoa_r+0x1600>
 4003884:	d9000615 	stw	r4,24(sp)
 4003888:	0500050e 	bge	zero,r20,40038a0 <_dtoa_r+0xe0c>
 400388c:	880b883a 	mov	r5,r17
 4003890:	a00d883a 	mov	r6,r20
 4003894:	e009883a 	mov	r4,fp
 4003898:	40062980 	call	4006298 <__lshift>
 400389c:	1023883a 	mov	r17,r2
 40038a0:	9801241e 	bne	r19,zero,4003d34 <_dtoa_r+0x12a0>
 40038a4:	8829883a 	mov	r20,r17
 40038a8:	d9000617 	ldw	r4,24(sp)
 40038ac:	dcc00717 	ldw	r19,28(sp)
 40038b0:	9480004c 	andi	r18,r18,1
 40038b4:	20bfffc4 	addi	r2,r4,-1
 40038b8:	9885883a 	add	r2,r19,r2
 40038bc:	d8800415 	stw	r2,16(sp)
 40038c0:	dc800615 	stw	r18,24(sp)
 40038c4:	a80b883a 	mov	r5,r21
 40038c8:	8009883a 	mov	r4,r16
 40038cc:	40028940 	call	4002894 <quorem>
 40038d0:	880b883a 	mov	r5,r17
 40038d4:	8009883a 	mov	r4,r16
 40038d8:	102f883a 	mov	r23,r2
 40038dc:	40063e00 	call	40063e0 <__mcmp>
 40038e0:	a80b883a 	mov	r5,r21
 40038e4:	a00d883a 	mov	r6,r20
 40038e8:	e009883a 	mov	r4,fp
 40038ec:	102d883a 	mov	r22,r2
 40038f0:	40064400 	call	4006440 <__mdiff>
 40038f4:	1007883a 	mov	r3,r2
 40038f8:	10800317 	ldw	r2,12(r2)
 40038fc:	bc800c04 	addi	r18,r23,48
 4003900:	180b883a 	mov	r5,r3
 4003904:	10004e1e 	bne	r2,zero,4003a40 <_dtoa_r+0xfac>
 4003908:	8009883a 	mov	r4,r16
 400390c:	d8c01615 	stw	r3,88(sp)
 4003910:	40063e00 	call	40063e0 <__mcmp>
 4003914:	d8c01617 	ldw	r3,88(sp)
 4003918:	e009883a 	mov	r4,fp
 400391c:	d8801615 	stw	r2,88(sp)
 4003920:	180b883a 	mov	r5,r3
 4003924:	4005bc00 	call	4005bc0 <_Bfree>
 4003928:	d8801617 	ldw	r2,88(sp)
 400392c:	1000041e 	bne	r2,zero,4003940 <_dtoa_r+0xeac>
 4003930:	d9800317 	ldw	r6,12(sp)
 4003934:	3000021e 	bne	r6,zero,4003940 <_dtoa_r+0xeac>
 4003938:	d8c00617 	ldw	r3,24(sp)
 400393c:	18003726 	beq	r3,zero,4003a1c <_dtoa_r+0xf88>
 4003940:	b0002016 	blt	r22,zero,40039c4 <_dtoa_r+0xf30>
 4003944:	b000041e 	bne	r22,zero,4003958 <_dtoa_r+0xec4>
 4003948:	d9000317 	ldw	r4,12(sp)
 400394c:	2000021e 	bne	r4,zero,4003958 <_dtoa_r+0xec4>
 4003950:	d8c00617 	ldw	r3,24(sp)
 4003954:	18001b26 	beq	r3,zero,40039c4 <_dtoa_r+0xf30>
 4003958:	00810716 	blt	zero,r2,4003d78 <_dtoa_r+0x12e4>
 400395c:	d8c00417 	ldw	r3,16(sp)
 4003960:	9d800044 	addi	r22,r19,1
 4003964:	9c800005 	stb	r18,0(r19)
 4003968:	b02f883a 	mov	r23,r22
 400396c:	98c10626 	beq	r19,r3,4003d88 <_dtoa_r+0x12f4>
 4003970:	800b883a 	mov	r5,r16
 4003974:	000f883a 	mov	r7,zero
 4003978:	01800284 	movi	r6,10
 400397c:	e009883a 	mov	r4,fp
 4003980:	4005be80 	call	4005be8 <__multadd>
 4003984:	1021883a 	mov	r16,r2
 4003988:	000f883a 	mov	r7,zero
 400398c:	01800284 	movi	r6,10
 4003990:	880b883a 	mov	r5,r17
 4003994:	e009883a 	mov	r4,fp
 4003998:	8d002526 	beq	r17,r20,4003a30 <_dtoa_r+0xf9c>
 400399c:	4005be80 	call	4005be8 <__multadd>
 40039a0:	a00b883a 	mov	r5,r20
 40039a4:	000f883a 	mov	r7,zero
 40039a8:	01800284 	movi	r6,10
 40039ac:	e009883a 	mov	r4,fp
 40039b0:	1023883a 	mov	r17,r2
 40039b4:	4005be80 	call	4005be8 <__multadd>
 40039b8:	1029883a 	mov	r20,r2
 40039bc:	b027883a 	mov	r19,r22
 40039c0:	003fc006 	br	40038c4 <__ram_exceptions_end+0xfbfe3680>
 40039c4:	9011883a 	mov	r8,r18
 40039c8:	00800e0e 	bge	zero,r2,4003a04 <_dtoa_r+0xf70>
 40039cc:	800b883a 	mov	r5,r16
 40039d0:	01800044 	movi	r6,1
 40039d4:	e009883a 	mov	r4,fp
 40039d8:	da001715 	stw	r8,92(sp)
 40039dc:	40062980 	call	4006298 <__lshift>
 40039e0:	a80b883a 	mov	r5,r21
 40039e4:	1009883a 	mov	r4,r2
 40039e8:	1021883a 	mov	r16,r2
 40039ec:	40063e00 	call	40063e0 <__mcmp>
 40039f0:	da001717 	ldw	r8,92(sp)
 40039f4:	0081960e 	bge	zero,r2,4004050 <_dtoa_r+0x15bc>
 40039f8:	00800e44 	movi	r2,57
 40039fc:	40817026 	beq	r8,r2,4003fc0 <_dtoa_r+0x152c>
 4003a00:	ba000c44 	addi	r8,r23,49
 4003a04:	8825883a 	mov	r18,r17
 4003a08:	9dc00044 	addi	r23,r19,1
 4003a0c:	9a000005 	stb	r8,0(r19)
 4003a10:	a023883a 	mov	r17,r20
 4003a14:	dc000915 	stw	r16,36(sp)
 4003a18:	003f2406 	br	40036ac <__ram_exceptions_end+0xfbfe3468>
 4003a1c:	00800e44 	movi	r2,57
 4003a20:	9011883a 	mov	r8,r18
 4003a24:	90816626 	beq	r18,r2,4003fc0 <_dtoa_r+0x152c>
 4003a28:	05bff516 	blt	zero,r22,4003a00 <__ram_exceptions_end+0xfbfe37bc>
 4003a2c:	003ff506 	br	4003a04 <__ram_exceptions_end+0xfbfe37c0>
 4003a30:	4005be80 	call	4005be8 <__multadd>
 4003a34:	1023883a 	mov	r17,r2
 4003a38:	1029883a 	mov	r20,r2
 4003a3c:	003fdf06 	br	40039bc <__ram_exceptions_end+0xfbfe3778>
 4003a40:	e009883a 	mov	r4,fp
 4003a44:	4005bc00 	call	4005bc0 <_Bfree>
 4003a48:	00800044 	movi	r2,1
 4003a4c:	003fbc06 	br	4003940 <__ram_exceptions_end+0xfbfe36fc>
 4003a50:	a80b883a 	mov	r5,r21
 4003a54:	8009883a 	mov	r4,r16
 4003a58:	40063e00 	call	40063e0 <__mcmp>
 4003a5c:	103edb0e 	bge	r2,zero,40035cc <__ram_exceptions_end+0xfbfe3388>
 4003a60:	800b883a 	mov	r5,r16
 4003a64:	000f883a 	mov	r7,zero
 4003a68:	01800284 	movi	r6,10
 4003a6c:	e009883a 	mov	r4,fp
 4003a70:	4005be80 	call	4005be8 <__multadd>
 4003a74:	1021883a 	mov	r16,r2
 4003a78:	d8800517 	ldw	r2,20(sp)
 4003a7c:	d8c00b17 	ldw	r3,44(sp)
 4003a80:	10bfffc4 	addi	r2,r2,-1
 4003a84:	d8800515 	stw	r2,20(sp)
 4003a88:	183f761e 	bne	r3,zero,4003864 <__ram_exceptions_end+0xfbfe3620>
 4003a8c:	d9000c17 	ldw	r4,48(sp)
 4003a90:	0101730e 	bge	zero,r4,4004060 <_dtoa_r+0x15cc>
 4003a94:	d9000615 	stw	r4,24(sp)
 4003a98:	003ed006 	br	40035dc <__ram_exceptions_end+0xfbfe3398>
 4003a9c:	00800084 	movi	r2,2
 4003aa0:	3081861e 	bne	r6,r2,40040bc <_dtoa_r+0x1628>
 4003aa4:	d8000b15 	stw	zero,44(sp)
 4003aa8:	003f3c06 	br	400379c <__ram_exceptions_end+0xfbfe3558>
 4003aac:	dc000917 	ldw	r16,36(sp)
 4003ab0:	003e9206 	br	40034fc <__ram_exceptions_end+0xfbfe32b8>
 4003ab4:	d9c00317 	ldw	r7,12(sp)
 4003ab8:	00800084 	movi	r2,2
 4003abc:	11fec50e 	bge	r2,r7,40035d4 <__ram_exceptions_end+0xfbfe3390>
 4003ac0:	d9000617 	ldw	r4,24(sp)
 4003ac4:	20013c1e 	bne	r4,zero,4003fb8 <_dtoa_r+0x1524>
 4003ac8:	a80b883a 	mov	r5,r21
 4003acc:	000f883a 	mov	r7,zero
 4003ad0:	01800144 	movi	r6,5
 4003ad4:	e009883a 	mov	r4,fp
 4003ad8:	4005be80 	call	4005be8 <__multadd>
 4003adc:	100b883a 	mov	r5,r2
 4003ae0:	8009883a 	mov	r4,r16
 4003ae4:	102b883a 	mov	r21,r2
 4003ae8:	40063e00 	call	40063e0 <__mcmp>
 4003aec:	dc000915 	stw	r16,36(sp)
 4003af0:	00bf410e 	bge	zero,r2,40037f8 <__ram_exceptions_end+0xfbfe35b4>
 4003af4:	d9c00717 	ldw	r7,28(sp)
 4003af8:	00800c44 	movi	r2,49
 4003afc:	38800005 	stb	r2,0(r7)
 4003b00:	d8800517 	ldw	r2,20(sp)
 4003b04:	3dc00044 	addi	r23,r7,1
 4003b08:	10800044 	addi	r2,r2,1
 4003b0c:	d8800515 	stw	r2,20(sp)
 4003b10:	003f3d06 	br	4003808 <__ram_exceptions_end+0xfbfe35c4>
 4003b14:	d9800517 	ldw	r6,20(sp)
 4003b18:	d9c00717 	ldw	r7,28(sp)
 4003b1c:	00800c44 	movi	r2,49
 4003b20:	31800044 	addi	r6,r6,1
 4003b24:	d9800515 	stw	r6,20(sp)
 4003b28:	38800005 	stb	r2,0(r7)
 4003b2c:	003edf06 	br	40036ac <__ram_exceptions_end+0xfbfe3468>
 4003b30:	d8000b15 	stw	zero,44(sp)
 4003b34:	003c9f06 	br	4002db4 <__ram_exceptions_end+0xfbfe2b70>
 4003b38:	903e7e1e 	bne	r18,zero,4003534 <__ram_exceptions_end+0xfbfe32f0>
 4003b3c:	00800434 	movhi	r2,16
 4003b40:	10bfffc4 	addi	r2,r2,-1
 4003b44:	9884703a 	and	r2,r19,r2
 4003b48:	1000ea1e 	bne	r2,zero,4003ef4 <_dtoa_r+0x1460>
 4003b4c:	9cdffc2c 	andhi	r19,r19,32752
 4003b50:	9800e826 	beq	r19,zero,4003ef4 <_dtoa_r+0x1460>
 4003b54:	d9c00817 	ldw	r7,32(sp)
 4003b58:	b5800044 	addi	r22,r22,1
 4003b5c:	04c00044 	movi	r19,1
 4003b60:	39c00044 	addi	r7,r7,1
 4003b64:	d9c00815 	stw	r7,32(sp)
 4003b68:	d8800d17 	ldw	r2,52(sp)
 4003b6c:	103e721e 	bne	r2,zero,4003538 <__ram_exceptions_end+0xfbfe32f4>
 4003b70:	00800044 	movi	r2,1
 4003b74:	003e7906 	br	400355c <__ram_exceptions_end+0xfbfe3318>
 4003b78:	8009883a 	mov	r4,r16
 4003b7c:	400ca680 	call	400ca68 <__floatsidf>
 4003b80:	d9800f17 	ldw	r6,60(sp)
 4003b84:	d9c01017 	ldw	r7,64(sp)
 4003b88:	1009883a 	mov	r4,r2
 4003b8c:	180b883a 	mov	r5,r3
 4003b90:	400b9d40 	call	400b9d4 <__muldf3>
 4003b94:	000d883a 	mov	r6,zero
 4003b98:	01d00734 	movhi	r7,16412
 4003b9c:	1009883a 	mov	r4,r2
 4003ba0:	180b883a 	mov	r5,r3
 4003ba4:	400a5e80 	call	400a5e8 <__adddf3>
 4003ba8:	047f3034 	movhi	r17,64704
 4003bac:	1021883a 	mov	r16,r2
 4003bb0:	1c63883a 	add	r17,r3,r17
 4003bb4:	d9000f17 	ldw	r4,60(sp)
 4003bb8:	d9401017 	ldw	r5,64(sp)
 4003bbc:	000d883a 	mov	r6,zero
 4003bc0:	01d00534 	movhi	r7,16404
 4003bc4:	400c0ec0 	call	400c0ec <__subdf3>
 4003bc8:	800d883a 	mov	r6,r16
 4003bcc:	880f883a 	mov	r7,r17
 4003bd0:	1009883a 	mov	r4,r2
 4003bd4:	180b883a 	mov	r5,r3
 4003bd8:	102b883a 	mov	r21,r2
 4003bdc:	1829883a 	mov	r20,r3
 4003be0:	400b8040 	call	400b804 <__gedf2>
 4003be4:	00806c16 	blt	zero,r2,4003d98 <_dtoa_r+0x1304>
 4003be8:	89e0003c 	xorhi	r7,r17,32768
 4003bec:	800d883a 	mov	r6,r16
 4003bf0:	a809883a 	mov	r4,r21
 4003bf4:	a00b883a 	mov	r5,r20
 4003bf8:	400b8e00 	call	400b8e0 <__ledf2>
 4003bfc:	103d7e0e 	bge	r2,zero,40031f8 <__ram_exceptions_end+0xfbfe2fb4>
 4003c00:	002b883a 	mov	r21,zero
 4003c04:	0023883a 	mov	r17,zero
 4003c08:	003efb06 	br	40037f8 <__ram_exceptions_end+0xfbfe35b4>
 4003c0c:	d8800717 	ldw	r2,28(sp)
 4003c10:	003bd006 	br	4002b54 <__ram_exceptions_end+0xfbfe2910>
 4003c14:	d9000a17 	ldw	r4,40(sp)
 4003c18:	d9800d17 	ldw	r6,52(sp)
 4003c1c:	dd400a15 	stw	r21,40(sp)
 4003c20:	a905c83a 	sub	r2,r21,r4
 4003c24:	308d883a 	add	r6,r6,r2
 4003c28:	d9800d15 	stw	r6,52(sp)
 4003c2c:	002b883a 	mov	r21,zero
 4003c30:	003e0606 	br	400344c <__ram_exceptions_end+0xfbfe3208>
 4003c34:	9023883a 	mov	r17,r18
 4003c38:	9829883a 	mov	r20,r19
 4003c3c:	04000084 	movi	r16,2
 4003c40:	003c9206 	br	4002e8c <__ram_exceptions_end+0xfbfe2c48>
 4003c44:	04000044 	movi	r16,1
 4003c48:	dc000c15 	stw	r16,48(sp)
 4003c4c:	dc000615 	stw	r16,24(sp)
 4003c50:	dc002215 	stw	r16,136(sp)
 4003c54:	e0001115 	stw	zero,68(fp)
 4003c58:	000b883a 	mov	r5,zero
 4003c5c:	003c6906 	br	4002e04 <__ram_exceptions_end+0xfbfe2bc0>
 4003c60:	3021883a 	mov	r16,r6
 4003c64:	003ffb06 	br	4003c54 <__ram_exceptions_end+0xfbfe3a10>
 4003c68:	1000021e 	bne	r2,zero,4003c74 <_dtoa_r+0x11e0>
 4003c6c:	4200004c 	andi	r8,r8,1
 4003c70:	403e7d1e 	bne	r8,zero,4003668 <__ram_exceptions_end+0xfbfe3424>
 4003c74:	01000c04 	movi	r4,48
 4003c78:	00000106 	br	4003c80 <_dtoa_r+0x11ec>
 4003c7c:	102f883a 	mov	r23,r2
 4003c80:	b8bfffc4 	addi	r2,r23,-1
 4003c84:	10c00007 	ldb	r3,0(r2)
 4003c88:	193ffc26 	beq	r3,r4,4003c7c <__ram_exceptions_end+0xfbfe3a38>
 4003c8c:	003e8706 	br	40036ac <__ram_exceptions_end+0xfbfe3468>
 4003c90:	d8800517 	ldw	r2,20(sp)
 4003c94:	00a3c83a 	sub	r17,zero,r2
 4003c98:	8800a426 	beq	r17,zero,4003f2c <_dtoa_r+0x1498>
 4003c9c:	888003cc 	andi	r2,r17,15
 4003ca0:	100490fa 	slli	r2,r2,3
 4003ca4:	00c10074 	movhi	r3,1025
 4003ca8:	18ff8d04 	addi	r3,r3,-460
 4003cac:	1885883a 	add	r2,r3,r2
 4003cb0:	11800017 	ldw	r6,0(r2)
 4003cb4:	11c00117 	ldw	r7,4(r2)
 4003cb8:	9009883a 	mov	r4,r18
 4003cbc:	980b883a 	mov	r5,r19
 4003cc0:	8823d13a 	srai	r17,r17,4
 4003cc4:	400b9d40 	call	400b9d4 <__muldf3>
 4003cc8:	d8800f15 	stw	r2,60(sp)
 4003ccc:	d8c01015 	stw	r3,64(sp)
 4003cd0:	8800e826 	beq	r17,zero,4004074 <_dtoa_r+0x15e0>
 4003cd4:	05010074 	movhi	r20,1025
 4003cd8:	a53f8304 	addi	r20,r20,-500
 4003cdc:	04000084 	movi	r16,2
 4003ce0:	8980004c 	andi	r6,r17,1
 4003ce4:	1009883a 	mov	r4,r2
 4003ce8:	8823d07a 	srai	r17,r17,1
 4003cec:	180b883a 	mov	r5,r3
 4003cf0:	30000426 	beq	r6,zero,4003d04 <_dtoa_r+0x1270>
 4003cf4:	a1800017 	ldw	r6,0(r20)
 4003cf8:	a1c00117 	ldw	r7,4(r20)
 4003cfc:	84000044 	addi	r16,r16,1
 4003d00:	400b9d40 	call	400b9d4 <__muldf3>
 4003d04:	a5000204 	addi	r20,r20,8
 4003d08:	883ff51e 	bne	r17,zero,4003ce0 <__ram_exceptions_end+0xfbfe3a9c>
 4003d0c:	d8800f15 	stw	r2,60(sp)
 4003d10:	d8c01015 	stw	r3,64(sp)
 4003d14:	003c7606 	br	4002ef0 <__ram_exceptions_end+0xfbfe2cac>
 4003d18:	00c00c04 	movi	r3,48
 4003d1c:	10c00005 	stb	r3,0(r2)
 4003d20:	d8c00517 	ldw	r3,20(sp)
 4003d24:	bd3fffc3 	ldbu	r20,-1(r23)
 4003d28:	18c00044 	addi	r3,r3,1
 4003d2c:	d8c00515 	stw	r3,20(sp)
 4003d30:	003db906 	br	4003418 <__ram_exceptions_end+0xfbfe31d4>
 4003d34:	89400117 	ldw	r5,4(r17)
 4003d38:	e009883a 	mov	r4,fp
 4003d3c:	4005b180 	call	4005b18 <_Balloc>
 4003d40:	89800417 	ldw	r6,16(r17)
 4003d44:	89400304 	addi	r5,r17,12
 4003d48:	11000304 	addi	r4,r2,12
 4003d4c:	31800084 	addi	r6,r6,2
 4003d50:	318d883a 	add	r6,r6,r6
 4003d54:	318d883a 	add	r6,r6,r6
 4003d58:	1027883a 	mov	r19,r2
 4003d5c:	40058a80 	call	40058a8 <memcpy>
 4003d60:	01800044 	movi	r6,1
 4003d64:	980b883a 	mov	r5,r19
 4003d68:	e009883a 	mov	r4,fp
 4003d6c:	40062980 	call	4006298 <__lshift>
 4003d70:	1029883a 	mov	r20,r2
 4003d74:	003ecc06 	br	40038a8 <__ram_exceptions_end+0xfbfe3664>
 4003d78:	00800e44 	movi	r2,57
 4003d7c:	90809026 	beq	r18,r2,4003fc0 <_dtoa_r+0x152c>
 4003d80:	92000044 	addi	r8,r18,1
 4003d84:	003f1f06 	br	4003a04 <__ram_exceptions_end+0xfbfe37c0>
 4003d88:	9011883a 	mov	r8,r18
 4003d8c:	8825883a 	mov	r18,r17
 4003d90:	a023883a 	mov	r17,r20
 4003d94:	003e2906 	br	400363c <__ram_exceptions_end+0xfbfe33f8>
 4003d98:	002b883a 	mov	r21,zero
 4003d9c:	0023883a 	mov	r17,zero
 4003da0:	003f5406 	br	4003af4 <__ram_exceptions_end+0xfbfe38b0>
 4003da4:	61bfffc4 	addi	r6,r12,-1
 4003da8:	300490fa 	slli	r2,r6,3
 4003dac:	00c10074 	movhi	r3,1025
 4003db0:	18ff8d04 	addi	r3,r3,-460
 4003db4:	1885883a 	add	r2,r3,r2
 4003db8:	11000017 	ldw	r4,0(r2)
 4003dbc:	11400117 	ldw	r5,4(r2)
 4003dc0:	d8800717 	ldw	r2,28(sp)
 4003dc4:	880f883a 	mov	r7,r17
 4003dc8:	d9801215 	stw	r6,72(sp)
 4003dcc:	800d883a 	mov	r6,r16
 4003dd0:	db001615 	stw	r12,88(sp)
 4003dd4:	15c00044 	addi	r23,r2,1
 4003dd8:	400b9d40 	call	400b9d4 <__muldf3>
 4003ddc:	d9401017 	ldw	r5,64(sp)
 4003de0:	d9000f17 	ldw	r4,60(sp)
 4003de4:	d8c01515 	stw	r3,84(sp)
 4003de8:	d8801415 	stw	r2,80(sp)
 4003dec:	400c9e80 	call	400c9e8 <__fixdfsi>
 4003df0:	1009883a 	mov	r4,r2
 4003df4:	1021883a 	mov	r16,r2
 4003df8:	400ca680 	call	400ca68 <__floatsidf>
 4003dfc:	d9000f17 	ldw	r4,60(sp)
 4003e00:	d9401017 	ldw	r5,64(sp)
 4003e04:	100d883a 	mov	r6,r2
 4003e08:	180f883a 	mov	r7,r3
 4003e0c:	400c0ec0 	call	400c0ec <__subdf3>
 4003e10:	1829883a 	mov	r20,r3
 4003e14:	d8c00717 	ldw	r3,28(sp)
 4003e18:	84000c04 	addi	r16,r16,48
 4003e1c:	1023883a 	mov	r17,r2
 4003e20:	1c000005 	stb	r16,0(r3)
 4003e24:	db001617 	ldw	r12,88(sp)
 4003e28:	00800044 	movi	r2,1
 4003e2c:	60802226 	beq	r12,r2,4003eb8 <_dtoa_r+0x1424>
 4003e30:	d9c00717 	ldw	r7,28(sp)
 4003e34:	8805883a 	mov	r2,r17
 4003e38:	b82b883a 	mov	r21,r23
 4003e3c:	3b19883a 	add	r12,r7,r12
 4003e40:	6023883a 	mov	r17,r12
 4003e44:	a007883a 	mov	r3,r20
 4003e48:	dc800f15 	stw	r18,60(sp)
 4003e4c:	000d883a 	mov	r6,zero
 4003e50:	01d00934 	movhi	r7,16420
 4003e54:	1009883a 	mov	r4,r2
 4003e58:	180b883a 	mov	r5,r3
 4003e5c:	400b9d40 	call	400b9d4 <__muldf3>
 4003e60:	180b883a 	mov	r5,r3
 4003e64:	1009883a 	mov	r4,r2
 4003e68:	1829883a 	mov	r20,r3
 4003e6c:	1025883a 	mov	r18,r2
 4003e70:	400c9e80 	call	400c9e8 <__fixdfsi>
 4003e74:	1009883a 	mov	r4,r2
 4003e78:	1021883a 	mov	r16,r2
 4003e7c:	400ca680 	call	400ca68 <__floatsidf>
 4003e80:	100d883a 	mov	r6,r2
 4003e84:	180f883a 	mov	r7,r3
 4003e88:	9009883a 	mov	r4,r18
 4003e8c:	a00b883a 	mov	r5,r20
 4003e90:	84000c04 	addi	r16,r16,48
 4003e94:	400c0ec0 	call	400c0ec <__subdf3>
 4003e98:	ad400044 	addi	r21,r21,1
 4003e9c:	ac3fffc5 	stb	r16,-1(r21)
 4003ea0:	ac7fea1e 	bne	r21,r17,4003e4c <__ram_exceptions_end+0xfbfe3c08>
 4003ea4:	1023883a 	mov	r17,r2
 4003ea8:	d8801217 	ldw	r2,72(sp)
 4003eac:	dc800f17 	ldw	r18,60(sp)
 4003eb0:	1829883a 	mov	r20,r3
 4003eb4:	b8af883a 	add	r23,r23,r2
 4003eb8:	d9001417 	ldw	r4,80(sp)
 4003ebc:	d9401517 	ldw	r5,84(sp)
 4003ec0:	000d883a 	mov	r6,zero
 4003ec4:	01cff834 	movhi	r7,16352
 4003ec8:	400a5e80 	call	400a5e8 <__adddf3>
 4003ecc:	880d883a 	mov	r6,r17
 4003ed0:	a00f883a 	mov	r7,r20
 4003ed4:	1009883a 	mov	r4,r2
 4003ed8:	180b883a 	mov	r5,r3
 4003edc:	400b8e00 	call	400b8e0 <__ledf2>
 4003ee0:	10003e0e 	bge	r2,zero,4003fdc <_dtoa_r+0x1548>
 4003ee4:	d9001317 	ldw	r4,76(sp)
 4003ee8:	bd3fffc3 	ldbu	r20,-1(r23)
 4003eec:	d9000515 	stw	r4,20(sp)
 4003ef0:	003d3b06 	br	40033e0 <__ram_exceptions_end+0xfbfe319c>
 4003ef4:	0027883a 	mov	r19,zero
 4003ef8:	003f1b06 	br	4003b68 <__ram_exceptions_end+0xfbfe3924>
 4003efc:	d8800817 	ldw	r2,32(sp)
 4003f00:	11e9c83a 	sub	r20,r2,r7
 4003f04:	0005883a 	mov	r2,zero
 4003f08:	003d5406 	br	400345c <__ram_exceptions_end+0xfbfe3218>
 4003f0c:	00800044 	movi	r2,1
 4003f10:	003dc706 	br	4003630 <__ram_exceptions_end+0xfbfe33ec>
 4003f14:	d8c00217 	ldw	r3,8(sp)
 4003f18:	00800d84 	movi	r2,54
 4003f1c:	dd400a17 	ldw	r21,40(sp)
 4003f20:	10c5c83a 	sub	r2,r2,r3
 4003f24:	dd000817 	ldw	r20,32(sp)
 4003f28:	003d4c06 	br	400345c <__ram_exceptions_end+0xfbfe3218>
 4003f2c:	dc800f15 	stw	r18,60(sp)
 4003f30:	dcc01015 	stw	r19,64(sp)
 4003f34:	04000084 	movi	r16,2
 4003f38:	003bed06 	br	4002ef0 <__ram_exceptions_end+0xfbfe2cac>
 4003f3c:	d9000617 	ldw	r4,24(sp)
 4003f40:	203f0d26 	beq	r4,zero,4003b78 <__ram_exceptions_end+0xfbfe3934>
 4003f44:	d9800c17 	ldw	r6,48(sp)
 4003f48:	01bcab0e 	bge	zero,r6,40031f8 <__ram_exceptions_end+0xfbfe2fb4>
 4003f4c:	d9401017 	ldw	r5,64(sp)
 4003f50:	d9000f17 	ldw	r4,60(sp)
 4003f54:	000d883a 	mov	r6,zero
 4003f58:	01d00934 	movhi	r7,16420
 4003f5c:	400b9d40 	call	400b9d4 <__muldf3>
 4003f60:	81000044 	addi	r4,r16,1
 4003f64:	d8800f15 	stw	r2,60(sp)
 4003f68:	d8c01015 	stw	r3,64(sp)
 4003f6c:	400ca680 	call	400ca68 <__floatsidf>
 4003f70:	d9800f17 	ldw	r6,60(sp)
 4003f74:	d9c01017 	ldw	r7,64(sp)
 4003f78:	1009883a 	mov	r4,r2
 4003f7c:	180b883a 	mov	r5,r3
 4003f80:	400b9d40 	call	400b9d4 <__muldf3>
 4003f84:	01d00734 	movhi	r7,16412
 4003f88:	000d883a 	mov	r6,zero
 4003f8c:	1009883a 	mov	r4,r2
 4003f90:	180b883a 	mov	r5,r3
 4003f94:	400a5e80 	call	400a5e8 <__adddf3>
 4003f98:	d9c00517 	ldw	r7,20(sp)
 4003f9c:	047f3034 	movhi	r17,64704
 4003fa0:	1021883a 	mov	r16,r2
 4003fa4:	39ffffc4 	addi	r7,r7,-1
 4003fa8:	d9c01315 	stw	r7,76(sp)
 4003fac:	1c63883a 	add	r17,r3,r17
 4003fb0:	db000c17 	ldw	r12,48(sp)
 4003fb4:	003bea06 	br	4002f60 <__ram_exceptions_end+0xfbfe2d1c>
 4003fb8:	dc000915 	stw	r16,36(sp)
 4003fbc:	003e0e06 	br	40037f8 <__ram_exceptions_end+0xfbfe35b4>
 4003fc0:	01000e44 	movi	r4,57
 4003fc4:	8825883a 	mov	r18,r17
 4003fc8:	9dc00044 	addi	r23,r19,1
 4003fcc:	99000005 	stb	r4,0(r19)
 4003fd0:	a023883a 	mov	r17,r20
 4003fd4:	dc000915 	stw	r16,36(sp)
 4003fd8:	003da406 	br	400366c <__ram_exceptions_end+0xfbfe3428>
 4003fdc:	d9801417 	ldw	r6,80(sp)
 4003fe0:	d9c01517 	ldw	r7,84(sp)
 4003fe4:	0009883a 	mov	r4,zero
 4003fe8:	014ff834 	movhi	r5,16352
 4003fec:	400c0ec0 	call	400c0ec <__subdf3>
 4003ff0:	880d883a 	mov	r6,r17
 4003ff4:	a00f883a 	mov	r7,r20
 4003ff8:	1009883a 	mov	r4,r2
 4003ffc:	180b883a 	mov	r5,r3
 4004000:	400b8040 	call	400b804 <__gedf2>
 4004004:	00bc7c0e 	bge	zero,r2,40031f8 <__ram_exceptions_end+0xfbfe2fb4>
 4004008:	01000c04 	movi	r4,48
 400400c:	00000106 	br	4004014 <_dtoa_r+0x1580>
 4004010:	102f883a 	mov	r23,r2
 4004014:	b8bfffc4 	addi	r2,r23,-1
 4004018:	10c00007 	ldb	r3,0(r2)
 400401c:	193ffc26 	beq	r3,r4,4004010 <__ram_exceptions_end+0xfbfe3dcc>
 4004020:	d9801317 	ldw	r6,76(sp)
 4004024:	d9800515 	stw	r6,20(sp)
 4004028:	003c4406 	br	400313c <__ram_exceptions_end+0xfbfe2ef8>
 400402c:	d9801317 	ldw	r6,76(sp)
 4004030:	d9800515 	stw	r6,20(sp)
 4004034:	003cea06 	br	40033e0 <__ram_exceptions_end+0xfbfe319c>
 4004038:	dd800f17 	ldw	r22,60(sp)
 400403c:	dcc01017 	ldw	r19,64(sp)
 4004040:	dc801217 	ldw	r18,72(sp)
 4004044:	003c6c06 	br	40031f8 <__ram_exceptions_end+0xfbfe2fb4>
 4004048:	903e031e 	bne	r18,zero,4003858 <__ram_exceptions_end+0xfbfe3614>
 400404c:	003ebb06 	br	4003b3c <__ram_exceptions_end+0xfbfe38f8>
 4004050:	103e6c1e 	bne	r2,zero,4003a04 <__ram_exceptions_end+0xfbfe37c0>
 4004054:	4080004c 	andi	r2,r8,1
 4004058:	103e6a26 	beq	r2,zero,4003a04 <__ram_exceptions_end+0xfbfe37c0>
 400405c:	003e6606 	br	40039f8 <__ram_exceptions_end+0xfbfe37b4>
 4004060:	d8c00317 	ldw	r3,12(sp)
 4004064:	00800084 	movi	r2,2
 4004068:	10c02916 	blt	r2,r3,4004110 <_dtoa_r+0x167c>
 400406c:	d9000c17 	ldw	r4,48(sp)
 4004070:	003e8806 	br	4003a94 <__ram_exceptions_end+0xfbfe3850>
 4004074:	04000084 	movi	r16,2
 4004078:	003b9d06 	br	4002ef0 <__ram_exceptions_end+0xfbfe2cac>
 400407c:	d9001317 	ldw	r4,76(sp)
 4004080:	d9000515 	stw	r4,20(sp)
 4004084:	003cd606 	br	40033e0 <__ram_exceptions_end+0xfbfe319c>
 4004088:	d8801317 	ldw	r2,76(sp)
 400408c:	d8800515 	stw	r2,20(sp)
 4004090:	003c2a06 	br	400313c <__ram_exceptions_end+0xfbfe2ef8>
 4004094:	d9800317 	ldw	r6,12(sp)
 4004098:	00800084 	movi	r2,2
 400409c:	11801516 	blt	r2,r6,40040f4 <_dtoa_r+0x1660>
 40040a0:	d9c00c17 	ldw	r7,48(sp)
 40040a4:	d9c00615 	stw	r7,24(sp)
 40040a8:	003df706 	br	4003888 <__ram_exceptions_end+0xfbfe3644>
 40040ac:	193d3926 	beq	r3,r4,4003594 <__ram_exceptions_end+0xfbfe3350>
 40040b0:	00c00f04 	movi	r3,60
 40040b4:	1885c83a 	sub	r2,r3,r2
 40040b8:	003ddf06 	br	4003838 <__ram_exceptions_end+0xfbfe35f4>
 40040bc:	e009883a 	mov	r4,fp
 40040c0:	e0001115 	stw	zero,68(fp)
 40040c4:	000b883a 	mov	r5,zero
 40040c8:	4005b180 	call	4005b18 <_Balloc>
 40040cc:	d8800715 	stw	r2,28(sp)
 40040d0:	d8c00717 	ldw	r3,28(sp)
 40040d4:	00bfffc4 	movi	r2,-1
 40040d8:	01000044 	movi	r4,1
 40040dc:	d8800c15 	stw	r2,48(sp)
 40040e0:	e0c01015 	stw	r3,64(fp)
 40040e4:	d9000b15 	stw	r4,44(sp)
 40040e8:	d8800615 	stw	r2,24(sp)
 40040ec:	d8002215 	stw	zero,136(sp)
 40040f0:	003c4106 	br	40031f8 <__ram_exceptions_end+0xfbfe2fb4>
 40040f4:	d8c00c17 	ldw	r3,48(sp)
 40040f8:	d8c00615 	stw	r3,24(sp)
 40040fc:	003e7006 	br	4003ac0 <__ram_exceptions_end+0xfbfe387c>
 4004100:	04400044 	movi	r17,1
 4004104:	003b2006 	br	4002d88 <__ram_exceptions_end+0xfbfe2b44>
 4004108:	000b883a 	mov	r5,zero
 400410c:	003b3d06 	br	4002e04 <__ram_exceptions_end+0xfbfe2bc0>
 4004110:	d8800c17 	ldw	r2,48(sp)
 4004114:	d8800615 	stw	r2,24(sp)
 4004118:	003e6906 	br	4003ac0 <__ram_exceptions_end+0xfbfe387c>

0400411c <__sflush_r>:
 400411c:	2880030b 	ldhu	r2,12(r5)
 4004120:	defffb04 	addi	sp,sp,-20
 4004124:	dcc00315 	stw	r19,12(sp)
 4004128:	dc400115 	stw	r17,4(sp)
 400412c:	dfc00415 	stw	ra,16(sp)
 4004130:	dc800215 	stw	r18,8(sp)
 4004134:	dc000015 	stw	r16,0(sp)
 4004138:	10c0020c 	andi	r3,r2,8
 400413c:	2823883a 	mov	r17,r5
 4004140:	2027883a 	mov	r19,r4
 4004144:	1800311e 	bne	r3,zero,400420c <__sflush_r+0xf0>
 4004148:	28c00117 	ldw	r3,4(r5)
 400414c:	10820014 	ori	r2,r2,2048
 4004150:	2880030d 	sth	r2,12(r5)
 4004154:	00c04b0e 	bge	zero,r3,4004284 <__sflush_r+0x168>
 4004158:	8a000a17 	ldw	r8,40(r17)
 400415c:	40002326 	beq	r8,zero,40041ec <__sflush_r+0xd0>
 4004160:	9c000017 	ldw	r16,0(r19)
 4004164:	10c4000c 	andi	r3,r2,4096
 4004168:	98000015 	stw	zero,0(r19)
 400416c:	18004826 	beq	r3,zero,4004290 <__sflush_r+0x174>
 4004170:	89801417 	ldw	r6,80(r17)
 4004174:	10c0010c 	andi	r3,r2,4
 4004178:	18000626 	beq	r3,zero,4004194 <__sflush_r+0x78>
 400417c:	88c00117 	ldw	r3,4(r17)
 4004180:	88800c17 	ldw	r2,48(r17)
 4004184:	30cdc83a 	sub	r6,r6,r3
 4004188:	10000226 	beq	r2,zero,4004194 <__sflush_r+0x78>
 400418c:	88800f17 	ldw	r2,60(r17)
 4004190:	308dc83a 	sub	r6,r6,r2
 4004194:	89400717 	ldw	r5,28(r17)
 4004198:	000f883a 	mov	r7,zero
 400419c:	9809883a 	mov	r4,r19
 40041a0:	403ee83a 	callr	r8
 40041a4:	00ffffc4 	movi	r3,-1
 40041a8:	10c04426 	beq	r2,r3,40042bc <__sflush_r+0x1a0>
 40041ac:	88c0030b 	ldhu	r3,12(r17)
 40041b0:	89000417 	ldw	r4,16(r17)
 40041b4:	88000115 	stw	zero,4(r17)
 40041b8:	197dffcc 	andi	r5,r3,63487
 40041bc:	8940030d 	sth	r5,12(r17)
 40041c0:	89000015 	stw	r4,0(r17)
 40041c4:	18c4000c 	andi	r3,r3,4096
 40041c8:	18002c1e 	bne	r3,zero,400427c <__sflush_r+0x160>
 40041cc:	89400c17 	ldw	r5,48(r17)
 40041d0:	9c000015 	stw	r16,0(r19)
 40041d4:	28000526 	beq	r5,zero,40041ec <__sflush_r+0xd0>
 40041d8:	88801004 	addi	r2,r17,64
 40041dc:	28800226 	beq	r5,r2,40041e8 <__sflush_r+0xcc>
 40041e0:	9809883a 	mov	r4,r19
 40041e4:	40048880 	call	4004888 <_free_r>
 40041e8:	88000c15 	stw	zero,48(r17)
 40041ec:	0005883a 	mov	r2,zero
 40041f0:	dfc00417 	ldw	ra,16(sp)
 40041f4:	dcc00317 	ldw	r19,12(sp)
 40041f8:	dc800217 	ldw	r18,8(sp)
 40041fc:	dc400117 	ldw	r17,4(sp)
 4004200:	dc000017 	ldw	r16,0(sp)
 4004204:	dec00504 	addi	sp,sp,20
 4004208:	f800283a 	ret
 400420c:	2c800417 	ldw	r18,16(r5)
 4004210:	903ff626 	beq	r18,zero,40041ec <__ram_exceptions_end+0xfbfe3fa8>
 4004214:	2c000017 	ldw	r16,0(r5)
 4004218:	108000cc 	andi	r2,r2,3
 400421c:	2c800015 	stw	r18,0(r5)
 4004220:	84a1c83a 	sub	r16,r16,r18
 4004224:	1000131e 	bne	r2,zero,4004274 <__sflush_r+0x158>
 4004228:	28800517 	ldw	r2,20(r5)
 400422c:	88800215 	stw	r2,8(r17)
 4004230:	04000316 	blt	zero,r16,4004240 <__sflush_r+0x124>
 4004234:	003fed06 	br	40041ec <__ram_exceptions_end+0xfbfe3fa8>
 4004238:	90a5883a 	add	r18,r18,r2
 400423c:	043feb0e 	bge	zero,r16,40041ec <__ram_exceptions_end+0xfbfe3fa8>
 4004240:	88800917 	ldw	r2,36(r17)
 4004244:	89400717 	ldw	r5,28(r17)
 4004248:	800f883a 	mov	r7,r16
 400424c:	900d883a 	mov	r6,r18
 4004250:	9809883a 	mov	r4,r19
 4004254:	103ee83a 	callr	r2
 4004258:	80a1c83a 	sub	r16,r16,r2
 400425c:	00bff616 	blt	zero,r2,4004238 <__ram_exceptions_end+0xfbfe3ff4>
 4004260:	88c0030b 	ldhu	r3,12(r17)
 4004264:	00bfffc4 	movi	r2,-1
 4004268:	18c01014 	ori	r3,r3,64
 400426c:	88c0030d 	sth	r3,12(r17)
 4004270:	003fdf06 	br	40041f0 <__ram_exceptions_end+0xfbfe3fac>
 4004274:	0005883a 	mov	r2,zero
 4004278:	003fec06 	br	400422c <__ram_exceptions_end+0xfbfe3fe8>
 400427c:	88801415 	stw	r2,80(r17)
 4004280:	003fd206 	br	40041cc <__ram_exceptions_end+0xfbfe3f88>
 4004284:	28c00f17 	ldw	r3,60(r5)
 4004288:	00ffb316 	blt	zero,r3,4004158 <__ram_exceptions_end+0xfbfe3f14>
 400428c:	003fd706 	br	40041ec <__ram_exceptions_end+0xfbfe3fa8>
 4004290:	89400717 	ldw	r5,28(r17)
 4004294:	000d883a 	mov	r6,zero
 4004298:	01c00044 	movi	r7,1
 400429c:	9809883a 	mov	r4,r19
 40042a0:	403ee83a 	callr	r8
 40042a4:	100d883a 	mov	r6,r2
 40042a8:	00bfffc4 	movi	r2,-1
 40042ac:	30801426 	beq	r6,r2,4004300 <__sflush_r+0x1e4>
 40042b0:	8880030b 	ldhu	r2,12(r17)
 40042b4:	8a000a17 	ldw	r8,40(r17)
 40042b8:	003fae06 	br	4004174 <__ram_exceptions_end+0xfbfe3f30>
 40042bc:	98c00017 	ldw	r3,0(r19)
 40042c0:	183fba26 	beq	r3,zero,40041ac <__ram_exceptions_end+0xfbfe3f68>
 40042c4:	01000744 	movi	r4,29
 40042c8:	19000626 	beq	r3,r4,40042e4 <__sflush_r+0x1c8>
 40042cc:	01000584 	movi	r4,22
 40042d0:	19000426 	beq	r3,r4,40042e4 <__sflush_r+0x1c8>
 40042d4:	88c0030b 	ldhu	r3,12(r17)
 40042d8:	18c01014 	ori	r3,r3,64
 40042dc:	88c0030d 	sth	r3,12(r17)
 40042e0:	003fc306 	br	40041f0 <__ram_exceptions_end+0xfbfe3fac>
 40042e4:	8880030b 	ldhu	r2,12(r17)
 40042e8:	88c00417 	ldw	r3,16(r17)
 40042ec:	88000115 	stw	zero,4(r17)
 40042f0:	10bdffcc 	andi	r2,r2,63487
 40042f4:	8880030d 	sth	r2,12(r17)
 40042f8:	88c00015 	stw	r3,0(r17)
 40042fc:	003fb306 	br	40041cc <__ram_exceptions_end+0xfbfe3f88>
 4004300:	98800017 	ldw	r2,0(r19)
 4004304:	103fea26 	beq	r2,zero,40042b0 <__ram_exceptions_end+0xfbfe406c>
 4004308:	00c00744 	movi	r3,29
 400430c:	10c00226 	beq	r2,r3,4004318 <__sflush_r+0x1fc>
 4004310:	00c00584 	movi	r3,22
 4004314:	10c0031e 	bne	r2,r3,4004324 <__sflush_r+0x208>
 4004318:	9c000015 	stw	r16,0(r19)
 400431c:	0005883a 	mov	r2,zero
 4004320:	003fb306 	br	40041f0 <__ram_exceptions_end+0xfbfe3fac>
 4004324:	88c0030b 	ldhu	r3,12(r17)
 4004328:	3005883a 	mov	r2,r6
 400432c:	18c01014 	ori	r3,r3,64
 4004330:	88c0030d 	sth	r3,12(r17)
 4004334:	003fae06 	br	40041f0 <__ram_exceptions_end+0xfbfe3fac>

04004338 <_fflush_r>:
 4004338:	defffd04 	addi	sp,sp,-12
 400433c:	dc000115 	stw	r16,4(sp)
 4004340:	dfc00215 	stw	ra,8(sp)
 4004344:	2021883a 	mov	r16,r4
 4004348:	20000226 	beq	r4,zero,4004354 <_fflush_r+0x1c>
 400434c:	20800e17 	ldw	r2,56(r4)
 4004350:	10000c26 	beq	r2,zero,4004384 <_fflush_r+0x4c>
 4004354:	2880030f 	ldh	r2,12(r5)
 4004358:	1000051e 	bne	r2,zero,4004370 <_fflush_r+0x38>
 400435c:	0005883a 	mov	r2,zero
 4004360:	dfc00217 	ldw	ra,8(sp)
 4004364:	dc000117 	ldw	r16,4(sp)
 4004368:	dec00304 	addi	sp,sp,12
 400436c:	f800283a 	ret
 4004370:	8009883a 	mov	r4,r16
 4004374:	dfc00217 	ldw	ra,8(sp)
 4004378:	dc000117 	ldw	r16,4(sp)
 400437c:	dec00304 	addi	sp,sp,12
 4004380:	400411c1 	jmpi	400411c <__sflush_r>
 4004384:	d9400015 	stw	r5,0(sp)
 4004388:	40047140 	call	4004714 <__sinit>
 400438c:	d9400017 	ldw	r5,0(sp)
 4004390:	003ff006 	br	4004354 <__ram_exceptions_end+0xfbfe4110>

04004394 <fflush>:
 4004394:	20000526 	beq	r4,zero,40043ac <fflush+0x18>
 4004398:	00810074 	movhi	r2,1025
 400439c:	10830004 	addi	r2,r2,3072
 40043a0:	200b883a 	mov	r5,r4
 40043a4:	11000017 	ldw	r4,0(r2)
 40043a8:	40043381 	jmpi	4004338 <_fflush_r>
 40043ac:	00810074 	movhi	r2,1025
 40043b0:	1082ff04 	addi	r2,r2,3068
 40043b4:	11000017 	ldw	r4,0(r2)
 40043b8:	01410034 	movhi	r5,1024
 40043bc:	2950ce04 	addi	r5,r5,17208
 40043c0:	4004c5c1 	jmpi	4004c5c <_fwalk_reent>

040043c4 <__fp_unlock>:
 40043c4:	0005883a 	mov	r2,zero
 40043c8:	f800283a 	ret

040043cc <_cleanup_r>:
 40043cc:	01410074 	movhi	r5,1025
 40043d0:	29619304 	addi	r5,r5,-31156
 40043d4:	4004c5c1 	jmpi	4004c5c <_fwalk_reent>

040043d8 <__sinit.part.1>:
 40043d8:	defff704 	addi	sp,sp,-36
 40043dc:	00c10034 	movhi	r3,1024
 40043e0:	dfc00815 	stw	ra,32(sp)
 40043e4:	ddc00715 	stw	r23,28(sp)
 40043e8:	dd800615 	stw	r22,24(sp)
 40043ec:	dd400515 	stw	r21,20(sp)
 40043f0:	dd000415 	stw	r20,16(sp)
 40043f4:	dcc00315 	stw	r19,12(sp)
 40043f8:	dc800215 	stw	r18,8(sp)
 40043fc:	dc400115 	stw	r17,4(sp)
 4004400:	dc000015 	stw	r16,0(sp)
 4004404:	18d0f304 	addi	r3,r3,17356
 4004408:	24000117 	ldw	r16,4(r4)
 400440c:	20c00f15 	stw	r3,60(r4)
 4004410:	2080bb04 	addi	r2,r4,748
 4004414:	00c000c4 	movi	r3,3
 4004418:	20c0b915 	stw	r3,740(r4)
 400441c:	2080ba15 	stw	r2,744(r4)
 4004420:	2000b815 	stw	zero,736(r4)
 4004424:	05c00204 	movi	r23,8
 4004428:	00800104 	movi	r2,4
 400442c:	2025883a 	mov	r18,r4
 4004430:	b80d883a 	mov	r6,r23
 4004434:	81001704 	addi	r4,r16,92
 4004438:	000b883a 	mov	r5,zero
 400443c:	80000015 	stw	zero,0(r16)
 4004440:	80000115 	stw	zero,4(r16)
 4004444:	80000215 	stw	zero,8(r16)
 4004448:	8080030d 	sth	r2,12(r16)
 400444c:	80001915 	stw	zero,100(r16)
 4004450:	8000038d 	sth	zero,14(r16)
 4004454:	80000415 	stw	zero,16(r16)
 4004458:	80000515 	stw	zero,20(r16)
 400445c:	80000615 	stw	zero,24(r16)
 4004460:	40059f00 	call	40059f0 <memset>
 4004464:	05810034 	movhi	r22,1024
 4004468:	94400217 	ldw	r17,8(r18)
 400446c:	05410034 	movhi	r21,1024
 4004470:	05010034 	movhi	r20,1024
 4004474:	04c10034 	movhi	r19,1024
 4004478:	b59af704 	addi	r22,r22,27612
 400447c:	ad5b0e04 	addi	r21,r21,27704
 4004480:	a51b2d04 	addi	r20,r20,27828
 4004484:	9cdb4404 	addi	r19,r19,27920
 4004488:	85800815 	stw	r22,32(r16)
 400448c:	85400915 	stw	r21,36(r16)
 4004490:	85000a15 	stw	r20,40(r16)
 4004494:	84c00b15 	stw	r19,44(r16)
 4004498:	84000715 	stw	r16,28(r16)
 400449c:	00800284 	movi	r2,10
 40044a0:	8880030d 	sth	r2,12(r17)
 40044a4:	00800044 	movi	r2,1
 40044a8:	b80d883a 	mov	r6,r23
 40044ac:	89001704 	addi	r4,r17,92
 40044b0:	000b883a 	mov	r5,zero
 40044b4:	88000015 	stw	zero,0(r17)
 40044b8:	88000115 	stw	zero,4(r17)
 40044bc:	88000215 	stw	zero,8(r17)
 40044c0:	88001915 	stw	zero,100(r17)
 40044c4:	8880038d 	sth	r2,14(r17)
 40044c8:	88000415 	stw	zero,16(r17)
 40044cc:	88000515 	stw	zero,20(r17)
 40044d0:	88000615 	stw	zero,24(r17)
 40044d4:	40059f00 	call	40059f0 <memset>
 40044d8:	94000317 	ldw	r16,12(r18)
 40044dc:	00800484 	movi	r2,18
 40044e0:	8c400715 	stw	r17,28(r17)
 40044e4:	8d800815 	stw	r22,32(r17)
 40044e8:	8d400915 	stw	r21,36(r17)
 40044ec:	8d000a15 	stw	r20,40(r17)
 40044f0:	8cc00b15 	stw	r19,44(r17)
 40044f4:	8080030d 	sth	r2,12(r16)
 40044f8:	00800084 	movi	r2,2
 40044fc:	80000015 	stw	zero,0(r16)
 4004500:	80000115 	stw	zero,4(r16)
 4004504:	80000215 	stw	zero,8(r16)
 4004508:	80001915 	stw	zero,100(r16)
 400450c:	8080038d 	sth	r2,14(r16)
 4004510:	80000415 	stw	zero,16(r16)
 4004514:	80000515 	stw	zero,20(r16)
 4004518:	80000615 	stw	zero,24(r16)
 400451c:	b80d883a 	mov	r6,r23
 4004520:	000b883a 	mov	r5,zero
 4004524:	81001704 	addi	r4,r16,92
 4004528:	40059f00 	call	40059f0 <memset>
 400452c:	00800044 	movi	r2,1
 4004530:	84000715 	stw	r16,28(r16)
 4004534:	85800815 	stw	r22,32(r16)
 4004538:	85400915 	stw	r21,36(r16)
 400453c:	85000a15 	stw	r20,40(r16)
 4004540:	84c00b15 	stw	r19,44(r16)
 4004544:	90800e15 	stw	r2,56(r18)
 4004548:	dfc00817 	ldw	ra,32(sp)
 400454c:	ddc00717 	ldw	r23,28(sp)
 4004550:	dd800617 	ldw	r22,24(sp)
 4004554:	dd400517 	ldw	r21,20(sp)
 4004558:	dd000417 	ldw	r20,16(sp)
 400455c:	dcc00317 	ldw	r19,12(sp)
 4004560:	dc800217 	ldw	r18,8(sp)
 4004564:	dc400117 	ldw	r17,4(sp)
 4004568:	dc000017 	ldw	r16,0(sp)
 400456c:	dec00904 	addi	sp,sp,36
 4004570:	f800283a 	ret

04004574 <__fp_lock>:
 4004574:	0005883a 	mov	r2,zero
 4004578:	f800283a 	ret

0400457c <__sfmoreglue>:
 400457c:	defffc04 	addi	sp,sp,-16
 4004580:	dc400115 	stw	r17,4(sp)
 4004584:	2c7fffc4 	addi	r17,r5,-1
 4004588:	8c401a24 	muli	r17,r17,104
 400458c:	dc800215 	stw	r18,8(sp)
 4004590:	2825883a 	mov	r18,r5
 4004594:	89401d04 	addi	r5,r17,116
 4004598:	dc000015 	stw	r16,0(sp)
 400459c:	dfc00315 	stw	ra,12(sp)
 40045a0:	4004fb80 	call	4004fb8 <_malloc_r>
 40045a4:	1021883a 	mov	r16,r2
 40045a8:	10000726 	beq	r2,zero,40045c8 <__sfmoreglue+0x4c>
 40045ac:	11000304 	addi	r4,r2,12
 40045b0:	10000015 	stw	zero,0(r2)
 40045b4:	14800115 	stw	r18,4(r2)
 40045b8:	11000215 	stw	r4,8(r2)
 40045bc:	89801a04 	addi	r6,r17,104
 40045c0:	000b883a 	mov	r5,zero
 40045c4:	40059f00 	call	40059f0 <memset>
 40045c8:	8005883a 	mov	r2,r16
 40045cc:	dfc00317 	ldw	ra,12(sp)
 40045d0:	dc800217 	ldw	r18,8(sp)
 40045d4:	dc400117 	ldw	r17,4(sp)
 40045d8:	dc000017 	ldw	r16,0(sp)
 40045dc:	dec00404 	addi	sp,sp,16
 40045e0:	f800283a 	ret

040045e4 <__sfp>:
 40045e4:	defffb04 	addi	sp,sp,-20
 40045e8:	dc000015 	stw	r16,0(sp)
 40045ec:	04010074 	movhi	r16,1025
 40045f0:	8402ff04 	addi	r16,r16,3068
 40045f4:	dcc00315 	stw	r19,12(sp)
 40045f8:	2027883a 	mov	r19,r4
 40045fc:	81000017 	ldw	r4,0(r16)
 4004600:	dfc00415 	stw	ra,16(sp)
 4004604:	dc800215 	stw	r18,8(sp)
 4004608:	20800e17 	ldw	r2,56(r4)
 400460c:	dc400115 	stw	r17,4(sp)
 4004610:	1000021e 	bne	r2,zero,400461c <__sfp+0x38>
 4004614:	40043d80 	call	40043d8 <__sinit.part.1>
 4004618:	81000017 	ldw	r4,0(r16)
 400461c:	2480b804 	addi	r18,r4,736
 4004620:	047fffc4 	movi	r17,-1
 4004624:	91000117 	ldw	r4,4(r18)
 4004628:	94000217 	ldw	r16,8(r18)
 400462c:	213fffc4 	addi	r4,r4,-1
 4004630:	20000a16 	blt	r4,zero,400465c <__sfp+0x78>
 4004634:	8080030f 	ldh	r2,12(r16)
 4004638:	10000c26 	beq	r2,zero,400466c <__sfp+0x88>
 400463c:	80c01d04 	addi	r3,r16,116
 4004640:	00000206 	br	400464c <__sfp+0x68>
 4004644:	18bfe60f 	ldh	r2,-104(r3)
 4004648:	10000826 	beq	r2,zero,400466c <__sfp+0x88>
 400464c:	213fffc4 	addi	r4,r4,-1
 4004650:	1c3ffd04 	addi	r16,r3,-12
 4004654:	18c01a04 	addi	r3,r3,104
 4004658:	247ffa1e 	bne	r4,r17,4004644 <__ram_exceptions_end+0xfbfe4400>
 400465c:	90800017 	ldw	r2,0(r18)
 4004660:	10001d26 	beq	r2,zero,40046d8 <__sfp+0xf4>
 4004664:	1025883a 	mov	r18,r2
 4004668:	003fee06 	br	4004624 <__ram_exceptions_end+0xfbfe43e0>
 400466c:	00bfffc4 	movi	r2,-1
 4004670:	8080038d 	sth	r2,14(r16)
 4004674:	00800044 	movi	r2,1
 4004678:	8080030d 	sth	r2,12(r16)
 400467c:	80001915 	stw	zero,100(r16)
 4004680:	80000015 	stw	zero,0(r16)
 4004684:	80000215 	stw	zero,8(r16)
 4004688:	80000115 	stw	zero,4(r16)
 400468c:	80000415 	stw	zero,16(r16)
 4004690:	80000515 	stw	zero,20(r16)
 4004694:	80000615 	stw	zero,24(r16)
 4004698:	01800204 	movi	r6,8
 400469c:	000b883a 	mov	r5,zero
 40046a0:	81001704 	addi	r4,r16,92
 40046a4:	40059f00 	call	40059f0 <memset>
 40046a8:	8005883a 	mov	r2,r16
 40046ac:	80000c15 	stw	zero,48(r16)
 40046b0:	80000d15 	stw	zero,52(r16)
 40046b4:	80001115 	stw	zero,68(r16)
 40046b8:	80001215 	stw	zero,72(r16)
 40046bc:	dfc00417 	ldw	ra,16(sp)
 40046c0:	dcc00317 	ldw	r19,12(sp)
 40046c4:	dc800217 	ldw	r18,8(sp)
 40046c8:	dc400117 	ldw	r17,4(sp)
 40046cc:	dc000017 	ldw	r16,0(sp)
 40046d0:	dec00504 	addi	sp,sp,20
 40046d4:	f800283a 	ret
 40046d8:	01400104 	movi	r5,4
 40046dc:	9809883a 	mov	r4,r19
 40046e0:	400457c0 	call	400457c <__sfmoreglue>
 40046e4:	90800015 	stw	r2,0(r18)
 40046e8:	103fde1e 	bne	r2,zero,4004664 <__ram_exceptions_end+0xfbfe4420>
 40046ec:	00800304 	movi	r2,12
 40046f0:	98800015 	stw	r2,0(r19)
 40046f4:	0005883a 	mov	r2,zero
 40046f8:	003ff006 	br	40046bc <__ram_exceptions_end+0xfbfe4478>

040046fc <_cleanup>:
 40046fc:	00810074 	movhi	r2,1025
 4004700:	1082ff04 	addi	r2,r2,3068
 4004704:	11000017 	ldw	r4,0(r2)
 4004708:	01410074 	movhi	r5,1025
 400470c:	29619304 	addi	r5,r5,-31156
 4004710:	4004c5c1 	jmpi	4004c5c <_fwalk_reent>

04004714 <__sinit>:
 4004714:	20800e17 	ldw	r2,56(r4)
 4004718:	10000126 	beq	r2,zero,4004720 <__sinit+0xc>
 400471c:	f800283a 	ret
 4004720:	40043d81 	jmpi	40043d8 <__sinit.part.1>

04004724 <__sfp_lock_acquire>:
 4004724:	f800283a 	ret

04004728 <__sfp_lock_release>:
 4004728:	f800283a 	ret

0400472c <__sinit_lock_acquire>:
 400472c:	f800283a 	ret

04004730 <__sinit_lock_release>:
 4004730:	f800283a 	ret

04004734 <__fp_lock_all>:
 4004734:	00810074 	movhi	r2,1025
 4004738:	10830004 	addi	r2,r2,3072
 400473c:	11000017 	ldw	r4,0(r2)
 4004740:	01410034 	movhi	r5,1024
 4004744:	29515d04 	addi	r5,r5,17780
 4004748:	4004b981 	jmpi	4004b98 <_fwalk>

0400474c <__fp_unlock_all>:
 400474c:	00810074 	movhi	r2,1025
 4004750:	10830004 	addi	r2,r2,3072
 4004754:	11000017 	ldw	r4,0(r2)
 4004758:	01410034 	movhi	r5,1024
 400475c:	2950f104 	addi	r5,r5,17348
 4004760:	4004b981 	jmpi	4004b98 <_fwalk>

04004764 <_malloc_trim_r>:
 4004764:	defffb04 	addi	sp,sp,-20
 4004768:	dcc00315 	stw	r19,12(sp)
 400476c:	04c10074 	movhi	r19,1025
 4004770:	dc800215 	stw	r18,8(sp)
 4004774:	dc400115 	stw	r17,4(sp)
 4004778:	dc000015 	stw	r16,0(sp)
 400477c:	dfc00415 	stw	ra,16(sp)
 4004780:	2821883a 	mov	r16,r5
 4004784:	9cc14804 	addi	r19,r19,1312
 4004788:	2025883a 	mov	r18,r4
 400478c:	400d21c0 	call	400d21c <__malloc_lock>
 4004790:	98800217 	ldw	r2,8(r19)
 4004794:	14400117 	ldw	r17,4(r2)
 4004798:	00bfff04 	movi	r2,-4
 400479c:	88a2703a 	and	r17,r17,r2
 40047a0:	8c21c83a 	sub	r16,r17,r16
 40047a4:	8403fbc4 	addi	r16,r16,4079
 40047a8:	8020d33a 	srli	r16,r16,12
 40047ac:	0083ffc4 	movi	r2,4095
 40047b0:	843fffc4 	addi	r16,r16,-1
 40047b4:	8020933a 	slli	r16,r16,12
 40047b8:	1400060e 	bge	r2,r16,40047d4 <_malloc_trim_r+0x70>
 40047bc:	000b883a 	mov	r5,zero
 40047c0:	9009883a 	mov	r4,r18
 40047c4:	4006b880 	call	4006b88 <_sbrk_r>
 40047c8:	98c00217 	ldw	r3,8(r19)
 40047cc:	1c47883a 	add	r3,r3,r17
 40047d0:	10c00a26 	beq	r2,r3,40047fc <_malloc_trim_r+0x98>
 40047d4:	9009883a 	mov	r4,r18
 40047d8:	400d2400 	call	400d240 <__malloc_unlock>
 40047dc:	0005883a 	mov	r2,zero
 40047e0:	dfc00417 	ldw	ra,16(sp)
 40047e4:	dcc00317 	ldw	r19,12(sp)
 40047e8:	dc800217 	ldw	r18,8(sp)
 40047ec:	dc400117 	ldw	r17,4(sp)
 40047f0:	dc000017 	ldw	r16,0(sp)
 40047f4:	dec00504 	addi	sp,sp,20
 40047f8:	f800283a 	ret
 40047fc:	040bc83a 	sub	r5,zero,r16
 4004800:	9009883a 	mov	r4,r18
 4004804:	4006b880 	call	4006b88 <_sbrk_r>
 4004808:	00ffffc4 	movi	r3,-1
 400480c:	10c00d26 	beq	r2,r3,4004844 <_malloc_trim_r+0xe0>
 4004810:	00c10074 	movhi	r3,1025
 4004814:	18c61004 	addi	r3,r3,6208
 4004818:	18800017 	ldw	r2,0(r3)
 400481c:	99000217 	ldw	r4,8(r19)
 4004820:	8c23c83a 	sub	r17,r17,r16
 4004824:	8c400054 	ori	r17,r17,1
 4004828:	1421c83a 	sub	r16,r2,r16
 400482c:	24400115 	stw	r17,4(r4)
 4004830:	9009883a 	mov	r4,r18
 4004834:	1c000015 	stw	r16,0(r3)
 4004838:	400d2400 	call	400d240 <__malloc_unlock>
 400483c:	00800044 	movi	r2,1
 4004840:	003fe706 	br	40047e0 <__ram_exceptions_end+0xfbfe459c>
 4004844:	000b883a 	mov	r5,zero
 4004848:	9009883a 	mov	r4,r18
 400484c:	4006b880 	call	4006b88 <_sbrk_r>
 4004850:	99000217 	ldw	r4,8(r19)
 4004854:	014003c4 	movi	r5,15
 4004858:	1107c83a 	sub	r3,r2,r4
 400485c:	28ffdd0e 	bge	r5,r3,40047d4 <__ram_exceptions_end+0xfbfe4590>
 4004860:	01410074 	movhi	r5,1025
 4004864:	29430204 	addi	r5,r5,3080
 4004868:	29400017 	ldw	r5,0(r5)
 400486c:	18c00054 	ori	r3,r3,1
 4004870:	20c00115 	stw	r3,4(r4)
 4004874:	00c10074 	movhi	r3,1025
 4004878:	1145c83a 	sub	r2,r2,r5
 400487c:	18c61004 	addi	r3,r3,6208
 4004880:	18800015 	stw	r2,0(r3)
 4004884:	003fd306 	br	40047d4 <__ram_exceptions_end+0xfbfe4590>

04004888 <_free_r>:
 4004888:	28004126 	beq	r5,zero,4004990 <_free_r+0x108>
 400488c:	defffd04 	addi	sp,sp,-12
 4004890:	dc400115 	stw	r17,4(sp)
 4004894:	dc000015 	stw	r16,0(sp)
 4004898:	2023883a 	mov	r17,r4
 400489c:	2821883a 	mov	r16,r5
 40048a0:	dfc00215 	stw	ra,8(sp)
 40048a4:	400d21c0 	call	400d21c <__malloc_lock>
 40048a8:	81ffff17 	ldw	r7,-4(r16)
 40048ac:	00bfff84 	movi	r2,-2
 40048b0:	01010074 	movhi	r4,1025
 40048b4:	81bffe04 	addi	r6,r16,-8
 40048b8:	3884703a 	and	r2,r7,r2
 40048bc:	21014804 	addi	r4,r4,1312
 40048c0:	308b883a 	add	r5,r6,r2
 40048c4:	2a400117 	ldw	r9,4(r5)
 40048c8:	22000217 	ldw	r8,8(r4)
 40048cc:	00ffff04 	movi	r3,-4
 40048d0:	48c6703a 	and	r3,r9,r3
 40048d4:	2a005726 	beq	r5,r8,4004a34 <_free_r+0x1ac>
 40048d8:	28c00115 	stw	r3,4(r5)
 40048dc:	39c0004c 	andi	r7,r7,1
 40048e0:	3800091e 	bne	r7,zero,4004908 <_free_r+0x80>
 40048e4:	823ffe17 	ldw	r8,-8(r16)
 40048e8:	22400204 	addi	r9,r4,8
 40048ec:	320dc83a 	sub	r6,r6,r8
 40048f0:	31c00217 	ldw	r7,8(r6)
 40048f4:	1205883a 	add	r2,r2,r8
 40048f8:	3a406526 	beq	r7,r9,4004a90 <_free_r+0x208>
 40048fc:	32000317 	ldw	r8,12(r6)
 4004900:	3a000315 	stw	r8,12(r7)
 4004904:	41c00215 	stw	r7,8(r8)
 4004908:	28cf883a 	add	r7,r5,r3
 400490c:	39c00117 	ldw	r7,4(r7)
 4004910:	39c0004c 	andi	r7,r7,1
 4004914:	38003a26 	beq	r7,zero,4004a00 <_free_r+0x178>
 4004918:	10c00054 	ori	r3,r2,1
 400491c:	30c00115 	stw	r3,4(r6)
 4004920:	3087883a 	add	r3,r6,r2
 4004924:	18800015 	stw	r2,0(r3)
 4004928:	00c07fc4 	movi	r3,511
 400492c:	18801936 	bltu	r3,r2,4004994 <_free_r+0x10c>
 4004930:	1004d0fa 	srli	r2,r2,3
 4004934:	01c00044 	movi	r7,1
 4004938:	21400117 	ldw	r5,4(r4)
 400493c:	10c00044 	addi	r3,r2,1
 4004940:	18c7883a 	add	r3,r3,r3
 4004944:	1005d0ba 	srai	r2,r2,2
 4004948:	18c7883a 	add	r3,r3,r3
 400494c:	18c7883a 	add	r3,r3,r3
 4004950:	1907883a 	add	r3,r3,r4
 4004954:	3884983a 	sll	r2,r7,r2
 4004958:	19c00017 	ldw	r7,0(r3)
 400495c:	1a3ffe04 	addi	r8,r3,-8
 4004960:	1144b03a 	or	r2,r2,r5
 4004964:	32000315 	stw	r8,12(r6)
 4004968:	31c00215 	stw	r7,8(r6)
 400496c:	20800115 	stw	r2,4(r4)
 4004970:	19800015 	stw	r6,0(r3)
 4004974:	39800315 	stw	r6,12(r7)
 4004978:	8809883a 	mov	r4,r17
 400497c:	dfc00217 	ldw	ra,8(sp)
 4004980:	dc400117 	ldw	r17,4(sp)
 4004984:	dc000017 	ldw	r16,0(sp)
 4004988:	dec00304 	addi	sp,sp,12
 400498c:	400d2401 	jmpi	400d240 <__malloc_unlock>
 4004990:	f800283a 	ret
 4004994:	100ad27a 	srli	r5,r2,9
 4004998:	00c00104 	movi	r3,4
 400499c:	19404a36 	bltu	r3,r5,4004ac8 <_free_r+0x240>
 40049a0:	100ad1ba 	srli	r5,r2,6
 40049a4:	28c00e44 	addi	r3,r5,57
 40049a8:	18c7883a 	add	r3,r3,r3
 40049ac:	29400e04 	addi	r5,r5,56
 40049b0:	18c7883a 	add	r3,r3,r3
 40049b4:	18c7883a 	add	r3,r3,r3
 40049b8:	1909883a 	add	r4,r3,r4
 40049bc:	20c00017 	ldw	r3,0(r4)
 40049c0:	01c10074 	movhi	r7,1025
 40049c4:	213ffe04 	addi	r4,r4,-8
 40049c8:	39c14804 	addi	r7,r7,1312
 40049cc:	20c04426 	beq	r4,r3,4004ae0 <_free_r+0x258>
 40049d0:	01ffff04 	movi	r7,-4
 40049d4:	19400117 	ldw	r5,4(r3)
 40049d8:	29ca703a 	and	r5,r5,r7
 40049dc:	1140022e 	bgeu	r2,r5,40049e8 <_free_r+0x160>
 40049e0:	18c00217 	ldw	r3,8(r3)
 40049e4:	20fffb1e 	bne	r4,r3,40049d4 <__ram_exceptions_end+0xfbfe4790>
 40049e8:	19000317 	ldw	r4,12(r3)
 40049ec:	31000315 	stw	r4,12(r6)
 40049f0:	30c00215 	stw	r3,8(r6)
 40049f4:	21800215 	stw	r6,8(r4)
 40049f8:	19800315 	stw	r6,12(r3)
 40049fc:	003fde06 	br	4004978 <__ram_exceptions_end+0xfbfe4734>
 4004a00:	29c00217 	ldw	r7,8(r5)
 4004a04:	10c5883a 	add	r2,r2,r3
 4004a08:	00c10074 	movhi	r3,1025
 4004a0c:	18c14a04 	addi	r3,r3,1320
 4004a10:	38c03b26 	beq	r7,r3,4004b00 <_free_r+0x278>
 4004a14:	2a000317 	ldw	r8,12(r5)
 4004a18:	11400054 	ori	r5,r2,1
 4004a1c:	3087883a 	add	r3,r6,r2
 4004a20:	3a000315 	stw	r8,12(r7)
 4004a24:	41c00215 	stw	r7,8(r8)
 4004a28:	31400115 	stw	r5,4(r6)
 4004a2c:	18800015 	stw	r2,0(r3)
 4004a30:	003fbd06 	br	4004928 <__ram_exceptions_end+0xfbfe46e4>
 4004a34:	39c0004c 	andi	r7,r7,1
 4004a38:	10c5883a 	add	r2,r2,r3
 4004a3c:	3800071e 	bne	r7,zero,4004a5c <_free_r+0x1d4>
 4004a40:	81fffe17 	ldw	r7,-8(r16)
 4004a44:	31cdc83a 	sub	r6,r6,r7
 4004a48:	30c00317 	ldw	r3,12(r6)
 4004a4c:	31400217 	ldw	r5,8(r6)
 4004a50:	11c5883a 	add	r2,r2,r7
 4004a54:	28c00315 	stw	r3,12(r5)
 4004a58:	19400215 	stw	r5,8(r3)
 4004a5c:	10c00054 	ori	r3,r2,1
 4004a60:	30c00115 	stw	r3,4(r6)
 4004a64:	00c10074 	movhi	r3,1025
 4004a68:	18c30304 	addi	r3,r3,3084
 4004a6c:	18c00017 	ldw	r3,0(r3)
 4004a70:	21800215 	stw	r6,8(r4)
 4004a74:	10ffc036 	bltu	r2,r3,4004978 <__ram_exceptions_end+0xfbfe4734>
 4004a78:	00810074 	movhi	r2,1025
 4004a7c:	10860904 	addi	r2,r2,6180
 4004a80:	11400017 	ldw	r5,0(r2)
 4004a84:	8809883a 	mov	r4,r17
 4004a88:	40047640 	call	4004764 <_malloc_trim_r>
 4004a8c:	003fba06 	br	4004978 <__ram_exceptions_end+0xfbfe4734>
 4004a90:	28c9883a 	add	r4,r5,r3
 4004a94:	21000117 	ldw	r4,4(r4)
 4004a98:	2100004c 	andi	r4,r4,1
 4004a9c:	2000391e 	bne	r4,zero,4004b84 <_free_r+0x2fc>
 4004aa0:	29c00217 	ldw	r7,8(r5)
 4004aa4:	29000317 	ldw	r4,12(r5)
 4004aa8:	1885883a 	add	r2,r3,r2
 4004aac:	10c00054 	ori	r3,r2,1
 4004ab0:	39000315 	stw	r4,12(r7)
 4004ab4:	21c00215 	stw	r7,8(r4)
 4004ab8:	30c00115 	stw	r3,4(r6)
 4004abc:	308d883a 	add	r6,r6,r2
 4004ac0:	30800015 	stw	r2,0(r6)
 4004ac4:	003fac06 	br	4004978 <__ram_exceptions_end+0xfbfe4734>
 4004ac8:	00c00504 	movi	r3,20
 4004acc:	19401536 	bltu	r3,r5,4004b24 <_free_r+0x29c>
 4004ad0:	28c01704 	addi	r3,r5,92
 4004ad4:	18c7883a 	add	r3,r3,r3
 4004ad8:	294016c4 	addi	r5,r5,91
 4004adc:	003fb406 	br	40049b0 <__ram_exceptions_end+0xfbfe476c>
 4004ae0:	280bd0ba 	srai	r5,r5,2
 4004ae4:	00c00044 	movi	r3,1
 4004ae8:	38800117 	ldw	r2,4(r7)
 4004aec:	194a983a 	sll	r5,r3,r5
 4004af0:	2007883a 	mov	r3,r4
 4004af4:	2884b03a 	or	r2,r5,r2
 4004af8:	38800115 	stw	r2,4(r7)
 4004afc:	003fbb06 	br	40049ec <__ram_exceptions_end+0xfbfe47a8>
 4004b00:	21800515 	stw	r6,20(r4)
 4004b04:	21800415 	stw	r6,16(r4)
 4004b08:	10c00054 	ori	r3,r2,1
 4004b0c:	31c00315 	stw	r7,12(r6)
 4004b10:	31c00215 	stw	r7,8(r6)
 4004b14:	30c00115 	stw	r3,4(r6)
 4004b18:	308d883a 	add	r6,r6,r2
 4004b1c:	30800015 	stw	r2,0(r6)
 4004b20:	003f9506 	br	4004978 <__ram_exceptions_end+0xfbfe4734>
 4004b24:	00c01504 	movi	r3,84
 4004b28:	19400536 	bltu	r3,r5,4004b40 <_free_r+0x2b8>
 4004b2c:	100ad33a 	srli	r5,r2,12
 4004b30:	28c01bc4 	addi	r3,r5,111
 4004b34:	18c7883a 	add	r3,r3,r3
 4004b38:	29401b84 	addi	r5,r5,110
 4004b3c:	003f9c06 	br	40049b0 <__ram_exceptions_end+0xfbfe476c>
 4004b40:	00c05504 	movi	r3,340
 4004b44:	19400536 	bltu	r3,r5,4004b5c <_free_r+0x2d4>
 4004b48:	100ad3fa 	srli	r5,r2,15
 4004b4c:	28c01e04 	addi	r3,r5,120
 4004b50:	18c7883a 	add	r3,r3,r3
 4004b54:	29401dc4 	addi	r5,r5,119
 4004b58:	003f9506 	br	40049b0 <__ram_exceptions_end+0xfbfe476c>
 4004b5c:	00c15504 	movi	r3,1364
 4004b60:	19400536 	bltu	r3,r5,4004b78 <_free_r+0x2f0>
 4004b64:	100ad4ba 	srli	r5,r2,18
 4004b68:	28c01f44 	addi	r3,r5,125
 4004b6c:	18c7883a 	add	r3,r3,r3
 4004b70:	29401f04 	addi	r5,r5,124
 4004b74:	003f8e06 	br	40049b0 <__ram_exceptions_end+0xfbfe476c>
 4004b78:	00c03f84 	movi	r3,254
 4004b7c:	01401f84 	movi	r5,126
 4004b80:	003f8b06 	br	40049b0 <__ram_exceptions_end+0xfbfe476c>
 4004b84:	10c00054 	ori	r3,r2,1
 4004b88:	30c00115 	stw	r3,4(r6)
 4004b8c:	308d883a 	add	r6,r6,r2
 4004b90:	30800015 	stw	r2,0(r6)
 4004b94:	003f7806 	br	4004978 <__ram_exceptions_end+0xfbfe4734>

04004b98 <_fwalk>:
 4004b98:	defff704 	addi	sp,sp,-36
 4004b9c:	dd000415 	stw	r20,16(sp)
 4004ba0:	dfc00815 	stw	ra,32(sp)
 4004ba4:	ddc00715 	stw	r23,28(sp)
 4004ba8:	dd800615 	stw	r22,24(sp)
 4004bac:	dd400515 	stw	r21,20(sp)
 4004bb0:	dcc00315 	stw	r19,12(sp)
 4004bb4:	dc800215 	stw	r18,8(sp)
 4004bb8:	dc400115 	stw	r17,4(sp)
 4004bbc:	dc000015 	stw	r16,0(sp)
 4004bc0:	2500b804 	addi	r20,r4,736
 4004bc4:	a0002326 	beq	r20,zero,4004c54 <_fwalk+0xbc>
 4004bc8:	282b883a 	mov	r21,r5
 4004bcc:	002f883a 	mov	r23,zero
 4004bd0:	05800044 	movi	r22,1
 4004bd4:	04ffffc4 	movi	r19,-1
 4004bd8:	a4400117 	ldw	r17,4(r20)
 4004bdc:	a4800217 	ldw	r18,8(r20)
 4004be0:	8c7fffc4 	addi	r17,r17,-1
 4004be4:	88000d16 	blt	r17,zero,4004c1c <_fwalk+0x84>
 4004be8:	94000304 	addi	r16,r18,12
 4004bec:	94800384 	addi	r18,r18,14
 4004bf0:	8080000b 	ldhu	r2,0(r16)
 4004bf4:	8c7fffc4 	addi	r17,r17,-1
 4004bf8:	813ffd04 	addi	r4,r16,-12
 4004bfc:	b080042e 	bgeu	r22,r2,4004c10 <_fwalk+0x78>
 4004c00:	9080000f 	ldh	r2,0(r18)
 4004c04:	14c00226 	beq	r2,r19,4004c10 <_fwalk+0x78>
 4004c08:	a83ee83a 	callr	r21
 4004c0c:	b8aeb03a 	or	r23,r23,r2
 4004c10:	84001a04 	addi	r16,r16,104
 4004c14:	94801a04 	addi	r18,r18,104
 4004c18:	8cfff51e 	bne	r17,r19,4004bf0 <__ram_exceptions_end+0xfbfe49ac>
 4004c1c:	a5000017 	ldw	r20,0(r20)
 4004c20:	a03fed1e 	bne	r20,zero,4004bd8 <__ram_exceptions_end+0xfbfe4994>
 4004c24:	b805883a 	mov	r2,r23
 4004c28:	dfc00817 	ldw	ra,32(sp)
 4004c2c:	ddc00717 	ldw	r23,28(sp)
 4004c30:	dd800617 	ldw	r22,24(sp)
 4004c34:	dd400517 	ldw	r21,20(sp)
 4004c38:	dd000417 	ldw	r20,16(sp)
 4004c3c:	dcc00317 	ldw	r19,12(sp)
 4004c40:	dc800217 	ldw	r18,8(sp)
 4004c44:	dc400117 	ldw	r17,4(sp)
 4004c48:	dc000017 	ldw	r16,0(sp)
 4004c4c:	dec00904 	addi	sp,sp,36
 4004c50:	f800283a 	ret
 4004c54:	002f883a 	mov	r23,zero
 4004c58:	003ff206 	br	4004c24 <__ram_exceptions_end+0xfbfe49e0>

04004c5c <_fwalk_reent>:
 4004c5c:	defff704 	addi	sp,sp,-36
 4004c60:	dd000415 	stw	r20,16(sp)
 4004c64:	dfc00815 	stw	ra,32(sp)
 4004c68:	ddc00715 	stw	r23,28(sp)
 4004c6c:	dd800615 	stw	r22,24(sp)
 4004c70:	dd400515 	stw	r21,20(sp)
 4004c74:	dcc00315 	stw	r19,12(sp)
 4004c78:	dc800215 	stw	r18,8(sp)
 4004c7c:	dc400115 	stw	r17,4(sp)
 4004c80:	dc000015 	stw	r16,0(sp)
 4004c84:	2500b804 	addi	r20,r4,736
 4004c88:	a0002326 	beq	r20,zero,4004d18 <_fwalk_reent+0xbc>
 4004c8c:	282b883a 	mov	r21,r5
 4004c90:	2027883a 	mov	r19,r4
 4004c94:	002f883a 	mov	r23,zero
 4004c98:	05800044 	movi	r22,1
 4004c9c:	04bfffc4 	movi	r18,-1
 4004ca0:	a4400117 	ldw	r17,4(r20)
 4004ca4:	a4000217 	ldw	r16,8(r20)
 4004ca8:	8c7fffc4 	addi	r17,r17,-1
 4004cac:	88000c16 	blt	r17,zero,4004ce0 <_fwalk_reent+0x84>
 4004cb0:	84000304 	addi	r16,r16,12
 4004cb4:	8080000b 	ldhu	r2,0(r16)
 4004cb8:	8c7fffc4 	addi	r17,r17,-1
 4004cbc:	817ffd04 	addi	r5,r16,-12
 4004cc0:	b080052e 	bgeu	r22,r2,4004cd8 <_fwalk_reent+0x7c>
 4004cc4:	8080008f 	ldh	r2,2(r16)
 4004cc8:	9809883a 	mov	r4,r19
 4004ccc:	14800226 	beq	r2,r18,4004cd8 <_fwalk_reent+0x7c>
 4004cd0:	a83ee83a 	callr	r21
 4004cd4:	b8aeb03a 	or	r23,r23,r2
 4004cd8:	84001a04 	addi	r16,r16,104
 4004cdc:	8cbff51e 	bne	r17,r18,4004cb4 <__ram_exceptions_end+0xfbfe4a70>
 4004ce0:	a5000017 	ldw	r20,0(r20)
 4004ce4:	a03fee1e 	bne	r20,zero,4004ca0 <__ram_exceptions_end+0xfbfe4a5c>
 4004ce8:	b805883a 	mov	r2,r23
 4004cec:	dfc00817 	ldw	ra,32(sp)
 4004cf0:	ddc00717 	ldw	r23,28(sp)
 4004cf4:	dd800617 	ldw	r22,24(sp)
 4004cf8:	dd400517 	ldw	r21,20(sp)
 4004cfc:	dd000417 	ldw	r20,16(sp)
 4004d00:	dcc00317 	ldw	r19,12(sp)
 4004d04:	dc800217 	ldw	r18,8(sp)
 4004d08:	dc400117 	ldw	r17,4(sp)
 4004d0c:	dc000017 	ldw	r16,0(sp)
 4004d10:	dec00904 	addi	sp,sp,36
 4004d14:	f800283a 	ret
 4004d18:	002f883a 	mov	r23,zero
 4004d1c:	003ff206 	br	4004ce8 <__ram_exceptions_end+0xfbfe4aa4>

04004d20 <_setlocale_r>:
 4004d20:	30001b26 	beq	r6,zero,4004d90 <_setlocale_r+0x70>
 4004d24:	01410074 	movhi	r5,1025
 4004d28:	defffe04 	addi	sp,sp,-8
 4004d2c:	297f7304 	addi	r5,r5,-564
 4004d30:	3009883a 	mov	r4,r6
 4004d34:	dc000015 	stw	r16,0(sp)
 4004d38:	dfc00115 	stw	ra,4(sp)
 4004d3c:	3021883a 	mov	r16,r6
 4004d40:	4006d180 	call	4006d18 <strcmp>
 4004d44:	1000061e 	bne	r2,zero,4004d60 <_setlocale_r+0x40>
 4004d48:	00810074 	movhi	r2,1025
 4004d4c:	10bf7204 	addi	r2,r2,-568
 4004d50:	dfc00117 	ldw	ra,4(sp)
 4004d54:	dc000017 	ldw	r16,0(sp)
 4004d58:	dec00204 	addi	sp,sp,8
 4004d5c:	f800283a 	ret
 4004d60:	01410074 	movhi	r5,1025
 4004d64:	297f7204 	addi	r5,r5,-568
 4004d68:	8009883a 	mov	r4,r16
 4004d6c:	4006d180 	call	4006d18 <strcmp>
 4004d70:	103ff526 	beq	r2,zero,4004d48 <__ram_exceptions_end+0xfbfe4b04>
 4004d74:	01410074 	movhi	r5,1025
 4004d78:	297f5d04 	addi	r5,r5,-652
 4004d7c:	8009883a 	mov	r4,r16
 4004d80:	4006d180 	call	4006d18 <strcmp>
 4004d84:	103ff026 	beq	r2,zero,4004d48 <__ram_exceptions_end+0xfbfe4b04>
 4004d88:	0005883a 	mov	r2,zero
 4004d8c:	003ff006 	br	4004d50 <__ram_exceptions_end+0xfbfe4b0c>
 4004d90:	00810074 	movhi	r2,1025
 4004d94:	10bf7204 	addi	r2,r2,-568
 4004d98:	f800283a 	ret

04004d9c <__locale_charset>:
 4004d9c:	00810074 	movhi	r2,1025
 4004da0:	10813204 	addi	r2,r2,1224
 4004da4:	f800283a 	ret

04004da8 <__locale_mb_cur_max>:
 4004da8:	00810074 	movhi	r2,1025
 4004dac:	10830104 	addi	r2,r2,3076
 4004db0:	10800017 	ldw	r2,0(r2)
 4004db4:	f800283a 	ret

04004db8 <__locale_msgcharset>:
 4004db8:	00810074 	movhi	r2,1025
 4004dbc:	10812a04 	addi	r2,r2,1192
 4004dc0:	f800283a 	ret

04004dc4 <__locale_cjk_lang>:
 4004dc4:	0005883a 	mov	r2,zero
 4004dc8:	f800283a 	ret

04004dcc <_localeconv_r>:
 4004dcc:	00810074 	movhi	r2,1025
 4004dd0:	10813a04 	addi	r2,r2,1256
 4004dd4:	f800283a 	ret

04004dd8 <setlocale>:
 4004dd8:	00810074 	movhi	r2,1025
 4004ddc:	10830004 	addi	r2,r2,3072
 4004de0:	280d883a 	mov	r6,r5
 4004de4:	200b883a 	mov	r5,r4
 4004de8:	11000017 	ldw	r4,0(r2)
 4004dec:	4004d201 	jmpi	4004d20 <_setlocale_r>

04004df0 <localeconv>:
 4004df0:	00810074 	movhi	r2,1025
 4004df4:	10813a04 	addi	r2,r2,1256
 4004df8:	f800283a 	ret

04004dfc <__smakebuf_r>:
 4004dfc:	2880030b 	ldhu	r2,12(r5)
 4004e00:	10c0008c 	andi	r3,r2,2
 4004e04:	1800411e 	bne	r3,zero,4004f0c <__smakebuf_r+0x110>
 4004e08:	deffec04 	addi	sp,sp,-80
 4004e0c:	dc000f15 	stw	r16,60(sp)
 4004e10:	2821883a 	mov	r16,r5
 4004e14:	2940038f 	ldh	r5,14(r5)
 4004e18:	dc401015 	stw	r17,64(sp)
 4004e1c:	dfc01315 	stw	ra,76(sp)
 4004e20:	dcc01215 	stw	r19,72(sp)
 4004e24:	dc801115 	stw	r18,68(sp)
 4004e28:	2023883a 	mov	r17,r4
 4004e2c:	28001c16 	blt	r5,zero,4004ea0 <__smakebuf_r+0xa4>
 4004e30:	d80d883a 	mov	r6,sp
 4004e34:	40089580 	call	4008958 <_fstat_r>
 4004e38:	10001816 	blt	r2,zero,4004e9c <__smakebuf_r+0xa0>
 4004e3c:	d8800117 	ldw	r2,4(sp)
 4004e40:	00e00014 	movui	r3,32768
 4004e44:	10bc000c 	andi	r2,r2,61440
 4004e48:	14c80020 	cmpeqi	r19,r2,8192
 4004e4c:	10c03726 	beq	r2,r3,4004f2c <__smakebuf_r+0x130>
 4004e50:	80c0030b 	ldhu	r3,12(r16)
 4004e54:	18c20014 	ori	r3,r3,2048
 4004e58:	80c0030d 	sth	r3,12(r16)
 4004e5c:	00c80004 	movi	r3,8192
 4004e60:	10c0521e 	bne	r2,r3,4004fac <__smakebuf_r+0x1b0>
 4004e64:	8140038f 	ldh	r5,14(r16)
 4004e68:	8809883a 	mov	r4,r17
 4004e6c:	4008e700 	call	4008e70 <_isatty_r>
 4004e70:	10004c26 	beq	r2,zero,4004fa4 <__smakebuf_r+0x1a8>
 4004e74:	8080030b 	ldhu	r2,12(r16)
 4004e78:	80c010c4 	addi	r3,r16,67
 4004e7c:	80c00015 	stw	r3,0(r16)
 4004e80:	10800054 	ori	r2,r2,1
 4004e84:	8080030d 	sth	r2,12(r16)
 4004e88:	00800044 	movi	r2,1
 4004e8c:	80c00415 	stw	r3,16(r16)
 4004e90:	80800515 	stw	r2,20(r16)
 4004e94:	04810004 	movi	r18,1024
 4004e98:	00000706 	br	4004eb8 <__smakebuf_r+0xbc>
 4004e9c:	8080030b 	ldhu	r2,12(r16)
 4004ea0:	10c0200c 	andi	r3,r2,128
 4004ea4:	18001f1e 	bne	r3,zero,4004f24 <__smakebuf_r+0x128>
 4004ea8:	04810004 	movi	r18,1024
 4004eac:	10820014 	ori	r2,r2,2048
 4004eb0:	8080030d 	sth	r2,12(r16)
 4004eb4:	0027883a 	mov	r19,zero
 4004eb8:	900b883a 	mov	r5,r18
 4004ebc:	8809883a 	mov	r4,r17
 4004ec0:	4004fb80 	call	4004fb8 <_malloc_r>
 4004ec4:	10002c26 	beq	r2,zero,4004f78 <__smakebuf_r+0x17c>
 4004ec8:	80c0030b 	ldhu	r3,12(r16)
 4004ecc:	01010034 	movhi	r4,1024
 4004ed0:	2110f304 	addi	r4,r4,17356
 4004ed4:	89000f15 	stw	r4,60(r17)
 4004ed8:	18c02014 	ori	r3,r3,128
 4004edc:	80c0030d 	sth	r3,12(r16)
 4004ee0:	80800015 	stw	r2,0(r16)
 4004ee4:	80800415 	stw	r2,16(r16)
 4004ee8:	84800515 	stw	r18,20(r16)
 4004eec:	98001a1e 	bne	r19,zero,4004f58 <__smakebuf_r+0x15c>
 4004ef0:	dfc01317 	ldw	ra,76(sp)
 4004ef4:	dcc01217 	ldw	r19,72(sp)
 4004ef8:	dc801117 	ldw	r18,68(sp)
 4004efc:	dc401017 	ldw	r17,64(sp)
 4004f00:	dc000f17 	ldw	r16,60(sp)
 4004f04:	dec01404 	addi	sp,sp,80
 4004f08:	f800283a 	ret
 4004f0c:	288010c4 	addi	r2,r5,67
 4004f10:	28800015 	stw	r2,0(r5)
 4004f14:	28800415 	stw	r2,16(r5)
 4004f18:	00800044 	movi	r2,1
 4004f1c:	28800515 	stw	r2,20(r5)
 4004f20:	f800283a 	ret
 4004f24:	04801004 	movi	r18,64
 4004f28:	003fe006 	br	4004eac <__ram_exceptions_end+0xfbfe4c68>
 4004f2c:	81000a17 	ldw	r4,40(r16)
 4004f30:	00c10034 	movhi	r3,1024
 4004f34:	18db2d04 	addi	r3,r3,27828
 4004f38:	20ffc51e 	bne	r4,r3,4004e50 <__ram_exceptions_end+0xfbfe4c0c>
 4004f3c:	8080030b 	ldhu	r2,12(r16)
 4004f40:	04810004 	movi	r18,1024
 4004f44:	84801315 	stw	r18,76(r16)
 4004f48:	1484b03a 	or	r2,r2,r18
 4004f4c:	8080030d 	sth	r2,12(r16)
 4004f50:	0027883a 	mov	r19,zero
 4004f54:	003fd806 	br	4004eb8 <__ram_exceptions_end+0xfbfe4c74>
 4004f58:	8140038f 	ldh	r5,14(r16)
 4004f5c:	8809883a 	mov	r4,r17
 4004f60:	4008e700 	call	4008e70 <_isatty_r>
 4004f64:	103fe226 	beq	r2,zero,4004ef0 <__ram_exceptions_end+0xfbfe4cac>
 4004f68:	8080030b 	ldhu	r2,12(r16)
 4004f6c:	10800054 	ori	r2,r2,1
 4004f70:	8080030d 	sth	r2,12(r16)
 4004f74:	003fde06 	br	4004ef0 <__ram_exceptions_end+0xfbfe4cac>
 4004f78:	8080030b 	ldhu	r2,12(r16)
 4004f7c:	10c0800c 	andi	r3,r2,512
 4004f80:	183fdb1e 	bne	r3,zero,4004ef0 <__ram_exceptions_end+0xfbfe4cac>
 4004f84:	10800094 	ori	r2,r2,2
 4004f88:	80c010c4 	addi	r3,r16,67
 4004f8c:	8080030d 	sth	r2,12(r16)
 4004f90:	00800044 	movi	r2,1
 4004f94:	80c00015 	stw	r3,0(r16)
 4004f98:	80c00415 	stw	r3,16(r16)
 4004f9c:	80800515 	stw	r2,20(r16)
 4004fa0:	003fd306 	br	4004ef0 <__ram_exceptions_end+0xfbfe4cac>
 4004fa4:	04810004 	movi	r18,1024
 4004fa8:	003fc306 	br	4004eb8 <__ram_exceptions_end+0xfbfe4c74>
 4004fac:	0027883a 	mov	r19,zero
 4004fb0:	04810004 	movi	r18,1024
 4004fb4:	003fc006 	br	4004eb8 <__ram_exceptions_end+0xfbfe4c74>

04004fb8 <_malloc_r>:
 4004fb8:	defff504 	addi	sp,sp,-44
 4004fbc:	dc800315 	stw	r18,12(sp)
 4004fc0:	dfc00a15 	stw	ra,40(sp)
 4004fc4:	df000915 	stw	fp,36(sp)
 4004fc8:	ddc00815 	stw	r23,32(sp)
 4004fcc:	dd800715 	stw	r22,28(sp)
 4004fd0:	dd400615 	stw	r21,24(sp)
 4004fd4:	dd000515 	stw	r20,20(sp)
 4004fd8:	dcc00415 	stw	r19,16(sp)
 4004fdc:	dc400215 	stw	r17,8(sp)
 4004fe0:	dc000115 	stw	r16,4(sp)
 4004fe4:	288002c4 	addi	r2,r5,11
 4004fe8:	00c00584 	movi	r3,22
 4004fec:	2025883a 	mov	r18,r4
 4004ff0:	18807f2e 	bgeu	r3,r2,40051f0 <_malloc_r+0x238>
 4004ff4:	047ffe04 	movi	r17,-8
 4004ff8:	1462703a 	and	r17,r2,r17
 4004ffc:	8800a316 	blt	r17,zero,400528c <_malloc_r+0x2d4>
 4005000:	8940a236 	bltu	r17,r5,400528c <_malloc_r+0x2d4>
 4005004:	400d21c0 	call	400d21c <__malloc_lock>
 4005008:	00807dc4 	movi	r2,503
 400500c:	1441e92e 	bgeu	r2,r17,40057b4 <_malloc_r+0x7fc>
 4005010:	8804d27a 	srli	r2,r17,9
 4005014:	1000a126 	beq	r2,zero,400529c <_malloc_r+0x2e4>
 4005018:	00c00104 	movi	r3,4
 400501c:	18811e36 	bltu	r3,r2,4005498 <_malloc_r+0x4e0>
 4005020:	8804d1ba 	srli	r2,r17,6
 4005024:	12000e44 	addi	r8,r2,57
 4005028:	11c00e04 	addi	r7,r2,56
 400502c:	4209883a 	add	r4,r8,r8
 4005030:	04c10074 	movhi	r19,1025
 4005034:	2109883a 	add	r4,r4,r4
 4005038:	9cc14804 	addi	r19,r19,1312
 400503c:	2109883a 	add	r4,r4,r4
 4005040:	9909883a 	add	r4,r19,r4
 4005044:	24000117 	ldw	r16,4(r4)
 4005048:	213ffe04 	addi	r4,r4,-8
 400504c:	24009726 	beq	r4,r16,40052ac <_malloc_r+0x2f4>
 4005050:	80800117 	ldw	r2,4(r16)
 4005054:	01bfff04 	movi	r6,-4
 4005058:	014003c4 	movi	r5,15
 400505c:	1184703a 	and	r2,r2,r6
 4005060:	1447c83a 	sub	r3,r2,r17
 4005064:	28c00716 	blt	r5,r3,4005084 <_malloc_r+0xcc>
 4005068:	1800920e 	bge	r3,zero,40052b4 <_malloc_r+0x2fc>
 400506c:	84000317 	ldw	r16,12(r16)
 4005070:	24008e26 	beq	r4,r16,40052ac <_malloc_r+0x2f4>
 4005074:	80800117 	ldw	r2,4(r16)
 4005078:	1184703a 	and	r2,r2,r6
 400507c:	1447c83a 	sub	r3,r2,r17
 4005080:	28fff90e 	bge	r5,r3,4005068 <__ram_exceptions_end+0xfbfe4e24>
 4005084:	3809883a 	mov	r4,r7
 4005088:	01810074 	movhi	r6,1025
 400508c:	9c000417 	ldw	r16,16(r19)
 4005090:	31814804 	addi	r6,r6,1312
 4005094:	32000204 	addi	r8,r6,8
 4005098:	82013426 	beq	r16,r8,400556c <_malloc_r+0x5b4>
 400509c:	80c00117 	ldw	r3,4(r16)
 40050a0:	00bfff04 	movi	r2,-4
 40050a4:	188e703a 	and	r7,r3,r2
 40050a8:	3c45c83a 	sub	r2,r7,r17
 40050ac:	00c003c4 	movi	r3,15
 40050b0:	18811f16 	blt	r3,r2,4005530 <_malloc_r+0x578>
 40050b4:	32000515 	stw	r8,20(r6)
 40050b8:	32000415 	stw	r8,16(r6)
 40050bc:	10007f0e 	bge	r2,zero,40052bc <_malloc_r+0x304>
 40050c0:	00807fc4 	movi	r2,511
 40050c4:	11c0fd36 	bltu	r2,r7,40054bc <_malloc_r+0x504>
 40050c8:	3806d0fa 	srli	r3,r7,3
 40050cc:	01c00044 	movi	r7,1
 40050d0:	30800117 	ldw	r2,4(r6)
 40050d4:	19400044 	addi	r5,r3,1
 40050d8:	294b883a 	add	r5,r5,r5
 40050dc:	1807d0ba 	srai	r3,r3,2
 40050e0:	294b883a 	add	r5,r5,r5
 40050e4:	294b883a 	add	r5,r5,r5
 40050e8:	298b883a 	add	r5,r5,r6
 40050ec:	38c6983a 	sll	r3,r7,r3
 40050f0:	29c00017 	ldw	r7,0(r5)
 40050f4:	2a7ffe04 	addi	r9,r5,-8
 40050f8:	1886b03a 	or	r3,r3,r2
 40050fc:	82400315 	stw	r9,12(r16)
 4005100:	81c00215 	stw	r7,8(r16)
 4005104:	30c00115 	stw	r3,4(r6)
 4005108:	2c000015 	stw	r16,0(r5)
 400510c:	3c000315 	stw	r16,12(r7)
 4005110:	2005d0ba 	srai	r2,r4,2
 4005114:	01400044 	movi	r5,1
 4005118:	288a983a 	sll	r5,r5,r2
 400511c:	19406f36 	bltu	r3,r5,40052dc <_malloc_r+0x324>
 4005120:	28c4703a 	and	r2,r5,r3
 4005124:	10000a1e 	bne	r2,zero,4005150 <_malloc_r+0x198>
 4005128:	00bfff04 	movi	r2,-4
 400512c:	294b883a 	add	r5,r5,r5
 4005130:	2088703a 	and	r4,r4,r2
 4005134:	28c4703a 	and	r2,r5,r3
 4005138:	21000104 	addi	r4,r4,4
 400513c:	1000041e 	bne	r2,zero,4005150 <_malloc_r+0x198>
 4005140:	294b883a 	add	r5,r5,r5
 4005144:	28c4703a 	and	r2,r5,r3
 4005148:	21000104 	addi	r4,r4,4
 400514c:	103ffc26 	beq	r2,zero,4005140 <__ram_exceptions_end+0xfbfe4efc>
 4005150:	02bfff04 	movi	r10,-4
 4005154:	024003c4 	movi	r9,15
 4005158:	21800044 	addi	r6,r4,1
 400515c:	318d883a 	add	r6,r6,r6
 4005160:	318d883a 	add	r6,r6,r6
 4005164:	318d883a 	add	r6,r6,r6
 4005168:	998d883a 	add	r6,r19,r6
 400516c:	333ffe04 	addi	r12,r6,-8
 4005170:	2017883a 	mov	r11,r4
 4005174:	31800104 	addi	r6,r6,4
 4005178:	34000017 	ldw	r16,0(r6)
 400517c:	31fffd04 	addi	r7,r6,-12
 4005180:	81c0041e 	bne	r16,r7,4005194 <_malloc_r+0x1dc>
 4005184:	0000fb06 	br	4005574 <_malloc_r+0x5bc>
 4005188:	1801030e 	bge	r3,zero,4005598 <_malloc_r+0x5e0>
 400518c:	84000317 	ldw	r16,12(r16)
 4005190:	81c0f826 	beq	r16,r7,4005574 <_malloc_r+0x5bc>
 4005194:	80800117 	ldw	r2,4(r16)
 4005198:	1284703a 	and	r2,r2,r10
 400519c:	1447c83a 	sub	r3,r2,r17
 40051a0:	48fff90e 	bge	r9,r3,4005188 <__ram_exceptions_end+0xfbfe4f44>
 40051a4:	80800317 	ldw	r2,12(r16)
 40051a8:	81000217 	ldw	r4,8(r16)
 40051ac:	89400054 	ori	r5,r17,1
 40051b0:	81400115 	stw	r5,4(r16)
 40051b4:	20800315 	stw	r2,12(r4)
 40051b8:	11000215 	stw	r4,8(r2)
 40051bc:	8463883a 	add	r17,r16,r17
 40051c0:	9c400515 	stw	r17,20(r19)
 40051c4:	9c400415 	stw	r17,16(r19)
 40051c8:	18800054 	ori	r2,r3,1
 40051cc:	88800115 	stw	r2,4(r17)
 40051d0:	8a000315 	stw	r8,12(r17)
 40051d4:	8a000215 	stw	r8,8(r17)
 40051d8:	88e3883a 	add	r17,r17,r3
 40051dc:	88c00015 	stw	r3,0(r17)
 40051e0:	9009883a 	mov	r4,r18
 40051e4:	400d2400 	call	400d240 <__malloc_unlock>
 40051e8:	80800204 	addi	r2,r16,8
 40051ec:	00001b06 	br	400525c <_malloc_r+0x2a4>
 40051f0:	04400404 	movi	r17,16
 40051f4:	89402536 	bltu	r17,r5,400528c <_malloc_r+0x2d4>
 40051f8:	400d21c0 	call	400d21c <__malloc_lock>
 40051fc:	00800184 	movi	r2,6
 4005200:	01000084 	movi	r4,2
 4005204:	04c10074 	movhi	r19,1025
 4005208:	1085883a 	add	r2,r2,r2
 400520c:	9cc14804 	addi	r19,r19,1312
 4005210:	1085883a 	add	r2,r2,r2
 4005214:	9885883a 	add	r2,r19,r2
 4005218:	14000117 	ldw	r16,4(r2)
 400521c:	10fffe04 	addi	r3,r2,-8
 4005220:	80c0d926 	beq	r16,r3,4005588 <_malloc_r+0x5d0>
 4005224:	80c00117 	ldw	r3,4(r16)
 4005228:	81000317 	ldw	r4,12(r16)
 400522c:	00bfff04 	movi	r2,-4
 4005230:	1884703a 	and	r2,r3,r2
 4005234:	81400217 	ldw	r5,8(r16)
 4005238:	8085883a 	add	r2,r16,r2
 400523c:	10c00117 	ldw	r3,4(r2)
 4005240:	29000315 	stw	r4,12(r5)
 4005244:	21400215 	stw	r5,8(r4)
 4005248:	18c00054 	ori	r3,r3,1
 400524c:	10c00115 	stw	r3,4(r2)
 4005250:	9009883a 	mov	r4,r18
 4005254:	400d2400 	call	400d240 <__malloc_unlock>
 4005258:	80800204 	addi	r2,r16,8
 400525c:	dfc00a17 	ldw	ra,40(sp)
 4005260:	df000917 	ldw	fp,36(sp)
 4005264:	ddc00817 	ldw	r23,32(sp)
 4005268:	dd800717 	ldw	r22,28(sp)
 400526c:	dd400617 	ldw	r21,24(sp)
 4005270:	dd000517 	ldw	r20,20(sp)
 4005274:	dcc00417 	ldw	r19,16(sp)
 4005278:	dc800317 	ldw	r18,12(sp)
 400527c:	dc400217 	ldw	r17,8(sp)
 4005280:	dc000117 	ldw	r16,4(sp)
 4005284:	dec00b04 	addi	sp,sp,44
 4005288:	f800283a 	ret
 400528c:	00800304 	movi	r2,12
 4005290:	90800015 	stw	r2,0(r18)
 4005294:	0005883a 	mov	r2,zero
 4005298:	003ff006 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 400529c:	01002004 	movi	r4,128
 40052a0:	02001004 	movi	r8,64
 40052a4:	01c00fc4 	movi	r7,63
 40052a8:	003f6106 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 40052ac:	4009883a 	mov	r4,r8
 40052b0:	003f7506 	br	4005088 <__ram_exceptions_end+0xfbfe4e44>
 40052b4:	81000317 	ldw	r4,12(r16)
 40052b8:	003fde06 	br	4005234 <__ram_exceptions_end+0xfbfe4ff0>
 40052bc:	81c5883a 	add	r2,r16,r7
 40052c0:	11400117 	ldw	r5,4(r2)
 40052c4:	9009883a 	mov	r4,r18
 40052c8:	29400054 	ori	r5,r5,1
 40052cc:	11400115 	stw	r5,4(r2)
 40052d0:	400d2400 	call	400d240 <__malloc_unlock>
 40052d4:	80800204 	addi	r2,r16,8
 40052d8:	003fe006 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 40052dc:	9c000217 	ldw	r16,8(r19)
 40052e0:	00bfff04 	movi	r2,-4
 40052e4:	85800117 	ldw	r22,4(r16)
 40052e8:	b0ac703a 	and	r22,r22,r2
 40052ec:	b4400336 	bltu	r22,r17,40052fc <_malloc_r+0x344>
 40052f0:	b445c83a 	sub	r2,r22,r17
 40052f4:	00c003c4 	movi	r3,15
 40052f8:	18805d16 	blt	r3,r2,4005470 <_malloc_r+0x4b8>
 40052fc:	05c10074 	movhi	r23,1025
 4005300:	00810074 	movhi	r2,1025
 4005304:	10860904 	addi	r2,r2,6180
 4005308:	bdc30204 	addi	r23,r23,3080
 400530c:	15400017 	ldw	r21,0(r2)
 4005310:	b8c00017 	ldw	r3,0(r23)
 4005314:	00bfffc4 	movi	r2,-1
 4005318:	858d883a 	add	r6,r16,r22
 400531c:	8d6b883a 	add	r21,r17,r21
 4005320:	1880ea26 	beq	r3,r2,40056cc <_malloc_r+0x714>
 4005324:	ad4403c4 	addi	r21,r21,4111
 4005328:	00bc0004 	movi	r2,-4096
 400532c:	a8aa703a 	and	r21,r21,r2
 4005330:	a80b883a 	mov	r5,r21
 4005334:	9009883a 	mov	r4,r18
 4005338:	d9800015 	stw	r6,0(sp)
 400533c:	4006b880 	call	4006b88 <_sbrk_r>
 4005340:	1029883a 	mov	r20,r2
 4005344:	00bfffc4 	movi	r2,-1
 4005348:	d9800017 	ldw	r6,0(sp)
 400534c:	a080e826 	beq	r20,r2,40056f0 <_malloc_r+0x738>
 4005350:	a180a636 	bltu	r20,r6,40055ec <_malloc_r+0x634>
 4005354:	07010074 	movhi	fp,1025
 4005358:	e7061004 	addi	fp,fp,6208
 400535c:	e0800017 	ldw	r2,0(fp)
 4005360:	a887883a 	add	r3,r21,r2
 4005364:	e0c00015 	stw	r3,0(fp)
 4005368:	3500e626 	beq	r6,r20,4005704 <_malloc_r+0x74c>
 400536c:	b9000017 	ldw	r4,0(r23)
 4005370:	00bfffc4 	movi	r2,-1
 4005374:	2080ee26 	beq	r4,r2,4005730 <_malloc_r+0x778>
 4005378:	a185c83a 	sub	r2,r20,r6
 400537c:	10c5883a 	add	r2,r2,r3
 4005380:	e0800015 	stw	r2,0(fp)
 4005384:	a0c001cc 	andi	r3,r20,7
 4005388:	1800bc26 	beq	r3,zero,400567c <_malloc_r+0x6c4>
 400538c:	a0e9c83a 	sub	r20,r20,r3
 4005390:	00840204 	movi	r2,4104
 4005394:	a5000204 	addi	r20,r20,8
 4005398:	10c7c83a 	sub	r3,r2,r3
 400539c:	a545883a 	add	r2,r20,r21
 40053a0:	1083ffcc 	andi	r2,r2,4095
 40053a4:	18abc83a 	sub	r21,r3,r2
 40053a8:	a80b883a 	mov	r5,r21
 40053ac:	9009883a 	mov	r4,r18
 40053b0:	4006b880 	call	4006b88 <_sbrk_r>
 40053b4:	00ffffc4 	movi	r3,-1
 40053b8:	10c0e126 	beq	r2,r3,4005740 <_malloc_r+0x788>
 40053bc:	1505c83a 	sub	r2,r2,r20
 40053c0:	1545883a 	add	r2,r2,r21
 40053c4:	10800054 	ori	r2,r2,1
 40053c8:	e0c00017 	ldw	r3,0(fp)
 40053cc:	9d000215 	stw	r20,8(r19)
 40053d0:	a0800115 	stw	r2,4(r20)
 40053d4:	a8c7883a 	add	r3,r21,r3
 40053d8:	e0c00015 	stw	r3,0(fp)
 40053dc:	84c00e26 	beq	r16,r19,4005418 <_malloc_r+0x460>
 40053e0:	018003c4 	movi	r6,15
 40053e4:	3580a72e 	bgeu	r6,r22,4005684 <_malloc_r+0x6cc>
 40053e8:	81400117 	ldw	r5,4(r16)
 40053ec:	013ffe04 	movi	r4,-8
 40053f0:	b0bffd04 	addi	r2,r22,-12
 40053f4:	1104703a 	and	r2,r2,r4
 40053f8:	2900004c 	andi	r4,r5,1
 40053fc:	2088b03a 	or	r4,r4,r2
 4005400:	81000115 	stw	r4,4(r16)
 4005404:	01400144 	movi	r5,5
 4005408:	8089883a 	add	r4,r16,r2
 400540c:	21400115 	stw	r5,4(r4)
 4005410:	21400215 	stw	r5,8(r4)
 4005414:	3080cd36 	bltu	r6,r2,400574c <_malloc_r+0x794>
 4005418:	00810074 	movhi	r2,1025
 400541c:	10860804 	addi	r2,r2,6176
 4005420:	11000017 	ldw	r4,0(r2)
 4005424:	20c0012e 	bgeu	r4,r3,400542c <_malloc_r+0x474>
 4005428:	10c00015 	stw	r3,0(r2)
 400542c:	00810074 	movhi	r2,1025
 4005430:	10860704 	addi	r2,r2,6172
 4005434:	11000017 	ldw	r4,0(r2)
 4005438:	9c000217 	ldw	r16,8(r19)
 400543c:	20c0012e 	bgeu	r4,r3,4005444 <_malloc_r+0x48c>
 4005440:	10c00015 	stw	r3,0(r2)
 4005444:	80c00117 	ldw	r3,4(r16)
 4005448:	00bfff04 	movi	r2,-4
 400544c:	1886703a 	and	r3,r3,r2
 4005450:	1c45c83a 	sub	r2,r3,r17
 4005454:	1c400236 	bltu	r3,r17,4005460 <_malloc_r+0x4a8>
 4005458:	00c003c4 	movi	r3,15
 400545c:	18800416 	blt	r3,r2,4005470 <_malloc_r+0x4b8>
 4005460:	9009883a 	mov	r4,r18
 4005464:	400d2400 	call	400d240 <__malloc_unlock>
 4005468:	0005883a 	mov	r2,zero
 400546c:	003f7b06 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 4005470:	88c00054 	ori	r3,r17,1
 4005474:	80c00115 	stw	r3,4(r16)
 4005478:	8463883a 	add	r17,r16,r17
 400547c:	10800054 	ori	r2,r2,1
 4005480:	9c400215 	stw	r17,8(r19)
 4005484:	88800115 	stw	r2,4(r17)
 4005488:	9009883a 	mov	r4,r18
 400548c:	400d2400 	call	400d240 <__malloc_unlock>
 4005490:	80800204 	addi	r2,r16,8
 4005494:	003f7106 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 4005498:	00c00504 	movi	r3,20
 400549c:	18804a2e 	bgeu	r3,r2,40055c8 <_malloc_r+0x610>
 40054a0:	00c01504 	movi	r3,84
 40054a4:	18806e36 	bltu	r3,r2,4005660 <_malloc_r+0x6a8>
 40054a8:	8804d33a 	srli	r2,r17,12
 40054ac:	12001bc4 	addi	r8,r2,111
 40054b0:	11c01b84 	addi	r7,r2,110
 40054b4:	4209883a 	add	r4,r8,r8
 40054b8:	003edd06 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 40054bc:	3804d27a 	srli	r2,r7,9
 40054c0:	00c00104 	movi	r3,4
 40054c4:	1880442e 	bgeu	r3,r2,40055d8 <_malloc_r+0x620>
 40054c8:	00c00504 	movi	r3,20
 40054cc:	18808136 	bltu	r3,r2,40056d4 <_malloc_r+0x71c>
 40054d0:	11401704 	addi	r5,r2,92
 40054d4:	10c016c4 	addi	r3,r2,91
 40054d8:	294b883a 	add	r5,r5,r5
 40054dc:	294b883a 	add	r5,r5,r5
 40054e0:	294b883a 	add	r5,r5,r5
 40054e4:	994b883a 	add	r5,r19,r5
 40054e8:	28800017 	ldw	r2,0(r5)
 40054ec:	01810074 	movhi	r6,1025
 40054f0:	297ffe04 	addi	r5,r5,-8
 40054f4:	31814804 	addi	r6,r6,1312
 40054f8:	28806526 	beq	r5,r2,4005690 <_malloc_r+0x6d8>
 40054fc:	01bfff04 	movi	r6,-4
 4005500:	10c00117 	ldw	r3,4(r2)
 4005504:	1986703a 	and	r3,r3,r6
 4005508:	38c0022e 	bgeu	r7,r3,4005514 <_malloc_r+0x55c>
 400550c:	10800217 	ldw	r2,8(r2)
 4005510:	28bffb1e 	bne	r5,r2,4005500 <__ram_exceptions_end+0xfbfe52bc>
 4005514:	11400317 	ldw	r5,12(r2)
 4005518:	98c00117 	ldw	r3,4(r19)
 400551c:	81400315 	stw	r5,12(r16)
 4005520:	80800215 	stw	r2,8(r16)
 4005524:	2c000215 	stw	r16,8(r5)
 4005528:	14000315 	stw	r16,12(r2)
 400552c:	003ef806 	br	4005110 <__ram_exceptions_end+0xfbfe4ecc>
 4005530:	88c00054 	ori	r3,r17,1
 4005534:	80c00115 	stw	r3,4(r16)
 4005538:	8463883a 	add	r17,r16,r17
 400553c:	34400515 	stw	r17,20(r6)
 4005540:	34400415 	stw	r17,16(r6)
 4005544:	10c00054 	ori	r3,r2,1
 4005548:	8a000315 	stw	r8,12(r17)
 400554c:	8a000215 	stw	r8,8(r17)
 4005550:	88c00115 	stw	r3,4(r17)
 4005554:	88a3883a 	add	r17,r17,r2
 4005558:	88800015 	stw	r2,0(r17)
 400555c:	9009883a 	mov	r4,r18
 4005560:	400d2400 	call	400d240 <__malloc_unlock>
 4005564:	80800204 	addi	r2,r16,8
 4005568:	003f3c06 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 400556c:	30c00117 	ldw	r3,4(r6)
 4005570:	003ee706 	br	4005110 <__ram_exceptions_end+0xfbfe4ecc>
 4005574:	5ac00044 	addi	r11,r11,1
 4005578:	588000cc 	andi	r2,r11,3
 400557c:	31800204 	addi	r6,r6,8
 4005580:	103efd1e 	bne	r2,zero,4005178 <__ram_exceptions_end+0xfbfe4f34>
 4005584:	00002406 	br	4005618 <_malloc_r+0x660>
 4005588:	14000317 	ldw	r16,12(r2)
 400558c:	143f251e 	bne	r2,r16,4005224 <__ram_exceptions_end+0xfbfe4fe0>
 4005590:	21000084 	addi	r4,r4,2
 4005594:	003ebc06 	br	4005088 <__ram_exceptions_end+0xfbfe4e44>
 4005598:	8085883a 	add	r2,r16,r2
 400559c:	10c00117 	ldw	r3,4(r2)
 40055a0:	81000317 	ldw	r4,12(r16)
 40055a4:	81400217 	ldw	r5,8(r16)
 40055a8:	18c00054 	ori	r3,r3,1
 40055ac:	10c00115 	stw	r3,4(r2)
 40055b0:	29000315 	stw	r4,12(r5)
 40055b4:	21400215 	stw	r5,8(r4)
 40055b8:	9009883a 	mov	r4,r18
 40055bc:	400d2400 	call	400d240 <__malloc_unlock>
 40055c0:	80800204 	addi	r2,r16,8
 40055c4:	003f2506 	br	400525c <__ram_exceptions_end+0xfbfe5018>
 40055c8:	12001704 	addi	r8,r2,92
 40055cc:	11c016c4 	addi	r7,r2,91
 40055d0:	4209883a 	add	r4,r8,r8
 40055d4:	003e9606 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 40055d8:	3804d1ba 	srli	r2,r7,6
 40055dc:	11400e44 	addi	r5,r2,57
 40055e0:	10c00e04 	addi	r3,r2,56
 40055e4:	294b883a 	add	r5,r5,r5
 40055e8:	003fbc06 	br	40054dc <__ram_exceptions_end+0xfbfe5298>
 40055ec:	84ff5926 	beq	r16,r19,4005354 <__ram_exceptions_end+0xfbfe5110>
 40055f0:	00810074 	movhi	r2,1025
 40055f4:	10814804 	addi	r2,r2,1312
 40055f8:	14000217 	ldw	r16,8(r2)
 40055fc:	00bfff04 	movi	r2,-4
 4005600:	80c00117 	ldw	r3,4(r16)
 4005604:	1886703a 	and	r3,r3,r2
 4005608:	003f9106 	br	4005450 <__ram_exceptions_end+0xfbfe520c>
 400560c:	60800217 	ldw	r2,8(r12)
 4005610:	213fffc4 	addi	r4,r4,-1
 4005614:	1300651e 	bne	r2,r12,40057ac <_malloc_r+0x7f4>
 4005618:	208000cc 	andi	r2,r4,3
 400561c:	633ffe04 	addi	r12,r12,-8
 4005620:	103ffa1e 	bne	r2,zero,400560c <__ram_exceptions_end+0xfbfe53c8>
 4005624:	98800117 	ldw	r2,4(r19)
 4005628:	0146303a 	nor	r3,zero,r5
 400562c:	1884703a 	and	r2,r3,r2
 4005630:	98800115 	stw	r2,4(r19)
 4005634:	294b883a 	add	r5,r5,r5
 4005638:	117f2836 	bltu	r2,r5,40052dc <__ram_exceptions_end+0xfbfe5098>
 400563c:	283f2726 	beq	r5,zero,40052dc <__ram_exceptions_end+0xfbfe5098>
 4005640:	2886703a 	and	r3,r5,r2
 4005644:	5809883a 	mov	r4,r11
 4005648:	183ec31e 	bne	r3,zero,4005158 <__ram_exceptions_end+0xfbfe4f14>
 400564c:	294b883a 	add	r5,r5,r5
 4005650:	2886703a 	and	r3,r5,r2
 4005654:	21000104 	addi	r4,r4,4
 4005658:	183ffc26 	beq	r3,zero,400564c <__ram_exceptions_end+0xfbfe5408>
 400565c:	003ebe06 	br	4005158 <__ram_exceptions_end+0xfbfe4f14>
 4005660:	00c05504 	movi	r3,340
 4005664:	18801236 	bltu	r3,r2,40056b0 <_malloc_r+0x6f8>
 4005668:	8804d3fa 	srli	r2,r17,15
 400566c:	12001e04 	addi	r8,r2,120
 4005670:	11c01dc4 	addi	r7,r2,119
 4005674:	4209883a 	add	r4,r8,r8
 4005678:	003e6d06 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 400567c:	00c40004 	movi	r3,4096
 4005680:	003f4606 	br	400539c <__ram_exceptions_end+0xfbfe5158>
 4005684:	00800044 	movi	r2,1
 4005688:	a0800115 	stw	r2,4(r20)
 400568c:	003f7406 	br	4005460 <__ram_exceptions_end+0xfbfe521c>
 4005690:	1805d0ba 	srai	r2,r3,2
 4005694:	01c00044 	movi	r7,1
 4005698:	30c00117 	ldw	r3,4(r6)
 400569c:	388e983a 	sll	r7,r7,r2
 40056a0:	2805883a 	mov	r2,r5
 40056a4:	38c6b03a 	or	r3,r7,r3
 40056a8:	30c00115 	stw	r3,4(r6)
 40056ac:	003f9b06 	br	400551c <__ram_exceptions_end+0xfbfe52d8>
 40056b0:	00c15504 	movi	r3,1364
 40056b4:	18801a36 	bltu	r3,r2,4005720 <_malloc_r+0x768>
 40056b8:	8804d4ba 	srli	r2,r17,18
 40056bc:	12001f44 	addi	r8,r2,125
 40056c0:	11c01f04 	addi	r7,r2,124
 40056c4:	4209883a 	add	r4,r8,r8
 40056c8:	003e5906 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 40056cc:	ad400404 	addi	r21,r21,16
 40056d0:	003f1706 	br	4005330 <__ram_exceptions_end+0xfbfe50ec>
 40056d4:	00c01504 	movi	r3,84
 40056d8:	18802336 	bltu	r3,r2,4005768 <_malloc_r+0x7b0>
 40056dc:	3804d33a 	srli	r2,r7,12
 40056e0:	11401bc4 	addi	r5,r2,111
 40056e4:	10c01b84 	addi	r3,r2,110
 40056e8:	294b883a 	add	r5,r5,r5
 40056ec:	003f7b06 	br	40054dc <__ram_exceptions_end+0xfbfe5298>
 40056f0:	9c000217 	ldw	r16,8(r19)
 40056f4:	00bfff04 	movi	r2,-4
 40056f8:	80c00117 	ldw	r3,4(r16)
 40056fc:	1886703a 	and	r3,r3,r2
 4005700:	003f5306 	br	4005450 <__ram_exceptions_end+0xfbfe520c>
 4005704:	3083ffcc 	andi	r2,r6,4095
 4005708:	103f181e 	bne	r2,zero,400536c <__ram_exceptions_end+0xfbfe5128>
 400570c:	99000217 	ldw	r4,8(r19)
 4005710:	b545883a 	add	r2,r22,r21
 4005714:	10800054 	ori	r2,r2,1
 4005718:	20800115 	stw	r2,4(r4)
 400571c:	003f3e06 	br	4005418 <__ram_exceptions_end+0xfbfe51d4>
 4005720:	01003f84 	movi	r4,254
 4005724:	02001fc4 	movi	r8,127
 4005728:	01c01f84 	movi	r7,126
 400572c:	003e4006 	br	4005030 <__ram_exceptions_end+0xfbfe4dec>
 4005730:	00810074 	movhi	r2,1025
 4005734:	10830204 	addi	r2,r2,3080
 4005738:	15000015 	stw	r20,0(r2)
 400573c:	003f1106 	br	4005384 <__ram_exceptions_end+0xfbfe5140>
 4005740:	00800044 	movi	r2,1
 4005744:	002b883a 	mov	r21,zero
 4005748:	003f1f06 	br	40053c8 <__ram_exceptions_end+0xfbfe5184>
 400574c:	81400204 	addi	r5,r16,8
 4005750:	9009883a 	mov	r4,r18
 4005754:	40048880 	call	4004888 <_free_r>
 4005758:	00810074 	movhi	r2,1025
 400575c:	10861004 	addi	r2,r2,6208
 4005760:	10c00017 	ldw	r3,0(r2)
 4005764:	003f2c06 	br	4005418 <__ram_exceptions_end+0xfbfe51d4>
 4005768:	00c05504 	movi	r3,340
 400576c:	18800536 	bltu	r3,r2,4005784 <_malloc_r+0x7cc>
 4005770:	3804d3fa 	srli	r2,r7,15
 4005774:	11401e04 	addi	r5,r2,120
 4005778:	10c01dc4 	addi	r3,r2,119
 400577c:	294b883a 	add	r5,r5,r5
 4005780:	003f5606 	br	40054dc <__ram_exceptions_end+0xfbfe5298>
 4005784:	00c15504 	movi	r3,1364
 4005788:	18800536 	bltu	r3,r2,40057a0 <_malloc_r+0x7e8>
 400578c:	3804d4ba 	srli	r2,r7,18
 4005790:	11401f44 	addi	r5,r2,125
 4005794:	10c01f04 	addi	r3,r2,124
 4005798:	294b883a 	add	r5,r5,r5
 400579c:	003f4f06 	br	40054dc <__ram_exceptions_end+0xfbfe5298>
 40057a0:	01403f84 	movi	r5,254
 40057a4:	00c01f84 	movi	r3,126
 40057a8:	003f4c06 	br	40054dc <__ram_exceptions_end+0xfbfe5298>
 40057ac:	98800117 	ldw	r2,4(r19)
 40057b0:	003fa006 	br	4005634 <__ram_exceptions_end+0xfbfe53f0>
 40057b4:	8808d0fa 	srli	r4,r17,3
 40057b8:	20800044 	addi	r2,r4,1
 40057bc:	1085883a 	add	r2,r2,r2
 40057c0:	003e9006 	br	4005204 <__ram_exceptions_end+0xfbfe4fc0>

040057c4 <memchr>:
 40057c4:	208000cc 	andi	r2,r4,3
 40057c8:	280f883a 	mov	r7,r5
 40057cc:	10003426 	beq	r2,zero,40058a0 <memchr+0xdc>
 40057d0:	30bfffc4 	addi	r2,r6,-1
 40057d4:	30001a26 	beq	r6,zero,4005840 <memchr+0x7c>
 40057d8:	20c00003 	ldbu	r3,0(r4)
 40057dc:	29803fcc 	andi	r6,r5,255
 40057e0:	30c0051e 	bne	r6,r3,40057f8 <memchr+0x34>
 40057e4:	00001806 	br	4005848 <memchr+0x84>
 40057e8:	10001526 	beq	r2,zero,4005840 <memchr+0x7c>
 40057ec:	20c00003 	ldbu	r3,0(r4)
 40057f0:	10bfffc4 	addi	r2,r2,-1
 40057f4:	30c01426 	beq	r6,r3,4005848 <memchr+0x84>
 40057f8:	21000044 	addi	r4,r4,1
 40057fc:	20c000cc 	andi	r3,r4,3
 4005800:	183ff91e 	bne	r3,zero,40057e8 <__ram_exceptions_end+0xfbfe55a4>
 4005804:	020000c4 	movi	r8,3
 4005808:	40801136 	bltu	r8,r2,4005850 <memchr+0x8c>
 400580c:	10000c26 	beq	r2,zero,4005840 <memchr+0x7c>
 4005810:	20c00003 	ldbu	r3,0(r4)
 4005814:	29403fcc 	andi	r5,r5,255
 4005818:	28c00b26 	beq	r5,r3,4005848 <memchr+0x84>
 400581c:	20c00044 	addi	r3,r4,1
 4005820:	39803fcc 	andi	r6,r7,255
 4005824:	2089883a 	add	r4,r4,r2
 4005828:	00000306 	br	4005838 <memchr+0x74>
 400582c:	18c00044 	addi	r3,r3,1
 4005830:	197fffc3 	ldbu	r5,-1(r3)
 4005834:	31400526 	beq	r6,r5,400584c <memchr+0x88>
 4005838:	1805883a 	mov	r2,r3
 400583c:	20fffb1e 	bne	r4,r3,400582c <__ram_exceptions_end+0xfbfe55e8>
 4005840:	0005883a 	mov	r2,zero
 4005844:	f800283a 	ret
 4005848:	2005883a 	mov	r2,r4
 400584c:	f800283a 	ret
 4005850:	28c03fcc 	andi	r3,r5,255
 4005854:	1812923a 	slli	r9,r3,8
 4005858:	02ffbff4 	movhi	r11,65279
 400585c:	02a02074 	movhi	r10,32897
 4005860:	48d2b03a 	or	r9,r9,r3
 4005864:	4806943a 	slli	r3,r9,16
 4005868:	5affbfc4 	addi	r11,r11,-257
 400586c:	52a02004 	addi	r10,r10,-32640
 4005870:	48d2b03a 	or	r9,r9,r3
 4005874:	20c00017 	ldw	r3,0(r4)
 4005878:	48c6f03a 	xor	r3,r9,r3
 400587c:	1acd883a 	add	r6,r3,r11
 4005880:	00c6303a 	nor	r3,zero,r3
 4005884:	30c6703a 	and	r3,r6,r3
 4005888:	1a86703a 	and	r3,r3,r10
 400588c:	183fe01e 	bne	r3,zero,4005810 <__ram_exceptions_end+0xfbfe55cc>
 4005890:	10bfff04 	addi	r2,r2,-4
 4005894:	21000104 	addi	r4,r4,4
 4005898:	40bff636 	bltu	r8,r2,4005874 <__ram_exceptions_end+0xfbfe5630>
 400589c:	003fdb06 	br	400580c <__ram_exceptions_end+0xfbfe55c8>
 40058a0:	3005883a 	mov	r2,r6
 40058a4:	003fd706 	br	4005804 <__ram_exceptions_end+0xfbfe55c0>

040058a8 <memcpy>:
 40058a8:	defffd04 	addi	sp,sp,-12
 40058ac:	dfc00215 	stw	ra,8(sp)
 40058b0:	dc400115 	stw	r17,4(sp)
 40058b4:	dc000015 	stw	r16,0(sp)
 40058b8:	00c003c4 	movi	r3,15
 40058bc:	2005883a 	mov	r2,r4
 40058c0:	1980452e 	bgeu	r3,r6,40059d8 <memcpy+0x130>
 40058c4:	2906b03a 	or	r3,r5,r4
 40058c8:	18c000cc 	andi	r3,r3,3
 40058cc:	1800441e 	bne	r3,zero,40059e0 <memcpy+0x138>
 40058d0:	347ffc04 	addi	r17,r6,-16
 40058d4:	8822d13a 	srli	r17,r17,4
 40058d8:	28c00104 	addi	r3,r5,4
 40058dc:	23400104 	addi	r13,r4,4
 40058e0:	8820913a 	slli	r16,r17,4
 40058e4:	2b000204 	addi	r12,r5,8
 40058e8:	22c00204 	addi	r11,r4,8
 40058ec:	84000504 	addi	r16,r16,20
 40058f0:	2a800304 	addi	r10,r5,12
 40058f4:	22400304 	addi	r9,r4,12
 40058f8:	2c21883a 	add	r16,r5,r16
 40058fc:	2811883a 	mov	r8,r5
 4005900:	200f883a 	mov	r7,r4
 4005904:	41000017 	ldw	r4,0(r8)
 4005908:	1fc00017 	ldw	ra,0(r3)
 400590c:	63c00017 	ldw	r15,0(r12)
 4005910:	39000015 	stw	r4,0(r7)
 4005914:	53800017 	ldw	r14,0(r10)
 4005918:	6fc00015 	stw	ra,0(r13)
 400591c:	5bc00015 	stw	r15,0(r11)
 4005920:	4b800015 	stw	r14,0(r9)
 4005924:	18c00404 	addi	r3,r3,16
 4005928:	39c00404 	addi	r7,r7,16
 400592c:	42000404 	addi	r8,r8,16
 4005930:	6b400404 	addi	r13,r13,16
 4005934:	63000404 	addi	r12,r12,16
 4005938:	5ac00404 	addi	r11,r11,16
 400593c:	52800404 	addi	r10,r10,16
 4005940:	4a400404 	addi	r9,r9,16
 4005944:	1c3fef1e 	bne	r3,r16,4005904 <__ram_exceptions_end+0xfbfe56c0>
 4005948:	89c00044 	addi	r7,r17,1
 400594c:	380e913a 	slli	r7,r7,4
 4005950:	310003cc 	andi	r4,r6,15
 4005954:	02c000c4 	movi	r11,3
 4005958:	11c7883a 	add	r3,r2,r7
 400595c:	29cb883a 	add	r5,r5,r7
 4005960:	5900212e 	bgeu	r11,r4,40059e8 <memcpy+0x140>
 4005964:	1813883a 	mov	r9,r3
 4005968:	2811883a 	mov	r8,r5
 400596c:	200f883a 	mov	r7,r4
 4005970:	42800017 	ldw	r10,0(r8)
 4005974:	4a400104 	addi	r9,r9,4
 4005978:	39ffff04 	addi	r7,r7,-4
 400597c:	4abfff15 	stw	r10,-4(r9)
 4005980:	42000104 	addi	r8,r8,4
 4005984:	59fffa36 	bltu	r11,r7,4005970 <__ram_exceptions_end+0xfbfe572c>
 4005988:	213fff04 	addi	r4,r4,-4
 400598c:	2008d0ba 	srli	r4,r4,2
 4005990:	318000cc 	andi	r6,r6,3
 4005994:	21000044 	addi	r4,r4,1
 4005998:	2109883a 	add	r4,r4,r4
 400599c:	2109883a 	add	r4,r4,r4
 40059a0:	1907883a 	add	r3,r3,r4
 40059a4:	290b883a 	add	r5,r5,r4
 40059a8:	30000626 	beq	r6,zero,40059c4 <memcpy+0x11c>
 40059ac:	198d883a 	add	r6,r3,r6
 40059b0:	29c00003 	ldbu	r7,0(r5)
 40059b4:	18c00044 	addi	r3,r3,1
 40059b8:	29400044 	addi	r5,r5,1
 40059bc:	19ffffc5 	stb	r7,-1(r3)
 40059c0:	19bffb1e 	bne	r3,r6,40059b0 <__ram_exceptions_end+0xfbfe576c>
 40059c4:	dfc00217 	ldw	ra,8(sp)
 40059c8:	dc400117 	ldw	r17,4(sp)
 40059cc:	dc000017 	ldw	r16,0(sp)
 40059d0:	dec00304 	addi	sp,sp,12
 40059d4:	f800283a 	ret
 40059d8:	2007883a 	mov	r3,r4
 40059dc:	003ff206 	br	40059a8 <__ram_exceptions_end+0xfbfe5764>
 40059e0:	2007883a 	mov	r3,r4
 40059e4:	003ff106 	br	40059ac <__ram_exceptions_end+0xfbfe5768>
 40059e8:	200d883a 	mov	r6,r4
 40059ec:	003fee06 	br	40059a8 <__ram_exceptions_end+0xfbfe5764>

040059f0 <memset>:
 40059f0:	20c000cc 	andi	r3,r4,3
 40059f4:	2005883a 	mov	r2,r4
 40059f8:	18004426 	beq	r3,zero,4005b0c <memset+0x11c>
 40059fc:	31ffffc4 	addi	r7,r6,-1
 4005a00:	30004026 	beq	r6,zero,4005b04 <memset+0x114>
 4005a04:	2813883a 	mov	r9,r5
 4005a08:	200d883a 	mov	r6,r4
 4005a0c:	2007883a 	mov	r3,r4
 4005a10:	00000406 	br	4005a24 <memset+0x34>
 4005a14:	3a3fffc4 	addi	r8,r7,-1
 4005a18:	31800044 	addi	r6,r6,1
 4005a1c:	38003926 	beq	r7,zero,4005b04 <memset+0x114>
 4005a20:	400f883a 	mov	r7,r8
 4005a24:	18c00044 	addi	r3,r3,1
 4005a28:	32400005 	stb	r9,0(r6)
 4005a2c:	1a0000cc 	andi	r8,r3,3
 4005a30:	403ff81e 	bne	r8,zero,4005a14 <__ram_exceptions_end+0xfbfe57d0>
 4005a34:	010000c4 	movi	r4,3
 4005a38:	21c02d2e 	bgeu	r4,r7,4005af0 <memset+0x100>
 4005a3c:	29003fcc 	andi	r4,r5,255
 4005a40:	200c923a 	slli	r6,r4,8
 4005a44:	3108b03a 	or	r4,r6,r4
 4005a48:	200c943a 	slli	r6,r4,16
 4005a4c:	218cb03a 	or	r6,r4,r6
 4005a50:	010003c4 	movi	r4,15
 4005a54:	21c0182e 	bgeu	r4,r7,4005ab8 <memset+0xc8>
 4005a58:	3b3ffc04 	addi	r12,r7,-16
 4005a5c:	6018d13a 	srli	r12,r12,4
 4005a60:	1a000104 	addi	r8,r3,4
 4005a64:	1ac00204 	addi	r11,r3,8
 4005a68:	6008913a 	slli	r4,r12,4
 4005a6c:	1a800304 	addi	r10,r3,12
 4005a70:	1813883a 	mov	r9,r3
 4005a74:	21000504 	addi	r4,r4,20
 4005a78:	1909883a 	add	r4,r3,r4
 4005a7c:	49800015 	stw	r6,0(r9)
 4005a80:	41800015 	stw	r6,0(r8)
 4005a84:	59800015 	stw	r6,0(r11)
 4005a88:	51800015 	stw	r6,0(r10)
 4005a8c:	42000404 	addi	r8,r8,16
 4005a90:	4a400404 	addi	r9,r9,16
 4005a94:	5ac00404 	addi	r11,r11,16
 4005a98:	52800404 	addi	r10,r10,16
 4005a9c:	413ff71e 	bne	r8,r4,4005a7c <__ram_exceptions_end+0xfbfe5838>
 4005aa0:	63000044 	addi	r12,r12,1
 4005aa4:	6018913a 	slli	r12,r12,4
 4005aa8:	39c003cc 	andi	r7,r7,15
 4005aac:	010000c4 	movi	r4,3
 4005ab0:	1b07883a 	add	r3,r3,r12
 4005ab4:	21c00e2e 	bgeu	r4,r7,4005af0 <memset+0x100>
 4005ab8:	1813883a 	mov	r9,r3
 4005abc:	3811883a 	mov	r8,r7
 4005ac0:	010000c4 	movi	r4,3
 4005ac4:	49800015 	stw	r6,0(r9)
 4005ac8:	423fff04 	addi	r8,r8,-4
 4005acc:	4a400104 	addi	r9,r9,4
 4005ad0:	223ffc36 	bltu	r4,r8,4005ac4 <__ram_exceptions_end+0xfbfe5880>
 4005ad4:	393fff04 	addi	r4,r7,-4
 4005ad8:	2008d0ba 	srli	r4,r4,2
 4005adc:	39c000cc 	andi	r7,r7,3
 4005ae0:	21000044 	addi	r4,r4,1
 4005ae4:	2109883a 	add	r4,r4,r4
 4005ae8:	2109883a 	add	r4,r4,r4
 4005aec:	1907883a 	add	r3,r3,r4
 4005af0:	38000526 	beq	r7,zero,4005b08 <memset+0x118>
 4005af4:	19cf883a 	add	r7,r3,r7
 4005af8:	19400005 	stb	r5,0(r3)
 4005afc:	18c00044 	addi	r3,r3,1
 4005b00:	38fffd1e 	bne	r7,r3,4005af8 <__ram_exceptions_end+0xfbfe58b4>
 4005b04:	f800283a 	ret
 4005b08:	f800283a 	ret
 4005b0c:	2007883a 	mov	r3,r4
 4005b10:	300f883a 	mov	r7,r6
 4005b14:	003fc706 	br	4005a34 <__ram_exceptions_end+0xfbfe57f0>

04005b18 <_Balloc>:
 4005b18:	20801317 	ldw	r2,76(r4)
 4005b1c:	defffc04 	addi	sp,sp,-16
 4005b20:	dc400115 	stw	r17,4(sp)
 4005b24:	dc000015 	stw	r16,0(sp)
 4005b28:	dfc00315 	stw	ra,12(sp)
 4005b2c:	dc800215 	stw	r18,8(sp)
 4005b30:	2023883a 	mov	r17,r4
 4005b34:	2821883a 	mov	r16,r5
 4005b38:	10000f26 	beq	r2,zero,4005b78 <_Balloc+0x60>
 4005b3c:	8407883a 	add	r3,r16,r16
 4005b40:	18c7883a 	add	r3,r3,r3
 4005b44:	10c7883a 	add	r3,r2,r3
 4005b48:	18800017 	ldw	r2,0(r3)
 4005b4c:	10001126 	beq	r2,zero,4005b94 <_Balloc+0x7c>
 4005b50:	11000017 	ldw	r4,0(r2)
 4005b54:	19000015 	stw	r4,0(r3)
 4005b58:	10000415 	stw	zero,16(r2)
 4005b5c:	10000315 	stw	zero,12(r2)
 4005b60:	dfc00317 	ldw	ra,12(sp)
 4005b64:	dc800217 	ldw	r18,8(sp)
 4005b68:	dc400117 	ldw	r17,4(sp)
 4005b6c:	dc000017 	ldw	r16,0(sp)
 4005b70:	dec00404 	addi	sp,sp,16
 4005b74:	f800283a 	ret
 4005b78:	01800844 	movi	r6,33
 4005b7c:	01400104 	movi	r5,4
 4005b80:	40085880 	call	4008588 <_calloc_r>
 4005b84:	88801315 	stw	r2,76(r17)
 4005b88:	103fec1e 	bne	r2,zero,4005b3c <__ram_exceptions_end+0xfbfe58f8>
 4005b8c:	0005883a 	mov	r2,zero
 4005b90:	003ff306 	br	4005b60 <__ram_exceptions_end+0xfbfe591c>
 4005b94:	01400044 	movi	r5,1
 4005b98:	2c24983a 	sll	r18,r5,r16
 4005b9c:	8809883a 	mov	r4,r17
 4005ba0:	91800144 	addi	r6,r18,5
 4005ba4:	318d883a 	add	r6,r6,r6
 4005ba8:	318d883a 	add	r6,r6,r6
 4005bac:	40085880 	call	4008588 <_calloc_r>
 4005bb0:	103ff626 	beq	r2,zero,4005b8c <__ram_exceptions_end+0xfbfe5948>
 4005bb4:	14000115 	stw	r16,4(r2)
 4005bb8:	14800215 	stw	r18,8(r2)
 4005bbc:	003fe606 	br	4005b58 <__ram_exceptions_end+0xfbfe5914>

04005bc0 <_Bfree>:
 4005bc0:	28000826 	beq	r5,zero,4005be4 <_Bfree+0x24>
 4005bc4:	28c00117 	ldw	r3,4(r5)
 4005bc8:	20801317 	ldw	r2,76(r4)
 4005bcc:	18c7883a 	add	r3,r3,r3
 4005bd0:	18c7883a 	add	r3,r3,r3
 4005bd4:	10c5883a 	add	r2,r2,r3
 4005bd8:	10c00017 	ldw	r3,0(r2)
 4005bdc:	28c00015 	stw	r3,0(r5)
 4005be0:	11400015 	stw	r5,0(r2)
 4005be4:	f800283a 	ret

04005be8 <__multadd>:
 4005be8:	defffa04 	addi	sp,sp,-24
 4005bec:	dc800315 	stw	r18,12(sp)
 4005bf0:	dc400215 	stw	r17,8(sp)
 4005bf4:	dc000115 	stw	r16,4(sp)
 4005bf8:	2823883a 	mov	r17,r5
 4005bfc:	2c000417 	ldw	r16,16(r5)
 4005c00:	dfc00515 	stw	ra,20(sp)
 4005c04:	dcc00415 	stw	r19,16(sp)
 4005c08:	2025883a 	mov	r18,r4
 4005c0c:	29400504 	addi	r5,r5,20
 4005c10:	0011883a 	mov	r8,zero
 4005c14:	28c00017 	ldw	r3,0(r5)
 4005c18:	29400104 	addi	r5,r5,4
 4005c1c:	42000044 	addi	r8,r8,1
 4005c20:	18bfffcc 	andi	r2,r3,65535
 4005c24:	1185383a 	mul	r2,r2,r6
 4005c28:	1806d43a 	srli	r3,r3,16
 4005c2c:	11cf883a 	add	r7,r2,r7
 4005c30:	3808d43a 	srli	r4,r7,16
 4005c34:	1987383a 	mul	r3,r3,r6
 4005c38:	38bfffcc 	andi	r2,r7,65535
 4005c3c:	1907883a 	add	r3,r3,r4
 4005c40:	1808943a 	slli	r4,r3,16
 4005c44:	180ed43a 	srli	r7,r3,16
 4005c48:	2085883a 	add	r2,r4,r2
 4005c4c:	28bfff15 	stw	r2,-4(r5)
 4005c50:	443ff016 	blt	r8,r16,4005c14 <__ram_exceptions_end+0xfbfe59d0>
 4005c54:	38000926 	beq	r7,zero,4005c7c <__multadd+0x94>
 4005c58:	88800217 	ldw	r2,8(r17)
 4005c5c:	80800f0e 	bge	r16,r2,4005c9c <__multadd+0xb4>
 4005c60:	80800144 	addi	r2,r16,5
 4005c64:	1085883a 	add	r2,r2,r2
 4005c68:	1085883a 	add	r2,r2,r2
 4005c6c:	8885883a 	add	r2,r17,r2
 4005c70:	11c00015 	stw	r7,0(r2)
 4005c74:	84000044 	addi	r16,r16,1
 4005c78:	8c000415 	stw	r16,16(r17)
 4005c7c:	8805883a 	mov	r2,r17
 4005c80:	dfc00517 	ldw	ra,20(sp)
 4005c84:	dcc00417 	ldw	r19,16(sp)
 4005c88:	dc800317 	ldw	r18,12(sp)
 4005c8c:	dc400217 	ldw	r17,8(sp)
 4005c90:	dc000117 	ldw	r16,4(sp)
 4005c94:	dec00604 	addi	sp,sp,24
 4005c98:	f800283a 	ret
 4005c9c:	89400117 	ldw	r5,4(r17)
 4005ca0:	9009883a 	mov	r4,r18
 4005ca4:	d9c00015 	stw	r7,0(sp)
 4005ca8:	29400044 	addi	r5,r5,1
 4005cac:	4005b180 	call	4005b18 <_Balloc>
 4005cb0:	89800417 	ldw	r6,16(r17)
 4005cb4:	89400304 	addi	r5,r17,12
 4005cb8:	11000304 	addi	r4,r2,12
 4005cbc:	31800084 	addi	r6,r6,2
 4005cc0:	318d883a 	add	r6,r6,r6
 4005cc4:	318d883a 	add	r6,r6,r6
 4005cc8:	1027883a 	mov	r19,r2
 4005ccc:	40058a80 	call	40058a8 <memcpy>
 4005cd0:	d9c00017 	ldw	r7,0(sp)
 4005cd4:	88000a26 	beq	r17,zero,4005d00 <__multadd+0x118>
 4005cd8:	88c00117 	ldw	r3,4(r17)
 4005cdc:	90801317 	ldw	r2,76(r18)
 4005ce0:	18c7883a 	add	r3,r3,r3
 4005ce4:	18c7883a 	add	r3,r3,r3
 4005ce8:	10c5883a 	add	r2,r2,r3
 4005cec:	10c00017 	ldw	r3,0(r2)
 4005cf0:	88c00015 	stw	r3,0(r17)
 4005cf4:	14400015 	stw	r17,0(r2)
 4005cf8:	9823883a 	mov	r17,r19
 4005cfc:	003fd806 	br	4005c60 <__ram_exceptions_end+0xfbfe5a1c>
 4005d00:	9823883a 	mov	r17,r19
 4005d04:	003fd606 	br	4005c60 <__ram_exceptions_end+0xfbfe5a1c>

04005d08 <__s2b>:
 4005d08:	defff904 	addi	sp,sp,-28
 4005d0c:	dc400115 	stw	r17,4(sp)
 4005d10:	dc000015 	stw	r16,0(sp)
 4005d14:	2023883a 	mov	r17,r4
 4005d18:	2821883a 	mov	r16,r5
 4005d1c:	39000204 	addi	r4,r7,8
 4005d20:	01400244 	movi	r5,9
 4005d24:	dcc00315 	stw	r19,12(sp)
 4005d28:	dc800215 	stw	r18,8(sp)
 4005d2c:	dfc00615 	stw	ra,24(sp)
 4005d30:	dd400515 	stw	r21,20(sp)
 4005d34:	dd000415 	stw	r20,16(sp)
 4005d38:	3825883a 	mov	r18,r7
 4005d3c:	3027883a 	mov	r19,r6
 4005d40:	400a4340 	call	400a434 <__divsi3>
 4005d44:	00c00044 	movi	r3,1
 4005d48:	000b883a 	mov	r5,zero
 4005d4c:	1880030e 	bge	r3,r2,4005d5c <__s2b+0x54>
 4005d50:	18c7883a 	add	r3,r3,r3
 4005d54:	29400044 	addi	r5,r5,1
 4005d58:	18bffd16 	blt	r3,r2,4005d50 <__ram_exceptions_end+0xfbfe5b0c>
 4005d5c:	8809883a 	mov	r4,r17
 4005d60:	4005b180 	call	4005b18 <_Balloc>
 4005d64:	d8c00717 	ldw	r3,28(sp)
 4005d68:	10c00515 	stw	r3,20(r2)
 4005d6c:	00c00044 	movi	r3,1
 4005d70:	10c00415 	stw	r3,16(r2)
 4005d74:	00c00244 	movi	r3,9
 4005d78:	1cc0210e 	bge	r3,r19,4005e00 <__s2b+0xf8>
 4005d7c:	80eb883a 	add	r21,r16,r3
 4005d80:	a829883a 	mov	r20,r21
 4005d84:	84e1883a 	add	r16,r16,r19
 4005d88:	a1c00007 	ldb	r7,0(r20)
 4005d8c:	01800284 	movi	r6,10
 4005d90:	a5000044 	addi	r20,r20,1
 4005d94:	100b883a 	mov	r5,r2
 4005d98:	39fff404 	addi	r7,r7,-48
 4005d9c:	8809883a 	mov	r4,r17
 4005da0:	4005be80 	call	4005be8 <__multadd>
 4005da4:	a43ff81e 	bne	r20,r16,4005d88 <__ram_exceptions_end+0xfbfe5b44>
 4005da8:	ace1883a 	add	r16,r21,r19
 4005dac:	843ffe04 	addi	r16,r16,-8
 4005db0:	9c800a0e 	bge	r19,r18,4005ddc <__s2b+0xd4>
 4005db4:	94e5c83a 	sub	r18,r18,r19
 4005db8:	84a5883a 	add	r18,r16,r18
 4005dbc:	81c00007 	ldb	r7,0(r16)
 4005dc0:	01800284 	movi	r6,10
 4005dc4:	84000044 	addi	r16,r16,1
 4005dc8:	100b883a 	mov	r5,r2
 4005dcc:	39fff404 	addi	r7,r7,-48
 4005dd0:	8809883a 	mov	r4,r17
 4005dd4:	4005be80 	call	4005be8 <__multadd>
 4005dd8:	84bff81e 	bne	r16,r18,4005dbc <__ram_exceptions_end+0xfbfe5b78>
 4005ddc:	dfc00617 	ldw	ra,24(sp)
 4005de0:	dd400517 	ldw	r21,20(sp)
 4005de4:	dd000417 	ldw	r20,16(sp)
 4005de8:	dcc00317 	ldw	r19,12(sp)
 4005dec:	dc800217 	ldw	r18,8(sp)
 4005df0:	dc400117 	ldw	r17,4(sp)
 4005df4:	dc000017 	ldw	r16,0(sp)
 4005df8:	dec00704 	addi	sp,sp,28
 4005dfc:	f800283a 	ret
 4005e00:	84000284 	addi	r16,r16,10
 4005e04:	1827883a 	mov	r19,r3
 4005e08:	003fe906 	br	4005db0 <__ram_exceptions_end+0xfbfe5b6c>

04005e0c <__hi0bits>:
 4005e0c:	20bfffec 	andhi	r2,r4,65535
 4005e10:	1000141e 	bne	r2,zero,4005e64 <__hi0bits+0x58>
 4005e14:	2008943a 	slli	r4,r4,16
 4005e18:	00800404 	movi	r2,16
 4005e1c:	20ffc02c 	andhi	r3,r4,65280
 4005e20:	1800021e 	bne	r3,zero,4005e2c <__hi0bits+0x20>
 4005e24:	2008923a 	slli	r4,r4,8
 4005e28:	10800204 	addi	r2,r2,8
 4005e2c:	20fc002c 	andhi	r3,r4,61440
 4005e30:	1800021e 	bne	r3,zero,4005e3c <__hi0bits+0x30>
 4005e34:	2008913a 	slli	r4,r4,4
 4005e38:	10800104 	addi	r2,r2,4
 4005e3c:	20f0002c 	andhi	r3,r4,49152
 4005e40:	1800031e 	bne	r3,zero,4005e50 <__hi0bits+0x44>
 4005e44:	2109883a 	add	r4,r4,r4
 4005e48:	10800084 	addi	r2,r2,2
 4005e4c:	2109883a 	add	r4,r4,r4
 4005e50:	20000316 	blt	r4,zero,4005e60 <__hi0bits+0x54>
 4005e54:	2110002c 	andhi	r4,r4,16384
 4005e58:	2000041e 	bne	r4,zero,4005e6c <__hi0bits+0x60>
 4005e5c:	00800804 	movi	r2,32
 4005e60:	f800283a 	ret
 4005e64:	0005883a 	mov	r2,zero
 4005e68:	003fec06 	br	4005e1c <__ram_exceptions_end+0xfbfe5bd8>
 4005e6c:	10800044 	addi	r2,r2,1
 4005e70:	f800283a 	ret

04005e74 <__lo0bits>:
 4005e74:	20c00017 	ldw	r3,0(r4)
 4005e78:	188001cc 	andi	r2,r3,7
 4005e7c:	10000826 	beq	r2,zero,4005ea0 <__lo0bits+0x2c>
 4005e80:	1880004c 	andi	r2,r3,1
 4005e84:	1000211e 	bne	r2,zero,4005f0c <__lo0bits+0x98>
 4005e88:	1880008c 	andi	r2,r3,2
 4005e8c:	1000211e 	bne	r2,zero,4005f14 <__lo0bits+0xa0>
 4005e90:	1806d0ba 	srli	r3,r3,2
 4005e94:	00800084 	movi	r2,2
 4005e98:	20c00015 	stw	r3,0(r4)
 4005e9c:	f800283a 	ret
 4005ea0:	18bfffcc 	andi	r2,r3,65535
 4005ea4:	10001326 	beq	r2,zero,4005ef4 <__lo0bits+0x80>
 4005ea8:	0005883a 	mov	r2,zero
 4005eac:	19403fcc 	andi	r5,r3,255
 4005eb0:	2800021e 	bne	r5,zero,4005ebc <__lo0bits+0x48>
 4005eb4:	1806d23a 	srli	r3,r3,8
 4005eb8:	10800204 	addi	r2,r2,8
 4005ebc:	194003cc 	andi	r5,r3,15
 4005ec0:	2800021e 	bne	r5,zero,4005ecc <__lo0bits+0x58>
 4005ec4:	1806d13a 	srli	r3,r3,4
 4005ec8:	10800104 	addi	r2,r2,4
 4005ecc:	194000cc 	andi	r5,r3,3
 4005ed0:	2800021e 	bne	r5,zero,4005edc <__lo0bits+0x68>
 4005ed4:	1806d0ba 	srli	r3,r3,2
 4005ed8:	10800084 	addi	r2,r2,2
 4005edc:	1940004c 	andi	r5,r3,1
 4005ee0:	2800081e 	bne	r5,zero,4005f04 <__lo0bits+0x90>
 4005ee4:	1806d07a 	srli	r3,r3,1
 4005ee8:	1800051e 	bne	r3,zero,4005f00 <__lo0bits+0x8c>
 4005eec:	00800804 	movi	r2,32
 4005ef0:	f800283a 	ret
 4005ef4:	1806d43a 	srli	r3,r3,16
 4005ef8:	00800404 	movi	r2,16
 4005efc:	003feb06 	br	4005eac <__ram_exceptions_end+0xfbfe5c68>
 4005f00:	10800044 	addi	r2,r2,1
 4005f04:	20c00015 	stw	r3,0(r4)
 4005f08:	f800283a 	ret
 4005f0c:	0005883a 	mov	r2,zero
 4005f10:	f800283a 	ret
 4005f14:	1806d07a 	srli	r3,r3,1
 4005f18:	00800044 	movi	r2,1
 4005f1c:	20c00015 	stw	r3,0(r4)
 4005f20:	f800283a 	ret

04005f24 <__i2b>:
 4005f24:	defffd04 	addi	sp,sp,-12
 4005f28:	dc000015 	stw	r16,0(sp)
 4005f2c:	04000044 	movi	r16,1
 4005f30:	dc400115 	stw	r17,4(sp)
 4005f34:	2823883a 	mov	r17,r5
 4005f38:	800b883a 	mov	r5,r16
 4005f3c:	dfc00215 	stw	ra,8(sp)
 4005f40:	4005b180 	call	4005b18 <_Balloc>
 4005f44:	14400515 	stw	r17,20(r2)
 4005f48:	14000415 	stw	r16,16(r2)
 4005f4c:	dfc00217 	ldw	ra,8(sp)
 4005f50:	dc400117 	ldw	r17,4(sp)
 4005f54:	dc000017 	ldw	r16,0(sp)
 4005f58:	dec00304 	addi	sp,sp,12
 4005f5c:	f800283a 	ret

04005f60 <__multiply>:
 4005f60:	defffa04 	addi	sp,sp,-24
 4005f64:	dcc00315 	stw	r19,12(sp)
 4005f68:	dc800215 	stw	r18,8(sp)
 4005f6c:	34c00417 	ldw	r19,16(r6)
 4005f70:	2c800417 	ldw	r18,16(r5)
 4005f74:	dd000415 	stw	r20,16(sp)
 4005f78:	dc400115 	stw	r17,4(sp)
 4005f7c:	dfc00515 	stw	ra,20(sp)
 4005f80:	dc000015 	stw	r16,0(sp)
 4005f84:	2829883a 	mov	r20,r5
 4005f88:	3023883a 	mov	r17,r6
 4005f8c:	94c0050e 	bge	r18,r19,4005fa4 <__multiply+0x44>
 4005f90:	9007883a 	mov	r3,r18
 4005f94:	3029883a 	mov	r20,r6
 4005f98:	9825883a 	mov	r18,r19
 4005f9c:	2823883a 	mov	r17,r5
 4005fa0:	1827883a 	mov	r19,r3
 4005fa4:	a0800217 	ldw	r2,8(r20)
 4005fa8:	94e1883a 	add	r16,r18,r19
 4005fac:	a1400117 	ldw	r5,4(r20)
 4005fb0:	1400010e 	bge	r2,r16,4005fb8 <__multiply+0x58>
 4005fb4:	29400044 	addi	r5,r5,1
 4005fb8:	4005b180 	call	4005b18 <_Balloc>
 4005fbc:	8415883a 	add	r10,r16,r16
 4005fc0:	12c00504 	addi	r11,r2,20
 4005fc4:	5295883a 	add	r10,r10,r10
 4005fc8:	5a95883a 	add	r10,r11,r10
 4005fcc:	5807883a 	mov	r3,r11
 4005fd0:	5a80032e 	bgeu	r11,r10,4005fe0 <__multiply+0x80>
 4005fd4:	18000015 	stw	zero,0(r3)
 4005fd8:	18c00104 	addi	r3,r3,4
 4005fdc:	1abffd36 	bltu	r3,r10,4005fd4 <__ram_exceptions_end+0xfbfe5d90>
 4005fe0:	9ce7883a 	add	r19,r19,r19
 4005fe4:	94a5883a 	add	r18,r18,r18
 4005fe8:	89800504 	addi	r6,r17,20
 4005fec:	9ce7883a 	add	r19,r19,r19
 4005ff0:	a3400504 	addi	r13,r20,20
 4005ff4:	94a5883a 	add	r18,r18,r18
 4005ff8:	34d9883a 	add	r12,r6,r19
 4005ffc:	6c93883a 	add	r9,r13,r18
 4006000:	3300422e 	bgeu	r6,r12,400610c <__multiply+0x1ac>
 4006004:	37c00017 	ldw	ra,0(r6)
 4006008:	fbffffcc 	andi	r15,ra,65535
 400600c:	78001b26 	beq	r15,zero,400607c <__multiply+0x11c>
 4006010:	5811883a 	mov	r8,r11
 4006014:	681d883a 	mov	r14,r13
 4006018:	000f883a 	mov	r7,zero
 400601c:	71000017 	ldw	r4,0(r14)
 4006020:	40c00017 	ldw	r3,0(r8)
 4006024:	73800104 	addi	r14,r14,4
 4006028:	217fffcc 	andi	r5,r4,65535
 400602c:	2bcb383a 	mul	r5,r5,r15
 4006030:	2008d43a 	srli	r4,r4,16
 4006034:	1c7fffcc 	andi	r17,r3,65535
 4006038:	2c4b883a 	add	r5,r5,r17
 400603c:	29cb883a 	add	r5,r5,r7
 4006040:	23c9383a 	mul	r4,r4,r15
 4006044:	1806d43a 	srli	r3,r3,16
 4006048:	280ed43a 	srli	r7,r5,16
 400604c:	297fffcc 	andi	r5,r5,65535
 4006050:	20c7883a 	add	r3,r4,r3
 4006054:	19c7883a 	add	r3,r3,r7
 4006058:	1808943a 	slli	r4,r3,16
 400605c:	4023883a 	mov	r17,r8
 4006060:	180ed43a 	srli	r7,r3,16
 4006064:	214ab03a 	or	r5,r4,r5
 4006068:	41400015 	stw	r5,0(r8)
 400606c:	42000104 	addi	r8,r8,4
 4006070:	727fea36 	bltu	r14,r9,400601c <__ram_exceptions_end+0xfbfe5dd8>
 4006074:	89c00115 	stw	r7,4(r17)
 4006078:	37c00017 	ldw	ra,0(r6)
 400607c:	f83ed43a 	srli	ra,ra,16
 4006080:	f8001f26 	beq	ra,zero,4006100 <__multiply+0x1a0>
 4006084:	58c00017 	ldw	r3,0(r11)
 4006088:	681d883a 	mov	r14,r13
 400608c:	581f883a 	mov	r15,r11
 4006090:	1811883a 	mov	r8,r3
 4006094:	5825883a 	mov	r18,r11
 4006098:	000f883a 	mov	r7,zero
 400609c:	00000106 	br	40060a4 <__multiply+0x144>
 40060a0:	8825883a 	mov	r18,r17
 40060a4:	7140000b 	ldhu	r5,0(r14)
 40060a8:	4010d43a 	srli	r8,r8,16
 40060ac:	193fffcc 	andi	r4,r3,65535
 40060b0:	2fcb383a 	mul	r5,r5,ra
 40060b4:	7bc00104 	addi	r15,r15,4
 40060b8:	73800104 	addi	r14,r14,4
 40060bc:	2a0b883a 	add	r5,r5,r8
 40060c0:	29cb883a 	add	r5,r5,r7
 40060c4:	2806943a 	slli	r3,r5,16
 40060c8:	94400104 	addi	r17,r18,4
 40060cc:	280ad43a 	srli	r5,r5,16
 40060d0:	1908b03a 	or	r4,r3,r4
 40060d4:	793fff15 	stw	r4,-4(r15)
 40060d8:	70ffff17 	ldw	r3,-4(r14)
 40060dc:	8a000017 	ldw	r8,0(r17)
 40060e0:	1806d43a 	srli	r3,r3,16
 40060e4:	413fffcc 	andi	r4,r8,65535
 40060e8:	1fc7383a 	mul	r3,r3,ra
 40060ec:	1907883a 	add	r3,r3,r4
 40060f0:	1947883a 	add	r3,r3,r5
 40060f4:	180ed43a 	srli	r7,r3,16
 40060f8:	727fe936 	bltu	r14,r9,40060a0 <__ram_exceptions_end+0xfbfe5e5c>
 40060fc:	90c00115 	stw	r3,4(r18)
 4006100:	31800104 	addi	r6,r6,4
 4006104:	5ac00104 	addi	r11,r11,4
 4006108:	333fbe36 	bltu	r6,r12,4006004 <__ram_exceptions_end+0xfbfe5dc0>
 400610c:	0400090e 	bge	zero,r16,4006134 <__multiply+0x1d4>
 4006110:	50ffff17 	ldw	r3,-4(r10)
 4006114:	52bfff04 	addi	r10,r10,-4
 4006118:	18000326 	beq	r3,zero,4006128 <__multiply+0x1c8>
 400611c:	00000506 	br	4006134 <__multiply+0x1d4>
 4006120:	50c00017 	ldw	r3,0(r10)
 4006124:	1800031e 	bne	r3,zero,4006134 <__multiply+0x1d4>
 4006128:	843fffc4 	addi	r16,r16,-1
 400612c:	52bfff04 	addi	r10,r10,-4
 4006130:	803ffb1e 	bne	r16,zero,4006120 <__ram_exceptions_end+0xfbfe5edc>
 4006134:	14000415 	stw	r16,16(r2)
 4006138:	dfc00517 	ldw	ra,20(sp)
 400613c:	dd000417 	ldw	r20,16(sp)
 4006140:	dcc00317 	ldw	r19,12(sp)
 4006144:	dc800217 	ldw	r18,8(sp)
 4006148:	dc400117 	ldw	r17,4(sp)
 400614c:	dc000017 	ldw	r16,0(sp)
 4006150:	dec00604 	addi	sp,sp,24
 4006154:	f800283a 	ret

04006158 <__pow5mult>:
 4006158:	defffa04 	addi	sp,sp,-24
 400615c:	dcc00315 	stw	r19,12(sp)
 4006160:	dc000015 	stw	r16,0(sp)
 4006164:	dfc00515 	stw	ra,20(sp)
 4006168:	dd000415 	stw	r20,16(sp)
 400616c:	dc800215 	stw	r18,8(sp)
 4006170:	dc400115 	stw	r17,4(sp)
 4006174:	308000cc 	andi	r2,r6,3
 4006178:	3021883a 	mov	r16,r6
 400617c:	2027883a 	mov	r19,r4
 4006180:	10002f1e 	bne	r2,zero,4006240 <__pow5mult+0xe8>
 4006184:	2825883a 	mov	r18,r5
 4006188:	8021d0ba 	srai	r16,r16,2
 400618c:	80001a26 	beq	r16,zero,40061f8 <__pow5mult+0xa0>
 4006190:	9c401217 	ldw	r17,72(r19)
 4006194:	8800061e 	bne	r17,zero,40061b0 <__pow5mult+0x58>
 4006198:	00003406 	br	400626c <__pow5mult+0x114>
 400619c:	8021d07a 	srai	r16,r16,1
 40061a0:	80001526 	beq	r16,zero,40061f8 <__pow5mult+0xa0>
 40061a4:	88800017 	ldw	r2,0(r17)
 40061a8:	10001c26 	beq	r2,zero,400621c <__pow5mult+0xc4>
 40061ac:	1023883a 	mov	r17,r2
 40061b0:	8080004c 	andi	r2,r16,1
 40061b4:	103ff926 	beq	r2,zero,400619c <__ram_exceptions_end+0xfbfe5f58>
 40061b8:	880d883a 	mov	r6,r17
 40061bc:	900b883a 	mov	r5,r18
 40061c0:	9809883a 	mov	r4,r19
 40061c4:	4005f600 	call	4005f60 <__multiply>
 40061c8:	90001b26 	beq	r18,zero,4006238 <__pow5mult+0xe0>
 40061cc:	91000117 	ldw	r4,4(r18)
 40061d0:	98c01317 	ldw	r3,76(r19)
 40061d4:	8021d07a 	srai	r16,r16,1
 40061d8:	2109883a 	add	r4,r4,r4
 40061dc:	2109883a 	add	r4,r4,r4
 40061e0:	1907883a 	add	r3,r3,r4
 40061e4:	19000017 	ldw	r4,0(r3)
 40061e8:	91000015 	stw	r4,0(r18)
 40061ec:	1c800015 	stw	r18,0(r3)
 40061f0:	1025883a 	mov	r18,r2
 40061f4:	803feb1e 	bne	r16,zero,40061a4 <__ram_exceptions_end+0xfbfe5f60>
 40061f8:	9005883a 	mov	r2,r18
 40061fc:	dfc00517 	ldw	ra,20(sp)
 4006200:	dd000417 	ldw	r20,16(sp)
 4006204:	dcc00317 	ldw	r19,12(sp)
 4006208:	dc800217 	ldw	r18,8(sp)
 400620c:	dc400117 	ldw	r17,4(sp)
 4006210:	dc000017 	ldw	r16,0(sp)
 4006214:	dec00604 	addi	sp,sp,24
 4006218:	f800283a 	ret
 400621c:	880d883a 	mov	r6,r17
 4006220:	880b883a 	mov	r5,r17
 4006224:	9809883a 	mov	r4,r19
 4006228:	4005f600 	call	4005f60 <__multiply>
 400622c:	88800015 	stw	r2,0(r17)
 4006230:	10000015 	stw	zero,0(r2)
 4006234:	003fdd06 	br	40061ac <__ram_exceptions_end+0xfbfe5f68>
 4006238:	1025883a 	mov	r18,r2
 400623c:	003fd706 	br	400619c <__ram_exceptions_end+0xfbfe5f58>
 4006240:	10bfffc4 	addi	r2,r2,-1
 4006244:	1085883a 	add	r2,r2,r2
 4006248:	00c10074 	movhi	r3,1025
 400624c:	18ff7604 	addi	r3,r3,-552
 4006250:	1085883a 	add	r2,r2,r2
 4006254:	1885883a 	add	r2,r3,r2
 4006258:	11800017 	ldw	r6,0(r2)
 400625c:	000f883a 	mov	r7,zero
 4006260:	4005be80 	call	4005be8 <__multadd>
 4006264:	1025883a 	mov	r18,r2
 4006268:	003fc706 	br	4006188 <__ram_exceptions_end+0xfbfe5f44>
 400626c:	05000044 	movi	r20,1
 4006270:	a00b883a 	mov	r5,r20
 4006274:	9809883a 	mov	r4,r19
 4006278:	4005b180 	call	4005b18 <_Balloc>
 400627c:	1023883a 	mov	r17,r2
 4006280:	00809c44 	movi	r2,625
 4006284:	88800515 	stw	r2,20(r17)
 4006288:	8d000415 	stw	r20,16(r17)
 400628c:	9c401215 	stw	r17,72(r19)
 4006290:	88000015 	stw	zero,0(r17)
 4006294:	003fc606 	br	40061b0 <__ram_exceptions_end+0xfbfe5f6c>

04006298 <__lshift>:
 4006298:	defff904 	addi	sp,sp,-28
 400629c:	dd400515 	stw	r21,20(sp)
 40062a0:	dcc00315 	stw	r19,12(sp)
 40062a4:	302bd17a 	srai	r21,r6,5
 40062a8:	2cc00417 	ldw	r19,16(r5)
 40062ac:	28800217 	ldw	r2,8(r5)
 40062b0:	dd000415 	stw	r20,16(sp)
 40062b4:	ace7883a 	add	r19,r21,r19
 40062b8:	dc800215 	stw	r18,8(sp)
 40062bc:	dc400115 	stw	r17,4(sp)
 40062c0:	dc000015 	stw	r16,0(sp)
 40062c4:	dfc00615 	stw	ra,24(sp)
 40062c8:	9c000044 	addi	r16,r19,1
 40062cc:	2823883a 	mov	r17,r5
 40062d0:	3029883a 	mov	r20,r6
 40062d4:	2025883a 	mov	r18,r4
 40062d8:	29400117 	ldw	r5,4(r5)
 40062dc:	1400030e 	bge	r2,r16,40062ec <__lshift+0x54>
 40062e0:	1085883a 	add	r2,r2,r2
 40062e4:	29400044 	addi	r5,r5,1
 40062e8:	143ffd16 	blt	r2,r16,40062e0 <__ram_exceptions_end+0xfbfe609c>
 40062ec:	9009883a 	mov	r4,r18
 40062f0:	4005b180 	call	4005b18 <_Balloc>
 40062f4:	10c00504 	addi	r3,r2,20
 40062f8:	0540070e 	bge	zero,r21,4006318 <__lshift+0x80>
 40062fc:	ad6b883a 	add	r21,r21,r21
 4006300:	ad6b883a 	add	r21,r21,r21
 4006304:	1809883a 	mov	r4,r3
 4006308:	1d47883a 	add	r3,r3,r21
 400630c:	20000015 	stw	zero,0(r4)
 4006310:	21000104 	addi	r4,r4,4
 4006314:	193ffd1e 	bne	r3,r4,400630c <__ram_exceptions_end+0xfbfe60c8>
 4006318:	8a000417 	ldw	r8,16(r17)
 400631c:	89000504 	addi	r4,r17,20
 4006320:	a18007cc 	andi	r6,r20,31
 4006324:	4211883a 	add	r8,r8,r8
 4006328:	4211883a 	add	r8,r8,r8
 400632c:	2211883a 	add	r8,r4,r8
 4006330:	30002326 	beq	r6,zero,40063c0 <__lshift+0x128>
 4006334:	02400804 	movi	r9,32
 4006338:	4993c83a 	sub	r9,r9,r6
 400633c:	000b883a 	mov	r5,zero
 4006340:	21c00017 	ldw	r7,0(r4)
 4006344:	1815883a 	mov	r10,r3
 4006348:	18c00104 	addi	r3,r3,4
 400634c:	398e983a 	sll	r7,r7,r6
 4006350:	21000104 	addi	r4,r4,4
 4006354:	394ab03a 	or	r5,r7,r5
 4006358:	197fff15 	stw	r5,-4(r3)
 400635c:	217fff17 	ldw	r5,-4(r4)
 4006360:	2a4ad83a 	srl	r5,r5,r9
 4006364:	223ff636 	bltu	r4,r8,4006340 <__ram_exceptions_end+0xfbfe60fc>
 4006368:	51400115 	stw	r5,4(r10)
 400636c:	28001a1e 	bne	r5,zero,40063d8 <__lshift+0x140>
 4006370:	843fffc4 	addi	r16,r16,-1
 4006374:	14000415 	stw	r16,16(r2)
 4006378:	88000826 	beq	r17,zero,400639c <__lshift+0x104>
 400637c:	89000117 	ldw	r4,4(r17)
 4006380:	90c01317 	ldw	r3,76(r18)
 4006384:	2109883a 	add	r4,r4,r4
 4006388:	2109883a 	add	r4,r4,r4
 400638c:	1907883a 	add	r3,r3,r4
 4006390:	19000017 	ldw	r4,0(r3)
 4006394:	89000015 	stw	r4,0(r17)
 4006398:	1c400015 	stw	r17,0(r3)
 400639c:	dfc00617 	ldw	ra,24(sp)
 40063a0:	dd400517 	ldw	r21,20(sp)
 40063a4:	dd000417 	ldw	r20,16(sp)
 40063a8:	dcc00317 	ldw	r19,12(sp)
 40063ac:	dc800217 	ldw	r18,8(sp)
 40063b0:	dc400117 	ldw	r17,4(sp)
 40063b4:	dc000017 	ldw	r16,0(sp)
 40063b8:	dec00704 	addi	sp,sp,28
 40063bc:	f800283a 	ret
 40063c0:	21400017 	ldw	r5,0(r4)
 40063c4:	18c00104 	addi	r3,r3,4
 40063c8:	21000104 	addi	r4,r4,4
 40063cc:	197fff15 	stw	r5,-4(r3)
 40063d0:	223ffb36 	bltu	r4,r8,40063c0 <__ram_exceptions_end+0xfbfe617c>
 40063d4:	003fe606 	br	4006370 <__ram_exceptions_end+0xfbfe612c>
 40063d8:	9c000084 	addi	r16,r19,2
 40063dc:	003fe406 	br	4006370 <__ram_exceptions_end+0xfbfe612c>

040063e0 <__mcmp>:
 40063e0:	20800417 	ldw	r2,16(r4)
 40063e4:	28c00417 	ldw	r3,16(r5)
 40063e8:	10c5c83a 	sub	r2,r2,r3
 40063ec:	1000111e 	bne	r2,zero,4006434 <__mcmp+0x54>
 40063f0:	18c7883a 	add	r3,r3,r3
 40063f4:	18c7883a 	add	r3,r3,r3
 40063f8:	21000504 	addi	r4,r4,20
 40063fc:	29400504 	addi	r5,r5,20
 4006400:	20c5883a 	add	r2,r4,r3
 4006404:	28cb883a 	add	r5,r5,r3
 4006408:	00000106 	br	4006410 <__mcmp+0x30>
 400640c:	20800a2e 	bgeu	r4,r2,4006438 <__mcmp+0x58>
 4006410:	10bfff04 	addi	r2,r2,-4
 4006414:	297fff04 	addi	r5,r5,-4
 4006418:	11800017 	ldw	r6,0(r2)
 400641c:	28c00017 	ldw	r3,0(r5)
 4006420:	30fffa26 	beq	r6,r3,400640c <__ram_exceptions_end+0xfbfe61c8>
 4006424:	30c00236 	bltu	r6,r3,4006430 <__mcmp+0x50>
 4006428:	00800044 	movi	r2,1
 400642c:	f800283a 	ret
 4006430:	00bfffc4 	movi	r2,-1
 4006434:	f800283a 	ret
 4006438:	0005883a 	mov	r2,zero
 400643c:	f800283a 	ret

04006440 <__mdiff>:
 4006440:	28c00417 	ldw	r3,16(r5)
 4006444:	30800417 	ldw	r2,16(r6)
 4006448:	defffa04 	addi	sp,sp,-24
 400644c:	dcc00315 	stw	r19,12(sp)
 4006450:	dc800215 	stw	r18,8(sp)
 4006454:	dfc00515 	stw	ra,20(sp)
 4006458:	dd000415 	stw	r20,16(sp)
 400645c:	dc400115 	stw	r17,4(sp)
 4006460:	dc000015 	stw	r16,0(sp)
 4006464:	1887c83a 	sub	r3,r3,r2
 4006468:	2825883a 	mov	r18,r5
 400646c:	3027883a 	mov	r19,r6
 4006470:	1800141e 	bne	r3,zero,40064c4 <__mdiff+0x84>
 4006474:	1085883a 	add	r2,r2,r2
 4006478:	1085883a 	add	r2,r2,r2
 400647c:	2a000504 	addi	r8,r5,20
 4006480:	34000504 	addi	r16,r6,20
 4006484:	4087883a 	add	r3,r8,r2
 4006488:	8085883a 	add	r2,r16,r2
 400648c:	00000106 	br	4006494 <__mdiff+0x54>
 4006490:	40c0592e 	bgeu	r8,r3,40065f8 <__mdiff+0x1b8>
 4006494:	18ffff04 	addi	r3,r3,-4
 4006498:	10bfff04 	addi	r2,r2,-4
 400649c:	19c00017 	ldw	r7,0(r3)
 40064a0:	11400017 	ldw	r5,0(r2)
 40064a4:	397ffa26 	beq	r7,r5,4006490 <__ram_exceptions_end+0xfbfe624c>
 40064a8:	3940592e 	bgeu	r7,r5,4006610 <__mdiff+0x1d0>
 40064ac:	9005883a 	mov	r2,r18
 40064b0:	4023883a 	mov	r17,r8
 40064b4:	9825883a 	mov	r18,r19
 40064b8:	05000044 	movi	r20,1
 40064bc:	1027883a 	mov	r19,r2
 40064c0:	00000406 	br	40064d4 <__mdiff+0x94>
 40064c4:	18005616 	blt	r3,zero,4006620 <__mdiff+0x1e0>
 40064c8:	34400504 	addi	r17,r6,20
 40064cc:	2c000504 	addi	r16,r5,20
 40064d0:	0029883a 	mov	r20,zero
 40064d4:	91400117 	ldw	r5,4(r18)
 40064d8:	4005b180 	call	4005b18 <_Balloc>
 40064dc:	92400417 	ldw	r9,16(r18)
 40064e0:	9b000417 	ldw	r12,16(r19)
 40064e4:	12c00504 	addi	r11,r2,20
 40064e8:	4a51883a 	add	r8,r9,r9
 40064ec:	6319883a 	add	r12,r12,r12
 40064f0:	4211883a 	add	r8,r8,r8
 40064f4:	6319883a 	add	r12,r12,r12
 40064f8:	15000315 	stw	r20,12(r2)
 40064fc:	8211883a 	add	r8,r16,r8
 4006500:	8b19883a 	add	r12,r17,r12
 4006504:	0007883a 	mov	r3,zero
 4006508:	81400017 	ldw	r5,0(r16)
 400650c:	89c00017 	ldw	r7,0(r17)
 4006510:	59800104 	addi	r6,r11,4
 4006514:	293fffcc 	andi	r4,r5,65535
 4006518:	20c7883a 	add	r3,r4,r3
 400651c:	393fffcc 	andi	r4,r7,65535
 4006520:	1909c83a 	sub	r4,r3,r4
 4006524:	280ad43a 	srli	r5,r5,16
 4006528:	380ed43a 	srli	r7,r7,16
 400652c:	2007d43a 	srai	r3,r4,16
 4006530:	213fffcc 	andi	r4,r4,65535
 4006534:	29cbc83a 	sub	r5,r5,r7
 4006538:	28c7883a 	add	r3,r5,r3
 400653c:	180a943a 	slli	r5,r3,16
 4006540:	8c400104 	addi	r17,r17,4
 4006544:	84000104 	addi	r16,r16,4
 4006548:	2908b03a 	or	r4,r5,r4
 400654c:	59000015 	stw	r4,0(r11)
 4006550:	1807d43a 	srai	r3,r3,16
 4006554:	3015883a 	mov	r10,r6
 4006558:	3017883a 	mov	r11,r6
 400655c:	8b3fea36 	bltu	r17,r12,4006508 <__ram_exceptions_end+0xfbfe62c4>
 4006560:	8200162e 	bgeu	r16,r8,40065bc <__mdiff+0x17c>
 4006564:	8017883a 	mov	r11,r16
 4006568:	59400017 	ldw	r5,0(r11)
 400656c:	31800104 	addi	r6,r6,4
 4006570:	5ac00104 	addi	r11,r11,4
 4006574:	293fffcc 	andi	r4,r5,65535
 4006578:	20c7883a 	add	r3,r4,r3
 400657c:	280ed43a 	srli	r7,r5,16
 4006580:	180bd43a 	srai	r5,r3,16
 4006584:	193fffcc 	andi	r4,r3,65535
 4006588:	3947883a 	add	r3,r7,r5
 400658c:	180a943a 	slli	r5,r3,16
 4006590:	1807d43a 	srai	r3,r3,16
 4006594:	2908b03a 	or	r4,r5,r4
 4006598:	313fff15 	stw	r4,-4(r6)
 400659c:	5a3ff236 	bltu	r11,r8,4006568 <__ram_exceptions_end+0xfbfe6324>
 40065a0:	0406303a 	nor	r3,zero,r16
 40065a4:	1a07883a 	add	r3,r3,r8
 40065a8:	1806d0ba 	srli	r3,r3,2
 40065ac:	18c00044 	addi	r3,r3,1
 40065b0:	18c7883a 	add	r3,r3,r3
 40065b4:	18c7883a 	add	r3,r3,r3
 40065b8:	50d5883a 	add	r10,r10,r3
 40065bc:	50ffff04 	addi	r3,r10,-4
 40065c0:	2000041e 	bne	r4,zero,40065d4 <__mdiff+0x194>
 40065c4:	18ffff04 	addi	r3,r3,-4
 40065c8:	19000017 	ldw	r4,0(r3)
 40065cc:	4a7fffc4 	addi	r9,r9,-1
 40065d0:	203ffc26 	beq	r4,zero,40065c4 <__ram_exceptions_end+0xfbfe6380>
 40065d4:	12400415 	stw	r9,16(r2)
 40065d8:	dfc00517 	ldw	ra,20(sp)
 40065dc:	dd000417 	ldw	r20,16(sp)
 40065e0:	dcc00317 	ldw	r19,12(sp)
 40065e4:	dc800217 	ldw	r18,8(sp)
 40065e8:	dc400117 	ldw	r17,4(sp)
 40065ec:	dc000017 	ldw	r16,0(sp)
 40065f0:	dec00604 	addi	sp,sp,24
 40065f4:	f800283a 	ret
 40065f8:	000b883a 	mov	r5,zero
 40065fc:	4005b180 	call	4005b18 <_Balloc>
 4006600:	00c00044 	movi	r3,1
 4006604:	10c00415 	stw	r3,16(r2)
 4006608:	10000515 	stw	zero,20(r2)
 400660c:	003ff206 	br	40065d8 <__ram_exceptions_end+0xfbfe6394>
 4006610:	8023883a 	mov	r17,r16
 4006614:	0029883a 	mov	r20,zero
 4006618:	4021883a 	mov	r16,r8
 400661c:	003fad06 	br	40064d4 <__ram_exceptions_end+0xfbfe6290>
 4006620:	9005883a 	mov	r2,r18
 4006624:	94400504 	addi	r17,r18,20
 4006628:	9c000504 	addi	r16,r19,20
 400662c:	9825883a 	mov	r18,r19
 4006630:	05000044 	movi	r20,1
 4006634:	1027883a 	mov	r19,r2
 4006638:	003fa606 	br	40064d4 <__ram_exceptions_end+0xfbfe6290>

0400663c <__ulp>:
 400663c:	295ffc2c 	andhi	r5,r5,32752
 4006640:	00bf3034 	movhi	r2,64704
 4006644:	2887883a 	add	r3,r5,r2
 4006648:	00c0020e 	bge	zero,r3,4006654 <__ulp+0x18>
 400664c:	0005883a 	mov	r2,zero
 4006650:	f800283a 	ret
 4006654:	00c7c83a 	sub	r3,zero,r3
 4006658:	1807d53a 	srai	r3,r3,20
 400665c:	008004c4 	movi	r2,19
 4006660:	10c00b0e 	bge	r2,r3,4006690 <__ulp+0x54>
 4006664:	18bffb04 	addi	r2,r3,-20
 4006668:	01000784 	movi	r4,30
 400666c:	0007883a 	mov	r3,zero
 4006670:	20800516 	blt	r4,r2,4006688 <__ulp+0x4c>
 4006674:	010007c4 	movi	r4,31
 4006678:	2089c83a 	sub	r4,r4,r2
 400667c:	00800044 	movi	r2,1
 4006680:	1104983a 	sll	r2,r2,r4
 4006684:	f800283a 	ret
 4006688:	00800044 	movi	r2,1
 400668c:	f800283a 	ret
 4006690:	01400234 	movhi	r5,8
 4006694:	28c7d83a 	sra	r3,r5,r3
 4006698:	0005883a 	mov	r2,zero
 400669c:	f800283a 	ret

040066a0 <__b2d>:
 40066a0:	defffa04 	addi	sp,sp,-24
 40066a4:	dc000015 	stw	r16,0(sp)
 40066a8:	24000417 	ldw	r16,16(r4)
 40066ac:	dc400115 	stw	r17,4(sp)
 40066b0:	24400504 	addi	r17,r4,20
 40066b4:	8421883a 	add	r16,r16,r16
 40066b8:	8421883a 	add	r16,r16,r16
 40066bc:	8c21883a 	add	r16,r17,r16
 40066c0:	dc800215 	stw	r18,8(sp)
 40066c4:	84bfff17 	ldw	r18,-4(r16)
 40066c8:	dd000415 	stw	r20,16(sp)
 40066cc:	dcc00315 	stw	r19,12(sp)
 40066d0:	9009883a 	mov	r4,r18
 40066d4:	2829883a 	mov	r20,r5
 40066d8:	dfc00515 	stw	ra,20(sp)
 40066dc:	4005e0c0 	call	4005e0c <__hi0bits>
 40066e0:	00c00804 	movi	r3,32
 40066e4:	1889c83a 	sub	r4,r3,r2
 40066e8:	a1000015 	stw	r4,0(r20)
 40066ec:	01000284 	movi	r4,10
 40066f0:	84ffff04 	addi	r19,r16,-4
 40066f4:	20801216 	blt	r4,r2,4006740 <__b2d+0xa0>
 40066f8:	018002c4 	movi	r6,11
 40066fc:	308dc83a 	sub	r6,r6,r2
 4006700:	9186d83a 	srl	r3,r18,r6
 4006704:	18cffc34 	orhi	r3,r3,16368
 4006708:	8cc0212e 	bgeu	r17,r19,4006790 <__b2d+0xf0>
 400670c:	813ffe17 	ldw	r4,-8(r16)
 4006710:	218cd83a 	srl	r6,r4,r6
 4006714:	10800544 	addi	r2,r2,21
 4006718:	9084983a 	sll	r2,r18,r2
 400671c:	1184b03a 	or	r2,r2,r6
 4006720:	dfc00517 	ldw	ra,20(sp)
 4006724:	dd000417 	ldw	r20,16(sp)
 4006728:	dcc00317 	ldw	r19,12(sp)
 400672c:	dc800217 	ldw	r18,8(sp)
 4006730:	dc400117 	ldw	r17,4(sp)
 4006734:	dc000017 	ldw	r16,0(sp)
 4006738:	dec00604 	addi	sp,sp,24
 400673c:	f800283a 	ret
 4006740:	8cc00f2e 	bgeu	r17,r19,4006780 <__b2d+0xe0>
 4006744:	117ffd44 	addi	r5,r2,-11
 4006748:	80bffe17 	ldw	r2,-8(r16)
 400674c:	28000e26 	beq	r5,zero,4006788 <__b2d+0xe8>
 4006750:	1949c83a 	sub	r4,r3,r5
 4006754:	9164983a 	sll	r18,r18,r5
 4006758:	1106d83a 	srl	r3,r2,r4
 400675c:	81bffe04 	addi	r6,r16,-8
 4006760:	948ffc34 	orhi	r18,r18,16368
 4006764:	90c6b03a 	or	r3,r18,r3
 4006768:	89800e2e 	bgeu	r17,r6,40067a4 <__b2d+0x104>
 400676c:	81bffd17 	ldw	r6,-12(r16)
 4006770:	1144983a 	sll	r2,r2,r5
 4006774:	310ad83a 	srl	r5,r6,r4
 4006778:	2884b03a 	or	r2,r5,r2
 400677c:	003fe806 	br	4006720 <__ram_exceptions_end+0xfbfe64dc>
 4006780:	10bffd44 	addi	r2,r2,-11
 4006784:	1000041e 	bne	r2,zero,4006798 <__b2d+0xf8>
 4006788:	90cffc34 	orhi	r3,r18,16368
 400678c:	003fe406 	br	4006720 <__ram_exceptions_end+0xfbfe64dc>
 4006790:	000d883a 	mov	r6,zero
 4006794:	003fdf06 	br	4006714 <__ram_exceptions_end+0xfbfe64d0>
 4006798:	90a4983a 	sll	r18,r18,r2
 400679c:	0005883a 	mov	r2,zero
 40067a0:	003ff906 	br	4006788 <__ram_exceptions_end+0xfbfe6544>
 40067a4:	1144983a 	sll	r2,r2,r5
 40067a8:	003fdd06 	br	4006720 <__ram_exceptions_end+0xfbfe64dc>

040067ac <__d2b>:
 40067ac:	defff804 	addi	sp,sp,-32
 40067b0:	dc000215 	stw	r16,8(sp)
 40067b4:	3021883a 	mov	r16,r6
 40067b8:	dc400315 	stw	r17,12(sp)
 40067bc:	8022907a 	slli	r17,r16,1
 40067c0:	dd000615 	stw	r20,24(sp)
 40067c4:	2829883a 	mov	r20,r5
 40067c8:	01400044 	movi	r5,1
 40067cc:	dcc00515 	stw	r19,20(sp)
 40067d0:	dc800415 	stw	r18,16(sp)
 40067d4:	dfc00715 	stw	ra,28(sp)
 40067d8:	3825883a 	mov	r18,r7
 40067dc:	8822d57a 	srli	r17,r17,21
 40067e0:	4005b180 	call	4005b18 <_Balloc>
 40067e4:	1027883a 	mov	r19,r2
 40067e8:	00800434 	movhi	r2,16
 40067ec:	10bfffc4 	addi	r2,r2,-1
 40067f0:	808c703a 	and	r6,r16,r2
 40067f4:	88000126 	beq	r17,zero,40067fc <__d2b+0x50>
 40067f8:	31800434 	orhi	r6,r6,16
 40067fc:	d9800015 	stw	r6,0(sp)
 4006800:	a0002426 	beq	r20,zero,4006894 <__d2b+0xe8>
 4006804:	d9000104 	addi	r4,sp,4
 4006808:	dd000115 	stw	r20,4(sp)
 400680c:	4005e740 	call	4005e74 <__lo0bits>
 4006810:	d8c00017 	ldw	r3,0(sp)
 4006814:	10002f1e 	bne	r2,zero,40068d4 <__d2b+0x128>
 4006818:	d9000117 	ldw	r4,4(sp)
 400681c:	99000515 	stw	r4,20(r19)
 4006820:	1821003a 	cmpeq	r16,r3,zero
 4006824:	01000084 	movi	r4,2
 4006828:	2421c83a 	sub	r16,r4,r16
 400682c:	98c00615 	stw	r3,24(r19)
 4006830:	9c000415 	stw	r16,16(r19)
 4006834:	88001f1e 	bne	r17,zero,40068b4 <__d2b+0x108>
 4006838:	10bef384 	addi	r2,r2,-1074
 400683c:	90800015 	stw	r2,0(r18)
 4006840:	00900034 	movhi	r2,16384
 4006844:	10bfffc4 	addi	r2,r2,-1
 4006848:	8085883a 	add	r2,r16,r2
 400684c:	1085883a 	add	r2,r2,r2
 4006850:	1085883a 	add	r2,r2,r2
 4006854:	9885883a 	add	r2,r19,r2
 4006858:	11000517 	ldw	r4,20(r2)
 400685c:	8020917a 	slli	r16,r16,5
 4006860:	4005e0c0 	call	4005e0c <__hi0bits>
 4006864:	d8c00817 	ldw	r3,32(sp)
 4006868:	8085c83a 	sub	r2,r16,r2
 400686c:	18800015 	stw	r2,0(r3)
 4006870:	9805883a 	mov	r2,r19
 4006874:	dfc00717 	ldw	ra,28(sp)
 4006878:	dd000617 	ldw	r20,24(sp)
 400687c:	dcc00517 	ldw	r19,20(sp)
 4006880:	dc800417 	ldw	r18,16(sp)
 4006884:	dc400317 	ldw	r17,12(sp)
 4006888:	dc000217 	ldw	r16,8(sp)
 400688c:	dec00804 	addi	sp,sp,32
 4006890:	f800283a 	ret
 4006894:	d809883a 	mov	r4,sp
 4006898:	4005e740 	call	4005e74 <__lo0bits>
 400689c:	d8c00017 	ldw	r3,0(sp)
 40068a0:	04000044 	movi	r16,1
 40068a4:	9c000415 	stw	r16,16(r19)
 40068a8:	98c00515 	stw	r3,20(r19)
 40068ac:	10800804 	addi	r2,r2,32
 40068b0:	883fe126 	beq	r17,zero,4006838 <__ram_exceptions_end+0xfbfe65f4>
 40068b4:	00c00d44 	movi	r3,53
 40068b8:	8c7ef344 	addi	r17,r17,-1075
 40068bc:	88a3883a 	add	r17,r17,r2
 40068c0:	1885c83a 	sub	r2,r3,r2
 40068c4:	d8c00817 	ldw	r3,32(sp)
 40068c8:	94400015 	stw	r17,0(r18)
 40068cc:	18800015 	stw	r2,0(r3)
 40068d0:	003fe706 	br	4006870 <__ram_exceptions_end+0xfbfe662c>
 40068d4:	01000804 	movi	r4,32
 40068d8:	2089c83a 	sub	r4,r4,r2
 40068dc:	1908983a 	sll	r4,r3,r4
 40068e0:	d9400117 	ldw	r5,4(sp)
 40068e4:	1886d83a 	srl	r3,r3,r2
 40068e8:	2148b03a 	or	r4,r4,r5
 40068ec:	99000515 	stw	r4,20(r19)
 40068f0:	d8c00015 	stw	r3,0(sp)
 40068f4:	003fca06 	br	4006820 <__ram_exceptions_end+0xfbfe65dc>

040068f8 <__ratio>:
 40068f8:	defff904 	addi	sp,sp,-28
 40068fc:	dc400315 	stw	r17,12(sp)
 4006900:	2823883a 	mov	r17,r5
 4006904:	d9400104 	addi	r5,sp,4
 4006908:	dfc00615 	stw	ra,24(sp)
 400690c:	dcc00515 	stw	r19,20(sp)
 4006910:	dc800415 	stw	r18,16(sp)
 4006914:	2027883a 	mov	r19,r4
 4006918:	dc000215 	stw	r16,8(sp)
 400691c:	40066a00 	call	40066a0 <__b2d>
 4006920:	d80b883a 	mov	r5,sp
 4006924:	8809883a 	mov	r4,r17
 4006928:	1025883a 	mov	r18,r2
 400692c:	1821883a 	mov	r16,r3
 4006930:	40066a00 	call	40066a0 <__b2d>
 4006934:	8a000417 	ldw	r8,16(r17)
 4006938:	99000417 	ldw	r4,16(r19)
 400693c:	d9400117 	ldw	r5,4(sp)
 4006940:	2209c83a 	sub	r4,r4,r8
 4006944:	2010917a 	slli	r8,r4,5
 4006948:	d9000017 	ldw	r4,0(sp)
 400694c:	2909c83a 	sub	r4,r5,r4
 4006950:	4109883a 	add	r4,r8,r4
 4006954:	01000e0e 	bge	zero,r4,4006990 <__ratio+0x98>
 4006958:	2008953a 	slli	r4,r4,20
 400695c:	2421883a 	add	r16,r4,r16
 4006960:	100d883a 	mov	r6,r2
 4006964:	180f883a 	mov	r7,r3
 4006968:	9009883a 	mov	r4,r18
 400696c:	800b883a 	mov	r5,r16
 4006970:	400ae940 	call	400ae94 <__divdf3>
 4006974:	dfc00617 	ldw	ra,24(sp)
 4006978:	dcc00517 	ldw	r19,20(sp)
 400697c:	dc800417 	ldw	r18,16(sp)
 4006980:	dc400317 	ldw	r17,12(sp)
 4006984:	dc000217 	ldw	r16,8(sp)
 4006988:	dec00704 	addi	sp,sp,28
 400698c:	f800283a 	ret
 4006990:	2008953a 	slli	r4,r4,20
 4006994:	1907c83a 	sub	r3,r3,r4
 4006998:	003ff106 	br	4006960 <__ram_exceptions_end+0xfbfe671c>

0400699c <_mprec_log10>:
 400699c:	defffe04 	addi	sp,sp,-8
 40069a0:	dc000015 	stw	r16,0(sp)
 40069a4:	dfc00115 	stw	ra,4(sp)
 40069a8:	008005c4 	movi	r2,23
 40069ac:	2021883a 	mov	r16,r4
 40069b0:	11000d0e 	bge	r2,r4,40069e8 <_mprec_log10+0x4c>
 40069b4:	0005883a 	mov	r2,zero
 40069b8:	00cffc34 	movhi	r3,16368
 40069bc:	843fffc4 	addi	r16,r16,-1
 40069c0:	000d883a 	mov	r6,zero
 40069c4:	01d00934 	movhi	r7,16420
 40069c8:	1009883a 	mov	r4,r2
 40069cc:	180b883a 	mov	r5,r3
 40069d0:	400b9d40 	call	400b9d4 <__muldf3>
 40069d4:	803ff91e 	bne	r16,zero,40069bc <__ram_exceptions_end+0xfbfe6778>
 40069d8:	dfc00117 	ldw	ra,4(sp)
 40069dc:	dc000017 	ldw	r16,0(sp)
 40069e0:	dec00204 	addi	sp,sp,8
 40069e4:	f800283a 	ret
 40069e8:	202090fa 	slli	r16,r4,3
 40069ec:	00810074 	movhi	r2,1025
 40069f0:	10bf8d04 	addi	r2,r2,-460
 40069f4:	1421883a 	add	r16,r2,r16
 40069f8:	80800017 	ldw	r2,0(r16)
 40069fc:	80c00117 	ldw	r3,4(r16)
 4006a00:	dfc00117 	ldw	ra,4(sp)
 4006a04:	dc000017 	ldw	r16,0(sp)
 4006a08:	dec00204 	addi	sp,sp,8
 4006a0c:	f800283a 	ret

04006a10 <__copybits>:
 4006a10:	297fffc4 	addi	r5,r5,-1
 4006a14:	280fd17a 	srai	r7,r5,5
 4006a18:	30c00417 	ldw	r3,16(r6)
 4006a1c:	30800504 	addi	r2,r6,20
 4006a20:	39c00044 	addi	r7,r7,1
 4006a24:	18c7883a 	add	r3,r3,r3
 4006a28:	39cf883a 	add	r7,r7,r7
 4006a2c:	18c7883a 	add	r3,r3,r3
 4006a30:	39cf883a 	add	r7,r7,r7
 4006a34:	10c7883a 	add	r3,r2,r3
 4006a38:	21cf883a 	add	r7,r4,r7
 4006a3c:	10c00d2e 	bgeu	r2,r3,4006a74 <__copybits+0x64>
 4006a40:	200b883a 	mov	r5,r4
 4006a44:	12000017 	ldw	r8,0(r2)
 4006a48:	29400104 	addi	r5,r5,4
 4006a4c:	10800104 	addi	r2,r2,4
 4006a50:	2a3fff15 	stw	r8,-4(r5)
 4006a54:	10fffb36 	bltu	r2,r3,4006a44 <__ram_exceptions_end+0xfbfe6800>
 4006a58:	1985c83a 	sub	r2,r3,r6
 4006a5c:	10bffac4 	addi	r2,r2,-21
 4006a60:	1004d0ba 	srli	r2,r2,2
 4006a64:	10800044 	addi	r2,r2,1
 4006a68:	1085883a 	add	r2,r2,r2
 4006a6c:	1085883a 	add	r2,r2,r2
 4006a70:	2089883a 	add	r4,r4,r2
 4006a74:	21c0032e 	bgeu	r4,r7,4006a84 <__copybits+0x74>
 4006a78:	20000015 	stw	zero,0(r4)
 4006a7c:	21000104 	addi	r4,r4,4
 4006a80:	21fffd36 	bltu	r4,r7,4006a78 <__ram_exceptions_end+0xfbfe6834>
 4006a84:	f800283a 	ret

04006a88 <__any_on>:
 4006a88:	20c00417 	ldw	r3,16(r4)
 4006a8c:	2805d17a 	srai	r2,r5,5
 4006a90:	21000504 	addi	r4,r4,20
 4006a94:	18800d0e 	bge	r3,r2,4006acc <__any_on+0x44>
 4006a98:	18c7883a 	add	r3,r3,r3
 4006a9c:	18c7883a 	add	r3,r3,r3
 4006aa0:	20c7883a 	add	r3,r4,r3
 4006aa4:	20c0192e 	bgeu	r4,r3,4006b0c <__any_on+0x84>
 4006aa8:	18bfff17 	ldw	r2,-4(r3)
 4006aac:	18ffff04 	addi	r3,r3,-4
 4006ab0:	1000041e 	bne	r2,zero,4006ac4 <__any_on+0x3c>
 4006ab4:	20c0142e 	bgeu	r4,r3,4006b08 <__any_on+0x80>
 4006ab8:	18ffff04 	addi	r3,r3,-4
 4006abc:	19400017 	ldw	r5,0(r3)
 4006ac0:	283ffc26 	beq	r5,zero,4006ab4 <__ram_exceptions_end+0xfbfe6870>
 4006ac4:	00800044 	movi	r2,1
 4006ac8:	f800283a 	ret
 4006acc:	10c00a0e 	bge	r2,r3,4006af8 <__any_on+0x70>
 4006ad0:	1085883a 	add	r2,r2,r2
 4006ad4:	1085883a 	add	r2,r2,r2
 4006ad8:	294007cc 	andi	r5,r5,31
 4006adc:	2087883a 	add	r3,r4,r2
 4006ae0:	283ff026 	beq	r5,zero,4006aa4 <__ram_exceptions_end+0xfbfe6860>
 4006ae4:	19800017 	ldw	r6,0(r3)
 4006ae8:	3144d83a 	srl	r2,r6,r5
 4006aec:	114a983a 	sll	r5,r2,r5
 4006af0:	317ff41e 	bne	r6,r5,4006ac4 <__ram_exceptions_end+0xfbfe6880>
 4006af4:	003feb06 	br	4006aa4 <__ram_exceptions_end+0xfbfe6860>
 4006af8:	1085883a 	add	r2,r2,r2
 4006afc:	1085883a 	add	r2,r2,r2
 4006b00:	2087883a 	add	r3,r4,r2
 4006b04:	003fe706 	br	4006aa4 <__ram_exceptions_end+0xfbfe6860>
 4006b08:	f800283a 	ret
 4006b0c:	0005883a 	mov	r2,zero
 4006b10:	f800283a 	ret

04006b14 <__fpclassifyd>:
 4006b14:	00a00034 	movhi	r2,32768
 4006b18:	10bfffc4 	addi	r2,r2,-1
 4006b1c:	2884703a 	and	r2,r5,r2
 4006b20:	10000726 	beq	r2,zero,4006b40 <__fpclassifyd+0x2c>
 4006b24:	00fffc34 	movhi	r3,65520
 4006b28:	019ff834 	movhi	r6,32736
 4006b2c:	28c7883a 	add	r3,r5,r3
 4006b30:	31bfffc4 	addi	r6,r6,-1
 4006b34:	30c00536 	bltu	r6,r3,4006b4c <__fpclassifyd+0x38>
 4006b38:	00800104 	movi	r2,4
 4006b3c:	f800283a 	ret
 4006b40:	2000021e 	bne	r4,zero,4006b4c <__fpclassifyd+0x38>
 4006b44:	00800084 	movi	r2,2
 4006b48:	f800283a 	ret
 4006b4c:	00dffc34 	movhi	r3,32752
 4006b50:	019ff834 	movhi	r6,32736
 4006b54:	28cb883a 	add	r5,r5,r3
 4006b58:	31bfffc4 	addi	r6,r6,-1
 4006b5c:	317ff62e 	bgeu	r6,r5,4006b38 <__ram_exceptions_end+0xfbfe68f4>
 4006b60:	01400434 	movhi	r5,16
 4006b64:	297fffc4 	addi	r5,r5,-1
 4006b68:	28800236 	bltu	r5,r2,4006b74 <__fpclassifyd+0x60>
 4006b6c:	008000c4 	movi	r2,3
 4006b70:	f800283a 	ret
 4006b74:	10c00226 	beq	r2,r3,4006b80 <__fpclassifyd+0x6c>
 4006b78:	0005883a 	mov	r2,zero
 4006b7c:	f800283a 	ret
 4006b80:	2005003a 	cmpeq	r2,r4,zero
 4006b84:	f800283a 	ret

04006b88 <_sbrk_r>:
 4006b88:	defffd04 	addi	sp,sp,-12
 4006b8c:	dc000015 	stw	r16,0(sp)
 4006b90:	04010074 	movhi	r16,1025
 4006b94:	dc400115 	stw	r17,4(sp)
 4006b98:	84060a04 	addi	r16,r16,6184
 4006b9c:	2023883a 	mov	r17,r4
 4006ba0:	2809883a 	mov	r4,r5
 4006ba4:	dfc00215 	stw	ra,8(sp)
 4006ba8:	80000015 	stw	zero,0(r16)
 4006bac:	400d4140 	call	400d414 <sbrk>
 4006bb0:	00ffffc4 	movi	r3,-1
 4006bb4:	10c00526 	beq	r2,r3,4006bcc <_sbrk_r+0x44>
 4006bb8:	dfc00217 	ldw	ra,8(sp)
 4006bbc:	dc400117 	ldw	r17,4(sp)
 4006bc0:	dc000017 	ldw	r16,0(sp)
 4006bc4:	dec00304 	addi	sp,sp,12
 4006bc8:	f800283a 	ret
 4006bcc:	80c00017 	ldw	r3,0(r16)
 4006bd0:	183ff926 	beq	r3,zero,4006bb8 <__ram_exceptions_end+0xfbfe6974>
 4006bd4:	88c00015 	stw	r3,0(r17)
 4006bd8:	003ff706 	br	4006bb8 <__ram_exceptions_end+0xfbfe6974>

04006bdc <__sread>:
 4006bdc:	defffe04 	addi	sp,sp,-8
 4006be0:	dc000015 	stw	r16,0(sp)
 4006be4:	2821883a 	mov	r16,r5
 4006be8:	2940038f 	ldh	r5,14(r5)
 4006bec:	dfc00115 	stw	ra,4(sp)
 4006bf0:	40090800 	call	4009080 <_read_r>
 4006bf4:	10000716 	blt	r2,zero,4006c14 <__sread+0x38>
 4006bf8:	80c01417 	ldw	r3,80(r16)
 4006bfc:	1887883a 	add	r3,r3,r2
 4006c00:	80c01415 	stw	r3,80(r16)
 4006c04:	dfc00117 	ldw	ra,4(sp)
 4006c08:	dc000017 	ldw	r16,0(sp)
 4006c0c:	dec00204 	addi	sp,sp,8
 4006c10:	f800283a 	ret
 4006c14:	80c0030b 	ldhu	r3,12(r16)
 4006c18:	18fbffcc 	andi	r3,r3,61439
 4006c1c:	80c0030d 	sth	r3,12(r16)
 4006c20:	dfc00117 	ldw	ra,4(sp)
 4006c24:	dc000017 	ldw	r16,0(sp)
 4006c28:	dec00204 	addi	sp,sp,8
 4006c2c:	f800283a 	ret

04006c30 <__seofread>:
 4006c30:	0005883a 	mov	r2,zero
 4006c34:	f800283a 	ret

04006c38 <__swrite>:
 4006c38:	2880030b 	ldhu	r2,12(r5)
 4006c3c:	defffb04 	addi	sp,sp,-20
 4006c40:	dcc00315 	stw	r19,12(sp)
 4006c44:	dc800215 	stw	r18,8(sp)
 4006c48:	dc400115 	stw	r17,4(sp)
 4006c4c:	dc000015 	stw	r16,0(sp)
 4006c50:	dfc00415 	stw	ra,16(sp)
 4006c54:	10c0400c 	andi	r3,r2,256
 4006c58:	2821883a 	mov	r16,r5
 4006c5c:	2023883a 	mov	r17,r4
 4006c60:	3025883a 	mov	r18,r6
 4006c64:	3827883a 	mov	r19,r7
 4006c68:	18000526 	beq	r3,zero,4006c80 <__swrite+0x48>
 4006c6c:	2940038f 	ldh	r5,14(r5)
 4006c70:	01c00084 	movi	r7,2
 4006c74:	000d883a 	mov	r6,zero
 4006c78:	4008ec40 	call	4008ec4 <_lseek_r>
 4006c7c:	8080030b 	ldhu	r2,12(r16)
 4006c80:	8140038f 	ldh	r5,14(r16)
 4006c84:	10bbffcc 	andi	r2,r2,61439
 4006c88:	980f883a 	mov	r7,r19
 4006c8c:	900d883a 	mov	r6,r18
 4006c90:	8809883a 	mov	r4,r17
 4006c94:	8080030d 	sth	r2,12(r16)
 4006c98:	dfc00417 	ldw	ra,16(sp)
 4006c9c:	dcc00317 	ldw	r19,12(sp)
 4006ca0:	dc800217 	ldw	r18,8(sp)
 4006ca4:	dc400117 	ldw	r17,4(sp)
 4006ca8:	dc000017 	ldw	r16,0(sp)
 4006cac:	dec00504 	addi	sp,sp,20
 4006cb0:	40084d41 	jmpi	40084d4 <_write_r>

04006cb4 <__sseek>:
 4006cb4:	defffe04 	addi	sp,sp,-8
 4006cb8:	dc000015 	stw	r16,0(sp)
 4006cbc:	2821883a 	mov	r16,r5
 4006cc0:	2940038f 	ldh	r5,14(r5)
 4006cc4:	dfc00115 	stw	ra,4(sp)
 4006cc8:	4008ec40 	call	4008ec4 <_lseek_r>
 4006ccc:	00ffffc4 	movi	r3,-1
 4006cd0:	10c00826 	beq	r2,r3,4006cf4 <__sseek+0x40>
 4006cd4:	80c0030b 	ldhu	r3,12(r16)
 4006cd8:	80801415 	stw	r2,80(r16)
 4006cdc:	18c40014 	ori	r3,r3,4096
 4006ce0:	80c0030d 	sth	r3,12(r16)
 4006ce4:	dfc00117 	ldw	ra,4(sp)
 4006ce8:	dc000017 	ldw	r16,0(sp)
 4006cec:	dec00204 	addi	sp,sp,8
 4006cf0:	f800283a 	ret
 4006cf4:	80c0030b 	ldhu	r3,12(r16)
 4006cf8:	18fbffcc 	andi	r3,r3,61439
 4006cfc:	80c0030d 	sth	r3,12(r16)
 4006d00:	dfc00117 	ldw	ra,4(sp)
 4006d04:	dc000017 	ldw	r16,0(sp)
 4006d08:	dec00204 	addi	sp,sp,8
 4006d0c:	f800283a 	ret

04006d10 <__sclose>:
 4006d10:	2940038f 	ldh	r5,14(r5)
 4006d14:	40085341 	jmpi	4008534 <_close_r>

04006d18 <strcmp>:
 4006d18:	2144b03a 	or	r2,r4,r5
 4006d1c:	108000cc 	andi	r2,r2,3
 4006d20:	1000171e 	bne	r2,zero,4006d80 <strcmp+0x68>
 4006d24:	20800017 	ldw	r2,0(r4)
 4006d28:	28c00017 	ldw	r3,0(r5)
 4006d2c:	10c0141e 	bne	r2,r3,4006d80 <strcmp+0x68>
 4006d30:	027fbff4 	movhi	r9,65279
 4006d34:	4a7fbfc4 	addi	r9,r9,-257
 4006d38:	0086303a 	nor	r3,zero,r2
 4006d3c:	02202074 	movhi	r8,32897
 4006d40:	1245883a 	add	r2,r2,r9
 4006d44:	42202004 	addi	r8,r8,-32640
 4006d48:	10c4703a 	and	r2,r2,r3
 4006d4c:	1204703a 	and	r2,r2,r8
 4006d50:	10000226 	beq	r2,zero,4006d5c <strcmp+0x44>
 4006d54:	00002306 	br	4006de4 <strcmp+0xcc>
 4006d58:	1000221e 	bne	r2,zero,4006de4 <strcmp+0xcc>
 4006d5c:	21000104 	addi	r4,r4,4
 4006d60:	20c00017 	ldw	r3,0(r4)
 4006d64:	29400104 	addi	r5,r5,4
 4006d68:	29800017 	ldw	r6,0(r5)
 4006d6c:	1a4f883a 	add	r7,r3,r9
 4006d70:	00c4303a 	nor	r2,zero,r3
 4006d74:	3884703a 	and	r2,r7,r2
 4006d78:	1204703a 	and	r2,r2,r8
 4006d7c:	19bff626 	beq	r3,r6,4006d58 <__ram_exceptions_end+0xfbfe6b14>
 4006d80:	20800003 	ldbu	r2,0(r4)
 4006d84:	10c03fcc 	andi	r3,r2,255
 4006d88:	18c0201c 	xori	r3,r3,128
 4006d8c:	18ffe004 	addi	r3,r3,-128
 4006d90:	18000c26 	beq	r3,zero,4006dc4 <strcmp+0xac>
 4006d94:	29800007 	ldb	r6,0(r5)
 4006d98:	19800326 	beq	r3,r6,4006da8 <strcmp+0x90>
 4006d9c:	00001306 	br	4006dec <strcmp+0xd4>
 4006da0:	29800007 	ldb	r6,0(r5)
 4006da4:	11800b1e 	bne	r2,r6,4006dd4 <strcmp+0xbc>
 4006da8:	21000044 	addi	r4,r4,1
 4006dac:	20c00003 	ldbu	r3,0(r4)
 4006db0:	29400044 	addi	r5,r5,1
 4006db4:	18803fcc 	andi	r2,r3,255
 4006db8:	1080201c 	xori	r2,r2,128
 4006dbc:	10bfe004 	addi	r2,r2,-128
 4006dc0:	103ff71e 	bne	r2,zero,4006da0 <__ram_exceptions_end+0xfbfe6b5c>
 4006dc4:	0007883a 	mov	r3,zero
 4006dc8:	28800003 	ldbu	r2,0(r5)
 4006dcc:	1885c83a 	sub	r2,r3,r2
 4006dd0:	f800283a 	ret
 4006dd4:	28800003 	ldbu	r2,0(r5)
 4006dd8:	18c03fcc 	andi	r3,r3,255
 4006ddc:	1885c83a 	sub	r2,r3,r2
 4006de0:	f800283a 	ret
 4006de4:	0005883a 	mov	r2,zero
 4006de8:	f800283a 	ret
 4006dec:	10c03fcc 	andi	r3,r2,255
 4006df0:	003ff506 	br	4006dc8 <__ram_exceptions_end+0xfbfe6b84>

04006df4 <strlen>:
 4006df4:	208000cc 	andi	r2,r4,3
 4006df8:	10002026 	beq	r2,zero,4006e7c <strlen+0x88>
 4006dfc:	20800007 	ldb	r2,0(r4)
 4006e00:	10002026 	beq	r2,zero,4006e84 <strlen+0x90>
 4006e04:	2005883a 	mov	r2,r4
 4006e08:	00000206 	br	4006e14 <strlen+0x20>
 4006e0c:	10c00007 	ldb	r3,0(r2)
 4006e10:	18001826 	beq	r3,zero,4006e74 <strlen+0x80>
 4006e14:	10800044 	addi	r2,r2,1
 4006e18:	10c000cc 	andi	r3,r2,3
 4006e1c:	183ffb1e 	bne	r3,zero,4006e0c <__ram_exceptions_end+0xfbfe6bc8>
 4006e20:	10c00017 	ldw	r3,0(r2)
 4006e24:	01ffbff4 	movhi	r7,65279
 4006e28:	39ffbfc4 	addi	r7,r7,-257
 4006e2c:	00ca303a 	nor	r5,zero,r3
 4006e30:	01a02074 	movhi	r6,32897
 4006e34:	19c7883a 	add	r3,r3,r7
 4006e38:	31a02004 	addi	r6,r6,-32640
 4006e3c:	1946703a 	and	r3,r3,r5
 4006e40:	1986703a 	and	r3,r3,r6
 4006e44:	1800091e 	bne	r3,zero,4006e6c <strlen+0x78>
 4006e48:	10800104 	addi	r2,r2,4
 4006e4c:	10c00017 	ldw	r3,0(r2)
 4006e50:	19cb883a 	add	r5,r3,r7
 4006e54:	00c6303a 	nor	r3,zero,r3
 4006e58:	28c6703a 	and	r3,r5,r3
 4006e5c:	1986703a 	and	r3,r3,r6
 4006e60:	183ff926 	beq	r3,zero,4006e48 <__ram_exceptions_end+0xfbfe6c04>
 4006e64:	00000106 	br	4006e6c <strlen+0x78>
 4006e68:	10800044 	addi	r2,r2,1
 4006e6c:	10c00007 	ldb	r3,0(r2)
 4006e70:	183ffd1e 	bne	r3,zero,4006e68 <__ram_exceptions_end+0xfbfe6c24>
 4006e74:	1105c83a 	sub	r2,r2,r4
 4006e78:	f800283a 	ret
 4006e7c:	2005883a 	mov	r2,r4
 4006e80:	003fe706 	br	4006e20 <__ram_exceptions_end+0xfbfe6bdc>
 4006e84:	0005883a 	mov	r2,zero
 4006e88:	f800283a 	ret

04006e8c <__sprint_r.part.0>:
 4006e8c:	28801917 	ldw	r2,100(r5)
 4006e90:	defff604 	addi	sp,sp,-40
 4006e94:	dd400515 	stw	r21,20(sp)
 4006e98:	dfc00915 	stw	ra,36(sp)
 4006e9c:	df000815 	stw	fp,32(sp)
 4006ea0:	ddc00715 	stw	r23,28(sp)
 4006ea4:	dd800615 	stw	r22,24(sp)
 4006ea8:	dd000415 	stw	r20,16(sp)
 4006eac:	dcc00315 	stw	r19,12(sp)
 4006eb0:	dc800215 	stw	r18,8(sp)
 4006eb4:	dc400115 	stw	r17,4(sp)
 4006eb8:	dc000015 	stw	r16,0(sp)
 4006ebc:	1088000c 	andi	r2,r2,8192
 4006ec0:	302b883a 	mov	r21,r6
 4006ec4:	10002e26 	beq	r2,zero,4006f80 <__sprint_r.part.0+0xf4>
 4006ec8:	30800217 	ldw	r2,8(r6)
 4006ecc:	35800017 	ldw	r22,0(r6)
 4006ed0:	10002926 	beq	r2,zero,4006f78 <__sprint_r.part.0+0xec>
 4006ed4:	2827883a 	mov	r19,r5
 4006ed8:	2029883a 	mov	r20,r4
 4006edc:	b5c00104 	addi	r23,r22,4
 4006ee0:	04bfffc4 	movi	r18,-1
 4006ee4:	bc400017 	ldw	r17,0(r23)
 4006ee8:	b4000017 	ldw	r16,0(r22)
 4006eec:	0039883a 	mov	fp,zero
 4006ef0:	8822d0ba 	srli	r17,r17,2
 4006ef4:	8800031e 	bne	r17,zero,4006f04 <__sprint_r.part.0+0x78>
 4006ef8:	00001806 	br	4006f5c <__sprint_r.part.0+0xd0>
 4006efc:	84000104 	addi	r16,r16,4
 4006f00:	8f001526 	beq	r17,fp,4006f58 <__sprint_r.part.0+0xcc>
 4006f04:	81400017 	ldw	r5,0(r16)
 4006f08:	980d883a 	mov	r6,r19
 4006f0c:	a009883a 	mov	r4,r20
 4006f10:	40088b40 	call	40088b4 <_fputwc_r>
 4006f14:	e7000044 	addi	fp,fp,1
 4006f18:	14bff81e 	bne	r2,r18,4006efc <__ram_exceptions_end+0xfbfe6cb8>
 4006f1c:	9005883a 	mov	r2,r18
 4006f20:	a8000215 	stw	zero,8(r21)
 4006f24:	a8000115 	stw	zero,4(r21)
 4006f28:	dfc00917 	ldw	ra,36(sp)
 4006f2c:	df000817 	ldw	fp,32(sp)
 4006f30:	ddc00717 	ldw	r23,28(sp)
 4006f34:	dd800617 	ldw	r22,24(sp)
 4006f38:	dd400517 	ldw	r21,20(sp)
 4006f3c:	dd000417 	ldw	r20,16(sp)
 4006f40:	dcc00317 	ldw	r19,12(sp)
 4006f44:	dc800217 	ldw	r18,8(sp)
 4006f48:	dc400117 	ldw	r17,4(sp)
 4006f4c:	dc000017 	ldw	r16,0(sp)
 4006f50:	dec00a04 	addi	sp,sp,40
 4006f54:	f800283a 	ret
 4006f58:	a8800217 	ldw	r2,8(r21)
 4006f5c:	8c63883a 	add	r17,r17,r17
 4006f60:	8c63883a 	add	r17,r17,r17
 4006f64:	1445c83a 	sub	r2,r2,r17
 4006f68:	a8800215 	stw	r2,8(r21)
 4006f6c:	b5800204 	addi	r22,r22,8
 4006f70:	bdc00204 	addi	r23,r23,8
 4006f74:	103fdb1e 	bne	r2,zero,4006ee4 <__ram_exceptions_end+0xfbfe6ca0>
 4006f78:	0005883a 	mov	r2,zero
 4006f7c:	003fe806 	br	4006f20 <__ram_exceptions_end+0xfbfe6cdc>
 4006f80:	40089b40 	call	40089b4 <__sfvwrite_r>
 4006f84:	003fe606 	br	4006f20 <__ram_exceptions_end+0xfbfe6cdc>

04006f88 <__sprint_r>:
 4006f88:	30c00217 	ldw	r3,8(r6)
 4006f8c:	18000126 	beq	r3,zero,4006f94 <__sprint_r+0xc>
 4006f90:	4006e8c1 	jmpi	4006e8c <__sprint_r.part.0>
 4006f94:	30000115 	stw	zero,4(r6)
 4006f98:	0005883a 	mov	r2,zero
 4006f9c:	f800283a 	ret

04006fa0 <___vfiprintf_internal_r>:
 4006fa0:	deffc904 	addi	sp,sp,-220
 4006fa4:	df003515 	stw	fp,212(sp)
 4006fa8:	dd003115 	stw	r20,196(sp)
 4006fac:	dfc03615 	stw	ra,216(sp)
 4006fb0:	ddc03415 	stw	r23,208(sp)
 4006fb4:	dd803315 	stw	r22,204(sp)
 4006fb8:	dd403215 	stw	r21,200(sp)
 4006fbc:	dcc03015 	stw	r19,192(sp)
 4006fc0:	dc802f15 	stw	r18,188(sp)
 4006fc4:	dc402e15 	stw	r17,184(sp)
 4006fc8:	dc002d15 	stw	r16,180(sp)
 4006fcc:	d9002015 	stw	r4,128(sp)
 4006fd0:	d9c02215 	stw	r7,136(sp)
 4006fd4:	2829883a 	mov	r20,r5
 4006fd8:	3039883a 	mov	fp,r6
 4006fdc:	20000226 	beq	r4,zero,4006fe8 <___vfiprintf_internal_r+0x48>
 4006fe0:	20800e17 	ldw	r2,56(r4)
 4006fe4:	1000cf26 	beq	r2,zero,4007324 <___vfiprintf_internal_r+0x384>
 4006fe8:	a080030b 	ldhu	r2,12(r20)
 4006fec:	10c8000c 	andi	r3,r2,8192
 4006ff0:	1800061e 	bne	r3,zero,400700c <___vfiprintf_internal_r+0x6c>
 4006ff4:	a1001917 	ldw	r4,100(r20)
 4006ff8:	00f7ffc4 	movi	r3,-8193
 4006ffc:	10880014 	ori	r2,r2,8192
 4007000:	20c6703a 	and	r3,r4,r3
 4007004:	a080030d 	sth	r2,12(r20)
 4007008:	a0c01915 	stw	r3,100(r20)
 400700c:	10c0020c 	andi	r3,r2,8
 4007010:	1800a926 	beq	r3,zero,40072b8 <___vfiprintf_internal_r+0x318>
 4007014:	a0c00417 	ldw	r3,16(r20)
 4007018:	1800a726 	beq	r3,zero,40072b8 <___vfiprintf_internal_r+0x318>
 400701c:	1080068c 	andi	r2,r2,26
 4007020:	00c00284 	movi	r3,10
 4007024:	10c0ac26 	beq	r2,r3,40072d8 <___vfiprintf_internal_r+0x338>
 4007028:	da801a04 	addi	r10,sp,104
 400702c:	da801e15 	stw	r10,120(sp)
 4007030:	d8801e17 	ldw	r2,120(sp)
 4007034:	da8019c4 	addi	r10,sp,103
 4007038:	05810074 	movhi	r22,1025
 400703c:	05c10074 	movhi	r23,1025
 4007040:	da801f15 	stw	r10,124(sp)
 4007044:	1295c83a 	sub	r10,r2,r10
 4007048:	b5bfc304 	addi	r22,r22,-244
 400704c:	bdffbf04 	addi	r23,r23,-260
 4007050:	dec01a15 	stw	sp,104(sp)
 4007054:	d8001c15 	stw	zero,112(sp)
 4007058:	d8001b15 	stw	zero,108(sp)
 400705c:	d8002615 	stw	zero,152(sp)
 4007060:	d8002315 	stw	zero,140(sp)
 4007064:	da802715 	stw	r10,156(sp)
 4007068:	d811883a 	mov	r8,sp
 400706c:	dd002115 	stw	r20,132(sp)
 4007070:	e021883a 	mov	r16,fp
 4007074:	80800007 	ldb	r2,0(r16)
 4007078:	1003ea26 	beq	r2,zero,4008024 <___vfiprintf_internal_r+0x1084>
 400707c:	00c00944 	movi	r3,37
 4007080:	8025883a 	mov	r18,r16
 4007084:	10c0021e 	bne	r2,r3,4007090 <___vfiprintf_internal_r+0xf0>
 4007088:	00001606 	br	40070e4 <___vfiprintf_internal_r+0x144>
 400708c:	10c00326 	beq	r2,r3,400709c <___vfiprintf_internal_r+0xfc>
 4007090:	94800044 	addi	r18,r18,1
 4007094:	90800007 	ldb	r2,0(r18)
 4007098:	103ffc1e 	bne	r2,zero,400708c <__ram_exceptions_end+0xfbfe6e48>
 400709c:	9423c83a 	sub	r17,r18,r16
 40070a0:	88001026 	beq	r17,zero,40070e4 <___vfiprintf_internal_r+0x144>
 40070a4:	d8c01c17 	ldw	r3,112(sp)
 40070a8:	d8801b17 	ldw	r2,108(sp)
 40070ac:	44000015 	stw	r16,0(r8)
 40070b0:	88c7883a 	add	r3,r17,r3
 40070b4:	10800044 	addi	r2,r2,1
 40070b8:	44400115 	stw	r17,4(r8)
 40070bc:	d8c01c15 	stw	r3,112(sp)
 40070c0:	d8801b15 	stw	r2,108(sp)
 40070c4:	010001c4 	movi	r4,7
 40070c8:	2080760e 	bge	r4,r2,40072a4 <___vfiprintf_internal_r+0x304>
 40070cc:	1803821e 	bne	r3,zero,4007ed8 <___vfiprintf_internal_r+0xf38>
 40070d0:	da802317 	ldw	r10,140(sp)
 40070d4:	d8001b15 	stw	zero,108(sp)
 40070d8:	d811883a 	mov	r8,sp
 40070dc:	5455883a 	add	r10,r10,r17
 40070e0:	da802315 	stw	r10,140(sp)
 40070e4:	90800007 	ldb	r2,0(r18)
 40070e8:	10044626 	beq	r2,zero,4008204 <___vfiprintf_internal_r+0x1264>
 40070ec:	90c00047 	ldb	r3,1(r18)
 40070f0:	94000044 	addi	r16,r18,1
 40070f4:	d8001d85 	stb	zero,118(sp)
 40070f8:	0009883a 	mov	r4,zero
 40070fc:	000f883a 	mov	r7,zero
 4007100:	027fffc4 	movi	r9,-1
 4007104:	0023883a 	mov	r17,zero
 4007108:	0029883a 	mov	r20,zero
 400710c:	01401604 	movi	r5,88
 4007110:	01800244 	movi	r6,9
 4007114:	03400a84 	movi	r13,42
 4007118:	03001b04 	movi	r12,108
 400711c:	84000044 	addi	r16,r16,1
 4007120:	18bff804 	addi	r2,r3,-32
 4007124:	28827336 	bltu	r5,r2,4007af4 <___vfiprintf_internal_r+0xb54>
 4007128:	100490ba 	slli	r2,r2,2
 400712c:	02810034 	movhi	r10,1024
 4007130:	529c5004 	addi	r10,r10,28992
 4007134:	1285883a 	add	r2,r2,r10
 4007138:	10800017 	ldw	r2,0(r2)
 400713c:	1000683a 	jmp	r2
 4007140:	04007828 	cmpgeui	r16,zero,480
 4007144:	04007af4 	movhi	r16,491
 4007148:	04007af4 	movhi	r16,491
 400714c:	04007848 	cmpgei	r16,zero,481
 4007150:	04007af4 	movhi	r16,491
 4007154:	04007af4 	movhi	r16,491
 4007158:	04007af4 	movhi	r16,491
 400715c:	04007af4 	movhi	r16,491
 4007160:	04007af4 	movhi	r16,491
 4007164:	04007af4 	movhi	r16,491
 4007168:	04007a30 	cmpltui	r16,zero,488
 400716c:	04007a4c 	andi	r16,zero,489
 4007170:	04007af4 	movhi	r16,491
 4007174:	04007334 	movhi	r16,460
 4007178:	04007a5c 	xori	r16,zero,489
 400717c:	04007af4 	movhi	r16,491
 4007180:	04007854 	movui	r16,481
 4007184:	04007860 	cmpeqi	r16,zero,481
 4007188:	04007860 	cmpeqi	r16,zero,481
 400718c:	04007860 	cmpeqi	r16,zero,481
 4007190:	04007860 	cmpeqi	r16,zero,481
 4007194:	04007860 	cmpeqi	r16,zero,481
 4007198:	04007860 	cmpeqi	r16,zero,481
 400719c:	04007860 	cmpeqi	r16,zero,481
 40071a0:	04007860 	cmpeqi	r16,zero,481
 40071a4:	04007860 	cmpeqi	r16,zero,481
 40071a8:	04007af4 	movhi	r16,491
 40071ac:	04007af4 	movhi	r16,491
 40071b0:	04007af4 	movhi	r16,491
 40071b4:	04007af4 	movhi	r16,491
 40071b8:	04007af4 	movhi	r16,491
 40071bc:	04007af4 	movhi	r16,491
 40071c0:	04007af4 	movhi	r16,491
 40071c4:	04007af4 	movhi	r16,491
 40071c8:	04007af4 	movhi	r16,491
 40071cc:	04007af4 	movhi	r16,491
 40071d0:	0400788c 	andi	r16,zero,482
 40071d4:	04007af4 	movhi	r16,491
 40071d8:	04007af4 	movhi	r16,491
 40071dc:	04007af4 	movhi	r16,491
 40071e0:	04007af4 	movhi	r16,491
 40071e4:	04007af4 	movhi	r16,491
 40071e8:	04007af4 	movhi	r16,491
 40071ec:	04007af4 	movhi	r16,491
 40071f0:	04007af4 	movhi	r16,491
 40071f4:	04007af4 	movhi	r16,491
 40071f8:	04007af4 	movhi	r16,491
 40071fc:	040078c4 	movi	r16,483
 4007200:	04007af4 	movhi	r16,491
 4007204:	04007af4 	movhi	r16,491
 4007208:	04007af4 	movhi	r16,491
 400720c:	04007af4 	movhi	r16,491
 4007210:	04007af4 	movhi	r16,491
 4007214:	0400791c 	xori	r16,zero,484
 4007218:	04007af4 	movhi	r16,491
 400721c:	04007af4 	movhi	r16,491
 4007220:	0400798c 	andi	r16,zero,486
 4007224:	04007af4 	movhi	r16,491
 4007228:	04007af4 	movhi	r16,491
 400722c:	04007af4 	movhi	r16,491
 4007230:	04007af4 	movhi	r16,491
 4007234:	04007af4 	movhi	r16,491
 4007238:	04007af4 	movhi	r16,491
 400723c:	04007af4 	movhi	r16,491
 4007240:	04007af4 	movhi	r16,491
 4007244:	04007af4 	movhi	r16,491
 4007248:	04007af4 	movhi	r16,491
 400724c:	04007738 	rdprs	r16,zero,476
 4007250:	04007764 	muli	r16,zero,477
 4007254:	04007af4 	movhi	r16,491
 4007258:	04007af4 	movhi	r16,491
 400725c:	04007af4 	movhi	r16,491
 4007260:	04007a9c 	xori	r16,zero,490
 4007264:	04007764 	muli	r16,zero,477
 4007268:	04007af4 	movhi	r16,491
 400726c:	04007af4 	movhi	r16,491
 4007270:	040075f8 	rdprs	r16,zero,471
 4007274:	04007af4 	movhi	r16,491
 4007278:	04007608 	cmpgei	r16,zero,472
 400727c:	04007644 	movi	r16,473
 4007280:	04007340 	call	400734 <__alt_mem_new_sdram_controller_0-0x3bff8cc>
 4007284:	040075ec 	andhi	r16,zero,471
 4007288:	04007af4 	movhi	r16,491
 400728c:	040079c8 	cmpgei	r16,zero,487
 4007290:	04007af4 	movhi	r16,491
 4007294:	04007a20 	cmpeqi	r16,zero,488
 4007298:	04007af4 	movhi	r16,491
 400729c:	04007af4 	movhi	r16,491
 40072a0:	040076e4 	muli	r16,zero,475
 40072a4:	42000204 	addi	r8,r8,8
 40072a8:	da802317 	ldw	r10,140(sp)
 40072ac:	5455883a 	add	r10,r10,r17
 40072b0:	da802315 	stw	r10,140(sp)
 40072b4:	003f8b06 	br	40070e4 <__ram_exceptions_end+0xfbfe6ea0>
 40072b8:	d9002017 	ldw	r4,128(sp)
 40072bc:	a00b883a 	mov	r5,r20
 40072c0:	40027400 	call	4002740 <__swsetup_r>
 40072c4:	1003b11e 	bne	r2,zero,400818c <___vfiprintf_internal_r+0x11ec>
 40072c8:	a080030b 	ldhu	r2,12(r20)
 40072cc:	00c00284 	movi	r3,10
 40072d0:	1080068c 	andi	r2,r2,26
 40072d4:	10ff541e 	bne	r2,r3,4007028 <__ram_exceptions_end+0xfbfe6de4>
 40072d8:	a080038f 	ldh	r2,14(r20)
 40072dc:	103f5216 	blt	r2,zero,4007028 <__ram_exceptions_end+0xfbfe6de4>
 40072e0:	d9c02217 	ldw	r7,136(sp)
 40072e4:	d9002017 	ldw	r4,128(sp)
 40072e8:	e00d883a 	mov	r6,fp
 40072ec:	a00b883a 	mov	r5,r20
 40072f0:	40084180 	call	4008418 <__sbprintf>
 40072f4:	dfc03617 	ldw	ra,216(sp)
 40072f8:	df003517 	ldw	fp,212(sp)
 40072fc:	ddc03417 	ldw	r23,208(sp)
 4007300:	dd803317 	ldw	r22,204(sp)
 4007304:	dd403217 	ldw	r21,200(sp)
 4007308:	dd003117 	ldw	r20,196(sp)
 400730c:	dcc03017 	ldw	r19,192(sp)
 4007310:	dc802f17 	ldw	r18,188(sp)
 4007314:	dc402e17 	ldw	r17,184(sp)
 4007318:	dc002d17 	ldw	r16,180(sp)
 400731c:	dec03704 	addi	sp,sp,220
 4007320:	f800283a 	ret
 4007324:	40047140 	call	4004714 <__sinit>
 4007328:	003f2f06 	br	4006fe8 <__ram_exceptions_end+0xfbfe6da4>
 400732c:	0463c83a 	sub	r17,zero,r17
 4007330:	d8802215 	stw	r2,136(sp)
 4007334:	a5000114 	ori	r20,r20,4
 4007338:	80c00007 	ldb	r3,0(r16)
 400733c:	003f7706 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007340:	00800c04 	movi	r2,48
 4007344:	da802217 	ldw	r10,136(sp)
 4007348:	d8801d05 	stb	r2,116(sp)
 400734c:	00801e04 	movi	r2,120
 4007350:	d8801d45 	stb	r2,117(sp)
 4007354:	d8001d85 	stb	zero,118(sp)
 4007358:	50c00104 	addi	r3,r10,4
 400735c:	54800017 	ldw	r18,0(r10)
 4007360:	0027883a 	mov	r19,zero
 4007364:	a0800094 	ori	r2,r20,2
 4007368:	48030b16 	blt	r9,zero,4007f98 <___vfiprintf_internal_r+0xff8>
 400736c:	00bfdfc4 	movi	r2,-129
 4007370:	a096703a 	and	r11,r20,r2
 4007374:	d8c02215 	stw	r3,136(sp)
 4007378:	5d000094 	ori	r20,r11,2
 400737c:	90032b1e 	bne	r18,zero,400802c <___vfiprintf_internal_r+0x108c>
 4007380:	00810074 	movhi	r2,1025
 4007384:	10bf5e04 	addi	r2,r2,-648
 4007388:	d8802615 	stw	r2,152(sp)
 400738c:	0039883a 	mov	fp,zero
 4007390:	48017b1e 	bne	r9,zero,4007980 <___vfiprintf_internal_r+0x9e0>
 4007394:	0013883a 	mov	r9,zero
 4007398:	0027883a 	mov	r19,zero
 400739c:	dd401a04 	addi	r21,sp,104
 40073a0:	4825883a 	mov	r18,r9
 40073a4:	4cc0010e 	bge	r9,r19,40073ac <___vfiprintf_internal_r+0x40c>
 40073a8:	9825883a 	mov	r18,r19
 40073ac:	e7003fcc 	andi	fp,fp,255
 40073b0:	e700201c 	xori	fp,fp,128
 40073b4:	e73fe004 	addi	fp,fp,-128
 40073b8:	e0000126 	beq	fp,zero,40073c0 <___vfiprintf_internal_r+0x420>
 40073bc:	94800044 	addi	r18,r18,1
 40073c0:	a380008c 	andi	r14,r20,2
 40073c4:	70000126 	beq	r14,zero,40073cc <___vfiprintf_internal_r+0x42c>
 40073c8:	94800084 	addi	r18,r18,2
 40073cc:	a700210c 	andi	fp,r20,132
 40073d0:	e001df1e 	bne	fp,zero,4007b50 <___vfiprintf_internal_r+0xbb0>
 40073d4:	8c87c83a 	sub	r3,r17,r18
 40073d8:	00c1dd0e 	bge	zero,r3,4007b50 <___vfiprintf_internal_r+0xbb0>
 40073dc:	01c00404 	movi	r7,16
 40073e0:	d8801c17 	ldw	r2,112(sp)
 40073e4:	38c3ad0e 	bge	r7,r3,400829c <___vfiprintf_internal_r+0x12fc>
 40073e8:	02810074 	movhi	r10,1025
 40073ec:	52bfc304 	addi	r10,r10,-244
 40073f0:	dc002915 	stw	r16,164(sp)
 40073f4:	d9801b17 	ldw	r6,108(sp)
 40073f8:	da802415 	stw	r10,144(sp)
 40073fc:	03c001c4 	movi	r15,7
 4007400:	da402515 	stw	r9,148(sp)
 4007404:	db802815 	stw	r14,160(sp)
 4007408:	1821883a 	mov	r16,r3
 400740c:	00000506 	br	4007424 <___vfiprintf_internal_r+0x484>
 4007410:	31400084 	addi	r5,r6,2
 4007414:	42000204 	addi	r8,r8,8
 4007418:	200d883a 	mov	r6,r4
 400741c:	843ffc04 	addi	r16,r16,-16
 4007420:	3c000d0e 	bge	r7,r16,4007458 <___vfiprintf_internal_r+0x4b8>
 4007424:	10800404 	addi	r2,r2,16
 4007428:	31000044 	addi	r4,r6,1
 400742c:	45800015 	stw	r22,0(r8)
 4007430:	41c00115 	stw	r7,4(r8)
 4007434:	d8801c15 	stw	r2,112(sp)
 4007438:	d9001b15 	stw	r4,108(sp)
 400743c:	793ff40e 	bge	r15,r4,4007410 <__ram_exceptions_end+0xfbfe71cc>
 4007440:	1001b51e 	bne	r2,zero,4007b18 <___vfiprintf_internal_r+0xb78>
 4007444:	843ffc04 	addi	r16,r16,-16
 4007448:	000d883a 	mov	r6,zero
 400744c:	01400044 	movi	r5,1
 4007450:	d811883a 	mov	r8,sp
 4007454:	3c3ff316 	blt	r7,r16,4007424 <__ram_exceptions_end+0xfbfe71e0>
 4007458:	8007883a 	mov	r3,r16
 400745c:	da402517 	ldw	r9,148(sp)
 4007460:	db802817 	ldw	r14,160(sp)
 4007464:	dc002917 	ldw	r16,164(sp)
 4007468:	da802417 	ldw	r10,144(sp)
 400746c:	1885883a 	add	r2,r3,r2
 4007470:	40c00115 	stw	r3,4(r8)
 4007474:	42800015 	stw	r10,0(r8)
 4007478:	d8801c15 	stw	r2,112(sp)
 400747c:	d9401b15 	stw	r5,108(sp)
 4007480:	00c001c4 	movi	r3,7
 4007484:	19426016 	blt	r3,r5,4007e08 <___vfiprintf_internal_r+0xe68>
 4007488:	d8c01d87 	ldb	r3,118(sp)
 400748c:	42000204 	addi	r8,r8,8
 4007490:	29000044 	addi	r4,r5,1
 4007494:	1801b31e 	bne	r3,zero,4007b64 <___vfiprintf_internal_r+0xbc4>
 4007498:	7001c026 	beq	r14,zero,4007b9c <___vfiprintf_internal_r+0xbfc>
 400749c:	d8c01d04 	addi	r3,sp,116
 40074a0:	10800084 	addi	r2,r2,2
 40074a4:	40c00015 	stw	r3,0(r8)
 40074a8:	00c00084 	movi	r3,2
 40074ac:	40c00115 	stw	r3,4(r8)
 40074b0:	d8801c15 	stw	r2,112(sp)
 40074b4:	d9001b15 	stw	r4,108(sp)
 40074b8:	00c001c4 	movi	r3,7
 40074bc:	1902650e 	bge	r3,r4,4007e54 <___vfiprintf_internal_r+0xeb4>
 40074c0:	10029a1e 	bne	r2,zero,4007f2c <___vfiprintf_internal_r+0xf8c>
 40074c4:	00c02004 	movi	r3,128
 40074c8:	01000044 	movi	r4,1
 40074cc:	000b883a 	mov	r5,zero
 40074d0:	d811883a 	mov	r8,sp
 40074d4:	e0c1b31e 	bne	fp,r3,4007ba4 <___vfiprintf_internal_r+0xc04>
 40074d8:	8cb9c83a 	sub	fp,r17,r18
 40074dc:	0701b10e 	bge	zero,fp,4007ba4 <___vfiprintf_internal_r+0xc04>
 40074e0:	01c00404 	movi	r7,16
 40074e4:	3f03890e 	bge	r7,fp,400830c <___vfiprintf_internal_r+0x136c>
 40074e8:	00c10074 	movhi	r3,1025
 40074ec:	18ffbf04 	addi	r3,r3,-260
 40074f0:	d8c02415 	stw	r3,144(sp)
 40074f4:	8007883a 	mov	r3,r16
 40074f8:	034001c4 	movi	r13,7
 40074fc:	e021883a 	mov	r16,fp
 4007500:	da402515 	stw	r9,148(sp)
 4007504:	1839883a 	mov	fp,r3
 4007508:	00000506 	br	4007520 <___vfiprintf_internal_r+0x580>
 400750c:	29800084 	addi	r6,r5,2
 4007510:	42000204 	addi	r8,r8,8
 4007514:	180b883a 	mov	r5,r3
 4007518:	843ffc04 	addi	r16,r16,-16
 400751c:	3c000d0e 	bge	r7,r16,4007554 <___vfiprintf_internal_r+0x5b4>
 4007520:	10800404 	addi	r2,r2,16
 4007524:	28c00044 	addi	r3,r5,1
 4007528:	45c00015 	stw	r23,0(r8)
 400752c:	41c00115 	stw	r7,4(r8)
 4007530:	d8801c15 	stw	r2,112(sp)
 4007534:	d8c01b15 	stw	r3,108(sp)
 4007538:	68fff40e 	bge	r13,r3,400750c <__ram_exceptions_end+0xfbfe72c8>
 400753c:	1002241e 	bne	r2,zero,4007dd0 <___vfiprintf_internal_r+0xe30>
 4007540:	843ffc04 	addi	r16,r16,-16
 4007544:	01800044 	movi	r6,1
 4007548:	000b883a 	mov	r5,zero
 400754c:	d811883a 	mov	r8,sp
 4007550:	3c3ff316 	blt	r7,r16,4007520 <__ram_exceptions_end+0xfbfe72dc>
 4007554:	da402517 	ldw	r9,148(sp)
 4007558:	e007883a 	mov	r3,fp
 400755c:	8039883a 	mov	fp,r16
 4007560:	1821883a 	mov	r16,r3
 4007564:	d8c02417 	ldw	r3,144(sp)
 4007568:	1705883a 	add	r2,r2,fp
 400756c:	47000115 	stw	fp,4(r8)
 4007570:	40c00015 	stw	r3,0(r8)
 4007574:	d8801c15 	stw	r2,112(sp)
 4007578:	d9801b15 	stw	r6,108(sp)
 400757c:	00c001c4 	movi	r3,7
 4007580:	19827616 	blt	r3,r6,4007f5c <___vfiprintf_internal_r+0xfbc>
 4007584:	4cf9c83a 	sub	fp,r9,r19
 4007588:	42000204 	addi	r8,r8,8
 400758c:	31000044 	addi	r4,r6,1
 4007590:	300b883a 	mov	r5,r6
 4007594:	07018516 	blt	zero,fp,4007bac <___vfiprintf_internal_r+0xc0c>
 4007598:	9885883a 	add	r2,r19,r2
 400759c:	45400015 	stw	r21,0(r8)
 40075a0:	44c00115 	stw	r19,4(r8)
 40075a4:	d8801c15 	stw	r2,112(sp)
 40075a8:	d9001b15 	stw	r4,108(sp)
 40075ac:	00c001c4 	movi	r3,7
 40075b0:	1901dd0e 	bge	r3,r4,4007d28 <___vfiprintf_internal_r+0xd88>
 40075b4:	1002401e 	bne	r2,zero,4007eb8 <___vfiprintf_internal_r+0xf18>
 40075b8:	d8001b15 	stw	zero,108(sp)
 40075bc:	a2c0010c 	andi	r11,r20,4
 40075c0:	58000226 	beq	r11,zero,40075cc <___vfiprintf_internal_r+0x62c>
 40075c4:	8ca7c83a 	sub	r19,r17,r18
 40075c8:	04c2f216 	blt	zero,r19,4008194 <___vfiprintf_internal_r+0x11f4>
 40075cc:	8c80010e 	bge	r17,r18,40075d4 <___vfiprintf_internal_r+0x634>
 40075d0:	9023883a 	mov	r17,r18
 40075d4:	da802317 	ldw	r10,140(sp)
 40075d8:	5455883a 	add	r10,r10,r17
 40075dc:	da802315 	stw	r10,140(sp)
 40075e0:	d8001b15 	stw	zero,108(sp)
 40075e4:	d811883a 	mov	r8,sp
 40075e8:	003ea206 	br	4007074 <__ram_exceptions_end+0xfbfe6e30>
 40075ec:	a5000814 	ori	r20,r20,32
 40075f0:	80c00007 	ldb	r3,0(r16)
 40075f4:	003ec906 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 40075f8:	80c00007 	ldb	r3,0(r16)
 40075fc:	1b030926 	beq	r3,r12,4008224 <___vfiprintf_internal_r+0x1284>
 4007600:	a5000414 	ori	r20,r20,16
 4007604:	003ec506 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007608:	21003fcc 	andi	r4,r4,255
 400760c:	20035e1e 	bne	r4,zero,4008388 <___vfiprintf_internal_r+0x13e8>
 4007610:	a080080c 	andi	r2,r20,32
 4007614:	1002a526 	beq	r2,zero,40080ac <___vfiprintf_internal_r+0x110c>
 4007618:	da802217 	ldw	r10,136(sp)
 400761c:	50800017 	ldw	r2,0(r10)
 4007620:	da802317 	ldw	r10,140(sp)
 4007624:	5007d7fa 	srai	r3,r10,31
 4007628:	da802217 	ldw	r10,136(sp)
 400762c:	10c00115 	stw	r3,4(r2)
 4007630:	52800104 	addi	r10,r10,4
 4007634:	da802215 	stw	r10,136(sp)
 4007638:	da802317 	ldw	r10,140(sp)
 400763c:	12800015 	stw	r10,0(r2)
 4007640:	003e8c06 	br	4007074 <__ram_exceptions_end+0xfbfe6e30>
 4007644:	21003fcc 	andi	r4,r4,255
 4007648:	2003511e 	bne	r4,zero,4008390 <___vfiprintf_internal_r+0x13f0>
 400764c:	a080080c 	andi	r2,r20,32
 4007650:	1000a126 	beq	r2,zero,40078d8 <___vfiprintf_internal_r+0x938>
 4007654:	da802217 	ldw	r10,136(sp)
 4007658:	d8001d85 	stb	zero,118(sp)
 400765c:	50800204 	addi	r2,r10,8
 4007660:	54800017 	ldw	r18,0(r10)
 4007664:	54c00117 	ldw	r19,4(r10)
 4007668:	4802b416 	blt	r9,zero,400813c <___vfiprintf_internal_r+0x119c>
 400766c:	013fdfc4 	movi	r4,-129
 4007670:	94c6b03a 	or	r3,r18,r19
 4007674:	d8802215 	stw	r2,136(sp)
 4007678:	a128703a 	and	r20,r20,r4
 400767c:	1800a226 	beq	r3,zero,4007908 <___vfiprintf_internal_r+0x968>
 4007680:	0039883a 	mov	fp,zero
 4007684:	dd401a04 	addi	r21,sp,104
 4007688:	9006d0fa 	srli	r3,r18,3
 400768c:	9808977a 	slli	r4,r19,29
 4007690:	9826d0fa 	srli	r19,r19,3
 4007694:	948001cc 	andi	r18,r18,7
 4007698:	90800c04 	addi	r2,r18,48
 400769c:	ad7fffc4 	addi	r21,r21,-1
 40076a0:	20e4b03a 	or	r18,r4,r3
 40076a4:	a8800005 	stb	r2,0(r21)
 40076a8:	94c6b03a 	or	r3,r18,r19
 40076ac:	183ff61e 	bne	r3,zero,4007688 <__ram_exceptions_end+0xfbfe7444>
 40076b0:	a0c0004c 	andi	r3,r20,1
 40076b4:	18005926 	beq	r3,zero,400781c <___vfiprintf_internal_r+0x87c>
 40076b8:	10803fcc 	andi	r2,r2,255
 40076bc:	1080201c 	xori	r2,r2,128
 40076c0:	10bfe004 	addi	r2,r2,-128
 40076c4:	00c00c04 	movi	r3,48
 40076c8:	10c05426 	beq	r2,r3,400781c <___vfiprintf_internal_r+0x87c>
 40076cc:	da801e17 	ldw	r10,120(sp)
 40076d0:	a8bfffc4 	addi	r2,r21,-1
 40076d4:	a8ffffc5 	stb	r3,-1(r21)
 40076d8:	50a7c83a 	sub	r19,r10,r2
 40076dc:	102b883a 	mov	r21,r2
 40076e0:	003f2f06 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 40076e4:	21003fcc 	andi	r4,r4,255
 40076e8:	2003421e 	bne	r4,zero,40083f4 <___vfiprintf_internal_r+0x1454>
 40076ec:	00810074 	movhi	r2,1025
 40076f0:	10bf5e04 	addi	r2,r2,-648
 40076f4:	d8802615 	stw	r2,152(sp)
 40076f8:	a080080c 	andi	r2,r20,32
 40076fc:	1000aa26 	beq	r2,zero,40079a8 <___vfiprintf_internal_r+0xa08>
 4007700:	da802217 	ldw	r10,136(sp)
 4007704:	54800017 	ldw	r18,0(r10)
 4007708:	54c00117 	ldw	r19,4(r10)
 400770c:	52800204 	addi	r10,r10,8
 4007710:	da802215 	stw	r10,136(sp)
 4007714:	a080004c 	andi	r2,r20,1
 4007718:	1001d226 	beq	r2,zero,4007e64 <___vfiprintf_internal_r+0xec4>
 400771c:	94c4b03a 	or	r2,r18,r19
 4007720:	1002351e 	bne	r2,zero,4007ff8 <___vfiprintf_internal_r+0x1058>
 4007724:	d8001d85 	stb	zero,118(sp)
 4007728:	48022216 	blt	r9,zero,4007fb4 <___vfiprintf_internal_r+0x1014>
 400772c:	00bfdfc4 	movi	r2,-129
 4007730:	a0a8703a 	and	r20,r20,r2
 4007734:	003f1506 	br	400738c <__ram_exceptions_end+0xfbfe7148>
 4007738:	da802217 	ldw	r10,136(sp)
 400773c:	04800044 	movi	r18,1
 4007740:	d8001d85 	stb	zero,118(sp)
 4007744:	50800017 	ldw	r2,0(r10)
 4007748:	52800104 	addi	r10,r10,4
 400774c:	da802215 	stw	r10,136(sp)
 4007750:	d8801005 	stb	r2,64(sp)
 4007754:	9027883a 	mov	r19,r18
 4007758:	dd401004 	addi	r21,sp,64
 400775c:	0013883a 	mov	r9,zero
 4007760:	003f1706 	br	40073c0 <__ram_exceptions_end+0xfbfe717c>
 4007764:	21003fcc 	andi	r4,r4,255
 4007768:	2003201e 	bne	r4,zero,40083ec <___vfiprintf_internal_r+0x144c>
 400776c:	a080080c 	andi	r2,r20,32
 4007770:	10004b26 	beq	r2,zero,40078a0 <___vfiprintf_internal_r+0x900>
 4007774:	da802217 	ldw	r10,136(sp)
 4007778:	50800117 	ldw	r2,4(r10)
 400777c:	54800017 	ldw	r18,0(r10)
 4007780:	52800204 	addi	r10,r10,8
 4007784:	da802215 	stw	r10,136(sp)
 4007788:	1027883a 	mov	r19,r2
 400778c:	10022c16 	blt	r2,zero,4008040 <___vfiprintf_internal_r+0x10a0>
 4007790:	df001d83 	ldbu	fp,118(sp)
 4007794:	48007216 	blt	r9,zero,4007960 <___vfiprintf_internal_r+0x9c0>
 4007798:	00ffdfc4 	movi	r3,-129
 400779c:	94c4b03a 	or	r2,r18,r19
 40077a0:	a0e8703a 	and	r20,r20,r3
 40077a4:	1000cc26 	beq	r2,zero,4007ad8 <___vfiprintf_internal_r+0xb38>
 40077a8:	98021026 	beq	r19,zero,4007fec <___vfiprintf_internal_r+0x104c>
 40077ac:	dc402415 	stw	r17,144(sp)
 40077b0:	dc002515 	stw	r16,148(sp)
 40077b4:	9823883a 	mov	r17,r19
 40077b8:	9021883a 	mov	r16,r18
 40077bc:	dd401a04 	addi	r21,sp,104
 40077c0:	4825883a 	mov	r18,r9
 40077c4:	4027883a 	mov	r19,r8
 40077c8:	8009883a 	mov	r4,r16
 40077cc:	880b883a 	mov	r5,r17
 40077d0:	01800284 	movi	r6,10
 40077d4:	000f883a 	mov	r7,zero
 40077d8:	4009efc0 	call	4009efc <__umoddi3>
 40077dc:	10800c04 	addi	r2,r2,48
 40077e0:	ad7fffc4 	addi	r21,r21,-1
 40077e4:	8009883a 	mov	r4,r16
 40077e8:	880b883a 	mov	r5,r17
 40077ec:	a8800005 	stb	r2,0(r21)
 40077f0:	01800284 	movi	r6,10
 40077f4:	000f883a 	mov	r7,zero
 40077f8:	40099840 	call	4009984 <__udivdi3>
 40077fc:	1021883a 	mov	r16,r2
 4007800:	10c4b03a 	or	r2,r2,r3
 4007804:	1823883a 	mov	r17,r3
 4007808:	103fef1e 	bne	r2,zero,40077c8 <__ram_exceptions_end+0xfbfe7584>
 400780c:	dc402417 	ldw	r17,144(sp)
 4007810:	dc002517 	ldw	r16,148(sp)
 4007814:	9013883a 	mov	r9,r18
 4007818:	9811883a 	mov	r8,r19
 400781c:	da801e17 	ldw	r10,120(sp)
 4007820:	5567c83a 	sub	r19,r10,r21
 4007824:	003ede06 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 4007828:	38803fcc 	andi	r2,r7,255
 400782c:	1080201c 	xori	r2,r2,128
 4007830:	10bfe004 	addi	r2,r2,-128
 4007834:	1002371e 	bne	r2,zero,4008114 <___vfiprintf_internal_r+0x1174>
 4007838:	01000044 	movi	r4,1
 400783c:	01c00804 	movi	r7,32
 4007840:	80c00007 	ldb	r3,0(r16)
 4007844:	003e3506 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007848:	a5000054 	ori	r20,r20,1
 400784c:	80c00007 	ldb	r3,0(r16)
 4007850:	003e3206 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007854:	a5002014 	ori	r20,r20,128
 4007858:	80c00007 	ldb	r3,0(r16)
 400785c:	003e2f06 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007860:	8015883a 	mov	r10,r16
 4007864:	0023883a 	mov	r17,zero
 4007868:	18bff404 	addi	r2,r3,-48
 400786c:	50c00007 	ldb	r3,0(r10)
 4007870:	8c4002a4 	muli	r17,r17,10
 4007874:	84000044 	addi	r16,r16,1
 4007878:	8015883a 	mov	r10,r16
 400787c:	1463883a 	add	r17,r2,r17
 4007880:	18bff404 	addi	r2,r3,-48
 4007884:	30bff92e 	bgeu	r6,r2,400786c <__ram_exceptions_end+0xfbfe7628>
 4007888:	003e2506 	br	4007120 <__ram_exceptions_end+0xfbfe6edc>
 400788c:	21003fcc 	andi	r4,r4,255
 4007890:	2002d41e 	bne	r4,zero,40083e4 <___vfiprintf_internal_r+0x1444>
 4007894:	a5000414 	ori	r20,r20,16
 4007898:	a080080c 	andi	r2,r20,32
 400789c:	103fb51e 	bne	r2,zero,4007774 <__ram_exceptions_end+0xfbfe7530>
 40078a0:	a080040c 	andi	r2,r20,16
 40078a4:	1001f826 	beq	r2,zero,4008088 <___vfiprintf_internal_r+0x10e8>
 40078a8:	da802217 	ldw	r10,136(sp)
 40078ac:	54800017 	ldw	r18,0(r10)
 40078b0:	52800104 	addi	r10,r10,4
 40078b4:	da802215 	stw	r10,136(sp)
 40078b8:	9027d7fa 	srai	r19,r18,31
 40078bc:	9805883a 	mov	r2,r19
 40078c0:	003fb206 	br	400778c <__ram_exceptions_end+0xfbfe7548>
 40078c4:	21003fcc 	andi	r4,r4,255
 40078c8:	2002c41e 	bne	r4,zero,40083dc <___vfiprintf_internal_r+0x143c>
 40078cc:	a5000414 	ori	r20,r20,16
 40078d0:	a080080c 	andi	r2,r20,32
 40078d4:	103f5f1e 	bne	r2,zero,4007654 <__ram_exceptions_end+0xfbfe7410>
 40078d8:	a080040c 	andi	r2,r20,16
 40078dc:	10020f26 	beq	r2,zero,400811c <___vfiprintf_internal_r+0x117c>
 40078e0:	da802217 	ldw	r10,136(sp)
 40078e4:	d8001d85 	stb	zero,118(sp)
 40078e8:	0027883a 	mov	r19,zero
 40078ec:	50800104 	addi	r2,r10,4
 40078f0:	54800017 	ldw	r18,0(r10)
 40078f4:	48021116 	blt	r9,zero,400813c <___vfiprintf_internal_r+0x119c>
 40078f8:	00ffdfc4 	movi	r3,-129
 40078fc:	d8802215 	stw	r2,136(sp)
 4007900:	a0e8703a 	and	r20,r20,r3
 4007904:	903f5e1e 	bne	r18,zero,4007680 <__ram_exceptions_end+0xfbfe743c>
 4007908:	0039883a 	mov	fp,zero
 400790c:	4802a626 	beq	r9,zero,40083a8 <___vfiprintf_internal_r+0x1408>
 4007910:	0025883a 	mov	r18,zero
 4007914:	0027883a 	mov	r19,zero
 4007918:	003f5a06 	br	4007684 <__ram_exceptions_end+0xfbfe7440>
 400791c:	21003fcc 	andi	r4,r4,255
 4007920:	20029f1e 	bne	r4,zero,40083a0 <___vfiprintf_internal_r+0x1400>
 4007924:	a5000414 	ori	r20,r20,16
 4007928:	a080080c 	andi	r2,r20,32
 400792c:	10005e1e 	bne	r2,zero,4007aa8 <___vfiprintf_internal_r+0xb08>
 4007930:	a080040c 	andi	r2,r20,16
 4007934:	1001a21e 	bne	r2,zero,4007fc0 <___vfiprintf_internal_r+0x1020>
 4007938:	a080100c 	andi	r2,r20,64
 400793c:	d8001d85 	stb	zero,118(sp)
 4007940:	da802217 	ldw	r10,136(sp)
 4007944:	1002231e 	bne	r2,zero,40081d4 <___vfiprintf_internal_r+0x1234>
 4007948:	50800104 	addi	r2,r10,4
 400794c:	54800017 	ldw	r18,0(r10)
 4007950:	0027883a 	mov	r19,zero
 4007954:	4801a00e 	bge	r9,zero,4007fd8 <___vfiprintf_internal_r+0x1038>
 4007958:	d8802215 	stw	r2,136(sp)
 400795c:	0039883a 	mov	fp,zero
 4007960:	94c4b03a 	or	r2,r18,r19
 4007964:	103f901e 	bne	r2,zero,40077a8 <__ram_exceptions_end+0xfbfe7564>
 4007968:	00800044 	movi	r2,1
 400796c:	10803fcc 	andi	r2,r2,255
 4007970:	00c00044 	movi	r3,1
 4007974:	10c05926 	beq	r2,r3,4007adc <___vfiprintf_internal_r+0xb3c>
 4007978:	00c00084 	movi	r3,2
 400797c:	10ffe41e 	bne	r2,r3,4007910 <__ram_exceptions_end+0xfbfe76cc>
 4007980:	0025883a 	mov	r18,zero
 4007984:	0027883a 	mov	r19,zero
 4007988:	00013d06 	br	4007e80 <___vfiprintf_internal_r+0xee0>
 400798c:	21003fcc 	andi	r4,r4,255
 4007990:	2002811e 	bne	r4,zero,4008398 <___vfiprintf_internal_r+0x13f8>
 4007994:	00810074 	movhi	r2,1025
 4007998:	10bf5904 	addi	r2,r2,-668
 400799c:	d8802615 	stw	r2,152(sp)
 40079a0:	a080080c 	andi	r2,r20,32
 40079a4:	103f561e 	bne	r2,zero,4007700 <__ram_exceptions_end+0xfbfe74bc>
 40079a8:	a080040c 	andi	r2,r20,16
 40079ac:	1001d126 	beq	r2,zero,40080f4 <___vfiprintf_internal_r+0x1154>
 40079b0:	da802217 	ldw	r10,136(sp)
 40079b4:	0027883a 	mov	r19,zero
 40079b8:	54800017 	ldw	r18,0(r10)
 40079bc:	52800104 	addi	r10,r10,4
 40079c0:	da802215 	stw	r10,136(sp)
 40079c4:	003f5306 	br	4007714 <__ram_exceptions_end+0xfbfe74d0>
 40079c8:	da802217 	ldw	r10,136(sp)
 40079cc:	d8001d85 	stb	zero,118(sp)
 40079d0:	55400017 	ldw	r21,0(r10)
 40079d4:	50c00104 	addi	r3,r10,4
 40079d8:	a8024226 	beq	r21,zero,40082e4 <___vfiprintf_internal_r+0x1344>
 40079dc:	48021816 	blt	r9,zero,4008240 <___vfiprintf_internal_r+0x12a0>
 40079e0:	480d883a 	mov	r6,r9
 40079e4:	000b883a 	mov	r5,zero
 40079e8:	a809883a 	mov	r4,r21
 40079ec:	d8c02a15 	stw	r3,168(sp)
 40079f0:	da002b15 	stw	r8,172(sp)
 40079f4:	da402c15 	stw	r9,176(sp)
 40079f8:	40057c40 	call	40057c4 <memchr>
 40079fc:	d8c02a17 	ldw	r3,168(sp)
 4007a00:	da002b17 	ldw	r8,172(sp)
 4007a04:	da402c17 	ldw	r9,176(sp)
 4007a08:	10024826 	beq	r2,zero,400832c <___vfiprintf_internal_r+0x138c>
 4007a0c:	1567c83a 	sub	r19,r2,r21
 4007a10:	df001d83 	ldbu	fp,118(sp)
 4007a14:	d8c02215 	stw	r3,136(sp)
 4007a18:	0013883a 	mov	r9,zero
 4007a1c:	003e6006 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 4007a20:	21003fcc 	andi	r4,r4,255
 4007a24:	203fc026 	beq	r4,zero,4007928 <__ram_exceptions_end+0xfbfe76e4>
 4007a28:	d9c01d85 	stb	r7,118(sp)
 4007a2c:	003fbe06 	br	4007928 <__ram_exceptions_end+0xfbfe76e4>
 4007a30:	da802217 	ldw	r10,136(sp)
 4007a34:	54400017 	ldw	r17,0(r10)
 4007a38:	50800104 	addi	r2,r10,4
 4007a3c:	883e3b16 	blt	r17,zero,400732c <__ram_exceptions_end+0xfbfe70e8>
 4007a40:	d8802215 	stw	r2,136(sp)
 4007a44:	80c00007 	ldb	r3,0(r16)
 4007a48:	003db406 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007a4c:	01000044 	movi	r4,1
 4007a50:	01c00ac4 	movi	r7,43
 4007a54:	80c00007 	ldb	r3,0(r16)
 4007a58:	003db006 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007a5c:	80c00007 	ldb	r3,0(r16)
 4007a60:	82800044 	addi	r10,r16,1
 4007a64:	1b423c26 	beq	r3,r13,4008358 <___vfiprintf_internal_r+0x13b8>
 4007a68:	18bff404 	addi	r2,r3,-48
 4007a6c:	0013883a 	mov	r9,zero
 4007a70:	30822b36 	bltu	r6,r2,4008320 <___vfiprintf_internal_r+0x1380>
 4007a74:	50c00007 	ldb	r3,0(r10)
 4007a78:	4a4002a4 	muli	r9,r9,10
 4007a7c:	54000044 	addi	r16,r10,1
 4007a80:	8015883a 	mov	r10,r16
 4007a84:	4893883a 	add	r9,r9,r2
 4007a88:	18bff404 	addi	r2,r3,-48
 4007a8c:	30bff92e 	bgeu	r6,r2,4007a74 <__ram_exceptions_end+0xfbfe7830>
 4007a90:	483da30e 	bge	r9,zero,4007120 <__ram_exceptions_end+0xfbfe6edc>
 4007a94:	027fffc4 	movi	r9,-1
 4007a98:	003da106 	br	4007120 <__ram_exceptions_end+0xfbfe6edc>
 4007a9c:	a5001014 	ori	r20,r20,64
 4007aa0:	80c00007 	ldb	r3,0(r16)
 4007aa4:	003d9d06 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4007aa8:	da802217 	ldw	r10,136(sp)
 4007aac:	d8001d85 	stb	zero,118(sp)
 4007ab0:	50c00204 	addi	r3,r10,8
 4007ab4:	54800017 	ldw	r18,0(r10)
 4007ab8:	54c00117 	ldw	r19,4(r10)
 4007abc:	4801ca16 	blt	r9,zero,40081e8 <___vfiprintf_internal_r+0x1248>
 4007ac0:	013fdfc4 	movi	r4,-129
 4007ac4:	94c4b03a 	or	r2,r18,r19
 4007ac8:	d8c02215 	stw	r3,136(sp)
 4007acc:	a128703a 	and	r20,r20,r4
 4007ad0:	0039883a 	mov	fp,zero
 4007ad4:	103f341e 	bne	r2,zero,40077a8 <__ram_exceptions_end+0xfbfe7564>
 4007ad8:	483e2e26 	beq	r9,zero,4007394 <__ram_exceptions_end+0xfbfe7150>
 4007adc:	0025883a 	mov	r18,zero
 4007ae0:	94800c04 	addi	r18,r18,48
 4007ae4:	dc8019c5 	stb	r18,103(sp)
 4007ae8:	dcc02717 	ldw	r19,156(sp)
 4007aec:	dd4019c4 	addi	r21,sp,103
 4007af0:	003e2b06 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 4007af4:	21003fcc 	andi	r4,r4,255
 4007af8:	2002361e 	bne	r4,zero,40083d4 <___vfiprintf_internal_r+0x1434>
 4007afc:	1801c126 	beq	r3,zero,4008204 <___vfiprintf_internal_r+0x1264>
 4007b00:	04800044 	movi	r18,1
 4007b04:	d8c01005 	stb	r3,64(sp)
 4007b08:	d8001d85 	stb	zero,118(sp)
 4007b0c:	9027883a 	mov	r19,r18
 4007b10:	dd401004 	addi	r21,sp,64
 4007b14:	003f1106 	br	400775c <__ram_exceptions_end+0xfbfe7518>
 4007b18:	d9402117 	ldw	r5,132(sp)
 4007b1c:	d9002017 	ldw	r4,128(sp)
 4007b20:	d9801a04 	addi	r6,sp,104
 4007b24:	d9c02b15 	stw	r7,172(sp)
 4007b28:	dbc02a15 	stw	r15,168(sp)
 4007b2c:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007b30:	d9c02b17 	ldw	r7,172(sp)
 4007b34:	dbc02a17 	ldw	r15,168(sp)
 4007b38:	10006d1e 	bne	r2,zero,4007cf0 <___vfiprintf_internal_r+0xd50>
 4007b3c:	d9801b17 	ldw	r6,108(sp)
 4007b40:	d8801c17 	ldw	r2,112(sp)
 4007b44:	d811883a 	mov	r8,sp
 4007b48:	31400044 	addi	r5,r6,1
 4007b4c:	003e3306 	br	400741c <__ram_exceptions_end+0xfbfe71d8>
 4007b50:	d9401b17 	ldw	r5,108(sp)
 4007b54:	d8801c17 	ldw	r2,112(sp)
 4007b58:	29000044 	addi	r4,r5,1
 4007b5c:	d8c01d87 	ldb	r3,118(sp)
 4007b60:	183e4d26 	beq	r3,zero,4007498 <__ram_exceptions_end+0xfbfe7254>
 4007b64:	00c00044 	movi	r3,1
 4007b68:	d9401d84 	addi	r5,sp,118
 4007b6c:	10c5883a 	add	r2,r2,r3
 4007b70:	41400015 	stw	r5,0(r8)
 4007b74:	40c00115 	stw	r3,4(r8)
 4007b78:	d8801c15 	stw	r2,112(sp)
 4007b7c:	d9001b15 	stw	r4,108(sp)
 4007b80:	014001c4 	movi	r5,7
 4007b84:	2900a90e 	bge	r5,r4,4007e2c <___vfiprintf_internal_r+0xe8c>
 4007b88:	1000da1e 	bne	r2,zero,4007ef4 <___vfiprintf_internal_r+0xf54>
 4007b8c:	7000ab1e 	bne	r14,zero,4007e3c <___vfiprintf_internal_r+0xe9c>
 4007b90:	000b883a 	mov	r5,zero
 4007b94:	1809883a 	mov	r4,r3
 4007b98:	d811883a 	mov	r8,sp
 4007b9c:	00c02004 	movi	r3,128
 4007ba0:	e0fe4d26 	beq	fp,r3,40074d8 <__ram_exceptions_end+0xfbfe7294>
 4007ba4:	4cf9c83a 	sub	fp,r9,r19
 4007ba8:	073e7b0e 	bge	zero,fp,4007598 <__ram_exceptions_end+0xfbfe7354>
 4007bac:	01c00404 	movi	r7,16
 4007bb0:	3f01900e 	bge	r7,fp,40081f4 <___vfiprintf_internal_r+0x1254>
 4007bb4:	00c10074 	movhi	r3,1025
 4007bb8:	18ffbf04 	addi	r3,r3,-260
 4007bbc:	d8c02415 	stw	r3,144(sp)
 4007bc0:	034001c4 	movi	r13,7
 4007bc4:	00000506 	br	4007bdc <___vfiprintf_internal_r+0xc3c>
 4007bc8:	29000084 	addi	r4,r5,2
 4007bcc:	42000204 	addi	r8,r8,8
 4007bd0:	180b883a 	mov	r5,r3
 4007bd4:	e73ffc04 	addi	fp,fp,-16
 4007bd8:	3f000d0e 	bge	r7,fp,4007c10 <___vfiprintf_internal_r+0xc70>
 4007bdc:	10800404 	addi	r2,r2,16
 4007be0:	28c00044 	addi	r3,r5,1
 4007be4:	45c00015 	stw	r23,0(r8)
 4007be8:	41c00115 	stw	r7,4(r8)
 4007bec:	d8801c15 	stw	r2,112(sp)
 4007bf0:	d8c01b15 	stw	r3,108(sp)
 4007bf4:	68fff40e 	bge	r13,r3,4007bc8 <__ram_exceptions_end+0xfbfe7984>
 4007bf8:	1000101e 	bne	r2,zero,4007c3c <___vfiprintf_internal_r+0xc9c>
 4007bfc:	e73ffc04 	addi	fp,fp,-16
 4007c00:	01000044 	movi	r4,1
 4007c04:	000b883a 	mov	r5,zero
 4007c08:	d811883a 	mov	r8,sp
 4007c0c:	3f3ff316 	blt	r7,fp,4007bdc <__ram_exceptions_end+0xfbfe7998>
 4007c10:	da802417 	ldw	r10,144(sp)
 4007c14:	1705883a 	add	r2,r2,fp
 4007c18:	47000115 	stw	fp,4(r8)
 4007c1c:	42800015 	stw	r10,0(r8)
 4007c20:	d8801c15 	stw	r2,112(sp)
 4007c24:	d9001b15 	stw	r4,108(sp)
 4007c28:	00c001c4 	movi	r3,7
 4007c2c:	19003616 	blt	r3,r4,4007d08 <___vfiprintf_internal_r+0xd68>
 4007c30:	42000204 	addi	r8,r8,8
 4007c34:	21000044 	addi	r4,r4,1
 4007c38:	003e5706 	br	4007598 <__ram_exceptions_end+0xfbfe7354>
 4007c3c:	d9402117 	ldw	r5,132(sp)
 4007c40:	d9002017 	ldw	r4,128(sp)
 4007c44:	d9801a04 	addi	r6,sp,104
 4007c48:	d9c02b15 	stw	r7,172(sp)
 4007c4c:	db402a15 	stw	r13,168(sp)
 4007c50:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007c54:	d9c02b17 	ldw	r7,172(sp)
 4007c58:	db402a17 	ldw	r13,168(sp)
 4007c5c:	1000241e 	bne	r2,zero,4007cf0 <___vfiprintf_internal_r+0xd50>
 4007c60:	d9401b17 	ldw	r5,108(sp)
 4007c64:	d8801c17 	ldw	r2,112(sp)
 4007c68:	d811883a 	mov	r8,sp
 4007c6c:	29000044 	addi	r4,r5,1
 4007c70:	003fd806 	br	4007bd4 <__ram_exceptions_end+0xfbfe7990>
 4007c74:	d9401b17 	ldw	r5,108(sp)
 4007c78:	00c10074 	movhi	r3,1025
 4007c7c:	18ffc304 	addi	r3,r3,-244
 4007c80:	d8c02415 	stw	r3,144(sp)
 4007c84:	29400044 	addi	r5,r5,1
 4007c88:	d8c02417 	ldw	r3,144(sp)
 4007c8c:	14c5883a 	add	r2,r2,r19
 4007c90:	44c00115 	stw	r19,4(r8)
 4007c94:	40c00015 	stw	r3,0(r8)
 4007c98:	d8801c15 	stw	r2,112(sp)
 4007c9c:	d9401b15 	stw	r5,108(sp)
 4007ca0:	00c001c4 	movi	r3,7
 4007ca4:	1940070e 	bge	r3,r5,4007cc4 <___vfiprintf_internal_r+0xd24>
 4007ca8:	103e4826 	beq	r2,zero,40075cc <__ram_exceptions_end+0xfbfe7388>
 4007cac:	d9402117 	ldw	r5,132(sp)
 4007cb0:	d9002017 	ldw	r4,128(sp)
 4007cb4:	d9801a04 	addi	r6,sp,104
 4007cb8:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007cbc:	10000c1e 	bne	r2,zero,4007cf0 <___vfiprintf_internal_r+0xd50>
 4007cc0:	d8801c17 	ldw	r2,112(sp)
 4007cc4:	8c80010e 	bge	r17,r18,4007ccc <___vfiprintf_internal_r+0xd2c>
 4007cc8:	9023883a 	mov	r17,r18
 4007ccc:	da802317 	ldw	r10,140(sp)
 4007cd0:	5455883a 	add	r10,r10,r17
 4007cd4:	da802315 	stw	r10,140(sp)
 4007cd8:	103e4126 	beq	r2,zero,40075e0 <__ram_exceptions_end+0xfbfe739c>
 4007cdc:	d9402117 	ldw	r5,132(sp)
 4007ce0:	d9002017 	ldw	r4,128(sp)
 4007ce4:	d9801a04 	addi	r6,sp,104
 4007ce8:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007cec:	103e3c26 	beq	r2,zero,40075e0 <__ram_exceptions_end+0xfbfe739c>
 4007cf0:	dd002117 	ldw	r20,132(sp)
 4007cf4:	a080030b 	ldhu	r2,12(r20)
 4007cf8:	1080100c 	andi	r2,r2,64
 4007cfc:	1001231e 	bne	r2,zero,400818c <___vfiprintf_internal_r+0x11ec>
 4007d00:	d8802317 	ldw	r2,140(sp)
 4007d04:	003d7b06 	br	40072f4 <__ram_exceptions_end+0xfbfe70b0>
 4007d08:	1000991e 	bne	r2,zero,4007f70 <___vfiprintf_internal_r+0xfd0>
 4007d0c:	00c00044 	movi	r3,1
 4007d10:	9805883a 	mov	r2,r19
 4007d14:	dd400015 	stw	r21,0(sp)
 4007d18:	dcc00115 	stw	r19,4(sp)
 4007d1c:	dcc01c15 	stw	r19,112(sp)
 4007d20:	d8c01b15 	stw	r3,108(sp)
 4007d24:	d811883a 	mov	r8,sp
 4007d28:	42000204 	addi	r8,r8,8
 4007d2c:	a2c0010c 	andi	r11,r20,4
 4007d30:	583fe426 	beq	r11,zero,4007cc4 <__ram_exceptions_end+0xfbfe7a80>
 4007d34:	8ca7c83a 	sub	r19,r17,r18
 4007d38:	04ffe20e 	bge	zero,r19,4007cc4 <__ram_exceptions_end+0xfbfe7a80>
 4007d3c:	01c00404 	movi	r7,16
 4007d40:	3cffcc0e 	bge	r7,r19,4007c74 <__ram_exceptions_end+0xfbfe7a30>
 4007d44:	02810074 	movhi	r10,1025
 4007d48:	52bfc304 	addi	r10,r10,-244
 4007d4c:	d9001b17 	ldw	r4,108(sp)
 4007d50:	da802415 	stw	r10,144(sp)
 4007d54:	382b883a 	mov	r21,r7
 4007d58:	050001c4 	movi	r20,7
 4007d5c:	df002017 	ldw	fp,128(sp)
 4007d60:	00000506 	br	4007d78 <___vfiprintf_internal_r+0xdd8>
 4007d64:	21400084 	addi	r5,r4,2
 4007d68:	42000204 	addi	r8,r8,8
 4007d6c:	1809883a 	mov	r4,r3
 4007d70:	9cfffc04 	addi	r19,r19,-16
 4007d74:	acffc40e 	bge	r21,r19,4007c88 <__ram_exceptions_end+0xfbfe7a44>
 4007d78:	10800404 	addi	r2,r2,16
 4007d7c:	20c00044 	addi	r3,r4,1
 4007d80:	45800015 	stw	r22,0(r8)
 4007d84:	45400115 	stw	r21,4(r8)
 4007d88:	d8801c15 	stw	r2,112(sp)
 4007d8c:	d8c01b15 	stw	r3,108(sp)
 4007d90:	a0fff40e 	bge	r20,r3,4007d64 <__ram_exceptions_end+0xfbfe7b20>
 4007d94:	1000041e 	bne	r2,zero,4007da8 <___vfiprintf_internal_r+0xe08>
 4007d98:	01400044 	movi	r5,1
 4007d9c:	0009883a 	mov	r4,zero
 4007da0:	d811883a 	mov	r8,sp
 4007da4:	003ff206 	br	4007d70 <__ram_exceptions_end+0xfbfe7b2c>
 4007da8:	d9402117 	ldw	r5,132(sp)
 4007dac:	d9801a04 	addi	r6,sp,104
 4007db0:	e009883a 	mov	r4,fp
 4007db4:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007db8:	103fcd1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007dbc:	d9001b17 	ldw	r4,108(sp)
 4007dc0:	d8801c17 	ldw	r2,112(sp)
 4007dc4:	d811883a 	mov	r8,sp
 4007dc8:	21400044 	addi	r5,r4,1
 4007dcc:	003fe806 	br	4007d70 <__ram_exceptions_end+0xfbfe7b2c>
 4007dd0:	d9402117 	ldw	r5,132(sp)
 4007dd4:	d9002017 	ldw	r4,128(sp)
 4007dd8:	d9801a04 	addi	r6,sp,104
 4007ddc:	d9c02b15 	stw	r7,172(sp)
 4007de0:	db402a15 	stw	r13,168(sp)
 4007de4:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007de8:	d9c02b17 	ldw	r7,172(sp)
 4007dec:	db402a17 	ldw	r13,168(sp)
 4007df0:	103fbf1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007df4:	d9401b17 	ldw	r5,108(sp)
 4007df8:	d8801c17 	ldw	r2,112(sp)
 4007dfc:	d811883a 	mov	r8,sp
 4007e00:	29800044 	addi	r6,r5,1
 4007e04:	003dc406 	br	4007518 <__ram_exceptions_end+0xfbfe72d4>
 4007e08:	1000d21e 	bne	r2,zero,4008154 <___vfiprintf_internal_r+0x11b4>
 4007e0c:	d8c01d87 	ldb	r3,118(sp)
 4007e10:	18009526 	beq	r3,zero,4008068 <___vfiprintf_internal_r+0x10c8>
 4007e14:	00800044 	movi	r2,1
 4007e18:	d8c01d84 	addi	r3,sp,118
 4007e1c:	1009883a 	mov	r4,r2
 4007e20:	d8c00015 	stw	r3,0(sp)
 4007e24:	d8800115 	stw	r2,4(sp)
 4007e28:	d811883a 	mov	r8,sp
 4007e2c:	200b883a 	mov	r5,r4
 4007e30:	42000204 	addi	r8,r8,8
 4007e34:	21000044 	addi	r4,r4,1
 4007e38:	003d9706 	br	4007498 <__ram_exceptions_end+0xfbfe7254>
 4007e3c:	d9001d04 	addi	r4,sp,116
 4007e40:	00800084 	movi	r2,2
 4007e44:	d9000015 	stw	r4,0(sp)
 4007e48:	d8800115 	stw	r2,4(sp)
 4007e4c:	1809883a 	mov	r4,r3
 4007e50:	d811883a 	mov	r8,sp
 4007e54:	200b883a 	mov	r5,r4
 4007e58:	42000204 	addi	r8,r8,8
 4007e5c:	21000044 	addi	r4,r4,1
 4007e60:	003f4e06 	br	4007b9c <__ram_exceptions_end+0xfbfe7958>
 4007e64:	d8001d85 	stb	zero,118(sp)
 4007e68:	48005016 	blt	r9,zero,4007fac <___vfiprintf_internal_r+0x100c>
 4007e6c:	00ffdfc4 	movi	r3,-129
 4007e70:	94c4b03a 	or	r2,r18,r19
 4007e74:	a0e8703a 	and	r20,r20,r3
 4007e78:	103d4426 	beq	r2,zero,400738c <__ram_exceptions_end+0xfbfe7148>
 4007e7c:	0039883a 	mov	fp,zero
 4007e80:	d9002617 	ldw	r4,152(sp)
 4007e84:	dd401a04 	addi	r21,sp,104
 4007e88:	908003cc 	andi	r2,r18,15
 4007e8c:	9806973a 	slli	r3,r19,28
 4007e90:	2085883a 	add	r2,r4,r2
 4007e94:	9024d13a 	srli	r18,r18,4
 4007e98:	10800003 	ldbu	r2,0(r2)
 4007e9c:	9826d13a 	srli	r19,r19,4
 4007ea0:	ad7fffc4 	addi	r21,r21,-1
 4007ea4:	1ca4b03a 	or	r18,r3,r18
 4007ea8:	a8800005 	stb	r2,0(r21)
 4007eac:	94c4b03a 	or	r2,r18,r19
 4007eb0:	103ff51e 	bne	r2,zero,4007e88 <__ram_exceptions_end+0xfbfe7c44>
 4007eb4:	003e5906 	br	400781c <__ram_exceptions_end+0xfbfe75d8>
 4007eb8:	d9402117 	ldw	r5,132(sp)
 4007ebc:	d9002017 	ldw	r4,128(sp)
 4007ec0:	d9801a04 	addi	r6,sp,104
 4007ec4:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007ec8:	103f891e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007ecc:	d8801c17 	ldw	r2,112(sp)
 4007ed0:	d811883a 	mov	r8,sp
 4007ed4:	003f9506 	br	4007d2c <__ram_exceptions_end+0xfbfe7ae8>
 4007ed8:	d9402117 	ldw	r5,132(sp)
 4007edc:	d9002017 	ldw	r4,128(sp)
 4007ee0:	d9801a04 	addi	r6,sp,104
 4007ee4:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007ee8:	103f811e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007eec:	d811883a 	mov	r8,sp
 4007ef0:	003ced06 	br	40072a8 <__ram_exceptions_end+0xfbfe7064>
 4007ef4:	d9402117 	ldw	r5,132(sp)
 4007ef8:	d9002017 	ldw	r4,128(sp)
 4007efc:	d9801a04 	addi	r6,sp,104
 4007f00:	da402c15 	stw	r9,176(sp)
 4007f04:	db802a15 	stw	r14,168(sp)
 4007f08:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007f0c:	da402c17 	ldw	r9,176(sp)
 4007f10:	db802a17 	ldw	r14,168(sp)
 4007f14:	103f761e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007f18:	d9401b17 	ldw	r5,108(sp)
 4007f1c:	d8801c17 	ldw	r2,112(sp)
 4007f20:	d811883a 	mov	r8,sp
 4007f24:	29000044 	addi	r4,r5,1
 4007f28:	003d5b06 	br	4007498 <__ram_exceptions_end+0xfbfe7254>
 4007f2c:	d9402117 	ldw	r5,132(sp)
 4007f30:	d9002017 	ldw	r4,128(sp)
 4007f34:	d9801a04 	addi	r6,sp,104
 4007f38:	da402c15 	stw	r9,176(sp)
 4007f3c:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007f40:	da402c17 	ldw	r9,176(sp)
 4007f44:	103f6a1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007f48:	d9401b17 	ldw	r5,108(sp)
 4007f4c:	d8801c17 	ldw	r2,112(sp)
 4007f50:	d811883a 	mov	r8,sp
 4007f54:	29000044 	addi	r4,r5,1
 4007f58:	003f1006 	br	4007b9c <__ram_exceptions_end+0xfbfe7958>
 4007f5c:	1000c31e 	bne	r2,zero,400826c <___vfiprintf_internal_r+0x12cc>
 4007f60:	01000044 	movi	r4,1
 4007f64:	000b883a 	mov	r5,zero
 4007f68:	d811883a 	mov	r8,sp
 4007f6c:	003f0d06 	br	4007ba4 <__ram_exceptions_end+0xfbfe7960>
 4007f70:	d9402117 	ldw	r5,132(sp)
 4007f74:	d9002017 	ldw	r4,128(sp)
 4007f78:	d9801a04 	addi	r6,sp,104
 4007f7c:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4007f80:	103f5b1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4007f84:	d9001b17 	ldw	r4,108(sp)
 4007f88:	d8801c17 	ldw	r2,112(sp)
 4007f8c:	d811883a 	mov	r8,sp
 4007f90:	21000044 	addi	r4,r4,1
 4007f94:	003d8006 	br	4007598 <__ram_exceptions_end+0xfbfe7354>
 4007f98:	01010074 	movhi	r4,1025
 4007f9c:	213f5e04 	addi	r4,r4,-648
 4007fa0:	d9002615 	stw	r4,152(sp)
 4007fa4:	d8c02215 	stw	r3,136(sp)
 4007fa8:	1029883a 	mov	r20,r2
 4007fac:	94c4b03a 	or	r2,r18,r19
 4007fb0:	103fb21e 	bne	r2,zero,4007e7c <__ram_exceptions_end+0xfbfe7c38>
 4007fb4:	0039883a 	mov	fp,zero
 4007fb8:	00800084 	movi	r2,2
 4007fbc:	003e6b06 	br	400796c <__ram_exceptions_end+0xfbfe7728>
 4007fc0:	da802217 	ldw	r10,136(sp)
 4007fc4:	d8001d85 	stb	zero,118(sp)
 4007fc8:	0027883a 	mov	r19,zero
 4007fcc:	50800104 	addi	r2,r10,4
 4007fd0:	54800017 	ldw	r18,0(r10)
 4007fd4:	483e6016 	blt	r9,zero,4007958 <__ram_exceptions_end+0xfbfe7714>
 4007fd8:	00ffdfc4 	movi	r3,-129
 4007fdc:	d8802215 	stw	r2,136(sp)
 4007fe0:	a0e8703a 	and	r20,r20,r3
 4007fe4:	0039883a 	mov	fp,zero
 4007fe8:	903ebb26 	beq	r18,zero,4007ad8 <__ram_exceptions_end+0xfbfe7894>
 4007fec:	00800244 	movi	r2,9
 4007ff0:	14bdee36 	bltu	r2,r18,40077ac <__ram_exceptions_end+0xfbfe7568>
 4007ff4:	003eba06 	br	4007ae0 <__ram_exceptions_end+0xfbfe789c>
 4007ff8:	00800c04 	movi	r2,48
 4007ffc:	d8c01d45 	stb	r3,117(sp)
 4008000:	d8801d05 	stb	r2,116(sp)
 4008004:	d8001d85 	stb	zero,118(sp)
 4008008:	a0c00094 	ori	r3,r20,2
 400800c:	4800a916 	blt	r9,zero,40082b4 <___vfiprintf_internal_r+0x1314>
 4008010:	00bfdfc4 	movi	r2,-129
 4008014:	a096703a 	and	r11,r20,r2
 4008018:	5d000094 	ori	r20,r11,2
 400801c:	0039883a 	mov	fp,zero
 4008020:	003f9706 	br	4007e80 <__ram_exceptions_end+0xfbfe7c3c>
 4008024:	8025883a 	mov	r18,r16
 4008028:	003c2e06 	br	40070e4 <__ram_exceptions_end+0xfbfe6ea0>
 400802c:	00810074 	movhi	r2,1025
 4008030:	10bf5e04 	addi	r2,r2,-648
 4008034:	0039883a 	mov	fp,zero
 4008038:	d8802615 	stw	r2,152(sp)
 400803c:	003f9006 	br	4007e80 <__ram_exceptions_end+0xfbfe7c3c>
 4008040:	04a5c83a 	sub	r18,zero,r18
 4008044:	07000b44 	movi	fp,45
 4008048:	9004c03a 	cmpne	r2,r18,zero
 400804c:	04e7c83a 	sub	r19,zero,r19
 4008050:	df001d85 	stb	fp,118(sp)
 4008054:	98a7c83a 	sub	r19,r19,r2
 4008058:	48009f16 	blt	r9,zero,40082d8 <___vfiprintf_internal_r+0x1338>
 400805c:	00bfdfc4 	movi	r2,-129
 4008060:	a0a8703a 	and	r20,r20,r2
 4008064:	003dd006 	br	40077a8 <__ram_exceptions_end+0xfbfe7564>
 4008068:	70004c26 	beq	r14,zero,400819c <___vfiprintf_internal_r+0x11fc>
 400806c:	00800084 	movi	r2,2
 4008070:	d8c01d04 	addi	r3,sp,116
 4008074:	d8c00015 	stw	r3,0(sp)
 4008078:	d8800115 	stw	r2,4(sp)
 400807c:	01000044 	movi	r4,1
 4008080:	d811883a 	mov	r8,sp
 4008084:	003f7306 	br	4007e54 <__ram_exceptions_end+0xfbfe7c10>
 4008088:	a080100c 	andi	r2,r20,64
 400808c:	da802217 	ldw	r10,136(sp)
 4008090:	103e0626 	beq	r2,zero,40078ac <__ram_exceptions_end+0xfbfe7668>
 4008094:	5480000f 	ldh	r18,0(r10)
 4008098:	52800104 	addi	r10,r10,4
 400809c:	da802215 	stw	r10,136(sp)
 40080a0:	9027d7fa 	srai	r19,r18,31
 40080a4:	9805883a 	mov	r2,r19
 40080a8:	003db806 	br	400778c <__ram_exceptions_end+0xfbfe7548>
 40080ac:	a080040c 	andi	r2,r20,16
 40080b0:	1000091e 	bne	r2,zero,40080d8 <___vfiprintf_internal_r+0x1138>
 40080b4:	a2c0100c 	andi	r11,r20,64
 40080b8:	58000726 	beq	r11,zero,40080d8 <___vfiprintf_internal_r+0x1138>
 40080bc:	da802217 	ldw	r10,136(sp)
 40080c0:	50800017 	ldw	r2,0(r10)
 40080c4:	52800104 	addi	r10,r10,4
 40080c8:	da802215 	stw	r10,136(sp)
 40080cc:	da802317 	ldw	r10,140(sp)
 40080d0:	1280000d 	sth	r10,0(r2)
 40080d4:	003be706 	br	4007074 <__ram_exceptions_end+0xfbfe6e30>
 40080d8:	da802217 	ldw	r10,136(sp)
 40080dc:	50800017 	ldw	r2,0(r10)
 40080e0:	52800104 	addi	r10,r10,4
 40080e4:	da802215 	stw	r10,136(sp)
 40080e8:	da802317 	ldw	r10,140(sp)
 40080ec:	12800015 	stw	r10,0(r2)
 40080f0:	003be006 	br	4007074 <__ram_exceptions_end+0xfbfe6e30>
 40080f4:	a080100c 	andi	r2,r20,64
 40080f8:	da802217 	ldw	r10,136(sp)
 40080fc:	10003026 	beq	r2,zero,40081c0 <___vfiprintf_internal_r+0x1220>
 4008100:	5480000b 	ldhu	r18,0(r10)
 4008104:	52800104 	addi	r10,r10,4
 4008108:	0027883a 	mov	r19,zero
 400810c:	da802215 	stw	r10,136(sp)
 4008110:	003d8006 	br	4007714 <__ram_exceptions_end+0xfbfe74d0>
 4008114:	80c00007 	ldb	r3,0(r16)
 4008118:	003c0006 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 400811c:	a080100c 	andi	r2,r20,64
 4008120:	d8001d85 	stb	zero,118(sp)
 4008124:	da802217 	ldw	r10,136(sp)
 4008128:	1000201e 	bne	r2,zero,40081ac <___vfiprintf_internal_r+0x120c>
 400812c:	50800104 	addi	r2,r10,4
 4008130:	54800017 	ldw	r18,0(r10)
 4008134:	0027883a 	mov	r19,zero
 4008138:	483def0e 	bge	r9,zero,40078f8 <__ram_exceptions_end+0xfbfe76b4>
 400813c:	94c6b03a 	or	r3,r18,r19
 4008140:	d8802215 	stw	r2,136(sp)
 4008144:	183d4e1e 	bne	r3,zero,4007680 <__ram_exceptions_end+0xfbfe743c>
 4008148:	0039883a 	mov	fp,zero
 400814c:	0005883a 	mov	r2,zero
 4008150:	003e0606 	br	400796c <__ram_exceptions_end+0xfbfe7728>
 4008154:	d9402117 	ldw	r5,132(sp)
 4008158:	d9002017 	ldw	r4,128(sp)
 400815c:	d9801a04 	addi	r6,sp,104
 4008160:	da402c15 	stw	r9,176(sp)
 4008164:	db802a15 	stw	r14,168(sp)
 4008168:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 400816c:	da402c17 	ldw	r9,176(sp)
 4008170:	db802a17 	ldw	r14,168(sp)
 4008174:	103ede1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4008178:	d9401b17 	ldw	r5,108(sp)
 400817c:	d8801c17 	ldw	r2,112(sp)
 4008180:	d811883a 	mov	r8,sp
 4008184:	29000044 	addi	r4,r5,1
 4008188:	003e7406 	br	4007b5c <__ram_exceptions_end+0xfbfe7918>
 400818c:	00bfffc4 	movi	r2,-1
 4008190:	003c5806 	br	40072f4 <__ram_exceptions_end+0xfbfe70b0>
 4008194:	d811883a 	mov	r8,sp
 4008198:	003ee806 	br	4007d3c <__ram_exceptions_end+0xfbfe7af8>
 400819c:	000b883a 	mov	r5,zero
 40081a0:	01000044 	movi	r4,1
 40081a4:	d811883a 	mov	r8,sp
 40081a8:	003e7c06 	br	4007b9c <__ram_exceptions_end+0xfbfe7958>
 40081ac:	50800104 	addi	r2,r10,4
 40081b0:	5480000b 	ldhu	r18,0(r10)
 40081b4:	0027883a 	mov	r19,zero
 40081b8:	483dcf0e 	bge	r9,zero,40078f8 <__ram_exceptions_end+0xfbfe76b4>
 40081bc:	003fdf06 	br	400813c <__ram_exceptions_end+0xfbfe7ef8>
 40081c0:	54800017 	ldw	r18,0(r10)
 40081c4:	52800104 	addi	r10,r10,4
 40081c8:	0027883a 	mov	r19,zero
 40081cc:	da802215 	stw	r10,136(sp)
 40081d0:	003d5006 	br	4007714 <__ram_exceptions_end+0xfbfe74d0>
 40081d4:	50800104 	addi	r2,r10,4
 40081d8:	5480000b 	ldhu	r18,0(r10)
 40081dc:	0027883a 	mov	r19,zero
 40081e0:	483f7d0e 	bge	r9,zero,4007fd8 <__ram_exceptions_end+0xfbfe7d94>
 40081e4:	003ddc06 	br	4007958 <__ram_exceptions_end+0xfbfe7714>
 40081e8:	d8c02215 	stw	r3,136(sp)
 40081ec:	0039883a 	mov	fp,zero
 40081f0:	003ddb06 	br	4007960 <__ram_exceptions_end+0xfbfe771c>
 40081f4:	02810074 	movhi	r10,1025
 40081f8:	52bfbf04 	addi	r10,r10,-260
 40081fc:	da802415 	stw	r10,144(sp)
 4008200:	003e8306 	br	4007c10 <__ram_exceptions_end+0xfbfe79cc>
 4008204:	d8801c17 	ldw	r2,112(sp)
 4008208:	dd002117 	ldw	r20,132(sp)
 400820c:	103eb926 	beq	r2,zero,4007cf4 <__ram_exceptions_end+0xfbfe7ab0>
 4008210:	d9002017 	ldw	r4,128(sp)
 4008214:	d9801a04 	addi	r6,sp,104
 4008218:	a00b883a 	mov	r5,r20
 400821c:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4008220:	003eb406 	br	4007cf4 <__ram_exceptions_end+0xfbfe7ab0>
 4008224:	80c00043 	ldbu	r3,1(r16)
 4008228:	a5000814 	ori	r20,r20,32
 400822c:	84000044 	addi	r16,r16,1
 4008230:	18c03fcc 	andi	r3,r3,255
 4008234:	18c0201c 	xori	r3,r3,128
 4008238:	18ffe004 	addi	r3,r3,-128
 400823c:	003bb706 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4008240:	a809883a 	mov	r4,r21
 4008244:	d8c02a15 	stw	r3,168(sp)
 4008248:	da002b15 	stw	r8,172(sp)
 400824c:	4006df40 	call	4006df4 <strlen>
 4008250:	d8c02a17 	ldw	r3,168(sp)
 4008254:	1027883a 	mov	r19,r2
 4008258:	df001d83 	ldbu	fp,118(sp)
 400825c:	d8c02215 	stw	r3,136(sp)
 4008260:	0013883a 	mov	r9,zero
 4008264:	da002b17 	ldw	r8,172(sp)
 4008268:	003c4d06 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 400826c:	d9402117 	ldw	r5,132(sp)
 4008270:	d9002017 	ldw	r4,128(sp)
 4008274:	d9801a04 	addi	r6,sp,104
 4008278:	da402c15 	stw	r9,176(sp)
 400827c:	4006e8c0 	call	4006e8c <__sprint_r.part.0>
 4008280:	da402c17 	ldw	r9,176(sp)
 4008284:	103e9a1e 	bne	r2,zero,4007cf0 <__ram_exceptions_end+0xfbfe7aac>
 4008288:	d9401b17 	ldw	r5,108(sp)
 400828c:	d8801c17 	ldw	r2,112(sp)
 4008290:	d811883a 	mov	r8,sp
 4008294:	29000044 	addi	r4,r5,1
 4008298:	003e4206 	br	4007ba4 <__ram_exceptions_end+0xfbfe7960>
 400829c:	d9401b17 	ldw	r5,108(sp)
 40082a0:	01010074 	movhi	r4,1025
 40082a4:	213fc304 	addi	r4,r4,-244
 40082a8:	d9002415 	stw	r4,144(sp)
 40082ac:	29400044 	addi	r5,r5,1
 40082b0:	003c6d06 	br	4007468 <__ram_exceptions_end+0xfbfe7224>
 40082b4:	0039883a 	mov	fp,zero
 40082b8:	00800084 	movi	r2,2
 40082bc:	10803fcc 	andi	r2,r2,255
 40082c0:	01000044 	movi	r4,1
 40082c4:	11001e26 	beq	r2,r4,4008340 <___vfiprintf_internal_r+0x13a0>
 40082c8:	01000084 	movi	r4,2
 40082cc:	11001e1e 	bne	r2,r4,4008348 <___vfiprintf_internal_r+0x13a8>
 40082d0:	1829883a 	mov	r20,r3
 40082d4:	003eea06 	br	4007e80 <__ram_exceptions_end+0xfbfe7c3c>
 40082d8:	a007883a 	mov	r3,r20
 40082dc:	00800044 	movi	r2,1
 40082e0:	003ff606 	br	40082bc <__ram_exceptions_end+0xfbfe8078>
 40082e4:	00800184 	movi	r2,6
 40082e8:	1240012e 	bgeu	r2,r9,40082f0 <___vfiprintf_internal_r+0x1350>
 40082ec:	1013883a 	mov	r9,r2
 40082f0:	4827883a 	mov	r19,r9
 40082f4:	4825883a 	mov	r18,r9
 40082f8:	48001516 	blt	r9,zero,4008350 <___vfiprintf_internal_r+0x13b0>
 40082fc:	05410074 	movhi	r21,1025
 4008300:	d8c02215 	stw	r3,136(sp)
 4008304:	ad7f6304 	addi	r21,r21,-628
 4008308:	003d1406 	br	400775c <__ram_exceptions_end+0xfbfe7518>
 400830c:	02810074 	movhi	r10,1025
 4008310:	52bfbf04 	addi	r10,r10,-260
 4008314:	da802415 	stw	r10,144(sp)
 4008318:	200d883a 	mov	r6,r4
 400831c:	003c9106 	br	4007564 <__ram_exceptions_end+0xfbfe7320>
 4008320:	5021883a 	mov	r16,r10
 4008324:	0013883a 	mov	r9,zero
 4008328:	003b7d06 	br	4007120 <__ram_exceptions_end+0xfbfe6edc>
 400832c:	4827883a 	mov	r19,r9
 4008330:	df001d83 	ldbu	fp,118(sp)
 4008334:	d8c02215 	stw	r3,136(sp)
 4008338:	0013883a 	mov	r9,zero
 400833c:	003c1806 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 4008340:	1829883a 	mov	r20,r3
 4008344:	003d1806 	br	40077a8 <__ram_exceptions_end+0xfbfe7564>
 4008348:	1829883a 	mov	r20,r3
 400834c:	003ccd06 	br	4007684 <__ram_exceptions_end+0xfbfe7440>
 4008350:	0025883a 	mov	r18,zero
 4008354:	003fe906 	br	40082fc <__ram_exceptions_end+0xfbfe80b8>
 4008358:	d8802217 	ldw	r2,136(sp)
 400835c:	80c00043 	ldbu	r3,1(r16)
 4008360:	5021883a 	mov	r16,r10
 4008364:	12400017 	ldw	r9,0(r2)
 4008368:	10800104 	addi	r2,r2,4
 400836c:	d8802215 	stw	r2,136(sp)
 4008370:	483faf0e 	bge	r9,zero,4008230 <__ram_exceptions_end+0xfbfe7fec>
 4008374:	18c03fcc 	andi	r3,r3,255
 4008378:	18c0201c 	xori	r3,r3,128
 400837c:	027fffc4 	movi	r9,-1
 4008380:	18ffe004 	addi	r3,r3,-128
 4008384:	003b6506 	br	400711c <__ram_exceptions_end+0xfbfe6ed8>
 4008388:	d9c01d85 	stb	r7,118(sp)
 400838c:	003ca006 	br	4007610 <__ram_exceptions_end+0xfbfe73cc>
 4008390:	d9c01d85 	stb	r7,118(sp)
 4008394:	003cad06 	br	400764c <__ram_exceptions_end+0xfbfe7408>
 4008398:	d9c01d85 	stb	r7,118(sp)
 400839c:	003d7d06 	br	4007994 <__ram_exceptions_end+0xfbfe7750>
 40083a0:	d9c01d85 	stb	r7,118(sp)
 40083a4:	003d5f06 	br	4007924 <__ram_exceptions_end+0xfbfe76e0>
 40083a8:	a080004c 	andi	r2,r20,1
 40083ac:	0039883a 	mov	fp,zero
 40083b0:	10000526 	beq	r2,zero,40083c8 <___vfiprintf_internal_r+0x1428>
 40083b4:	00800c04 	movi	r2,48
 40083b8:	d88019c5 	stb	r2,103(sp)
 40083bc:	dcc02717 	ldw	r19,156(sp)
 40083c0:	dd4019c4 	addi	r21,sp,103
 40083c4:	003bf606 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 40083c8:	0027883a 	mov	r19,zero
 40083cc:	dd401a04 	addi	r21,sp,104
 40083d0:	003bf306 	br	40073a0 <__ram_exceptions_end+0xfbfe715c>
 40083d4:	d9c01d85 	stb	r7,118(sp)
 40083d8:	003dc806 	br	4007afc <__ram_exceptions_end+0xfbfe78b8>
 40083dc:	d9c01d85 	stb	r7,118(sp)
 40083e0:	003d3a06 	br	40078cc <__ram_exceptions_end+0xfbfe7688>
 40083e4:	d9c01d85 	stb	r7,118(sp)
 40083e8:	003d2a06 	br	4007894 <__ram_exceptions_end+0xfbfe7650>
 40083ec:	d9c01d85 	stb	r7,118(sp)
 40083f0:	003cde06 	br	400776c <__ram_exceptions_end+0xfbfe7528>
 40083f4:	d9c01d85 	stb	r7,118(sp)
 40083f8:	003cbc06 	br	40076ec <__ram_exceptions_end+0xfbfe74a8>

040083fc <__vfiprintf_internal>:
 40083fc:	00810074 	movhi	r2,1025
 4008400:	10830004 	addi	r2,r2,3072
 4008404:	300f883a 	mov	r7,r6
 4008408:	280d883a 	mov	r6,r5
 400840c:	200b883a 	mov	r5,r4
 4008410:	11000017 	ldw	r4,0(r2)
 4008414:	4006fa01 	jmpi	4006fa0 <___vfiprintf_internal_r>

04008418 <__sbprintf>:
 4008418:	2880030b 	ldhu	r2,12(r5)
 400841c:	2ac01917 	ldw	r11,100(r5)
 4008420:	2a80038b 	ldhu	r10,14(r5)
 4008424:	2a400717 	ldw	r9,28(r5)
 4008428:	2a000917 	ldw	r8,36(r5)
 400842c:	defee204 	addi	sp,sp,-1144
 4008430:	00c10004 	movi	r3,1024
 4008434:	dc011a15 	stw	r16,1128(sp)
 4008438:	10bfff4c 	andi	r2,r2,65533
 400843c:	2821883a 	mov	r16,r5
 4008440:	d8cb883a 	add	r5,sp,r3
 4008444:	dc811c15 	stw	r18,1136(sp)
 4008448:	dc411b15 	stw	r17,1132(sp)
 400844c:	dfc11d15 	stw	ra,1140(sp)
 4008450:	2025883a 	mov	r18,r4
 4008454:	d881030d 	sth	r2,1036(sp)
 4008458:	dac11915 	stw	r11,1124(sp)
 400845c:	da81038d 	sth	r10,1038(sp)
 4008460:	da410715 	stw	r9,1052(sp)
 4008464:	da010915 	stw	r8,1060(sp)
 4008468:	dec10015 	stw	sp,1024(sp)
 400846c:	dec10415 	stw	sp,1040(sp)
 4008470:	d8c10215 	stw	r3,1032(sp)
 4008474:	d8c10515 	stw	r3,1044(sp)
 4008478:	d8010615 	stw	zero,1048(sp)
 400847c:	4006fa00 	call	4006fa0 <___vfiprintf_internal_r>
 4008480:	1023883a 	mov	r17,r2
 4008484:	10000416 	blt	r2,zero,4008498 <__sbprintf+0x80>
 4008488:	d9410004 	addi	r5,sp,1024
 400848c:	9009883a 	mov	r4,r18
 4008490:	40043380 	call	4004338 <_fflush_r>
 4008494:	10000d1e 	bne	r2,zero,40084cc <__sbprintf+0xb4>
 4008498:	d881030b 	ldhu	r2,1036(sp)
 400849c:	1080100c 	andi	r2,r2,64
 40084a0:	10000326 	beq	r2,zero,40084b0 <__sbprintf+0x98>
 40084a4:	8080030b 	ldhu	r2,12(r16)
 40084a8:	10801014 	ori	r2,r2,64
 40084ac:	8080030d 	sth	r2,12(r16)
 40084b0:	8805883a 	mov	r2,r17
 40084b4:	dfc11d17 	ldw	ra,1140(sp)
 40084b8:	dc811c17 	ldw	r18,1136(sp)
 40084bc:	dc411b17 	ldw	r17,1132(sp)
 40084c0:	dc011a17 	ldw	r16,1128(sp)
 40084c4:	dec11e04 	addi	sp,sp,1144
 40084c8:	f800283a 	ret
 40084cc:	047fffc4 	movi	r17,-1
 40084d0:	003ff106 	br	4008498 <__ram_exceptions_end+0xfbfe8254>

040084d4 <_write_r>:
 40084d4:	defffd04 	addi	sp,sp,-12
 40084d8:	2805883a 	mov	r2,r5
 40084dc:	dc000015 	stw	r16,0(sp)
 40084e0:	04010074 	movhi	r16,1025
 40084e4:	dc400115 	stw	r17,4(sp)
 40084e8:	300b883a 	mov	r5,r6
 40084ec:	84060a04 	addi	r16,r16,6184
 40084f0:	2023883a 	mov	r17,r4
 40084f4:	380d883a 	mov	r6,r7
 40084f8:	1009883a 	mov	r4,r2
 40084fc:	dfc00215 	stw	ra,8(sp)
 4008500:	80000015 	stw	zero,0(r16)
 4008504:	400d5140 	call	400d514 <write>
 4008508:	00ffffc4 	movi	r3,-1
 400850c:	10c00526 	beq	r2,r3,4008524 <_write_r+0x50>
 4008510:	dfc00217 	ldw	ra,8(sp)
 4008514:	dc400117 	ldw	r17,4(sp)
 4008518:	dc000017 	ldw	r16,0(sp)
 400851c:	dec00304 	addi	sp,sp,12
 4008520:	f800283a 	ret
 4008524:	80c00017 	ldw	r3,0(r16)
 4008528:	183ff926 	beq	r3,zero,4008510 <__ram_exceptions_end+0xfbfe82cc>
 400852c:	88c00015 	stw	r3,0(r17)
 4008530:	003ff706 	br	4008510 <__ram_exceptions_end+0xfbfe82cc>

04008534 <_close_r>:
 4008534:	defffd04 	addi	sp,sp,-12
 4008538:	dc000015 	stw	r16,0(sp)
 400853c:	04010074 	movhi	r16,1025
 4008540:	dc400115 	stw	r17,4(sp)
 4008544:	84060a04 	addi	r16,r16,6184
 4008548:	2023883a 	mov	r17,r4
 400854c:	2809883a 	mov	r4,r5
 4008550:	dfc00215 	stw	ra,8(sp)
 4008554:	80000015 	stw	zero,0(r16)
 4008558:	400cca00 	call	400cca0 <close>
 400855c:	00ffffc4 	movi	r3,-1
 4008560:	10c00526 	beq	r2,r3,4008578 <_close_r+0x44>
 4008564:	dfc00217 	ldw	ra,8(sp)
 4008568:	dc400117 	ldw	r17,4(sp)
 400856c:	dc000017 	ldw	r16,0(sp)
 4008570:	dec00304 	addi	sp,sp,12
 4008574:	f800283a 	ret
 4008578:	80c00017 	ldw	r3,0(r16)
 400857c:	183ff926 	beq	r3,zero,4008564 <__ram_exceptions_end+0xfbfe8320>
 4008580:	88c00015 	stw	r3,0(r17)
 4008584:	003ff706 	br	4008564 <__ram_exceptions_end+0xfbfe8320>

04008588 <_calloc_r>:
 4008588:	298b383a 	mul	r5,r5,r6
 400858c:	defffe04 	addi	sp,sp,-8
 4008590:	dfc00115 	stw	ra,4(sp)
 4008594:	dc000015 	stw	r16,0(sp)
 4008598:	4004fb80 	call	4004fb8 <_malloc_r>
 400859c:	10002926 	beq	r2,zero,4008644 <_calloc_r+0xbc>
 40085a0:	11bfff17 	ldw	r6,-4(r2)
 40085a4:	1021883a 	mov	r16,r2
 40085a8:	00bfff04 	movi	r2,-4
 40085ac:	308c703a 	and	r6,r6,r2
 40085b0:	00c00904 	movi	r3,36
 40085b4:	308d883a 	add	r6,r6,r2
 40085b8:	19801636 	bltu	r3,r6,4008614 <_calloc_r+0x8c>
 40085bc:	008004c4 	movi	r2,19
 40085c0:	11800b2e 	bgeu	r2,r6,40085f0 <_calloc_r+0x68>
 40085c4:	80000015 	stw	zero,0(r16)
 40085c8:	80000115 	stw	zero,4(r16)
 40085cc:	008006c4 	movi	r2,27
 40085d0:	11801a2e 	bgeu	r2,r6,400863c <_calloc_r+0xb4>
 40085d4:	80000215 	stw	zero,8(r16)
 40085d8:	80000315 	stw	zero,12(r16)
 40085dc:	30c0151e 	bne	r6,r3,4008634 <_calloc_r+0xac>
 40085e0:	80000415 	stw	zero,16(r16)
 40085e4:	80800604 	addi	r2,r16,24
 40085e8:	80000515 	stw	zero,20(r16)
 40085ec:	00000106 	br	40085f4 <_calloc_r+0x6c>
 40085f0:	8005883a 	mov	r2,r16
 40085f4:	10000015 	stw	zero,0(r2)
 40085f8:	10000115 	stw	zero,4(r2)
 40085fc:	10000215 	stw	zero,8(r2)
 4008600:	8005883a 	mov	r2,r16
 4008604:	dfc00117 	ldw	ra,4(sp)
 4008608:	dc000017 	ldw	r16,0(sp)
 400860c:	dec00204 	addi	sp,sp,8
 4008610:	f800283a 	ret
 4008614:	000b883a 	mov	r5,zero
 4008618:	8009883a 	mov	r4,r16
 400861c:	40059f00 	call	40059f0 <memset>
 4008620:	8005883a 	mov	r2,r16
 4008624:	dfc00117 	ldw	ra,4(sp)
 4008628:	dc000017 	ldw	r16,0(sp)
 400862c:	dec00204 	addi	sp,sp,8
 4008630:	f800283a 	ret
 4008634:	80800404 	addi	r2,r16,16
 4008638:	003fee06 	br	40085f4 <__ram_exceptions_end+0xfbfe83b0>
 400863c:	80800204 	addi	r2,r16,8
 4008640:	003fec06 	br	40085f4 <__ram_exceptions_end+0xfbfe83b0>
 4008644:	0005883a 	mov	r2,zero
 4008648:	003fee06 	br	4008604 <__ram_exceptions_end+0xfbfe83c0>

0400864c <_fclose_r>:
 400864c:	28003926 	beq	r5,zero,4008734 <_fclose_r+0xe8>
 4008650:	defffc04 	addi	sp,sp,-16
 4008654:	dc400115 	stw	r17,4(sp)
 4008658:	dc000015 	stw	r16,0(sp)
 400865c:	dfc00315 	stw	ra,12(sp)
 4008660:	dc800215 	stw	r18,8(sp)
 4008664:	2023883a 	mov	r17,r4
 4008668:	2821883a 	mov	r16,r5
 400866c:	20000226 	beq	r4,zero,4008678 <_fclose_r+0x2c>
 4008670:	20800e17 	ldw	r2,56(r4)
 4008674:	10002726 	beq	r2,zero,4008714 <_fclose_r+0xc8>
 4008678:	8080030f 	ldh	r2,12(r16)
 400867c:	1000071e 	bne	r2,zero,400869c <_fclose_r+0x50>
 4008680:	0005883a 	mov	r2,zero
 4008684:	dfc00317 	ldw	ra,12(sp)
 4008688:	dc800217 	ldw	r18,8(sp)
 400868c:	dc400117 	ldw	r17,4(sp)
 4008690:	dc000017 	ldw	r16,0(sp)
 4008694:	dec00404 	addi	sp,sp,16
 4008698:	f800283a 	ret
 400869c:	800b883a 	mov	r5,r16
 40086a0:	8809883a 	mov	r4,r17
 40086a4:	400411c0 	call	400411c <__sflush_r>
 40086a8:	1025883a 	mov	r18,r2
 40086ac:	80800b17 	ldw	r2,44(r16)
 40086b0:	10000426 	beq	r2,zero,40086c4 <_fclose_r+0x78>
 40086b4:	81400717 	ldw	r5,28(r16)
 40086b8:	8809883a 	mov	r4,r17
 40086bc:	103ee83a 	callr	r2
 40086c0:	10001616 	blt	r2,zero,400871c <_fclose_r+0xd0>
 40086c4:	8080030b 	ldhu	r2,12(r16)
 40086c8:	1080200c 	andi	r2,r2,128
 40086cc:	1000151e 	bne	r2,zero,4008724 <_fclose_r+0xd8>
 40086d0:	81400c17 	ldw	r5,48(r16)
 40086d4:	28000526 	beq	r5,zero,40086ec <_fclose_r+0xa0>
 40086d8:	80801004 	addi	r2,r16,64
 40086dc:	28800226 	beq	r5,r2,40086e8 <_fclose_r+0x9c>
 40086e0:	8809883a 	mov	r4,r17
 40086e4:	40048880 	call	4004888 <_free_r>
 40086e8:	80000c15 	stw	zero,48(r16)
 40086ec:	81401117 	ldw	r5,68(r16)
 40086f0:	28000326 	beq	r5,zero,4008700 <_fclose_r+0xb4>
 40086f4:	8809883a 	mov	r4,r17
 40086f8:	40048880 	call	4004888 <_free_r>
 40086fc:	80001115 	stw	zero,68(r16)
 4008700:	40047240 	call	4004724 <__sfp_lock_acquire>
 4008704:	8000030d 	sth	zero,12(r16)
 4008708:	40047280 	call	4004728 <__sfp_lock_release>
 400870c:	9005883a 	mov	r2,r18
 4008710:	003fdc06 	br	4008684 <__ram_exceptions_end+0xfbfe8440>
 4008714:	40047140 	call	4004714 <__sinit>
 4008718:	003fd706 	br	4008678 <__ram_exceptions_end+0xfbfe8434>
 400871c:	04bfffc4 	movi	r18,-1
 4008720:	003fe806 	br	40086c4 <__ram_exceptions_end+0xfbfe8480>
 4008724:	81400417 	ldw	r5,16(r16)
 4008728:	8809883a 	mov	r4,r17
 400872c:	40048880 	call	4004888 <_free_r>
 4008730:	003fe706 	br	40086d0 <__ram_exceptions_end+0xfbfe848c>
 4008734:	0005883a 	mov	r2,zero
 4008738:	f800283a 	ret

0400873c <fclose>:
 400873c:	00810074 	movhi	r2,1025
 4008740:	10830004 	addi	r2,r2,3072
 4008744:	200b883a 	mov	r5,r4
 4008748:	11000017 	ldw	r4,0(r2)
 400874c:	400864c1 	jmpi	400864c <_fclose_r>

04008750 <__fputwc>:
 4008750:	defff804 	addi	sp,sp,-32
 4008754:	dcc00415 	stw	r19,16(sp)
 4008758:	dc800315 	stw	r18,12(sp)
 400875c:	dc000115 	stw	r16,4(sp)
 4008760:	dfc00715 	stw	ra,28(sp)
 4008764:	dd400615 	stw	r21,24(sp)
 4008768:	dd000515 	stw	r20,20(sp)
 400876c:	dc400215 	stw	r17,8(sp)
 4008770:	2027883a 	mov	r19,r4
 4008774:	2825883a 	mov	r18,r5
 4008778:	3021883a 	mov	r16,r6
 400877c:	4004da80 	call	4004da8 <__locale_mb_cur_max>
 4008780:	00c00044 	movi	r3,1
 4008784:	10c03e26 	beq	r2,r3,4008880 <__fputwc+0x130>
 4008788:	81c01704 	addi	r7,r16,92
 400878c:	900d883a 	mov	r6,r18
 4008790:	d80b883a 	mov	r5,sp
 4008794:	9809883a 	mov	r4,r19
 4008798:	400979c0 	call	400979c <_wcrtomb_r>
 400879c:	1029883a 	mov	r20,r2
 40087a0:	00bfffc4 	movi	r2,-1
 40087a4:	a0802026 	beq	r20,r2,4008828 <__fputwc+0xd8>
 40087a8:	d9400003 	ldbu	r5,0(sp)
 40087ac:	a0001c26 	beq	r20,zero,4008820 <__fputwc+0xd0>
 40087b0:	0023883a 	mov	r17,zero
 40087b4:	05400284 	movi	r21,10
 40087b8:	00000906 	br	40087e0 <__fputwc+0x90>
 40087bc:	80800017 	ldw	r2,0(r16)
 40087c0:	11400005 	stb	r5,0(r2)
 40087c4:	80c00017 	ldw	r3,0(r16)
 40087c8:	18c00044 	addi	r3,r3,1
 40087cc:	80c00015 	stw	r3,0(r16)
 40087d0:	8c400044 	addi	r17,r17,1
 40087d4:	dc45883a 	add	r2,sp,r17
 40087d8:	8d00112e 	bgeu	r17,r20,4008820 <__fputwc+0xd0>
 40087dc:	11400003 	ldbu	r5,0(r2)
 40087e0:	80c00217 	ldw	r3,8(r16)
 40087e4:	18ffffc4 	addi	r3,r3,-1
 40087e8:	80c00215 	stw	r3,8(r16)
 40087ec:	183ff30e 	bge	r3,zero,40087bc <__ram_exceptions_end+0xfbfe8578>
 40087f0:	80800617 	ldw	r2,24(r16)
 40087f4:	18801916 	blt	r3,r2,400885c <__fputwc+0x10c>
 40087f8:	80800017 	ldw	r2,0(r16)
 40087fc:	11400005 	stb	r5,0(r2)
 4008800:	80800017 	ldw	r2,0(r16)
 4008804:	10c00003 	ldbu	r3,0(r2)
 4008808:	10800044 	addi	r2,r2,1
 400880c:	1d402326 	beq	r3,r21,400889c <__fputwc+0x14c>
 4008810:	80800015 	stw	r2,0(r16)
 4008814:	8c400044 	addi	r17,r17,1
 4008818:	dc45883a 	add	r2,sp,r17
 400881c:	8d3fef36 	bltu	r17,r20,40087dc <__ram_exceptions_end+0xfbfe8598>
 4008820:	9005883a 	mov	r2,r18
 4008824:	00000406 	br	4008838 <__fputwc+0xe8>
 4008828:	80c0030b 	ldhu	r3,12(r16)
 400882c:	a005883a 	mov	r2,r20
 4008830:	18c01014 	ori	r3,r3,64
 4008834:	80c0030d 	sth	r3,12(r16)
 4008838:	dfc00717 	ldw	ra,28(sp)
 400883c:	dd400617 	ldw	r21,24(sp)
 4008840:	dd000517 	ldw	r20,20(sp)
 4008844:	dcc00417 	ldw	r19,16(sp)
 4008848:	dc800317 	ldw	r18,12(sp)
 400884c:	dc400217 	ldw	r17,8(sp)
 4008850:	dc000117 	ldw	r16,4(sp)
 4008854:	dec00804 	addi	sp,sp,32
 4008858:	f800283a 	ret
 400885c:	800d883a 	mov	r6,r16
 4008860:	29403fcc 	andi	r5,r5,255
 4008864:	9809883a 	mov	r4,r19
 4008868:	40096440 	call	4009644 <__swbuf_r>
 400886c:	10bfffe0 	cmpeqi	r2,r2,-1
 4008870:	10803fcc 	andi	r2,r2,255
 4008874:	103fd626 	beq	r2,zero,40087d0 <__ram_exceptions_end+0xfbfe858c>
 4008878:	00bfffc4 	movi	r2,-1
 400887c:	003fee06 	br	4008838 <__ram_exceptions_end+0xfbfe85f4>
 4008880:	90ffffc4 	addi	r3,r18,-1
 4008884:	01003f84 	movi	r4,254
 4008888:	20ffbf36 	bltu	r4,r3,4008788 <__ram_exceptions_end+0xfbfe8544>
 400888c:	900b883a 	mov	r5,r18
 4008890:	dc800005 	stb	r18,0(sp)
 4008894:	1029883a 	mov	r20,r2
 4008898:	003fc506 	br	40087b0 <__ram_exceptions_end+0xfbfe856c>
 400889c:	800d883a 	mov	r6,r16
 40088a0:	a80b883a 	mov	r5,r21
 40088a4:	9809883a 	mov	r4,r19
 40088a8:	40096440 	call	4009644 <__swbuf_r>
 40088ac:	10bfffe0 	cmpeqi	r2,r2,-1
 40088b0:	003fef06 	br	4008870 <__ram_exceptions_end+0xfbfe862c>

040088b4 <_fputwc_r>:
 40088b4:	3080030b 	ldhu	r2,12(r6)
 40088b8:	10c8000c 	andi	r3,r2,8192
 40088bc:	1800051e 	bne	r3,zero,40088d4 <_fputwc_r+0x20>
 40088c0:	30c01917 	ldw	r3,100(r6)
 40088c4:	10880014 	ori	r2,r2,8192
 40088c8:	3080030d 	sth	r2,12(r6)
 40088cc:	18880014 	ori	r2,r3,8192
 40088d0:	30801915 	stw	r2,100(r6)
 40088d4:	40087501 	jmpi	4008750 <__fputwc>

040088d8 <fputwc>:
 40088d8:	00810074 	movhi	r2,1025
 40088dc:	defffc04 	addi	sp,sp,-16
 40088e0:	10830004 	addi	r2,r2,3072
 40088e4:	dc000115 	stw	r16,4(sp)
 40088e8:	14000017 	ldw	r16,0(r2)
 40088ec:	dc400215 	stw	r17,8(sp)
 40088f0:	dfc00315 	stw	ra,12(sp)
 40088f4:	2023883a 	mov	r17,r4
 40088f8:	80000226 	beq	r16,zero,4008904 <fputwc+0x2c>
 40088fc:	80800e17 	ldw	r2,56(r16)
 4008900:	10001026 	beq	r2,zero,4008944 <fputwc+0x6c>
 4008904:	2880030b 	ldhu	r2,12(r5)
 4008908:	10c8000c 	andi	r3,r2,8192
 400890c:	1800051e 	bne	r3,zero,4008924 <fputwc+0x4c>
 4008910:	28c01917 	ldw	r3,100(r5)
 4008914:	10880014 	ori	r2,r2,8192
 4008918:	2880030d 	sth	r2,12(r5)
 400891c:	18880014 	ori	r2,r3,8192
 4008920:	28801915 	stw	r2,100(r5)
 4008924:	280d883a 	mov	r6,r5
 4008928:	8009883a 	mov	r4,r16
 400892c:	880b883a 	mov	r5,r17
 4008930:	dfc00317 	ldw	ra,12(sp)
 4008934:	dc400217 	ldw	r17,8(sp)
 4008938:	dc000117 	ldw	r16,4(sp)
 400893c:	dec00404 	addi	sp,sp,16
 4008940:	40087501 	jmpi	4008750 <__fputwc>
 4008944:	8009883a 	mov	r4,r16
 4008948:	d9400015 	stw	r5,0(sp)
 400894c:	40047140 	call	4004714 <__sinit>
 4008950:	d9400017 	ldw	r5,0(sp)
 4008954:	003feb06 	br	4008904 <__ram_exceptions_end+0xfbfe86c0>

04008958 <_fstat_r>:
 4008958:	defffd04 	addi	sp,sp,-12
 400895c:	2805883a 	mov	r2,r5
 4008960:	dc000015 	stw	r16,0(sp)
 4008964:	04010074 	movhi	r16,1025
 4008968:	dc400115 	stw	r17,4(sp)
 400896c:	84060a04 	addi	r16,r16,6184
 4008970:	2023883a 	mov	r17,r4
 4008974:	300b883a 	mov	r5,r6
 4008978:	1009883a 	mov	r4,r2
 400897c:	dfc00215 	stw	ra,8(sp)
 4008980:	80000015 	stw	zero,0(r16)
 4008984:	400cdec0 	call	400cdec <fstat>
 4008988:	00ffffc4 	movi	r3,-1
 400898c:	10c00526 	beq	r2,r3,40089a4 <_fstat_r+0x4c>
 4008990:	dfc00217 	ldw	ra,8(sp)
 4008994:	dc400117 	ldw	r17,4(sp)
 4008998:	dc000017 	ldw	r16,0(sp)
 400899c:	dec00304 	addi	sp,sp,12
 40089a0:	f800283a 	ret
 40089a4:	80c00017 	ldw	r3,0(r16)
 40089a8:	183ff926 	beq	r3,zero,4008990 <__ram_exceptions_end+0xfbfe874c>
 40089ac:	88c00015 	stw	r3,0(r17)
 40089b0:	003ff706 	br	4008990 <__ram_exceptions_end+0xfbfe874c>

040089b4 <__sfvwrite_r>:
 40089b4:	30800217 	ldw	r2,8(r6)
 40089b8:	10006726 	beq	r2,zero,4008b58 <__sfvwrite_r+0x1a4>
 40089bc:	28c0030b 	ldhu	r3,12(r5)
 40089c0:	defff404 	addi	sp,sp,-48
 40089c4:	dd400715 	stw	r21,28(sp)
 40089c8:	dd000615 	stw	r20,24(sp)
 40089cc:	dc000215 	stw	r16,8(sp)
 40089d0:	dfc00b15 	stw	ra,44(sp)
 40089d4:	df000a15 	stw	fp,40(sp)
 40089d8:	ddc00915 	stw	r23,36(sp)
 40089dc:	dd800815 	stw	r22,32(sp)
 40089e0:	dcc00515 	stw	r19,20(sp)
 40089e4:	dc800415 	stw	r18,16(sp)
 40089e8:	dc400315 	stw	r17,12(sp)
 40089ec:	1880020c 	andi	r2,r3,8
 40089f0:	2821883a 	mov	r16,r5
 40089f4:	202b883a 	mov	r21,r4
 40089f8:	3029883a 	mov	r20,r6
 40089fc:	10002726 	beq	r2,zero,4008a9c <__sfvwrite_r+0xe8>
 4008a00:	28800417 	ldw	r2,16(r5)
 4008a04:	10002526 	beq	r2,zero,4008a9c <__sfvwrite_r+0xe8>
 4008a08:	1880008c 	andi	r2,r3,2
 4008a0c:	a4400017 	ldw	r17,0(r20)
 4008a10:	10002a26 	beq	r2,zero,4008abc <__sfvwrite_r+0x108>
 4008a14:	05a00034 	movhi	r22,32768
 4008a18:	0027883a 	mov	r19,zero
 4008a1c:	0025883a 	mov	r18,zero
 4008a20:	b5bf0004 	addi	r22,r22,-1024
 4008a24:	980d883a 	mov	r6,r19
 4008a28:	a809883a 	mov	r4,r21
 4008a2c:	90004626 	beq	r18,zero,4008b48 <__sfvwrite_r+0x194>
 4008a30:	900f883a 	mov	r7,r18
 4008a34:	b480022e 	bgeu	r22,r18,4008a40 <__sfvwrite_r+0x8c>
 4008a38:	01e00034 	movhi	r7,32768
 4008a3c:	39ff0004 	addi	r7,r7,-1024
 4008a40:	80800917 	ldw	r2,36(r16)
 4008a44:	81400717 	ldw	r5,28(r16)
 4008a48:	103ee83a 	callr	r2
 4008a4c:	0080570e 	bge	zero,r2,4008bac <__sfvwrite_r+0x1f8>
 4008a50:	a0c00217 	ldw	r3,8(r20)
 4008a54:	98a7883a 	add	r19,r19,r2
 4008a58:	90a5c83a 	sub	r18,r18,r2
 4008a5c:	1885c83a 	sub	r2,r3,r2
 4008a60:	a0800215 	stw	r2,8(r20)
 4008a64:	103fef1e 	bne	r2,zero,4008a24 <__ram_exceptions_end+0xfbfe87e0>
 4008a68:	0005883a 	mov	r2,zero
 4008a6c:	dfc00b17 	ldw	ra,44(sp)
 4008a70:	df000a17 	ldw	fp,40(sp)
 4008a74:	ddc00917 	ldw	r23,36(sp)
 4008a78:	dd800817 	ldw	r22,32(sp)
 4008a7c:	dd400717 	ldw	r21,28(sp)
 4008a80:	dd000617 	ldw	r20,24(sp)
 4008a84:	dcc00517 	ldw	r19,20(sp)
 4008a88:	dc800417 	ldw	r18,16(sp)
 4008a8c:	dc400317 	ldw	r17,12(sp)
 4008a90:	dc000217 	ldw	r16,8(sp)
 4008a94:	dec00c04 	addi	sp,sp,48
 4008a98:	f800283a 	ret
 4008a9c:	800b883a 	mov	r5,r16
 4008aa0:	a809883a 	mov	r4,r21
 4008aa4:	40027400 	call	4002740 <__swsetup_r>
 4008aa8:	1000eb1e 	bne	r2,zero,4008e58 <__sfvwrite_r+0x4a4>
 4008aac:	80c0030b 	ldhu	r3,12(r16)
 4008ab0:	a4400017 	ldw	r17,0(r20)
 4008ab4:	1880008c 	andi	r2,r3,2
 4008ab8:	103fd61e 	bne	r2,zero,4008a14 <__ram_exceptions_end+0xfbfe87d0>
 4008abc:	1880004c 	andi	r2,r3,1
 4008ac0:	10003f1e 	bne	r2,zero,4008bc0 <__sfvwrite_r+0x20c>
 4008ac4:	0039883a 	mov	fp,zero
 4008ac8:	0025883a 	mov	r18,zero
 4008acc:	90001a26 	beq	r18,zero,4008b38 <__sfvwrite_r+0x184>
 4008ad0:	1880800c 	andi	r2,r3,512
 4008ad4:	84c00217 	ldw	r19,8(r16)
 4008ad8:	10002126 	beq	r2,zero,4008b60 <__sfvwrite_r+0x1ac>
 4008adc:	982f883a 	mov	r23,r19
 4008ae0:	94c09336 	bltu	r18,r19,4008d30 <__sfvwrite_r+0x37c>
 4008ae4:	1881200c 	andi	r2,r3,1152
 4008ae8:	10009e1e 	bne	r2,zero,4008d64 <__sfvwrite_r+0x3b0>
 4008aec:	81000017 	ldw	r4,0(r16)
 4008af0:	b80d883a 	mov	r6,r23
 4008af4:	e00b883a 	mov	r5,fp
 4008af8:	4008f240 	call	4008f24 <memmove>
 4008afc:	80c00217 	ldw	r3,8(r16)
 4008b00:	81000017 	ldw	r4,0(r16)
 4008b04:	9005883a 	mov	r2,r18
 4008b08:	1ce7c83a 	sub	r19,r3,r19
 4008b0c:	25cf883a 	add	r7,r4,r23
 4008b10:	84c00215 	stw	r19,8(r16)
 4008b14:	81c00015 	stw	r7,0(r16)
 4008b18:	a0c00217 	ldw	r3,8(r20)
 4008b1c:	e0b9883a 	add	fp,fp,r2
 4008b20:	90a5c83a 	sub	r18,r18,r2
 4008b24:	18a7c83a 	sub	r19,r3,r2
 4008b28:	a4c00215 	stw	r19,8(r20)
 4008b2c:	983fce26 	beq	r19,zero,4008a68 <__ram_exceptions_end+0xfbfe8824>
 4008b30:	80c0030b 	ldhu	r3,12(r16)
 4008b34:	903fe61e 	bne	r18,zero,4008ad0 <__ram_exceptions_end+0xfbfe888c>
 4008b38:	8f000017 	ldw	fp,0(r17)
 4008b3c:	8c800117 	ldw	r18,4(r17)
 4008b40:	8c400204 	addi	r17,r17,8
 4008b44:	003fe106 	br	4008acc <__ram_exceptions_end+0xfbfe8888>
 4008b48:	8cc00017 	ldw	r19,0(r17)
 4008b4c:	8c800117 	ldw	r18,4(r17)
 4008b50:	8c400204 	addi	r17,r17,8
 4008b54:	003fb306 	br	4008a24 <__ram_exceptions_end+0xfbfe87e0>
 4008b58:	0005883a 	mov	r2,zero
 4008b5c:	f800283a 	ret
 4008b60:	81000017 	ldw	r4,0(r16)
 4008b64:	80800417 	ldw	r2,16(r16)
 4008b68:	11005736 	bltu	r2,r4,4008cc8 <__sfvwrite_r+0x314>
 4008b6c:	85c00517 	ldw	r23,20(r16)
 4008b70:	95c05536 	bltu	r18,r23,4008cc8 <__sfvwrite_r+0x314>
 4008b74:	00a00034 	movhi	r2,32768
 4008b78:	10bfffc4 	addi	r2,r2,-1
 4008b7c:	9009883a 	mov	r4,r18
 4008b80:	1480012e 	bgeu	r2,r18,4008b88 <__sfvwrite_r+0x1d4>
 4008b84:	1009883a 	mov	r4,r2
 4008b88:	b80b883a 	mov	r5,r23
 4008b8c:	400a4340 	call	400a434 <__divsi3>
 4008b90:	15cf383a 	mul	r7,r2,r23
 4008b94:	81400717 	ldw	r5,28(r16)
 4008b98:	80800917 	ldw	r2,36(r16)
 4008b9c:	e00d883a 	mov	r6,fp
 4008ba0:	a809883a 	mov	r4,r21
 4008ba4:	103ee83a 	callr	r2
 4008ba8:	00bfdb16 	blt	zero,r2,4008b18 <__ram_exceptions_end+0xfbfe88d4>
 4008bac:	8080030b 	ldhu	r2,12(r16)
 4008bb0:	10801014 	ori	r2,r2,64
 4008bb4:	8080030d 	sth	r2,12(r16)
 4008bb8:	00bfffc4 	movi	r2,-1
 4008bbc:	003fab06 	br	4008a6c <__ram_exceptions_end+0xfbfe8828>
 4008bc0:	0027883a 	mov	r19,zero
 4008bc4:	0011883a 	mov	r8,zero
 4008bc8:	0039883a 	mov	fp,zero
 4008bcc:	0025883a 	mov	r18,zero
 4008bd0:	90001f26 	beq	r18,zero,4008c50 <__sfvwrite_r+0x29c>
 4008bd4:	40005a26 	beq	r8,zero,4008d40 <__sfvwrite_r+0x38c>
 4008bd8:	982d883a 	mov	r22,r19
 4008bdc:	94c0012e 	bgeu	r18,r19,4008be4 <__sfvwrite_r+0x230>
 4008be0:	902d883a 	mov	r22,r18
 4008be4:	81000017 	ldw	r4,0(r16)
 4008be8:	80800417 	ldw	r2,16(r16)
 4008bec:	b02f883a 	mov	r23,r22
 4008bf0:	81c00517 	ldw	r7,20(r16)
 4008bf4:	1100032e 	bgeu	r2,r4,4008c04 <__sfvwrite_r+0x250>
 4008bf8:	80c00217 	ldw	r3,8(r16)
 4008bfc:	38c7883a 	add	r3,r7,r3
 4008c00:	1d801816 	blt	r3,r22,4008c64 <__sfvwrite_r+0x2b0>
 4008c04:	b1c03e16 	blt	r22,r7,4008d00 <__sfvwrite_r+0x34c>
 4008c08:	80800917 	ldw	r2,36(r16)
 4008c0c:	81400717 	ldw	r5,28(r16)
 4008c10:	e00d883a 	mov	r6,fp
 4008c14:	da000115 	stw	r8,4(sp)
 4008c18:	a809883a 	mov	r4,r21
 4008c1c:	103ee83a 	callr	r2
 4008c20:	102f883a 	mov	r23,r2
 4008c24:	da000117 	ldw	r8,4(sp)
 4008c28:	00bfe00e 	bge	zero,r2,4008bac <__ram_exceptions_end+0xfbfe8968>
 4008c2c:	9de7c83a 	sub	r19,r19,r23
 4008c30:	98001f26 	beq	r19,zero,4008cb0 <__sfvwrite_r+0x2fc>
 4008c34:	a0800217 	ldw	r2,8(r20)
 4008c38:	e5f9883a 	add	fp,fp,r23
 4008c3c:	95e5c83a 	sub	r18,r18,r23
 4008c40:	15efc83a 	sub	r23,r2,r23
 4008c44:	a5c00215 	stw	r23,8(r20)
 4008c48:	b83f8726 	beq	r23,zero,4008a68 <__ram_exceptions_end+0xfbfe8824>
 4008c4c:	903fe11e 	bne	r18,zero,4008bd4 <__ram_exceptions_end+0xfbfe8990>
 4008c50:	8f000017 	ldw	fp,0(r17)
 4008c54:	8c800117 	ldw	r18,4(r17)
 4008c58:	0011883a 	mov	r8,zero
 4008c5c:	8c400204 	addi	r17,r17,8
 4008c60:	003fdb06 	br	4008bd0 <__ram_exceptions_end+0xfbfe898c>
 4008c64:	180d883a 	mov	r6,r3
 4008c68:	e00b883a 	mov	r5,fp
 4008c6c:	da000115 	stw	r8,4(sp)
 4008c70:	d8c00015 	stw	r3,0(sp)
 4008c74:	4008f240 	call	4008f24 <memmove>
 4008c78:	d8c00017 	ldw	r3,0(sp)
 4008c7c:	80800017 	ldw	r2,0(r16)
 4008c80:	800b883a 	mov	r5,r16
 4008c84:	a809883a 	mov	r4,r21
 4008c88:	10c5883a 	add	r2,r2,r3
 4008c8c:	80800015 	stw	r2,0(r16)
 4008c90:	d8c00015 	stw	r3,0(sp)
 4008c94:	40043380 	call	4004338 <_fflush_r>
 4008c98:	d8c00017 	ldw	r3,0(sp)
 4008c9c:	da000117 	ldw	r8,4(sp)
 4008ca0:	103fc21e 	bne	r2,zero,4008bac <__ram_exceptions_end+0xfbfe8968>
 4008ca4:	182f883a 	mov	r23,r3
 4008ca8:	9de7c83a 	sub	r19,r19,r23
 4008cac:	983fe11e 	bne	r19,zero,4008c34 <__ram_exceptions_end+0xfbfe89f0>
 4008cb0:	800b883a 	mov	r5,r16
 4008cb4:	a809883a 	mov	r4,r21
 4008cb8:	40043380 	call	4004338 <_fflush_r>
 4008cbc:	103fbb1e 	bne	r2,zero,4008bac <__ram_exceptions_end+0xfbfe8968>
 4008cc0:	0011883a 	mov	r8,zero
 4008cc4:	003fdb06 	br	4008c34 <__ram_exceptions_end+0xfbfe89f0>
 4008cc8:	94c0012e 	bgeu	r18,r19,4008cd0 <__sfvwrite_r+0x31c>
 4008ccc:	9027883a 	mov	r19,r18
 4008cd0:	980d883a 	mov	r6,r19
 4008cd4:	e00b883a 	mov	r5,fp
 4008cd8:	4008f240 	call	4008f24 <memmove>
 4008cdc:	80800217 	ldw	r2,8(r16)
 4008ce0:	80c00017 	ldw	r3,0(r16)
 4008ce4:	14c5c83a 	sub	r2,r2,r19
 4008ce8:	1cc7883a 	add	r3,r3,r19
 4008cec:	80800215 	stw	r2,8(r16)
 4008cf0:	80c00015 	stw	r3,0(r16)
 4008cf4:	10004326 	beq	r2,zero,4008e04 <__sfvwrite_r+0x450>
 4008cf8:	9805883a 	mov	r2,r19
 4008cfc:	003f8606 	br	4008b18 <__ram_exceptions_end+0xfbfe88d4>
 4008d00:	b00d883a 	mov	r6,r22
 4008d04:	e00b883a 	mov	r5,fp
 4008d08:	da000115 	stw	r8,4(sp)
 4008d0c:	4008f240 	call	4008f24 <memmove>
 4008d10:	80800217 	ldw	r2,8(r16)
 4008d14:	80c00017 	ldw	r3,0(r16)
 4008d18:	da000117 	ldw	r8,4(sp)
 4008d1c:	1585c83a 	sub	r2,r2,r22
 4008d20:	1dad883a 	add	r22,r3,r22
 4008d24:	80800215 	stw	r2,8(r16)
 4008d28:	85800015 	stw	r22,0(r16)
 4008d2c:	003fbf06 	br	4008c2c <__ram_exceptions_end+0xfbfe89e8>
 4008d30:	81000017 	ldw	r4,0(r16)
 4008d34:	9027883a 	mov	r19,r18
 4008d38:	902f883a 	mov	r23,r18
 4008d3c:	003f6c06 	br	4008af0 <__ram_exceptions_end+0xfbfe88ac>
 4008d40:	900d883a 	mov	r6,r18
 4008d44:	01400284 	movi	r5,10
 4008d48:	e009883a 	mov	r4,fp
 4008d4c:	40057c40 	call	40057c4 <memchr>
 4008d50:	10003e26 	beq	r2,zero,4008e4c <__sfvwrite_r+0x498>
 4008d54:	10800044 	addi	r2,r2,1
 4008d58:	1727c83a 	sub	r19,r2,fp
 4008d5c:	02000044 	movi	r8,1
 4008d60:	003f9d06 	br	4008bd8 <__ram_exceptions_end+0xfbfe8994>
 4008d64:	80800517 	ldw	r2,20(r16)
 4008d68:	81400417 	ldw	r5,16(r16)
 4008d6c:	81c00017 	ldw	r7,0(r16)
 4008d70:	10a7883a 	add	r19,r2,r2
 4008d74:	9885883a 	add	r2,r19,r2
 4008d78:	1026d7fa 	srli	r19,r2,31
 4008d7c:	396dc83a 	sub	r22,r7,r5
 4008d80:	b1000044 	addi	r4,r22,1
 4008d84:	9885883a 	add	r2,r19,r2
 4008d88:	1027d07a 	srai	r19,r2,1
 4008d8c:	2485883a 	add	r2,r4,r18
 4008d90:	980d883a 	mov	r6,r19
 4008d94:	9880022e 	bgeu	r19,r2,4008da0 <__sfvwrite_r+0x3ec>
 4008d98:	1027883a 	mov	r19,r2
 4008d9c:	100d883a 	mov	r6,r2
 4008da0:	18c1000c 	andi	r3,r3,1024
 4008da4:	18001c26 	beq	r3,zero,4008e18 <__sfvwrite_r+0x464>
 4008da8:	300b883a 	mov	r5,r6
 4008dac:	a809883a 	mov	r4,r21
 4008db0:	4004fb80 	call	4004fb8 <_malloc_r>
 4008db4:	102f883a 	mov	r23,r2
 4008db8:	10002926 	beq	r2,zero,4008e60 <__sfvwrite_r+0x4ac>
 4008dbc:	81400417 	ldw	r5,16(r16)
 4008dc0:	b00d883a 	mov	r6,r22
 4008dc4:	1009883a 	mov	r4,r2
 4008dc8:	40058a80 	call	40058a8 <memcpy>
 4008dcc:	8080030b 	ldhu	r2,12(r16)
 4008dd0:	00fedfc4 	movi	r3,-1153
 4008dd4:	10c4703a 	and	r2,r2,r3
 4008dd8:	10802014 	ori	r2,r2,128
 4008ddc:	8080030d 	sth	r2,12(r16)
 4008de0:	bd89883a 	add	r4,r23,r22
 4008de4:	9d8fc83a 	sub	r7,r19,r22
 4008de8:	85c00415 	stw	r23,16(r16)
 4008dec:	84c00515 	stw	r19,20(r16)
 4008df0:	81000015 	stw	r4,0(r16)
 4008df4:	9027883a 	mov	r19,r18
 4008df8:	81c00215 	stw	r7,8(r16)
 4008dfc:	902f883a 	mov	r23,r18
 4008e00:	003f3b06 	br	4008af0 <__ram_exceptions_end+0xfbfe88ac>
 4008e04:	800b883a 	mov	r5,r16
 4008e08:	a809883a 	mov	r4,r21
 4008e0c:	40043380 	call	4004338 <_fflush_r>
 4008e10:	103fb926 	beq	r2,zero,4008cf8 <__ram_exceptions_end+0xfbfe8ab4>
 4008e14:	003f6506 	br	4008bac <__ram_exceptions_end+0xfbfe8968>
 4008e18:	a809883a 	mov	r4,r21
 4008e1c:	40090e00 	call	40090e0 <_realloc_r>
 4008e20:	102f883a 	mov	r23,r2
 4008e24:	103fee1e 	bne	r2,zero,4008de0 <__ram_exceptions_end+0xfbfe8b9c>
 4008e28:	81400417 	ldw	r5,16(r16)
 4008e2c:	a809883a 	mov	r4,r21
 4008e30:	40048880 	call	4004888 <_free_r>
 4008e34:	8080030b 	ldhu	r2,12(r16)
 4008e38:	00ffdfc4 	movi	r3,-129
 4008e3c:	1884703a 	and	r2,r3,r2
 4008e40:	00c00304 	movi	r3,12
 4008e44:	a8c00015 	stw	r3,0(r21)
 4008e48:	003f5906 	br	4008bb0 <__ram_exceptions_end+0xfbfe896c>
 4008e4c:	94c00044 	addi	r19,r18,1
 4008e50:	02000044 	movi	r8,1
 4008e54:	003f6006 	br	4008bd8 <__ram_exceptions_end+0xfbfe8994>
 4008e58:	00bfffc4 	movi	r2,-1
 4008e5c:	003f0306 	br	4008a6c <__ram_exceptions_end+0xfbfe8828>
 4008e60:	00800304 	movi	r2,12
 4008e64:	a8800015 	stw	r2,0(r21)
 4008e68:	8080030b 	ldhu	r2,12(r16)
 4008e6c:	003f5006 	br	4008bb0 <__ram_exceptions_end+0xfbfe896c>

04008e70 <_isatty_r>:
 4008e70:	defffd04 	addi	sp,sp,-12
 4008e74:	dc000015 	stw	r16,0(sp)
 4008e78:	04010074 	movhi	r16,1025
 4008e7c:	dc400115 	stw	r17,4(sp)
 4008e80:	84060a04 	addi	r16,r16,6184
 4008e84:	2023883a 	mov	r17,r4
 4008e88:	2809883a 	mov	r4,r5
 4008e8c:	dfc00215 	stw	ra,8(sp)
 4008e90:	80000015 	stw	zero,0(r16)
 4008e94:	400ceec0 	call	400ceec <isatty>
 4008e98:	00ffffc4 	movi	r3,-1
 4008e9c:	10c00526 	beq	r2,r3,4008eb4 <_isatty_r+0x44>
 4008ea0:	dfc00217 	ldw	ra,8(sp)
 4008ea4:	dc400117 	ldw	r17,4(sp)
 4008ea8:	dc000017 	ldw	r16,0(sp)
 4008eac:	dec00304 	addi	sp,sp,12
 4008eb0:	f800283a 	ret
 4008eb4:	80c00017 	ldw	r3,0(r16)
 4008eb8:	183ff926 	beq	r3,zero,4008ea0 <__ram_exceptions_end+0xfbfe8c5c>
 4008ebc:	88c00015 	stw	r3,0(r17)
 4008ec0:	003ff706 	br	4008ea0 <__ram_exceptions_end+0xfbfe8c5c>

04008ec4 <_lseek_r>:
 4008ec4:	defffd04 	addi	sp,sp,-12
 4008ec8:	2805883a 	mov	r2,r5
 4008ecc:	dc000015 	stw	r16,0(sp)
 4008ed0:	04010074 	movhi	r16,1025
 4008ed4:	dc400115 	stw	r17,4(sp)
 4008ed8:	300b883a 	mov	r5,r6
 4008edc:	84060a04 	addi	r16,r16,6184
 4008ee0:	2023883a 	mov	r17,r4
 4008ee4:	380d883a 	mov	r6,r7
 4008ee8:	1009883a 	mov	r4,r2
 4008eec:	dfc00215 	stw	ra,8(sp)
 4008ef0:	80000015 	stw	zero,0(r16)
 4008ef4:	400d0cc0 	call	400d0cc <lseek>
 4008ef8:	00ffffc4 	movi	r3,-1
 4008efc:	10c00526 	beq	r2,r3,4008f14 <_lseek_r+0x50>
 4008f00:	dfc00217 	ldw	ra,8(sp)
 4008f04:	dc400117 	ldw	r17,4(sp)
 4008f08:	dc000017 	ldw	r16,0(sp)
 4008f0c:	dec00304 	addi	sp,sp,12
 4008f10:	f800283a 	ret
 4008f14:	80c00017 	ldw	r3,0(r16)
 4008f18:	183ff926 	beq	r3,zero,4008f00 <__ram_exceptions_end+0xfbfe8cbc>
 4008f1c:	88c00015 	stw	r3,0(r17)
 4008f20:	003ff706 	br	4008f00 <__ram_exceptions_end+0xfbfe8cbc>

04008f24 <memmove>:
 4008f24:	2005883a 	mov	r2,r4
 4008f28:	29000b2e 	bgeu	r5,r4,4008f58 <memmove+0x34>
 4008f2c:	298f883a 	add	r7,r5,r6
 4008f30:	21c0092e 	bgeu	r4,r7,4008f58 <memmove+0x34>
 4008f34:	2187883a 	add	r3,r4,r6
 4008f38:	198bc83a 	sub	r5,r3,r6
 4008f3c:	30004826 	beq	r6,zero,4009060 <memmove+0x13c>
 4008f40:	39ffffc4 	addi	r7,r7,-1
 4008f44:	39000003 	ldbu	r4,0(r7)
 4008f48:	18ffffc4 	addi	r3,r3,-1
 4008f4c:	19000005 	stb	r4,0(r3)
 4008f50:	28fffb1e 	bne	r5,r3,4008f40 <__ram_exceptions_end+0xfbfe8cfc>
 4008f54:	f800283a 	ret
 4008f58:	00c003c4 	movi	r3,15
 4008f5c:	1980412e 	bgeu	r3,r6,4009064 <memmove+0x140>
 4008f60:	2886b03a 	or	r3,r5,r2
 4008f64:	18c000cc 	andi	r3,r3,3
 4008f68:	1800401e 	bne	r3,zero,400906c <memmove+0x148>
 4008f6c:	33fffc04 	addi	r15,r6,-16
 4008f70:	781ed13a 	srli	r15,r15,4
 4008f74:	28c00104 	addi	r3,r5,4
 4008f78:	13400104 	addi	r13,r2,4
 4008f7c:	781c913a 	slli	r14,r15,4
 4008f80:	2b000204 	addi	r12,r5,8
 4008f84:	12c00204 	addi	r11,r2,8
 4008f88:	73800504 	addi	r14,r14,20
 4008f8c:	2a800304 	addi	r10,r5,12
 4008f90:	12400304 	addi	r9,r2,12
 4008f94:	2b9d883a 	add	r14,r5,r14
 4008f98:	2811883a 	mov	r8,r5
 4008f9c:	100f883a 	mov	r7,r2
 4008fa0:	41000017 	ldw	r4,0(r8)
 4008fa4:	39c00404 	addi	r7,r7,16
 4008fa8:	18c00404 	addi	r3,r3,16
 4008fac:	393ffc15 	stw	r4,-16(r7)
 4008fb0:	193ffc17 	ldw	r4,-16(r3)
 4008fb4:	6b400404 	addi	r13,r13,16
 4008fb8:	5ac00404 	addi	r11,r11,16
 4008fbc:	693ffc15 	stw	r4,-16(r13)
 4008fc0:	61000017 	ldw	r4,0(r12)
 4008fc4:	4a400404 	addi	r9,r9,16
 4008fc8:	42000404 	addi	r8,r8,16
 4008fcc:	593ffc15 	stw	r4,-16(r11)
 4008fd0:	51000017 	ldw	r4,0(r10)
 4008fd4:	63000404 	addi	r12,r12,16
 4008fd8:	52800404 	addi	r10,r10,16
 4008fdc:	493ffc15 	stw	r4,-16(r9)
 4008fe0:	1bbfef1e 	bne	r3,r14,4008fa0 <__ram_exceptions_end+0xfbfe8d5c>
 4008fe4:	79000044 	addi	r4,r15,1
 4008fe8:	2008913a 	slli	r4,r4,4
 4008fec:	328003cc 	andi	r10,r6,15
 4008ff0:	02c000c4 	movi	r11,3
 4008ff4:	1107883a 	add	r3,r2,r4
 4008ff8:	290b883a 	add	r5,r5,r4
 4008ffc:	5a801e2e 	bgeu	r11,r10,4009078 <memmove+0x154>
 4009000:	1813883a 	mov	r9,r3
 4009004:	2811883a 	mov	r8,r5
 4009008:	500f883a 	mov	r7,r10
 400900c:	41000017 	ldw	r4,0(r8)
 4009010:	4a400104 	addi	r9,r9,4
 4009014:	39ffff04 	addi	r7,r7,-4
 4009018:	493fff15 	stw	r4,-4(r9)
 400901c:	42000104 	addi	r8,r8,4
 4009020:	59fffa36 	bltu	r11,r7,400900c <__ram_exceptions_end+0xfbfe8dc8>
 4009024:	513fff04 	addi	r4,r10,-4
 4009028:	2008d0ba 	srli	r4,r4,2
 400902c:	318000cc 	andi	r6,r6,3
 4009030:	21000044 	addi	r4,r4,1
 4009034:	2109883a 	add	r4,r4,r4
 4009038:	2109883a 	add	r4,r4,r4
 400903c:	1907883a 	add	r3,r3,r4
 4009040:	290b883a 	add	r5,r5,r4
 4009044:	30000b26 	beq	r6,zero,4009074 <memmove+0x150>
 4009048:	198d883a 	add	r6,r3,r6
 400904c:	29c00003 	ldbu	r7,0(r5)
 4009050:	18c00044 	addi	r3,r3,1
 4009054:	29400044 	addi	r5,r5,1
 4009058:	19ffffc5 	stb	r7,-1(r3)
 400905c:	19bffb1e 	bne	r3,r6,400904c <__ram_exceptions_end+0xfbfe8e08>
 4009060:	f800283a 	ret
 4009064:	1007883a 	mov	r3,r2
 4009068:	003ff606 	br	4009044 <__ram_exceptions_end+0xfbfe8e00>
 400906c:	1007883a 	mov	r3,r2
 4009070:	003ff506 	br	4009048 <__ram_exceptions_end+0xfbfe8e04>
 4009074:	f800283a 	ret
 4009078:	500d883a 	mov	r6,r10
 400907c:	003ff106 	br	4009044 <__ram_exceptions_end+0xfbfe8e00>

04009080 <_read_r>:
 4009080:	defffd04 	addi	sp,sp,-12
 4009084:	2805883a 	mov	r2,r5
 4009088:	dc000015 	stw	r16,0(sp)
 400908c:	04010074 	movhi	r16,1025
 4009090:	dc400115 	stw	r17,4(sp)
 4009094:	300b883a 	mov	r5,r6
 4009098:	84060a04 	addi	r16,r16,6184
 400909c:	2023883a 	mov	r17,r4
 40090a0:	380d883a 	mov	r6,r7
 40090a4:	1009883a 	mov	r4,r2
 40090a8:	dfc00215 	stw	ra,8(sp)
 40090ac:	80000015 	stw	zero,0(r16)
 40090b0:	400d2b40 	call	400d2b4 <read>
 40090b4:	00ffffc4 	movi	r3,-1
 40090b8:	10c00526 	beq	r2,r3,40090d0 <_read_r+0x50>
 40090bc:	dfc00217 	ldw	ra,8(sp)
 40090c0:	dc400117 	ldw	r17,4(sp)
 40090c4:	dc000017 	ldw	r16,0(sp)
 40090c8:	dec00304 	addi	sp,sp,12
 40090cc:	f800283a 	ret
 40090d0:	80c00017 	ldw	r3,0(r16)
 40090d4:	183ff926 	beq	r3,zero,40090bc <__ram_exceptions_end+0xfbfe8e78>
 40090d8:	88c00015 	stw	r3,0(r17)
 40090dc:	003ff706 	br	40090bc <__ram_exceptions_end+0xfbfe8e78>

040090e0 <_realloc_r>:
 40090e0:	defff604 	addi	sp,sp,-40
 40090e4:	dc400115 	stw	r17,4(sp)
 40090e8:	dfc00915 	stw	ra,36(sp)
 40090ec:	df000815 	stw	fp,32(sp)
 40090f0:	ddc00715 	stw	r23,28(sp)
 40090f4:	dd800615 	stw	r22,24(sp)
 40090f8:	dd400515 	stw	r21,20(sp)
 40090fc:	dd000415 	stw	r20,16(sp)
 4009100:	dcc00315 	stw	r19,12(sp)
 4009104:	dc800215 	stw	r18,8(sp)
 4009108:	dc000015 	stw	r16,0(sp)
 400910c:	3023883a 	mov	r17,r6
 4009110:	2800b626 	beq	r5,zero,40093ec <_realloc_r+0x30c>
 4009114:	2829883a 	mov	r20,r5
 4009118:	2025883a 	mov	r18,r4
 400911c:	400d21c0 	call	400d21c <__malloc_lock>
 4009120:	a0ffff17 	ldw	r3,-4(r20)
 4009124:	043fff04 	movi	r16,-4
 4009128:	888002c4 	addi	r2,r17,11
 400912c:	01000584 	movi	r4,22
 4009130:	a57ffe04 	addi	r21,r20,-8
 4009134:	1c20703a 	and	r16,r3,r16
 4009138:	2080332e 	bgeu	r4,r2,4009208 <_realloc_r+0x128>
 400913c:	05bffe04 	movi	r22,-8
 4009140:	15ac703a 	and	r22,r2,r22
 4009144:	b005883a 	mov	r2,r22
 4009148:	b0005716 	blt	r22,zero,40092a8 <_realloc_r+0x1c8>
 400914c:	b4405636 	bltu	r22,r17,40092a8 <_realloc_r+0x1c8>
 4009150:	8080300e 	bge	r16,r2,4009214 <_realloc_r+0x134>
 4009154:	07010074 	movhi	fp,1025
 4009158:	e7014804 	addi	fp,fp,1312
 400915c:	e2000217 	ldw	r8,8(fp)
 4009160:	ac09883a 	add	r4,r21,r16
 4009164:	22006126 	beq	r4,r8,40092ec <_realloc_r+0x20c>
 4009168:	22400117 	ldw	r9,4(r4)
 400916c:	01ffff84 	movi	r7,-2
 4009170:	49ce703a 	and	r7,r9,r7
 4009174:	21cf883a 	add	r7,r4,r7
 4009178:	39800117 	ldw	r6,4(r7)
 400917c:	3180004c 	andi	r6,r6,1
 4009180:	30003e26 	beq	r6,zero,400927c <_realloc_r+0x19c>
 4009184:	18c0004c 	andi	r3,r3,1
 4009188:	18008126 	beq	r3,zero,4009390 <_realloc_r+0x2b0>
 400918c:	880b883a 	mov	r5,r17
 4009190:	9009883a 	mov	r4,r18
 4009194:	4004fb80 	call	4004fb8 <_malloc_r>
 4009198:	1023883a 	mov	r17,r2
 400919c:	10011e26 	beq	r2,zero,4009618 <_realloc_r+0x538>
 40091a0:	a0ffff17 	ldw	r3,-4(r20)
 40091a4:	113ffe04 	addi	r4,r2,-8
 40091a8:	00bfff84 	movi	r2,-2
 40091ac:	1884703a 	and	r2,r3,r2
 40091b0:	a885883a 	add	r2,r21,r2
 40091b4:	2080ee26 	beq	r4,r2,4009570 <_realloc_r+0x490>
 40091b8:	81bfff04 	addi	r6,r16,-4
 40091bc:	00800904 	movi	r2,36
 40091c0:	1180b836 	bltu	r2,r6,40094a4 <_realloc_r+0x3c4>
 40091c4:	00c004c4 	movi	r3,19
 40091c8:	19809536 	bltu	r3,r6,4009420 <_realloc_r+0x340>
 40091cc:	8805883a 	mov	r2,r17
 40091d0:	a007883a 	mov	r3,r20
 40091d4:	19000017 	ldw	r4,0(r3)
 40091d8:	11000015 	stw	r4,0(r2)
 40091dc:	19000117 	ldw	r4,4(r3)
 40091e0:	11000115 	stw	r4,4(r2)
 40091e4:	18c00217 	ldw	r3,8(r3)
 40091e8:	10c00215 	stw	r3,8(r2)
 40091ec:	a00b883a 	mov	r5,r20
 40091f0:	9009883a 	mov	r4,r18
 40091f4:	40048880 	call	4004888 <_free_r>
 40091f8:	9009883a 	mov	r4,r18
 40091fc:	400d2400 	call	400d240 <__malloc_unlock>
 4009200:	8805883a 	mov	r2,r17
 4009204:	00001106 	br	400924c <_realloc_r+0x16c>
 4009208:	00800404 	movi	r2,16
 400920c:	102d883a 	mov	r22,r2
 4009210:	003fce06 	br	400914c <__ram_exceptions_end+0xfbfe8f08>
 4009214:	a023883a 	mov	r17,r20
 4009218:	858fc83a 	sub	r7,r16,r22
 400921c:	008003c4 	movi	r2,15
 4009220:	18c0004c 	andi	r3,r3,1
 4009224:	11c02436 	bltu	r2,r7,40092b8 <_realloc_r+0x1d8>
 4009228:	1c06b03a 	or	r3,r3,r16
 400922c:	a8c00115 	stw	r3,4(r21)
 4009230:	ac21883a 	add	r16,r21,r16
 4009234:	80800117 	ldw	r2,4(r16)
 4009238:	10800054 	ori	r2,r2,1
 400923c:	80800115 	stw	r2,4(r16)
 4009240:	9009883a 	mov	r4,r18
 4009244:	400d2400 	call	400d240 <__malloc_unlock>
 4009248:	8805883a 	mov	r2,r17
 400924c:	dfc00917 	ldw	ra,36(sp)
 4009250:	df000817 	ldw	fp,32(sp)
 4009254:	ddc00717 	ldw	r23,28(sp)
 4009258:	dd800617 	ldw	r22,24(sp)
 400925c:	dd400517 	ldw	r21,20(sp)
 4009260:	dd000417 	ldw	r20,16(sp)
 4009264:	dcc00317 	ldw	r19,12(sp)
 4009268:	dc800217 	ldw	r18,8(sp)
 400926c:	dc400117 	ldw	r17,4(sp)
 4009270:	dc000017 	ldw	r16,0(sp)
 4009274:	dec00a04 	addi	sp,sp,40
 4009278:	f800283a 	ret
 400927c:	017fff04 	movi	r5,-4
 4009280:	494a703a 	and	r5,r9,r5
 4009284:	814d883a 	add	r6,r16,r5
 4009288:	30801e16 	blt	r6,r2,4009304 <_realloc_r+0x224>
 400928c:	20800317 	ldw	r2,12(r4)
 4009290:	21000217 	ldw	r4,8(r4)
 4009294:	a023883a 	mov	r17,r20
 4009298:	3021883a 	mov	r16,r6
 400929c:	20800315 	stw	r2,12(r4)
 40092a0:	11000215 	stw	r4,8(r2)
 40092a4:	003fdc06 	br	4009218 <__ram_exceptions_end+0xfbfe8fd4>
 40092a8:	00800304 	movi	r2,12
 40092ac:	90800015 	stw	r2,0(r18)
 40092b0:	0005883a 	mov	r2,zero
 40092b4:	003fe506 	br	400924c <__ram_exceptions_end+0xfbfe9008>
 40092b8:	1d86b03a 	or	r3,r3,r22
 40092bc:	a8c00115 	stw	r3,4(r21)
 40092c0:	ad8b883a 	add	r5,r21,r22
 40092c4:	38c00054 	ori	r3,r7,1
 40092c8:	28c00115 	stw	r3,4(r5)
 40092cc:	29cf883a 	add	r7,r5,r7
 40092d0:	38c00117 	ldw	r3,4(r7)
 40092d4:	29400204 	addi	r5,r5,8
 40092d8:	9009883a 	mov	r4,r18
 40092dc:	18800054 	ori	r2,r3,1
 40092e0:	38800115 	stw	r2,4(r7)
 40092e4:	40048880 	call	4004888 <_free_r>
 40092e8:	003fd506 	br	4009240 <__ram_exceptions_end+0xfbfe8ffc>
 40092ec:	21c00117 	ldw	r7,4(r4)
 40092f0:	017fff04 	movi	r5,-4
 40092f4:	b1800404 	addi	r6,r22,16
 40092f8:	394a703a 	and	r5,r7,r5
 40092fc:	814f883a 	add	r7,r16,r5
 4009300:	39805b0e 	bge	r7,r6,4009470 <_realloc_r+0x390>
 4009304:	18c0004c 	andi	r3,r3,1
 4009308:	183fa01e 	bne	r3,zero,400918c <__ram_exceptions_end+0xfbfe8f48>
 400930c:	a4fffe17 	ldw	r19,-8(r20)
 4009310:	00ffff04 	movi	r3,-4
 4009314:	ace7c83a 	sub	r19,r21,r19
 4009318:	99800117 	ldw	r6,4(r19)
 400931c:	30c6703a 	and	r3,r6,r3
 4009320:	20002026 	beq	r4,zero,40093a4 <_realloc_r+0x2c4>
 4009324:	80ef883a 	add	r23,r16,r3
 4009328:	b96f883a 	add	r23,r23,r5
 400932c:	22006126 	beq	r4,r8,40094b4 <_realloc_r+0x3d4>
 4009330:	b8801c16 	blt	r23,r2,40093a4 <_realloc_r+0x2c4>
 4009334:	20800317 	ldw	r2,12(r4)
 4009338:	20c00217 	ldw	r3,8(r4)
 400933c:	81bfff04 	addi	r6,r16,-4
 4009340:	01000904 	movi	r4,36
 4009344:	18800315 	stw	r2,12(r3)
 4009348:	10c00215 	stw	r3,8(r2)
 400934c:	98c00217 	ldw	r3,8(r19)
 4009350:	98800317 	ldw	r2,12(r19)
 4009354:	9c400204 	addi	r17,r19,8
 4009358:	18800315 	stw	r2,12(r3)
 400935c:	10c00215 	stw	r3,8(r2)
 4009360:	21801b36 	bltu	r4,r6,40093d0 <_realloc_r+0x2f0>
 4009364:	008004c4 	movi	r2,19
 4009368:	1180362e 	bgeu	r2,r6,4009444 <_realloc_r+0x364>
 400936c:	a0800017 	ldw	r2,0(r20)
 4009370:	98800215 	stw	r2,8(r19)
 4009374:	a0800117 	ldw	r2,4(r20)
 4009378:	98800315 	stw	r2,12(r19)
 400937c:	008006c4 	movi	r2,27
 4009380:	11808136 	bltu	r2,r6,4009588 <_realloc_r+0x4a8>
 4009384:	98800404 	addi	r2,r19,16
 4009388:	a5000204 	addi	r20,r20,8
 400938c:	00002e06 	br	4009448 <_realloc_r+0x368>
 4009390:	a4fffe17 	ldw	r19,-8(r20)
 4009394:	00ffff04 	movi	r3,-4
 4009398:	ace7c83a 	sub	r19,r21,r19
 400939c:	99000117 	ldw	r4,4(r19)
 40093a0:	20c6703a 	and	r3,r4,r3
 40093a4:	983f7926 	beq	r19,zero,400918c <__ram_exceptions_end+0xfbfe8f48>
 40093a8:	80ef883a 	add	r23,r16,r3
 40093ac:	b8bf7716 	blt	r23,r2,400918c <__ram_exceptions_end+0xfbfe8f48>
 40093b0:	98800317 	ldw	r2,12(r19)
 40093b4:	98c00217 	ldw	r3,8(r19)
 40093b8:	81bfff04 	addi	r6,r16,-4
 40093bc:	01000904 	movi	r4,36
 40093c0:	18800315 	stw	r2,12(r3)
 40093c4:	10c00215 	stw	r3,8(r2)
 40093c8:	9c400204 	addi	r17,r19,8
 40093cc:	21bfe52e 	bgeu	r4,r6,4009364 <__ram_exceptions_end+0xfbfe9120>
 40093d0:	a00b883a 	mov	r5,r20
 40093d4:	8809883a 	mov	r4,r17
 40093d8:	4008f240 	call	4008f24 <memmove>
 40093dc:	98c00117 	ldw	r3,4(r19)
 40093e0:	b821883a 	mov	r16,r23
 40093e4:	982b883a 	mov	r21,r19
 40093e8:	003f8b06 	br	4009218 <__ram_exceptions_end+0xfbfe8fd4>
 40093ec:	300b883a 	mov	r5,r6
 40093f0:	dfc00917 	ldw	ra,36(sp)
 40093f4:	df000817 	ldw	fp,32(sp)
 40093f8:	ddc00717 	ldw	r23,28(sp)
 40093fc:	dd800617 	ldw	r22,24(sp)
 4009400:	dd400517 	ldw	r21,20(sp)
 4009404:	dd000417 	ldw	r20,16(sp)
 4009408:	dcc00317 	ldw	r19,12(sp)
 400940c:	dc800217 	ldw	r18,8(sp)
 4009410:	dc400117 	ldw	r17,4(sp)
 4009414:	dc000017 	ldw	r16,0(sp)
 4009418:	dec00a04 	addi	sp,sp,40
 400941c:	4004fb81 	jmpi	4004fb8 <_malloc_r>
 4009420:	a0c00017 	ldw	r3,0(r20)
 4009424:	88c00015 	stw	r3,0(r17)
 4009428:	a0c00117 	ldw	r3,4(r20)
 400942c:	88c00115 	stw	r3,4(r17)
 4009430:	00c006c4 	movi	r3,27
 4009434:	19804636 	bltu	r3,r6,4009550 <_realloc_r+0x470>
 4009438:	88800204 	addi	r2,r17,8
 400943c:	a0c00204 	addi	r3,r20,8
 4009440:	003f6406 	br	40091d4 <__ram_exceptions_end+0xfbfe8f90>
 4009444:	8805883a 	mov	r2,r17
 4009448:	a0c00017 	ldw	r3,0(r20)
 400944c:	b821883a 	mov	r16,r23
 4009450:	982b883a 	mov	r21,r19
 4009454:	10c00015 	stw	r3,0(r2)
 4009458:	a0c00117 	ldw	r3,4(r20)
 400945c:	10c00115 	stw	r3,4(r2)
 4009460:	a0c00217 	ldw	r3,8(r20)
 4009464:	10c00215 	stw	r3,8(r2)
 4009468:	98c00117 	ldw	r3,4(r19)
 400946c:	003f6a06 	br	4009218 <__ram_exceptions_end+0xfbfe8fd4>
 4009470:	adab883a 	add	r21,r21,r22
 4009474:	3d85c83a 	sub	r2,r7,r22
 4009478:	e5400215 	stw	r21,8(fp)
 400947c:	10800054 	ori	r2,r2,1
 4009480:	a8800115 	stw	r2,4(r21)
 4009484:	a0bfff17 	ldw	r2,-4(r20)
 4009488:	9009883a 	mov	r4,r18
 400948c:	1080004c 	andi	r2,r2,1
 4009490:	1584b03a 	or	r2,r2,r22
 4009494:	a0bfff15 	stw	r2,-4(r20)
 4009498:	400d2400 	call	400d240 <__malloc_unlock>
 400949c:	a005883a 	mov	r2,r20
 40094a0:	003f6a06 	br	400924c <__ram_exceptions_end+0xfbfe9008>
 40094a4:	a00b883a 	mov	r5,r20
 40094a8:	8809883a 	mov	r4,r17
 40094ac:	4008f240 	call	4008f24 <memmove>
 40094b0:	003f4e06 	br	40091ec <__ram_exceptions_end+0xfbfe8fa8>
 40094b4:	b1000404 	addi	r4,r22,16
 40094b8:	b93fba16 	blt	r23,r4,40093a4 <__ram_exceptions_end+0xfbfe9160>
 40094bc:	98800317 	ldw	r2,12(r19)
 40094c0:	98c00217 	ldw	r3,8(r19)
 40094c4:	81bfff04 	addi	r6,r16,-4
 40094c8:	01000904 	movi	r4,36
 40094cc:	18800315 	stw	r2,12(r3)
 40094d0:	10c00215 	stw	r3,8(r2)
 40094d4:	9c400204 	addi	r17,r19,8
 40094d8:	21804336 	bltu	r4,r6,40095e8 <_realloc_r+0x508>
 40094dc:	008004c4 	movi	r2,19
 40094e0:	11803f2e 	bgeu	r2,r6,40095e0 <_realloc_r+0x500>
 40094e4:	a0800017 	ldw	r2,0(r20)
 40094e8:	98800215 	stw	r2,8(r19)
 40094ec:	a0800117 	ldw	r2,4(r20)
 40094f0:	98800315 	stw	r2,12(r19)
 40094f4:	008006c4 	movi	r2,27
 40094f8:	11803f36 	bltu	r2,r6,40095f8 <_realloc_r+0x518>
 40094fc:	98800404 	addi	r2,r19,16
 4009500:	a5000204 	addi	r20,r20,8
 4009504:	a0c00017 	ldw	r3,0(r20)
 4009508:	10c00015 	stw	r3,0(r2)
 400950c:	a0c00117 	ldw	r3,4(r20)
 4009510:	10c00115 	stw	r3,4(r2)
 4009514:	a0c00217 	ldw	r3,8(r20)
 4009518:	10c00215 	stw	r3,8(r2)
 400951c:	9d87883a 	add	r3,r19,r22
 4009520:	bd85c83a 	sub	r2,r23,r22
 4009524:	e0c00215 	stw	r3,8(fp)
 4009528:	10800054 	ori	r2,r2,1
 400952c:	18800115 	stw	r2,4(r3)
 4009530:	98800117 	ldw	r2,4(r19)
 4009534:	9009883a 	mov	r4,r18
 4009538:	1080004c 	andi	r2,r2,1
 400953c:	1584b03a 	or	r2,r2,r22
 4009540:	98800115 	stw	r2,4(r19)
 4009544:	400d2400 	call	400d240 <__malloc_unlock>
 4009548:	8805883a 	mov	r2,r17
 400954c:	003f3f06 	br	400924c <__ram_exceptions_end+0xfbfe9008>
 4009550:	a0c00217 	ldw	r3,8(r20)
 4009554:	88c00215 	stw	r3,8(r17)
 4009558:	a0c00317 	ldw	r3,12(r20)
 400955c:	88c00315 	stw	r3,12(r17)
 4009560:	30801126 	beq	r6,r2,40095a8 <_realloc_r+0x4c8>
 4009564:	88800404 	addi	r2,r17,16
 4009568:	a0c00404 	addi	r3,r20,16
 400956c:	003f1906 	br	40091d4 <__ram_exceptions_end+0xfbfe8f90>
 4009570:	893fff17 	ldw	r4,-4(r17)
 4009574:	00bfff04 	movi	r2,-4
 4009578:	a023883a 	mov	r17,r20
 400957c:	2084703a 	and	r2,r4,r2
 4009580:	80a1883a 	add	r16,r16,r2
 4009584:	003f2406 	br	4009218 <__ram_exceptions_end+0xfbfe8fd4>
 4009588:	a0800217 	ldw	r2,8(r20)
 400958c:	98800415 	stw	r2,16(r19)
 4009590:	a0800317 	ldw	r2,12(r20)
 4009594:	98800515 	stw	r2,20(r19)
 4009598:	31000a26 	beq	r6,r4,40095c4 <_realloc_r+0x4e4>
 400959c:	98800604 	addi	r2,r19,24
 40095a0:	a5000404 	addi	r20,r20,16
 40095a4:	003fa806 	br	4009448 <__ram_exceptions_end+0xfbfe9204>
 40095a8:	a1000417 	ldw	r4,16(r20)
 40095ac:	88800604 	addi	r2,r17,24
 40095b0:	a0c00604 	addi	r3,r20,24
 40095b4:	89000415 	stw	r4,16(r17)
 40095b8:	a1000517 	ldw	r4,20(r20)
 40095bc:	89000515 	stw	r4,20(r17)
 40095c0:	003f0406 	br	40091d4 <__ram_exceptions_end+0xfbfe8f90>
 40095c4:	a0c00417 	ldw	r3,16(r20)
 40095c8:	a5000604 	addi	r20,r20,24
 40095cc:	98800804 	addi	r2,r19,32
 40095d0:	98c00615 	stw	r3,24(r19)
 40095d4:	a0ffff17 	ldw	r3,-4(r20)
 40095d8:	98c00715 	stw	r3,28(r19)
 40095dc:	003f9a06 	br	4009448 <__ram_exceptions_end+0xfbfe9204>
 40095e0:	8805883a 	mov	r2,r17
 40095e4:	003fc706 	br	4009504 <__ram_exceptions_end+0xfbfe92c0>
 40095e8:	a00b883a 	mov	r5,r20
 40095ec:	8809883a 	mov	r4,r17
 40095f0:	4008f240 	call	4008f24 <memmove>
 40095f4:	003fc906 	br	400951c <__ram_exceptions_end+0xfbfe92d8>
 40095f8:	a0800217 	ldw	r2,8(r20)
 40095fc:	98800415 	stw	r2,16(r19)
 4009600:	a0800317 	ldw	r2,12(r20)
 4009604:	98800515 	stw	r2,20(r19)
 4009608:	31000726 	beq	r6,r4,4009628 <_realloc_r+0x548>
 400960c:	98800604 	addi	r2,r19,24
 4009610:	a5000404 	addi	r20,r20,16
 4009614:	003fbb06 	br	4009504 <__ram_exceptions_end+0xfbfe92c0>
 4009618:	9009883a 	mov	r4,r18
 400961c:	400d2400 	call	400d240 <__malloc_unlock>
 4009620:	0005883a 	mov	r2,zero
 4009624:	003f0906 	br	400924c <__ram_exceptions_end+0xfbfe9008>
 4009628:	a0c00417 	ldw	r3,16(r20)
 400962c:	a5000604 	addi	r20,r20,24
 4009630:	98800804 	addi	r2,r19,32
 4009634:	98c00615 	stw	r3,24(r19)
 4009638:	a0ffff17 	ldw	r3,-4(r20)
 400963c:	98c00715 	stw	r3,28(r19)
 4009640:	003fb006 	br	4009504 <__ram_exceptions_end+0xfbfe92c0>

04009644 <__swbuf_r>:
 4009644:	defffb04 	addi	sp,sp,-20
 4009648:	dcc00315 	stw	r19,12(sp)
 400964c:	dc800215 	stw	r18,8(sp)
 4009650:	dc000015 	stw	r16,0(sp)
 4009654:	dfc00415 	stw	ra,16(sp)
 4009658:	dc400115 	stw	r17,4(sp)
 400965c:	2025883a 	mov	r18,r4
 4009660:	2827883a 	mov	r19,r5
 4009664:	3021883a 	mov	r16,r6
 4009668:	20000226 	beq	r4,zero,4009674 <__swbuf_r+0x30>
 400966c:	20800e17 	ldw	r2,56(r4)
 4009670:	10004226 	beq	r2,zero,400977c <__swbuf_r+0x138>
 4009674:	80800617 	ldw	r2,24(r16)
 4009678:	8100030b 	ldhu	r4,12(r16)
 400967c:	80800215 	stw	r2,8(r16)
 4009680:	2080020c 	andi	r2,r4,8
 4009684:	10003626 	beq	r2,zero,4009760 <__swbuf_r+0x11c>
 4009688:	80c00417 	ldw	r3,16(r16)
 400968c:	18003426 	beq	r3,zero,4009760 <__swbuf_r+0x11c>
 4009690:	2088000c 	andi	r2,r4,8192
 4009694:	9c403fcc 	andi	r17,r19,255
 4009698:	10001a26 	beq	r2,zero,4009704 <__swbuf_r+0xc0>
 400969c:	80800017 	ldw	r2,0(r16)
 40096a0:	81000517 	ldw	r4,20(r16)
 40096a4:	10c7c83a 	sub	r3,r2,r3
 40096a8:	1900200e 	bge	r3,r4,400972c <__swbuf_r+0xe8>
 40096ac:	18c00044 	addi	r3,r3,1
 40096b0:	81000217 	ldw	r4,8(r16)
 40096b4:	11400044 	addi	r5,r2,1
 40096b8:	81400015 	stw	r5,0(r16)
 40096bc:	213fffc4 	addi	r4,r4,-1
 40096c0:	81000215 	stw	r4,8(r16)
 40096c4:	14c00005 	stb	r19,0(r2)
 40096c8:	80800517 	ldw	r2,20(r16)
 40096cc:	10c01e26 	beq	r2,r3,4009748 <__swbuf_r+0x104>
 40096d0:	8080030b 	ldhu	r2,12(r16)
 40096d4:	1080004c 	andi	r2,r2,1
 40096d8:	10000226 	beq	r2,zero,40096e4 <__swbuf_r+0xa0>
 40096dc:	00800284 	movi	r2,10
 40096e0:	88801926 	beq	r17,r2,4009748 <__swbuf_r+0x104>
 40096e4:	8805883a 	mov	r2,r17
 40096e8:	dfc00417 	ldw	ra,16(sp)
 40096ec:	dcc00317 	ldw	r19,12(sp)
 40096f0:	dc800217 	ldw	r18,8(sp)
 40096f4:	dc400117 	ldw	r17,4(sp)
 40096f8:	dc000017 	ldw	r16,0(sp)
 40096fc:	dec00504 	addi	sp,sp,20
 4009700:	f800283a 	ret
 4009704:	81401917 	ldw	r5,100(r16)
 4009708:	00b7ffc4 	movi	r2,-8193
 400970c:	21080014 	ori	r4,r4,8192
 4009710:	2884703a 	and	r2,r5,r2
 4009714:	80801915 	stw	r2,100(r16)
 4009718:	80800017 	ldw	r2,0(r16)
 400971c:	8100030d 	sth	r4,12(r16)
 4009720:	81000517 	ldw	r4,20(r16)
 4009724:	10c7c83a 	sub	r3,r2,r3
 4009728:	193fe016 	blt	r3,r4,40096ac <__ram_exceptions_end+0xfbfe9468>
 400972c:	800b883a 	mov	r5,r16
 4009730:	9009883a 	mov	r4,r18
 4009734:	40043380 	call	4004338 <_fflush_r>
 4009738:	1000071e 	bne	r2,zero,4009758 <__swbuf_r+0x114>
 400973c:	80800017 	ldw	r2,0(r16)
 4009740:	00c00044 	movi	r3,1
 4009744:	003fda06 	br	40096b0 <__ram_exceptions_end+0xfbfe946c>
 4009748:	800b883a 	mov	r5,r16
 400974c:	9009883a 	mov	r4,r18
 4009750:	40043380 	call	4004338 <_fflush_r>
 4009754:	103fe326 	beq	r2,zero,40096e4 <__ram_exceptions_end+0xfbfe94a0>
 4009758:	00bfffc4 	movi	r2,-1
 400975c:	003fe206 	br	40096e8 <__ram_exceptions_end+0xfbfe94a4>
 4009760:	800b883a 	mov	r5,r16
 4009764:	9009883a 	mov	r4,r18
 4009768:	40027400 	call	4002740 <__swsetup_r>
 400976c:	103ffa1e 	bne	r2,zero,4009758 <__ram_exceptions_end+0xfbfe9514>
 4009770:	8100030b 	ldhu	r4,12(r16)
 4009774:	80c00417 	ldw	r3,16(r16)
 4009778:	003fc506 	br	4009690 <__ram_exceptions_end+0xfbfe944c>
 400977c:	40047140 	call	4004714 <__sinit>
 4009780:	003fbc06 	br	4009674 <__ram_exceptions_end+0xfbfe9430>

04009784 <__swbuf>:
 4009784:	00810074 	movhi	r2,1025
 4009788:	10830004 	addi	r2,r2,3072
 400978c:	280d883a 	mov	r6,r5
 4009790:	200b883a 	mov	r5,r4
 4009794:	11000017 	ldw	r4,0(r2)
 4009798:	40096441 	jmpi	4009644 <__swbuf_r>

0400979c <_wcrtomb_r>:
 400979c:	defff604 	addi	sp,sp,-40
 40097a0:	00810074 	movhi	r2,1025
 40097a4:	dc800815 	stw	r18,32(sp)
 40097a8:	dc400715 	stw	r17,28(sp)
 40097ac:	dc000615 	stw	r16,24(sp)
 40097b0:	10830404 	addi	r2,r2,3088
 40097b4:	dfc00915 	stw	ra,36(sp)
 40097b8:	2021883a 	mov	r16,r4
 40097bc:	3823883a 	mov	r17,r7
 40097c0:	14800017 	ldw	r18,0(r2)
 40097c4:	28001426 	beq	r5,zero,4009818 <_wcrtomb_r+0x7c>
 40097c8:	d9400415 	stw	r5,16(sp)
 40097cc:	d9800515 	stw	r6,20(sp)
 40097d0:	4004d9c0 	call	4004d9c <__locale_charset>
 40097d4:	d9800517 	ldw	r6,20(sp)
 40097d8:	d9400417 	ldw	r5,16(sp)
 40097dc:	100f883a 	mov	r7,r2
 40097e0:	dc400015 	stw	r17,0(sp)
 40097e4:	8009883a 	mov	r4,r16
 40097e8:	903ee83a 	callr	r18
 40097ec:	00ffffc4 	movi	r3,-1
 40097f0:	10c0031e 	bne	r2,r3,4009800 <_wcrtomb_r+0x64>
 40097f4:	88000015 	stw	zero,0(r17)
 40097f8:	00c02284 	movi	r3,138
 40097fc:	80c00015 	stw	r3,0(r16)
 4009800:	dfc00917 	ldw	ra,36(sp)
 4009804:	dc800817 	ldw	r18,32(sp)
 4009808:	dc400717 	ldw	r17,28(sp)
 400980c:	dc000617 	ldw	r16,24(sp)
 4009810:	dec00a04 	addi	sp,sp,40
 4009814:	f800283a 	ret
 4009818:	4004d9c0 	call	4004d9c <__locale_charset>
 400981c:	100f883a 	mov	r7,r2
 4009820:	dc400015 	stw	r17,0(sp)
 4009824:	000d883a 	mov	r6,zero
 4009828:	d9400104 	addi	r5,sp,4
 400982c:	8009883a 	mov	r4,r16
 4009830:	903ee83a 	callr	r18
 4009834:	003fed06 	br	40097ec <__ram_exceptions_end+0xfbfe95a8>

04009838 <wcrtomb>:
 4009838:	defff604 	addi	sp,sp,-40
 400983c:	00810074 	movhi	r2,1025
 4009840:	dc800615 	stw	r18,24(sp)
 4009844:	dc400515 	stw	r17,20(sp)
 4009848:	10830004 	addi	r2,r2,3072
 400984c:	dfc00915 	stw	ra,36(sp)
 4009850:	dd000815 	stw	r20,32(sp)
 4009854:	dcc00715 	stw	r19,28(sp)
 4009858:	dc000415 	stw	r16,16(sp)
 400985c:	3025883a 	mov	r18,r6
 4009860:	14400017 	ldw	r17,0(r2)
 4009864:	20001926 	beq	r4,zero,40098cc <wcrtomb+0x94>
 4009868:	00810074 	movhi	r2,1025
 400986c:	10830404 	addi	r2,r2,3088
 4009870:	15000017 	ldw	r20,0(r2)
 4009874:	2021883a 	mov	r16,r4
 4009878:	2827883a 	mov	r19,r5
 400987c:	4004d9c0 	call	4004d9c <__locale_charset>
 4009880:	100f883a 	mov	r7,r2
 4009884:	dc800015 	stw	r18,0(sp)
 4009888:	980d883a 	mov	r6,r19
 400988c:	800b883a 	mov	r5,r16
 4009890:	8809883a 	mov	r4,r17
 4009894:	a03ee83a 	callr	r20
 4009898:	00ffffc4 	movi	r3,-1
 400989c:	10c0031e 	bne	r2,r3,40098ac <wcrtomb+0x74>
 40098a0:	90000015 	stw	zero,0(r18)
 40098a4:	00c02284 	movi	r3,138
 40098a8:	88c00015 	stw	r3,0(r17)
 40098ac:	dfc00917 	ldw	ra,36(sp)
 40098b0:	dd000817 	ldw	r20,32(sp)
 40098b4:	dcc00717 	ldw	r19,28(sp)
 40098b8:	dc800617 	ldw	r18,24(sp)
 40098bc:	dc400517 	ldw	r17,20(sp)
 40098c0:	dc000417 	ldw	r16,16(sp)
 40098c4:	dec00a04 	addi	sp,sp,40
 40098c8:	f800283a 	ret
 40098cc:	00810074 	movhi	r2,1025
 40098d0:	10830404 	addi	r2,r2,3088
 40098d4:	14000017 	ldw	r16,0(r2)
 40098d8:	4004d9c0 	call	4004d9c <__locale_charset>
 40098dc:	100f883a 	mov	r7,r2
 40098e0:	dc800015 	stw	r18,0(sp)
 40098e4:	000d883a 	mov	r6,zero
 40098e8:	d9400104 	addi	r5,sp,4
 40098ec:	8809883a 	mov	r4,r17
 40098f0:	803ee83a 	callr	r16
 40098f4:	003fe806 	br	4009898 <__ram_exceptions_end+0xfbfe9654>

040098f8 <__ascii_wctomb>:
 40098f8:	28000526 	beq	r5,zero,4009910 <__ascii_wctomb+0x18>
 40098fc:	00803fc4 	movi	r2,255
 4009900:	11800536 	bltu	r2,r6,4009918 <__ascii_wctomb+0x20>
 4009904:	29800005 	stb	r6,0(r5)
 4009908:	00800044 	movi	r2,1
 400990c:	f800283a 	ret
 4009910:	0005883a 	mov	r2,zero
 4009914:	f800283a 	ret
 4009918:	00802284 	movi	r2,138
 400991c:	20800015 	stw	r2,0(r4)
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	f800283a 	ret

04009928 <_wctomb_r>:
 4009928:	00810074 	movhi	r2,1025
 400992c:	defff904 	addi	sp,sp,-28
 4009930:	10830404 	addi	r2,r2,3088
 4009934:	dfc00615 	stw	ra,24(sp)
 4009938:	dc400515 	stw	r17,20(sp)
 400993c:	dc000415 	stw	r16,16(sp)
 4009940:	3823883a 	mov	r17,r7
 4009944:	14000017 	ldw	r16,0(r2)
 4009948:	d9000115 	stw	r4,4(sp)
 400994c:	d9400215 	stw	r5,8(sp)
 4009950:	d9800315 	stw	r6,12(sp)
 4009954:	4004d9c0 	call	4004d9c <__locale_charset>
 4009958:	d9800317 	ldw	r6,12(sp)
 400995c:	d9400217 	ldw	r5,8(sp)
 4009960:	d9000117 	ldw	r4,4(sp)
 4009964:	100f883a 	mov	r7,r2
 4009968:	dc400015 	stw	r17,0(sp)
 400996c:	803ee83a 	callr	r16
 4009970:	dfc00617 	ldw	ra,24(sp)
 4009974:	dc400517 	ldw	r17,20(sp)
 4009978:	dc000417 	ldw	r16,16(sp)
 400997c:	dec00704 	addi	sp,sp,28
 4009980:	f800283a 	ret

04009984 <__udivdi3>:
 4009984:	defff504 	addi	sp,sp,-44
 4009988:	dcc00415 	stw	r19,16(sp)
 400998c:	dc000115 	stw	r16,4(sp)
 4009990:	dfc00a15 	stw	ra,40(sp)
 4009994:	df000915 	stw	fp,36(sp)
 4009998:	ddc00815 	stw	r23,32(sp)
 400999c:	dd800715 	stw	r22,28(sp)
 40099a0:	dd400615 	stw	r21,24(sp)
 40099a4:	dd000515 	stw	r20,20(sp)
 40099a8:	dc800315 	stw	r18,12(sp)
 40099ac:	dc400215 	stw	r17,8(sp)
 40099b0:	2027883a 	mov	r19,r4
 40099b4:	2821883a 	mov	r16,r5
 40099b8:	3800411e 	bne	r7,zero,4009ac0 <__udivdi3+0x13c>
 40099bc:	3023883a 	mov	r17,r6
 40099c0:	2025883a 	mov	r18,r4
 40099c4:	2980522e 	bgeu	r5,r6,4009b10 <__udivdi3+0x18c>
 40099c8:	00bfffd4 	movui	r2,65535
 40099cc:	282d883a 	mov	r22,r5
 40099d0:	1180a836 	bltu	r2,r6,4009c74 <__udivdi3+0x2f0>
 40099d4:	00803fc4 	movi	r2,255
 40099d8:	1185803a 	cmpltu	r2,r2,r6
 40099dc:	100490fa 	slli	r2,r2,3
 40099e0:	3086d83a 	srl	r3,r6,r2
 40099e4:	01010074 	movhi	r4,1025
 40099e8:	213fc704 	addi	r4,r4,-228
 40099ec:	20c7883a 	add	r3,r4,r3
 40099f0:	18c00003 	ldbu	r3,0(r3)
 40099f4:	1885883a 	add	r2,r3,r2
 40099f8:	00c00804 	movi	r3,32
 40099fc:	1887c83a 	sub	r3,r3,r2
 4009a00:	18000526 	beq	r3,zero,4009a18 <__udivdi3+0x94>
 4009a04:	80e0983a 	sll	r16,r16,r3
 4009a08:	9884d83a 	srl	r2,r19,r2
 4009a0c:	30e2983a 	sll	r17,r6,r3
 4009a10:	98e4983a 	sll	r18,r19,r3
 4009a14:	142cb03a 	or	r22,r2,r16
 4009a18:	882ad43a 	srli	r21,r17,16
 4009a1c:	b009883a 	mov	r4,r22
 4009a20:	8d3fffcc 	andi	r20,r17,65535
 4009a24:	a80b883a 	mov	r5,r21
 4009a28:	400a5900 	call	400a590 <__umodsi3>
 4009a2c:	b009883a 	mov	r4,r22
 4009a30:	a80b883a 	mov	r5,r21
 4009a34:	1027883a 	mov	r19,r2
 4009a38:	400a52c0 	call	400a52c <__udivsi3>
 4009a3c:	102d883a 	mov	r22,r2
 4009a40:	9826943a 	slli	r19,r19,16
 4009a44:	9004d43a 	srli	r2,r18,16
 4009a48:	a5a1383a 	mul	r16,r20,r22
 4009a4c:	14c4b03a 	or	r2,r2,r19
 4009a50:	1400052e 	bgeu	r2,r16,4009a68 <__udivdi3+0xe4>
 4009a54:	1445883a 	add	r2,r2,r17
 4009a58:	b0ffffc4 	addi	r3,r22,-1
 4009a5c:	14400136 	bltu	r2,r17,4009a64 <__udivdi3+0xe0>
 4009a60:	14012336 	bltu	r2,r16,4009ef0 <__udivdi3+0x56c>
 4009a64:	182d883a 	mov	r22,r3
 4009a68:	1421c83a 	sub	r16,r2,r16
 4009a6c:	a80b883a 	mov	r5,r21
 4009a70:	8009883a 	mov	r4,r16
 4009a74:	400a5900 	call	400a590 <__umodsi3>
 4009a78:	1027883a 	mov	r19,r2
 4009a7c:	a80b883a 	mov	r5,r21
 4009a80:	8009883a 	mov	r4,r16
 4009a84:	400a52c0 	call	400a52c <__udivsi3>
 4009a88:	9826943a 	slli	r19,r19,16
 4009a8c:	a0a9383a 	mul	r20,r20,r2
 4009a90:	94bfffcc 	andi	r18,r18,65535
 4009a94:	94e4b03a 	or	r18,r18,r19
 4009a98:	9500052e 	bgeu	r18,r20,4009ab0 <__udivdi3+0x12c>
 4009a9c:	8ca5883a 	add	r18,r17,r18
 4009aa0:	10ffffc4 	addi	r3,r2,-1
 4009aa4:	9440f136 	bltu	r18,r17,4009e6c <__udivdi3+0x4e8>
 4009aa8:	9500f02e 	bgeu	r18,r20,4009e6c <__udivdi3+0x4e8>
 4009aac:	10bfff84 	addi	r2,r2,-2
 4009ab0:	b00c943a 	slli	r6,r22,16
 4009ab4:	0007883a 	mov	r3,zero
 4009ab8:	3084b03a 	or	r2,r6,r2
 4009abc:	00005906 	br	4009c24 <__udivdi3+0x2a0>
 4009ac0:	29c05636 	bltu	r5,r7,4009c1c <__udivdi3+0x298>
 4009ac4:	00bfffd4 	movui	r2,65535
 4009ac8:	11c0622e 	bgeu	r2,r7,4009c54 <__udivdi3+0x2d0>
 4009acc:	00804034 	movhi	r2,256
 4009ad0:	10bfffc4 	addi	r2,r2,-1
 4009ad4:	11c0ee36 	bltu	r2,r7,4009e90 <__udivdi3+0x50c>
 4009ad8:	00800404 	movi	r2,16
 4009adc:	3886d83a 	srl	r3,r7,r2
 4009ae0:	01010074 	movhi	r4,1025
 4009ae4:	213fc704 	addi	r4,r4,-228
 4009ae8:	20c7883a 	add	r3,r4,r3
 4009aec:	18c00003 	ldbu	r3,0(r3)
 4009af0:	05400804 	movi	r21,32
 4009af4:	1885883a 	add	r2,r3,r2
 4009af8:	a8abc83a 	sub	r21,r21,r2
 4009afc:	a800621e 	bne	r21,zero,4009c88 <__udivdi3+0x304>
 4009b00:	3c00e936 	bltu	r7,r16,4009ea8 <__udivdi3+0x524>
 4009b04:	9985403a 	cmpgeu	r2,r19,r6
 4009b08:	0007883a 	mov	r3,zero
 4009b0c:	00004506 	br	4009c24 <__udivdi3+0x2a0>
 4009b10:	3000041e 	bne	r6,zero,4009b24 <__udivdi3+0x1a0>
 4009b14:	000b883a 	mov	r5,zero
 4009b18:	01000044 	movi	r4,1
 4009b1c:	400a52c0 	call	400a52c <__udivsi3>
 4009b20:	1023883a 	mov	r17,r2
 4009b24:	00bfffd4 	movui	r2,65535
 4009b28:	14404e2e 	bgeu	r2,r17,4009c64 <__udivdi3+0x2e0>
 4009b2c:	00804034 	movhi	r2,256
 4009b30:	10bfffc4 	addi	r2,r2,-1
 4009b34:	1440d836 	bltu	r2,r17,4009e98 <__udivdi3+0x514>
 4009b38:	00800404 	movi	r2,16
 4009b3c:	8886d83a 	srl	r3,r17,r2
 4009b40:	01010074 	movhi	r4,1025
 4009b44:	213fc704 	addi	r4,r4,-228
 4009b48:	20c7883a 	add	r3,r4,r3
 4009b4c:	18c00003 	ldbu	r3,0(r3)
 4009b50:	1885883a 	add	r2,r3,r2
 4009b54:	00c00804 	movi	r3,32
 4009b58:	1887c83a 	sub	r3,r3,r2
 4009b5c:	18008f1e 	bne	r3,zero,4009d9c <__udivdi3+0x418>
 4009b60:	882ad43a 	srli	r21,r17,16
 4009b64:	8461c83a 	sub	r16,r16,r17
 4009b68:	8d3fffcc 	andi	r20,r17,65535
 4009b6c:	00c00044 	movi	r3,1
 4009b70:	8009883a 	mov	r4,r16
 4009b74:	a80b883a 	mov	r5,r21
 4009b78:	d8c00015 	stw	r3,0(sp)
 4009b7c:	400a5900 	call	400a590 <__umodsi3>
 4009b80:	8009883a 	mov	r4,r16
 4009b84:	a80b883a 	mov	r5,r21
 4009b88:	1027883a 	mov	r19,r2
 4009b8c:	400a52c0 	call	400a52c <__udivsi3>
 4009b90:	9826943a 	slli	r19,r19,16
 4009b94:	9008d43a 	srli	r4,r18,16
 4009b98:	1521383a 	mul	r16,r2,r20
 4009b9c:	102d883a 	mov	r22,r2
 4009ba0:	24c8b03a 	or	r4,r4,r19
 4009ba4:	d8c00017 	ldw	r3,0(sp)
 4009ba8:	2400052e 	bgeu	r4,r16,4009bc0 <__udivdi3+0x23c>
 4009bac:	2449883a 	add	r4,r4,r17
 4009bb0:	b0bfffc4 	addi	r2,r22,-1
 4009bb4:	24400136 	bltu	r4,r17,4009bbc <__udivdi3+0x238>
 4009bb8:	2400ca36 	bltu	r4,r16,4009ee4 <__udivdi3+0x560>
 4009bbc:	102d883a 	mov	r22,r2
 4009bc0:	2421c83a 	sub	r16,r4,r16
 4009bc4:	a80b883a 	mov	r5,r21
 4009bc8:	8009883a 	mov	r4,r16
 4009bcc:	d8c00015 	stw	r3,0(sp)
 4009bd0:	400a5900 	call	400a590 <__umodsi3>
 4009bd4:	1027883a 	mov	r19,r2
 4009bd8:	a80b883a 	mov	r5,r21
 4009bdc:	8009883a 	mov	r4,r16
 4009be0:	400a52c0 	call	400a52c <__udivsi3>
 4009be4:	9826943a 	slli	r19,r19,16
 4009be8:	1529383a 	mul	r20,r2,r20
 4009bec:	94bfffcc 	andi	r18,r18,65535
 4009bf0:	94e4b03a 	or	r18,r18,r19
 4009bf4:	d8c00017 	ldw	r3,0(sp)
 4009bf8:	9500052e 	bgeu	r18,r20,4009c10 <__udivdi3+0x28c>
 4009bfc:	8ca5883a 	add	r18,r17,r18
 4009c00:	113fffc4 	addi	r4,r2,-1
 4009c04:	94409736 	bltu	r18,r17,4009e64 <__udivdi3+0x4e0>
 4009c08:	9500962e 	bgeu	r18,r20,4009e64 <__udivdi3+0x4e0>
 4009c0c:	10bfff84 	addi	r2,r2,-2
 4009c10:	b00c943a 	slli	r6,r22,16
 4009c14:	3084b03a 	or	r2,r6,r2
 4009c18:	00000206 	br	4009c24 <__udivdi3+0x2a0>
 4009c1c:	0007883a 	mov	r3,zero
 4009c20:	0005883a 	mov	r2,zero
 4009c24:	dfc00a17 	ldw	ra,40(sp)
 4009c28:	df000917 	ldw	fp,36(sp)
 4009c2c:	ddc00817 	ldw	r23,32(sp)
 4009c30:	dd800717 	ldw	r22,28(sp)
 4009c34:	dd400617 	ldw	r21,24(sp)
 4009c38:	dd000517 	ldw	r20,20(sp)
 4009c3c:	dcc00417 	ldw	r19,16(sp)
 4009c40:	dc800317 	ldw	r18,12(sp)
 4009c44:	dc400217 	ldw	r17,8(sp)
 4009c48:	dc000117 	ldw	r16,4(sp)
 4009c4c:	dec00b04 	addi	sp,sp,44
 4009c50:	f800283a 	ret
 4009c54:	00803fc4 	movi	r2,255
 4009c58:	11c5803a 	cmpltu	r2,r2,r7
 4009c5c:	100490fa 	slli	r2,r2,3
 4009c60:	003f9e06 	br	4009adc <__ram_exceptions_end+0xfbfe9898>
 4009c64:	00803fc4 	movi	r2,255
 4009c68:	1445803a 	cmpltu	r2,r2,r17
 4009c6c:	100490fa 	slli	r2,r2,3
 4009c70:	003fb206 	br	4009b3c <__ram_exceptions_end+0xfbfe98f8>
 4009c74:	00804034 	movhi	r2,256
 4009c78:	10bfffc4 	addi	r2,r2,-1
 4009c7c:	11808836 	bltu	r2,r6,4009ea0 <__udivdi3+0x51c>
 4009c80:	00800404 	movi	r2,16
 4009c84:	003f5606 	br	40099e0 <__ram_exceptions_end+0xfbfe979c>
 4009c88:	30aed83a 	srl	r23,r6,r2
 4009c8c:	3d4e983a 	sll	r7,r7,r21
 4009c90:	80acd83a 	srl	r22,r16,r2
 4009c94:	9884d83a 	srl	r2,r19,r2
 4009c98:	3deeb03a 	or	r23,r7,r23
 4009c9c:	b824d43a 	srli	r18,r23,16
 4009ca0:	8560983a 	sll	r16,r16,r21
 4009ca4:	b009883a 	mov	r4,r22
 4009ca8:	900b883a 	mov	r5,r18
 4009cac:	3568983a 	sll	r20,r6,r21
 4009cb0:	1420b03a 	or	r16,r2,r16
 4009cb4:	400a5900 	call	400a590 <__umodsi3>
 4009cb8:	b009883a 	mov	r4,r22
 4009cbc:	900b883a 	mov	r5,r18
 4009cc0:	1023883a 	mov	r17,r2
 4009cc4:	400a52c0 	call	400a52c <__udivsi3>
 4009cc8:	8808943a 	slli	r4,r17,16
 4009ccc:	bf3fffcc 	andi	fp,r23,65535
 4009cd0:	8006d43a 	srli	r3,r16,16
 4009cd4:	e0a3383a 	mul	r17,fp,r2
 4009cd8:	100d883a 	mov	r6,r2
 4009cdc:	1906b03a 	or	r3,r3,r4
 4009ce0:	1c40042e 	bgeu	r3,r17,4009cf4 <__udivdi3+0x370>
 4009ce4:	1dc7883a 	add	r3,r3,r23
 4009ce8:	10bfffc4 	addi	r2,r2,-1
 4009cec:	1dc0752e 	bgeu	r3,r23,4009ec4 <__udivdi3+0x540>
 4009cf0:	100d883a 	mov	r6,r2
 4009cf4:	1c63c83a 	sub	r17,r3,r17
 4009cf8:	900b883a 	mov	r5,r18
 4009cfc:	8809883a 	mov	r4,r17
 4009d00:	d9800015 	stw	r6,0(sp)
 4009d04:	400a5900 	call	400a590 <__umodsi3>
 4009d08:	102d883a 	mov	r22,r2
 4009d0c:	8809883a 	mov	r4,r17
 4009d10:	900b883a 	mov	r5,r18
 4009d14:	400a52c0 	call	400a52c <__udivsi3>
 4009d18:	b02c943a 	slli	r22,r22,16
 4009d1c:	e089383a 	mul	r4,fp,r2
 4009d20:	843fffcc 	andi	r16,r16,65535
 4009d24:	85a0b03a 	or	r16,r16,r22
 4009d28:	d9800017 	ldw	r6,0(sp)
 4009d2c:	8100042e 	bgeu	r16,r4,4009d40 <__udivdi3+0x3bc>
 4009d30:	85e1883a 	add	r16,r16,r23
 4009d34:	10ffffc4 	addi	r3,r2,-1
 4009d38:	85c05e2e 	bgeu	r16,r23,4009eb4 <__udivdi3+0x530>
 4009d3c:	1805883a 	mov	r2,r3
 4009d40:	300c943a 	slli	r6,r6,16
 4009d44:	a17fffcc 	andi	r5,r20,65535
 4009d48:	a028d43a 	srli	r20,r20,16
 4009d4c:	3084b03a 	or	r2,r6,r2
 4009d50:	10ffffcc 	andi	r3,r2,65535
 4009d54:	100cd43a 	srli	r6,r2,16
 4009d58:	194f383a 	mul	r7,r3,r5
 4009d5c:	1d07383a 	mul	r3,r3,r20
 4009d60:	314b383a 	mul	r5,r6,r5
 4009d64:	3810d43a 	srli	r8,r7,16
 4009d68:	8121c83a 	sub	r16,r16,r4
 4009d6c:	1947883a 	add	r3,r3,r5
 4009d70:	40c7883a 	add	r3,r8,r3
 4009d74:	350d383a 	mul	r6,r6,r20
 4009d78:	1940022e 	bgeu	r3,r5,4009d84 <__udivdi3+0x400>
 4009d7c:	01000074 	movhi	r4,1
 4009d80:	310d883a 	add	r6,r6,r4
 4009d84:	1828d43a 	srli	r20,r3,16
 4009d88:	a18d883a 	add	r6,r20,r6
 4009d8c:	81803e36 	bltu	r16,r6,4009e88 <__udivdi3+0x504>
 4009d90:	81803826 	beq	r16,r6,4009e74 <__udivdi3+0x4f0>
 4009d94:	0007883a 	mov	r3,zero
 4009d98:	003fa206 	br	4009c24 <__ram_exceptions_end+0xfbfe99e0>
 4009d9c:	88e2983a 	sll	r17,r17,r3
 4009da0:	80a8d83a 	srl	r20,r16,r2
 4009da4:	80e0983a 	sll	r16,r16,r3
 4009da8:	882ad43a 	srli	r21,r17,16
 4009dac:	9884d83a 	srl	r2,r19,r2
 4009db0:	a009883a 	mov	r4,r20
 4009db4:	a80b883a 	mov	r5,r21
 4009db8:	142eb03a 	or	r23,r2,r16
 4009dbc:	98e4983a 	sll	r18,r19,r3
 4009dc0:	400a5900 	call	400a590 <__umodsi3>
 4009dc4:	a009883a 	mov	r4,r20
 4009dc8:	a80b883a 	mov	r5,r21
 4009dcc:	1021883a 	mov	r16,r2
 4009dd0:	400a52c0 	call	400a52c <__udivsi3>
 4009dd4:	1039883a 	mov	fp,r2
 4009dd8:	8d3fffcc 	andi	r20,r17,65535
 4009ddc:	8020943a 	slli	r16,r16,16
 4009de0:	b804d43a 	srli	r2,r23,16
 4009de4:	a72d383a 	mul	r22,r20,fp
 4009de8:	1404b03a 	or	r2,r2,r16
 4009dec:	1580062e 	bgeu	r2,r22,4009e08 <__udivdi3+0x484>
 4009df0:	1445883a 	add	r2,r2,r17
 4009df4:	e0ffffc4 	addi	r3,fp,-1
 4009df8:	14403836 	bltu	r2,r17,4009edc <__udivdi3+0x558>
 4009dfc:	1580372e 	bgeu	r2,r22,4009edc <__udivdi3+0x558>
 4009e00:	e73fff84 	addi	fp,fp,-2
 4009e04:	1445883a 	add	r2,r2,r17
 4009e08:	15adc83a 	sub	r22,r2,r22
 4009e0c:	a80b883a 	mov	r5,r21
 4009e10:	b009883a 	mov	r4,r22
 4009e14:	400a5900 	call	400a590 <__umodsi3>
 4009e18:	1027883a 	mov	r19,r2
 4009e1c:	b009883a 	mov	r4,r22
 4009e20:	a80b883a 	mov	r5,r21
 4009e24:	400a52c0 	call	400a52c <__udivsi3>
 4009e28:	9826943a 	slli	r19,r19,16
 4009e2c:	a0a1383a 	mul	r16,r20,r2
 4009e30:	b93fffcc 	andi	r4,r23,65535
 4009e34:	24c8b03a 	or	r4,r4,r19
 4009e38:	2400062e 	bgeu	r4,r16,4009e54 <__udivdi3+0x4d0>
 4009e3c:	2449883a 	add	r4,r4,r17
 4009e40:	10ffffc4 	addi	r3,r2,-1
 4009e44:	24402336 	bltu	r4,r17,4009ed4 <__udivdi3+0x550>
 4009e48:	2400222e 	bgeu	r4,r16,4009ed4 <__udivdi3+0x550>
 4009e4c:	10bfff84 	addi	r2,r2,-2
 4009e50:	2449883a 	add	r4,r4,r17
 4009e54:	e038943a 	slli	fp,fp,16
 4009e58:	2421c83a 	sub	r16,r4,r16
 4009e5c:	e086b03a 	or	r3,fp,r2
 4009e60:	003f4306 	br	4009b70 <__ram_exceptions_end+0xfbfe992c>
 4009e64:	2005883a 	mov	r2,r4
 4009e68:	003f6906 	br	4009c10 <__ram_exceptions_end+0xfbfe99cc>
 4009e6c:	1805883a 	mov	r2,r3
 4009e70:	003f0f06 	br	4009ab0 <__ram_exceptions_end+0xfbfe986c>
 4009e74:	1806943a 	slli	r3,r3,16
 4009e78:	9d66983a 	sll	r19,r19,r21
 4009e7c:	39ffffcc 	andi	r7,r7,65535
 4009e80:	19c7883a 	add	r3,r3,r7
 4009e84:	98ffc32e 	bgeu	r19,r3,4009d94 <__ram_exceptions_end+0xfbfe9b50>
 4009e88:	10bfffc4 	addi	r2,r2,-1
 4009e8c:	003fc106 	br	4009d94 <__ram_exceptions_end+0xfbfe9b50>
 4009e90:	00800604 	movi	r2,24
 4009e94:	003f1106 	br	4009adc <__ram_exceptions_end+0xfbfe9898>
 4009e98:	00800604 	movi	r2,24
 4009e9c:	003f2706 	br	4009b3c <__ram_exceptions_end+0xfbfe98f8>
 4009ea0:	00800604 	movi	r2,24
 4009ea4:	003ece06 	br	40099e0 <__ram_exceptions_end+0xfbfe979c>
 4009ea8:	0007883a 	mov	r3,zero
 4009eac:	00800044 	movi	r2,1
 4009eb0:	003f5c06 	br	4009c24 <__ram_exceptions_end+0xfbfe99e0>
 4009eb4:	813fa12e 	bgeu	r16,r4,4009d3c <__ram_exceptions_end+0xfbfe9af8>
 4009eb8:	10bfff84 	addi	r2,r2,-2
 4009ebc:	85e1883a 	add	r16,r16,r23
 4009ec0:	003f9f06 	br	4009d40 <__ram_exceptions_end+0xfbfe9afc>
 4009ec4:	1c7f8a2e 	bgeu	r3,r17,4009cf0 <__ram_exceptions_end+0xfbfe9aac>
 4009ec8:	31bfff84 	addi	r6,r6,-2
 4009ecc:	1dc7883a 	add	r3,r3,r23
 4009ed0:	003f8806 	br	4009cf4 <__ram_exceptions_end+0xfbfe9ab0>
 4009ed4:	1805883a 	mov	r2,r3
 4009ed8:	003fde06 	br	4009e54 <__ram_exceptions_end+0xfbfe9c10>
 4009edc:	1839883a 	mov	fp,r3
 4009ee0:	003fc906 	br	4009e08 <__ram_exceptions_end+0xfbfe9bc4>
 4009ee4:	b5bfff84 	addi	r22,r22,-2
 4009ee8:	2449883a 	add	r4,r4,r17
 4009eec:	003f3406 	br	4009bc0 <__ram_exceptions_end+0xfbfe997c>
 4009ef0:	b5bfff84 	addi	r22,r22,-2
 4009ef4:	1445883a 	add	r2,r2,r17
 4009ef8:	003edb06 	br	4009a68 <__ram_exceptions_end+0xfbfe9824>

04009efc <__umoddi3>:
 4009efc:	defff404 	addi	sp,sp,-48
 4009f00:	df000a15 	stw	fp,40(sp)
 4009f04:	dc400315 	stw	r17,12(sp)
 4009f08:	dc000215 	stw	r16,8(sp)
 4009f0c:	dfc00b15 	stw	ra,44(sp)
 4009f10:	ddc00915 	stw	r23,36(sp)
 4009f14:	dd800815 	stw	r22,32(sp)
 4009f18:	dd400715 	stw	r21,28(sp)
 4009f1c:	dd000615 	stw	r20,24(sp)
 4009f20:	dcc00515 	stw	r19,20(sp)
 4009f24:	dc800415 	stw	r18,16(sp)
 4009f28:	2021883a 	mov	r16,r4
 4009f2c:	2823883a 	mov	r17,r5
 4009f30:	2839883a 	mov	fp,r5
 4009f34:	38003c1e 	bne	r7,zero,400a028 <__umoddi3+0x12c>
 4009f38:	3027883a 	mov	r19,r6
 4009f3c:	2029883a 	mov	r20,r4
 4009f40:	2980512e 	bgeu	r5,r6,400a088 <__umoddi3+0x18c>
 4009f44:	00bfffd4 	movui	r2,65535
 4009f48:	11809a36 	bltu	r2,r6,400a1b4 <__umoddi3+0x2b8>
 4009f4c:	01003fc4 	movi	r4,255
 4009f50:	2189803a 	cmpltu	r4,r4,r6
 4009f54:	200890fa 	slli	r4,r4,3
 4009f58:	3104d83a 	srl	r2,r6,r4
 4009f5c:	00c10074 	movhi	r3,1025
 4009f60:	18ffc704 	addi	r3,r3,-228
 4009f64:	1885883a 	add	r2,r3,r2
 4009f68:	10c00003 	ldbu	r3,0(r2)
 4009f6c:	00800804 	movi	r2,32
 4009f70:	1909883a 	add	r4,r3,r4
 4009f74:	1125c83a 	sub	r18,r2,r4
 4009f78:	90000526 	beq	r18,zero,4009f90 <__umoddi3+0x94>
 4009f7c:	8ca2983a 	sll	r17,r17,r18
 4009f80:	8108d83a 	srl	r4,r16,r4
 4009f84:	34a6983a 	sll	r19,r6,r18
 4009f88:	84a8983a 	sll	r20,r16,r18
 4009f8c:	2478b03a 	or	fp,r4,r17
 4009f90:	982ed43a 	srli	r23,r19,16
 4009f94:	e009883a 	mov	r4,fp
 4009f98:	9dbfffcc 	andi	r22,r19,65535
 4009f9c:	b80b883a 	mov	r5,r23
 4009fa0:	400a5900 	call	400a590 <__umodsi3>
 4009fa4:	e009883a 	mov	r4,fp
 4009fa8:	b80b883a 	mov	r5,r23
 4009fac:	102b883a 	mov	r21,r2
 4009fb0:	400a52c0 	call	400a52c <__udivsi3>
 4009fb4:	a806943a 	slli	r3,r21,16
 4009fb8:	a008d43a 	srli	r4,r20,16
 4009fbc:	b085383a 	mul	r2,r22,r2
 4009fc0:	20c8b03a 	or	r4,r4,r3
 4009fc4:	2080032e 	bgeu	r4,r2,4009fd4 <__umoddi3+0xd8>
 4009fc8:	24c9883a 	add	r4,r4,r19
 4009fcc:	24c00136 	bltu	r4,r19,4009fd4 <__umoddi3+0xd8>
 4009fd0:	20811036 	bltu	r4,r2,400a414 <__umoddi3+0x518>
 4009fd4:	20abc83a 	sub	r21,r4,r2
 4009fd8:	b80b883a 	mov	r5,r23
 4009fdc:	a809883a 	mov	r4,r21
 4009fe0:	400a5900 	call	400a590 <__umodsi3>
 4009fe4:	1023883a 	mov	r17,r2
 4009fe8:	b80b883a 	mov	r5,r23
 4009fec:	a809883a 	mov	r4,r21
 4009ff0:	400a52c0 	call	400a52c <__udivsi3>
 4009ff4:	8822943a 	slli	r17,r17,16
 4009ff8:	b085383a 	mul	r2,r22,r2
 4009ffc:	a0ffffcc 	andi	r3,r20,65535
 400a000:	1c46b03a 	or	r3,r3,r17
 400a004:	1880042e 	bgeu	r3,r2,400a018 <__umoddi3+0x11c>
 400a008:	1cc7883a 	add	r3,r3,r19
 400a00c:	1cc00236 	bltu	r3,r19,400a018 <__umoddi3+0x11c>
 400a010:	1880012e 	bgeu	r3,r2,400a018 <__umoddi3+0x11c>
 400a014:	1cc7883a 	add	r3,r3,r19
 400a018:	1885c83a 	sub	r2,r3,r2
 400a01c:	1484d83a 	srl	r2,r2,r18
 400a020:	0007883a 	mov	r3,zero
 400a024:	00004f06 	br	400a164 <__umoddi3+0x268>
 400a028:	29c04c36 	bltu	r5,r7,400a15c <__umoddi3+0x260>
 400a02c:	00bfffd4 	movui	r2,65535
 400a030:	11c0582e 	bgeu	r2,r7,400a194 <__umoddi3+0x298>
 400a034:	00804034 	movhi	r2,256
 400a038:	10bfffc4 	addi	r2,r2,-1
 400a03c:	11c0e736 	bltu	r2,r7,400a3dc <__umoddi3+0x4e0>
 400a040:	01000404 	movi	r4,16
 400a044:	3904d83a 	srl	r2,r7,r4
 400a048:	00c10074 	movhi	r3,1025
 400a04c:	18ffc704 	addi	r3,r3,-228
 400a050:	1885883a 	add	r2,r3,r2
 400a054:	14c00003 	ldbu	r19,0(r2)
 400a058:	00c00804 	movi	r3,32
 400a05c:	9927883a 	add	r19,r19,r4
 400a060:	1ce9c83a 	sub	r20,r3,r19
 400a064:	a000581e 	bne	r20,zero,400a1c8 <__umoddi3+0x2cc>
 400a068:	3c400136 	bltu	r7,r17,400a070 <__umoddi3+0x174>
 400a06c:	8180eb36 	bltu	r16,r6,400a41c <__umoddi3+0x520>
 400a070:	8185c83a 	sub	r2,r16,r6
 400a074:	89e3c83a 	sub	r17,r17,r7
 400a078:	8089803a 	cmpltu	r4,r16,r2
 400a07c:	8939c83a 	sub	fp,r17,r4
 400a080:	e007883a 	mov	r3,fp
 400a084:	00003706 	br	400a164 <__umoddi3+0x268>
 400a088:	3000041e 	bne	r6,zero,400a09c <__umoddi3+0x1a0>
 400a08c:	000b883a 	mov	r5,zero
 400a090:	01000044 	movi	r4,1
 400a094:	400a52c0 	call	400a52c <__udivsi3>
 400a098:	1027883a 	mov	r19,r2
 400a09c:	00bfffd4 	movui	r2,65535
 400a0a0:	14c0402e 	bgeu	r2,r19,400a1a4 <__umoddi3+0x2a8>
 400a0a4:	00804034 	movhi	r2,256
 400a0a8:	10bfffc4 	addi	r2,r2,-1
 400a0ac:	14c0cd36 	bltu	r2,r19,400a3e4 <__umoddi3+0x4e8>
 400a0b0:	00800404 	movi	r2,16
 400a0b4:	9886d83a 	srl	r3,r19,r2
 400a0b8:	01010074 	movhi	r4,1025
 400a0bc:	213fc704 	addi	r4,r4,-228
 400a0c0:	20c7883a 	add	r3,r4,r3
 400a0c4:	18c00003 	ldbu	r3,0(r3)
 400a0c8:	1887883a 	add	r3,r3,r2
 400a0cc:	00800804 	movi	r2,32
 400a0d0:	10e5c83a 	sub	r18,r2,r3
 400a0d4:	9000901e 	bne	r18,zero,400a318 <__umoddi3+0x41c>
 400a0d8:	982cd43a 	srli	r22,r19,16
 400a0dc:	8ce3c83a 	sub	r17,r17,r19
 400a0e0:	9d7fffcc 	andi	r21,r19,65535
 400a0e4:	b00b883a 	mov	r5,r22
 400a0e8:	8809883a 	mov	r4,r17
 400a0ec:	400a5900 	call	400a590 <__umodsi3>
 400a0f0:	8809883a 	mov	r4,r17
 400a0f4:	b00b883a 	mov	r5,r22
 400a0f8:	1021883a 	mov	r16,r2
 400a0fc:	400a52c0 	call	400a52c <__udivsi3>
 400a100:	8006943a 	slli	r3,r16,16
 400a104:	a008d43a 	srli	r4,r20,16
 400a108:	1545383a 	mul	r2,r2,r21
 400a10c:	20c8b03a 	or	r4,r4,r3
 400a110:	2080042e 	bgeu	r4,r2,400a124 <__umoddi3+0x228>
 400a114:	24c9883a 	add	r4,r4,r19
 400a118:	24c00236 	bltu	r4,r19,400a124 <__umoddi3+0x228>
 400a11c:	2080012e 	bgeu	r4,r2,400a124 <__umoddi3+0x228>
 400a120:	24c9883a 	add	r4,r4,r19
 400a124:	20a1c83a 	sub	r16,r4,r2
 400a128:	b00b883a 	mov	r5,r22
 400a12c:	8009883a 	mov	r4,r16
 400a130:	400a5900 	call	400a590 <__umodsi3>
 400a134:	1023883a 	mov	r17,r2
 400a138:	b00b883a 	mov	r5,r22
 400a13c:	8009883a 	mov	r4,r16
 400a140:	400a52c0 	call	400a52c <__udivsi3>
 400a144:	8822943a 	slli	r17,r17,16
 400a148:	1545383a 	mul	r2,r2,r21
 400a14c:	a53fffcc 	andi	r20,r20,65535
 400a150:	a446b03a 	or	r3,r20,r17
 400a154:	18bfb02e 	bgeu	r3,r2,400a018 <__ram_exceptions_end+0xfbfe9dd4>
 400a158:	003fab06 	br	400a008 <__ram_exceptions_end+0xfbfe9dc4>
 400a15c:	2005883a 	mov	r2,r4
 400a160:	2807883a 	mov	r3,r5
 400a164:	dfc00b17 	ldw	ra,44(sp)
 400a168:	df000a17 	ldw	fp,40(sp)
 400a16c:	ddc00917 	ldw	r23,36(sp)
 400a170:	dd800817 	ldw	r22,32(sp)
 400a174:	dd400717 	ldw	r21,28(sp)
 400a178:	dd000617 	ldw	r20,24(sp)
 400a17c:	dcc00517 	ldw	r19,20(sp)
 400a180:	dc800417 	ldw	r18,16(sp)
 400a184:	dc400317 	ldw	r17,12(sp)
 400a188:	dc000217 	ldw	r16,8(sp)
 400a18c:	dec00c04 	addi	sp,sp,48
 400a190:	f800283a 	ret
 400a194:	04c03fc4 	movi	r19,255
 400a198:	99c9803a 	cmpltu	r4,r19,r7
 400a19c:	200890fa 	slli	r4,r4,3
 400a1a0:	003fa806 	br	400a044 <__ram_exceptions_end+0xfbfe9e00>
 400a1a4:	00803fc4 	movi	r2,255
 400a1a8:	14c5803a 	cmpltu	r2,r2,r19
 400a1ac:	100490fa 	slli	r2,r2,3
 400a1b0:	003fc006 	br	400a0b4 <__ram_exceptions_end+0xfbfe9e70>
 400a1b4:	00804034 	movhi	r2,256
 400a1b8:	10bfffc4 	addi	r2,r2,-1
 400a1bc:	11808b36 	bltu	r2,r6,400a3ec <__umoddi3+0x4f0>
 400a1c0:	01000404 	movi	r4,16
 400a1c4:	003f6406 	br	4009f58 <__ram_exceptions_end+0xfbfe9d14>
 400a1c8:	34c4d83a 	srl	r2,r6,r19
 400a1cc:	3d0e983a 	sll	r7,r7,r20
 400a1d0:	8cf8d83a 	srl	fp,r17,r19
 400a1d4:	8d10983a 	sll	r8,r17,r20
 400a1d8:	38aab03a 	or	r21,r7,r2
 400a1dc:	a82cd43a 	srli	r22,r21,16
 400a1e0:	84e2d83a 	srl	r17,r16,r19
 400a1e4:	e009883a 	mov	r4,fp
 400a1e8:	b00b883a 	mov	r5,r22
 400a1ec:	8a22b03a 	or	r17,r17,r8
 400a1f0:	3524983a 	sll	r18,r6,r20
 400a1f4:	400a5900 	call	400a590 <__umodsi3>
 400a1f8:	e009883a 	mov	r4,fp
 400a1fc:	b00b883a 	mov	r5,r22
 400a200:	102f883a 	mov	r23,r2
 400a204:	400a52c0 	call	400a52c <__udivsi3>
 400a208:	100d883a 	mov	r6,r2
 400a20c:	b808943a 	slli	r4,r23,16
 400a210:	aa3fffcc 	andi	r8,r21,65535
 400a214:	8804d43a 	srli	r2,r17,16
 400a218:	41af383a 	mul	r23,r8,r6
 400a21c:	8520983a 	sll	r16,r16,r20
 400a220:	1104b03a 	or	r2,r2,r4
 400a224:	15c0042e 	bgeu	r2,r23,400a238 <__umoddi3+0x33c>
 400a228:	1545883a 	add	r2,r2,r21
 400a22c:	30ffffc4 	addi	r3,r6,-1
 400a230:	1540742e 	bgeu	r2,r21,400a404 <__umoddi3+0x508>
 400a234:	180d883a 	mov	r6,r3
 400a238:	15efc83a 	sub	r23,r2,r23
 400a23c:	b00b883a 	mov	r5,r22
 400a240:	b809883a 	mov	r4,r23
 400a244:	d9800115 	stw	r6,4(sp)
 400a248:	da000015 	stw	r8,0(sp)
 400a24c:	400a5900 	call	400a590 <__umodsi3>
 400a250:	b00b883a 	mov	r5,r22
 400a254:	b809883a 	mov	r4,r23
 400a258:	1039883a 	mov	fp,r2
 400a25c:	400a52c0 	call	400a52c <__udivsi3>
 400a260:	da000017 	ldw	r8,0(sp)
 400a264:	e038943a 	slli	fp,fp,16
 400a268:	100b883a 	mov	r5,r2
 400a26c:	4089383a 	mul	r4,r8,r2
 400a270:	8a3fffcc 	andi	r8,r17,65535
 400a274:	4710b03a 	or	r8,r8,fp
 400a278:	d9800117 	ldw	r6,4(sp)
 400a27c:	4100042e 	bgeu	r8,r4,400a290 <__umoddi3+0x394>
 400a280:	4551883a 	add	r8,r8,r21
 400a284:	10bfffc4 	addi	r2,r2,-1
 400a288:	45405a2e 	bgeu	r8,r21,400a3f4 <__umoddi3+0x4f8>
 400a28c:	100b883a 	mov	r5,r2
 400a290:	300c943a 	slli	r6,r6,16
 400a294:	91ffffcc 	andi	r7,r18,65535
 400a298:	9004d43a 	srli	r2,r18,16
 400a29c:	314cb03a 	or	r6,r6,r5
 400a2a0:	317fffcc 	andi	r5,r6,65535
 400a2a4:	300cd43a 	srli	r6,r6,16
 400a2a8:	29d3383a 	mul	r9,r5,r7
 400a2ac:	288b383a 	mul	r5,r5,r2
 400a2b0:	31cf383a 	mul	r7,r6,r7
 400a2b4:	4806d43a 	srli	r3,r9,16
 400a2b8:	4111c83a 	sub	r8,r8,r4
 400a2bc:	29cb883a 	add	r5,r5,r7
 400a2c0:	194b883a 	add	r5,r3,r5
 400a2c4:	3085383a 	mul	r2,r6,r2
 400a2c8:	29c0022e 	bgeu	r5,r7,400a2d4 <__umoddi3+0x3d8>
 400a2cc:	00c00074 	movhi	r3,1
 400a2d0:	10c5883a 	add	r2,r2,r3
 400a2d4:	2808d43a 	srli	r4,r5,16
 400a2d8:	280a943a 	slli	r5,r5,16
 400a2dc:	4a7fffcc 	andi	r9,r9,65535
 400a2e0:	2085883a 	add	r2,r4,r2
 400a2e4:	2a4b883a 	add	r5,r5,r9
 400a2e8:	40803636 	bltu	r8,r2,400a3c4 <__umoddi3+0x4c8>
 400a2ec:	40804d26 	beq	r8,r2,400a424 <__umoddi3+0x528>
 400a2f0:	4089c83a 	sub	r4,r8,r2
 400a2f4:	280f883a 	mov	r7,r5
 400a2f8:	81cfc83a 	sub	r7,r16,r7
 400a2fc:	81c7803a 	cmpltu	r3,r16,r7
 400a300:	20c7c83a 	sub	r3,r4,r3
 400a304:	1cc4983a 	sll	r2,r3,r19
 400a308:	3d0ed83a 	srl	r7,r7,r20
 400a30c:	1d06d83a 	srl	r3,r3,r20
 400a310:	11c4b03a 	or	r2,r2,r7
 400a314:	003f9306 	br	400a164 <__ram_exceptions_end+0xfbfe9f20>
 400a318:	9ca6983a 	sll	r19,r19,r18
 400a31c:	88e8d83a 	srl	r20,r17,r3
 400a320:	80c4d83a 	srl	r2,r16,r3
 400a324:	982cd43a 	srli	r22,r19,16
 400a328:	8ca2983a 	sll	r17,r17,r18
 400a32c:	a009883a 	mov	r4,r20
 400a330:	b00b883a 	mov	r5,r22
 400a334:	1478b03a 	or	fp,r2,r17
 400a338:	400a5900 	call	400a590 <__umodsi3>
 400a33c:	a009883a 	mov	r4,r20
 400a340:	b00b883a 	mov	r5,r22
 400a344:	1023883a 	mov	r17,r2
 400a348:	400a52c0 	call	400a52c <__udivsi3>
 400a34c:	9d7fffcc 	andi	r21,r19,65535
 400a350:	880a943a 	slli	r5,r17,16
 400a354:	e008d43a 	srli	r4,fp,16
 400a358:	a885383a 	mul	r2,r21,r2
 400a35c:	84a8983a 	sll	r20,r16,r18
 400a360:	2148b03a 	or	r4,r4,r5
 400a364:	2080042e 	bgeu	r4,r2,400a378 <__umoddi3+0x47c>
 400a368:	24c9883a 	add	r4,r4,r19
 400a36c:	24c00236 	bltu	r4,r19,400a378 <__umoddi3+0x47c>
 400a370:	2080012e 	bgeu	r4,r2,400a378 <__umoddi3+0x47c>
 400a374:	24c9883a 	add	r4,r4,r19
 400a378:	20a3c83a 	sub	r17,r4,r2
 400a37c:	b00b883a 	mov	r5,r22
 400a380:	8809883a 	mov	r4,r17
 400a384:	400a5900 	call	400a590 <__umodsi3>
 400a388:	102f883a 	mov	r23,r2
 400a38c:	8809883a 	mov	r4,r17
 400a390:	b00b883a 	mov	r5,r22
 400a394:	400a52c0 	call	400a52c <__udivsi3>
 400a398:	b82e943a 	slli	r23,r23,16
 400a39c:	a885383a 	mul	r2,r21,r2
 400a3a0:	e13fffcc 	andi	r4,fp,65535
 400a3a4:	25c8b03a 	or	r4,r4,r23
 400a3a8:	2080042e 	bgeu	r4,r2,400a3bc <__umoddi3+0x4c0>
 400a3ac:	24c9883a 	add	r4,r4,r19
 400a3b0:	24c00236 	bltu	r4,r19,400a3bc <__umoddi3+0x4c0>
 400a3b4:	2080012e 	bgeu	r4,r2,400a3bc <__umoddi3+0x4c0>
 400a3b8:	24c9883a 	add	r4,r4,r19
 400a3bc:	20a3c83a 	sub	r17,r4,r2
 400a3c0:	003f4806 	br	400a0e4 <__ram_exceptions_end+0xfbfe9ea0>
 400a3c4:	2c8fc83a 	sub	r7,r5,r18
 400a3c8:	1545c83a 	sub	r2,r2,r21
 400a3cc:	29cb803a 	cmpltu	r5,r5,r7
 400a3d0:	1145c83a 	sub	r2,r2,r5
 400a3d4:	4089c83a 	sub	r4,r8,r2
 400a3d8:	003fc706 	br	400a2f8 <__ram_exceptions_end+0xfbfea0b4>
 400a3dc:	01000604 	movi	r4,24
 400a3e0:	003f1806 	br	400a044 <__ram_exceptions_end+0xfbfe9e00>
 400a3e4:	00800604 	movi	r2,24
 400a3e8:	003f3206 	br	400a0b4 <__ram_exceptions_end+0xfbfe9e70>
 400a3ec:	01000604 	movi	r4,24
 400a3f0:	003ed906 	br	4009f58 <__ram_exceptions_end+0xfbfe9d14>
 400a3f4:	413fa52e 	bgeu	r8,r4,400a28c <__ram_exceptions_end+0xfbfea048>
 400a3f8:	297fff84 	addi	r5,r5,-2
 400a3fc:	4551883a 	add	r8,r8,r21
 400a400:	003fa306 	br	400a290 <__ram_exceptions_end+0xfbfea04c>
 400a404:	15ff8b2e 	bgeu	r2,r23,400a234 <__ram_exceptions_end+0xfbfe9ff0>
 400a408:	31bfff84 	addi	r6,r6,-2
 400a40c:	1545883a 	add	r2,r2,r21
 400a410:	003f8906 	br	400a238 <__ram_exceptions_end+0xfbfe9ff4>
 400a414:	24c9883a 	add	r4,r4,r19
 400a418:	003eee06 	br	4009fd4 <__ram_exceptions_end+0xfbfe9d90>
 400a41c:	8005883a 	mov	r2,r16
 400a420:	003f1706 	br	400a080 <__ram_exceptions_end+0xfbfe9e3c>
 400a424:	817fe736 	bltu	r16,r5,400a3c4 <__ram_exceptions_end+0xfbfea180>
 400a428:	280f883a 	mov	r7,r5
 400a42c:	0009883a 	mov	r4,zero
 400a430:	003fb106 	br	400a2f8 <__ram_exceptions_end+0xfbfea0b4>

0400a434 <__divsi3>:
 400a434:	20001b16 	blt	r4,zero,400a4a4 <__divsi3+0x70>
 400a438:	000f883a 	mov	r7,zero
 400a43c:	28001616 	blt	r5,zero,400a498 <__divsi3+0x64>
 400a440:	200d883a 	mov	r6,r4
 400a444:	29001a2e 	bgeu	r5,r4,400a4b0 <__divsi3+0x7c>
 400a448:	00800804 	movi	r2,32
 400a44c:	00c00044 	movi	r3,1
 400a450:	00000106 	br	400a458 <__divsi3+0x24>
 400a454:	10000d26 	beq	r2,zero,400a48c <__divsi3+0x58>
 400a458:	294b883a 	add	r5,r5,r5
 400a45c:	10bfffc4 	addi	r2,r2,-1
 400a460:	18c7883a 	add	r3,r3,r3
 400a464:	293ffb36 	bltu	r5,r4,400a454 <__ram_exceptions_end+0xfbfea210>
 400a468:	0005883a 	mov	r2,zero
 400a46c:	18000726 	beq	r3,zero,400a48c <__divsi3+0x58>
 400a470:	0005883a 	mov	r2,zero
 400a474:	31400236 	bltu	r6,r5,400a480 <__divsi3+0x4c>
 400a478:	314dc83a 	sub	r6,r6,r5
 400a47c:	10c4b03a 	or	r2,r2,r3
 400a480:	1806d07a 	srli	r3,r3,1
 400a484:	280ad07a 	srli	r5,r5,1
 400a488:	183ffa1e 	bne	r3,zero,400a474 <__ram_exceptions_end+0xfbfea230>
 400a48c:	38000126 	beq	r7,zero,400a494 <__divsi3+0x60>
 400a490:	0085c83a 	sub	r2,zero,r2
 400a494:	f800283a 	ret
 400a498:	014bc83a 	sub	r5,zero,r5
 400a49c:	39c0005c 	xori	r7,r7,1
 400a4a0:	003fe706 	br	400a440 <__ram_exceptions_end+0xfbfea1fc>
 400a4a4:	0109c83a 	sub	r4,zero,r4
 400a4a8:	01c00044 	movi	r7,1
 400a4ac:	003fe306 	br	400a43c <__ram_exceptions_end+0xfbfea1f8>
 400a4b0:	00c00044 	movi	r3,1
 400a4b4:	003fee06 	br	400a470 <__ram_exceptions_end+0xfbfea22c>

0400a4b8 <__modsi3>:
 400a4b8:	20001716 	blt	r4,zero,400a518 <__modsi3+0x60>
 400a4bc:	000f883a 	mov	r7,zero
 400a4c0:	2005883a 	mov	r2,r4
 400a4c4:	28001216 	blt	r5,zero,400a510 <__modsi3+0x58>
 400a4c8:	2900162e 	bgeu	r5,r4,400a524 <__modsi3+0x6c>
 400a4cc:	01800804 	movi	r6,32
 400a4d0:	00c00044 	movi	r3,1
 400a4d4:	00000106 	br	400a4dc <__modsi3+0x24>
 400a4d8:	30000a26 	beq	r6,zero,400a504 <__modsi3+0x4c>
 400a4dc:	294b883a 	add	r5,r5,r5
 400a4e0:	31bfffc4 	addi	r6,r6,-1
 400a4e4:	18c7883a 	add	r3,r3,r3
 400a4e8:	293ffb36 	bltu	r5,r4,400a4d8 <__ram_exceptions_end+0xfbfea294>
 400a4ec:	18000526 	beq	r3,zero,400a504 <__modsi3+0x4c>
 400a4f0:	1806d07a 	srli	r3,r3,1
 400a4f4:	11400136 	bltu	r2,r5,400a4fc <__modsi3+0x44>
 400a4f8:	1145c83a 	sub	r2,r2,r5
 400a4fc:	280ad07a 	srli	r5,r5,1
 400a500:	183ffb1e 	bne	r3,zero,400a4f0 <__ram_exceptions_end+0xfbfea2ac>
 400a504:	38000126 	beq	r7,zero,400a50c <__modsi3+0x54>
 400a508:	0085c83a 	sub	r2,zero,r2
 400a50c:	f800283a 	ret
 400a510:	014bc83a 	sub	r5,zero,r5
 400a514:	003fec06 	br	400a4c8 <__ram_exceptions_end+0xfbfea284>
 400a518:	0109c83a 	sub	r4,zero,r4
 400a51c:	01c00044 	movi	r7,1
 400a520:	003fe706 	br	400a4c0 <__ram_exceptions_end+0xfbfea27c>
 400a524:	00c00044 	movi	r3,1
 400a528:	003ff106 	br	400a4f0 <__ram_exceptions_end+0xfbfea2ac>

0400a52c <__udivsi3>:
 400a52c:	200d883a 	mov	r6,r4
 400a530:	2900152e 	bgeu	r5,r4,400a588 <__udivsi3+0x5c>
 400a534:	28001416 	blt	r5,zero,400a588 <__udivsi3+0x5c>
 400a538:	00800804 	movi	r2,32
 400a53c:	00c00044 	movi	r3,1
 400a540:	00000206 	br	400a54c <__udivsi3+0x20>
 400a544:	10000e26 	beq	r2,zero,400a580 <__udivsi3+0x54>
 400a548:	28000516 	blt	r5,zero,400a560 <__udivsi3+0x34>
 400a54c:	294b883a 	add	r5,r5,r5
 400a550:	10bfffc4 	addi	r2,r2,-1
 400a554:	18c7883a 	add	r3,r3,r3
 400a558:	293ffa36 	bltu	r5,r4,400a544 <__ram_exceptions_end+0xfbfea300>
 400a55c:	18000826 	beq	r3,zero,400a580 <__udivsi3+0x54>
 400a560:	0005883a 	mov	r2,zero
 400a564:	31400236 	bltu	r6,r5,400a570 <__udivsi3+0x44>
 400a568:	314dc83a 	sub	r6,r6,r5
 400a56c:	10c4b03a 	or	r2,r2,r3
 400a570:	1806d07a 	srli	r3,r3,1
 400a574:	280ad07a 	srli	r5,r5,1
 400a578:	183ffa1e 	bne	r3,zero,400a564 <__ram_exceptions_end+0xfbfea320>
 400a57c:	f800283a 	ret
 400a580:	0005883a 	mov	r2,zero
 400a584:	f800283a 	ret
 400a588:	00c00044 	movi	r3,1
 400a58c:	003ff406 	br	400a560 <__ram_exceptions_end+0xfbfea31c>

0400a590 <__umodsi3>:
 400a590:	2005883a 	mov	r2,r4
 400a594:	2900122e 	bgeu	r5,r4,400a5e0 <__umodsi3+0x50>
 400a598:	28001116 	blt	r5,zero,400a5e0 <__umodsi3+0x50>
 400a59c:	01800804 	movi	r6,32
 400a5a0:	00c00044 	movi	r3,1
 400a5a4:	00000206 	br	400a5b0 <__umodsi3+0x20>
 400a5a8:	30000c26 	beq	r6,zero,400a5dc <__umodsi3+0x4c>
 400a5ac:	28000516 	blt	r5,zero,400a5c4 <__umodsi3+0x34>
 400a5b0:	294b883a 	add	r5,r5,r5
 400a5b4:	31bfffc4 	addi	r6,r6,-1
 400a5b8:	18c7883a 	add	r3,r3,r3
 400a5bc:	293ffa36 	bltu	r5,r4,400a5a8 <__ram_exceptions_end+0xfbfea364>
 400a5c0:	18000626 	beq	r3,zero,400a5dc <__umodsi3+0x4c>
 400a5c4:	1806d07a 	srli	r3,r3,1
 400a5c8:	11400136 	bltu	r2,r5,400a5d0 <__umodsi3+0x40>
 400a5cc:	1145c83a 	sub	r2,r2,r5
 400a5d0:	280ad07a 	srli	r5,r5,1
 400a5d4:	183ffb1e 	bne	r3,zero,400a5c4 <__ram_exceptions_end+0xfbfea380>
 400a5d8:	f800283a 	ret
 400a5dc:	f800283a 	ret
 400a5e0:	00c00044 	movi	r3,1
 400a5e4:	003ff706 	br	400a5c4 <__ram_exceptions_end+0xfbfea380>

0400a5e8 <__adddf3>:
 400a5e8:	02c00434 	movhi	r11,16
 400a5ec:	5affffc4 	addi	r11,r11,-1
 400a5f0:	2806d7fa 	srli	r3,r5,31
 400a5f4:	2ad4703a 	and	r10,r5,r11
 400a5f8:	3ad2703a 	and	r9,r7,r11
 400a5fc:	3804d53a 	srli	r2,r7,20
 400a600:	3018d77a 	srli	r12,r6,29
 400a604:	280ad53a 	srli	r5,r5,20
 400a608:	501490fa 	slli	r10,r10,3
 400a60c:	2010d77a 	srli	r8,r4,29
 400a610:	481290fa 	slli	r9,r9,3
 400a614:	380ed7fa 	srli	r7,r7,31
 400a618:	defffb04 	addi	sp,sp,-20
 400a61c:	dc800215 	stw	r18,8(sp)
 400a620:	dc400115 	stw	r17,4(sp)
 400a624:	dc000015 	stw	r16,0(sp)
 400a628:	dfc00415 	stw	ra,16(sp)
 400a62c:	dcc00315 	stw	r19,12(sp)
 400a630:	1c803fcc 	andi	r18,r3,255
 400a634:	2c01ffcc 	andi	r16,r5,2047
 400a638:	5210b03a 	or	r8,r10,r8
 400a63c:	202290fa 	slli	r17,r4,3
 400a640:	1081ffcc 	andi	r2,r2,2047
 400a644:	4b12b03a 	or	r9,r9,r12
 400a648:	300c90fa 	slli	r6,r6,3
 400a64c:	91c07526 	beq	r18,r7,400a824 <__adddf3+0x23c>
 400a650:	8087c83a 	sub	r3,r16,r2
 400a654:	00c0ab0e 	bge	zero,r3,400a904 <__adddf3+0x31c>
 400a658:	10002a1e 	bne	r2,zero,400a704 <__adddf3+0x11c>
 400a65c:	4984b03a 	or	r2,r9,r6
 400a660:	1000961e 	bne	r2,zero,400a8bc <__adddf3+0x2d4>
 400a664:	888001cc 	andi	r2,r17,7
 400a668:	10000726 	beq	r2,zero,400a688 <__adddf3+0xa0>
 400a66c:	888003cc 	andi	r2,r17,15
 400a670:	00c00104 	movi	r3,4
 400a674:	10c00426 	beq	r2,r3,400a688 <__adddf3+0xa0>
 400a678:	88c7883a 	add	r3,r17,r3
 400a67c:	1c63803a 	cmpltu	r17,r3,r17
 400a680:	4451883a 	add	r8,r8,r17
 400a684:	1823883a 	mov	r17,r3
 400a688:	4080202c 	andhi	r2,r8,128
 400a68c:	10005926 	beq	r2,zero,400a7f4 <__adddf3+0x20c>
 400a690:	84000044 	addi	r16,r16,1
 400a694:	0081ffc4 	movi	r2,2047
 400a698:	8080ba26 	beq	r16,r2,400a984 <__adddf3+0x39c>
 400a69c:	00bfe034 	movhi	r2,65408
 400a6a0:	10bfffc4 	addi	r2,r2,-1
 400a6a4:	4090703a 	and	r8,r8,r2
 400a6a8:	4004977a 	slli	r2,r8,29
 400a6ac:	4010927a 	slli	r8,r8,9
 400a6b0:	8822d0fa 	srli	r17,r17,3
 400a6b4:	8401ffcc 	andi	r16,r16,2047
 400a6b8:	4010d33a 	srli	r8,r8,12
 400a6bc:	9007883a 	mov	r3,r18
 400a6c0:	1444b03a 	or	r2,r2,r17
 400a6c4:	8401ffcc 	andi	r16,r16,2047
 400a6c8:	8020953a 	slli	r16,r16,20
 400a6cc:	18c03fcc 	andi	r3,r3,255
 400a6d0:	01000434 	movhi	r4,16
 400a6d4:	213fffc4 	addi	r4,r4,-1
 400a6d8:	180697fa 	slli	r3,r3,31
 400a6dc:	4110703a 	and	r8,r8,r4
 400a6e0:	4410b03a 	or	r8,r8,r16
 400a6e4:	40c6b03a 	or	r3,r8,r3
 400a6e8:	dfc00417 	ldw	ra,16(sp)
 400a6ec:	dcc00317 	ldw	r19,12(sp)
 400a6f0:	dc800217 	ldw	r18,8(sp)
 400a6f4:	dc400117 	ldw	r17,4(sp)
 400a6f8:	dc000017 	ldw	r16,0(sp)
 400a6fc:	dec00504 	addi	sp,sp,20
 400a700:	f800283a 	ret
 400a704:	0081ffc4 	movi	r2,2047
 400a708:	80bfd626 	beq	r16,r2,400a664 <__ram_exceptions_end+0xfbfea420>
 400a70c:	4a402034 	orhi	r9,r9,128
 400a710:	00800e04 	movi	r2,56
 400a714:	10c09f16 	blt	r2,r3,400a994 <__adddf3+0x3ac>
 400a718:	008007c4 	movi	r2,31
 400a71c:	10c0c216 	blt	r2,r3,400aa28 <__adddf3+0x440>
 400a720:	00800804 	movi	r2,32
 400a724:	10c5c83a 	sub	r2,r2,r3
 400a728:	488a983a 	sll	r5,r9,r2
 400a72c:	30c8d83a 	srl	r4,r6,r3
 400a730:	3084983a 	sll	r2,r6,r2
 400a734:	48c6d83a 	srl	r3,r9,r3
 400a738:	290cb03a 	or	r6,r5,r4
 400a73c:	1004c03a 	cmpne	r2,r2,zero
 400a740:	308cb03a 	or	r6,r6,r2
 400a744:	898dc83a 	sub	r6,r17,r6
 400a748:	89a3803a 	cmpltu	r17,r17,r6
 400a74c:	40d1c83a 	sub	r8,r8,r3
 400a750:	4451c83a 	sub	r8,r8,r17
 400a754:	3023883a 	mov	r17,r6
 400a758:	4080202c 	andhi	r2,r8,128
 400a75c:	10002326 	beq	r2,zero,400a7ec <__adddf3+0x204>
 400a760:	04c02034 	movhi	r19,128
 400a764:	9cffffc4 	addi	r19,r19,-1
 400a768:	44e6703a 	and	r19,r8,r19
 400a76c:	98007626 	beq	r19,zero,400a948 <__adddf3+0x360>
 400a770:	9809883a 	mov	r4,r19
 400a774:	400cbec0 	call	400cbec <__clzsi2>
 400a778:	10fffe04 	addi	r3,r2,-8
 400a77c:	010007c4 	movi	r4,31
 400a780:	20c07716 	blt	r4,r3,400a960 <__adddf3+0x378>
 400a784:	00800804 	movi	r2,32
 400a788:	10c5c83a 	sub	r2,r2,r3
 400a78c:	8884d83a 	srl	r2,r17,r2
 400a790:	98d0983a 	sll	r8,r19,r3
 400a794:	88e2983a 	sll	r17,r17,r3
 400a798:	1204b03a 	or	r2,r2,r8
 400a79c:	1c007416 	blt	r3,r16,400a970 <__adddf3+0x388>
 400a7a0:	1c21c83a 	sub	r16,r3,r16
 400a7a4:	82000044 	addi	r8,r16,1
 400a7a8:	00c007c4 	movi	r3,31
 400a7ac:	1a009116 	blt	r3,r8,400a9f4 <__adddf3+0x40c>
 400a7b0:	00c00804 	movi	r3,32
 400a7b4:	1a07c83a 	sub	r3,r3,r8
 400a7b8:	8a08d83a 	srl	r4,r17,r8
 400a7bc:	88e2983a 	sll	r17,r17,r3
 400a7c0:	10c6983a 	sll	r3,r2,r3
 400a7c4:	1210d83a 	srl	r8,r2,r8
 400a7c8:	8804c03a 	cmpne	r2,r17,zero
 400a7cc:	1906b03a 	or	r3,r3,r4
 400a7d0:	18a2b03a 	or	r17,r3,r2
 400a7d4:	0021883a 	mov	r16,zero
 400a7d8:	003fa206 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400a7dc:	1890b03a 	or	r8,r3,r2
 400a7e0:	40017d26 	beq	r8,zero,400add8 <__adddf3+0x7f0>
 400a7e4:	1011883a 	mov	r8,r2
 400a7e8:	1823883a 	mov	r17,r3
 400a7ec:	888001cc 	andi	r2,r17,7
 400a7f0:	103f9e1e 	bne	r2,zero,400a66c <__ram_exceptions_end+0xfbfea428>
 400a7f4:	4004977a 	slli	r2,r8,29
 400a7f8:	8822d0fa 	srli	r17,r17,3
 400a7fc:	4010d0fa 	srli	r8,r8,3
 400a800:	9007883a 	mov	r3,r18
 400a804:	1444b03a 	or	r2,r2,r17
 400a808:	0101ffc4 	movi	r4,2047
 400a80c:	81002426 	beq	r16,r4,400a8a0 <__adddf3+0x2b8>
 400a810:	8120703a 	and	r16,r16,r4
 400a814:	01000434 	movhi	r4,16
 400a818:	213fffc4 	addi	r4,r4,-1
 400a81c:	4110703a 	and	r8,r8,r4
 400a820:	003fa806 	br	400a6c4 <__ram_exceptions_end+0xfbfea480>
 400a824:	8089c83a 	sub	r4,r16,r2
 400a828:	01005e0e 	bge	zero,r4,400a9a4 <__adddf3+0x3bc>
 400a82c:	10002b26 	beq	r2,zero,400a8dc <__adddf3+0x2f4>
 400a830:	0081ffc4 	movi	r2,2047
 400a834:	80bf8b26 	beq	r16,r2,400a664 <__ram_exceptions_end+0xfbfea420>
 400a838:	4a402034 	orhi	r9,r9,128
 400a83c:	00800e04 	movi	r2,56
 400a840:	1100a40e 	bge	r2,r4,400aad4 <__adddf3+0x4ec>
 400a844:	498cb03a 	or	r6,r9,r6
 400a848:	300ac03a 	cmpne	r5,r6,zero
 400a84c:	0013883a 	mov	r9,zero
 400a850:	2c4b883a 	add	r5,r5,r17
 400a854:	2c63803a 	cmpltu	r17,r5,r17
 400a858:	4a11883a 	add	r8,r9,r8
 400a85c:	8a11883a 	add	r8,r17,r8
 400a860:	2823883a 	mov	r17,r5
 400a864:	4080202c 	andhi	r2,r8,128
 400a868:	103fe026 	beq	r2,zero,400a7ec <__ram_exceptions_end+0xfbfea5a8>
 400a86c:	84000044 	addi	r16,r16,1
 400a870:	0081ffc4 	movi	r2,2047
 400a874:	8080d226 	beq	r16,r2,400abc0 <__adddf3+0x5d8>
 400a878:	00bfe034 	movhi	r2,65408
 400a87c:	10bfffc4 	addi	r2,r2,-1
 400a880:	4090703a 	and	r8,r8,r2
 400a884:	880ad07a 	srli	r5,r17,1
 400a888:	400897fa 	slli	r4,r8,31
 400a88c:	88c0004c 	andi	r3,r17,1
 400a890:	28e2b03a 	or	r17,r5,r3
 400a894:	4010d07a 	srli	r8,r8,1
 400a898:	2462b03a 	or	r17,r4,r17
 400a89c:	003f7106 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400a8a0:	4088b03a 	or	r4,r8,r2
 400a8a4:	20014526 	beq	r4,zero,400adbc <__adddf3+0x7d4>
 400a8a8:	01000434 	movhi	r4,16
 400a8ac:	42000234 	orhi	r8,r8,8
 400a8b0:	213fffc4 	addi	r4,r4,-1
 400a8b4:	4110703a 	and	r8,r8,r4
 400a8b8:	003f8206 	br	400a6c4 <__ram_exceptions_end+0xfbfea480>
 400a8bc:	18ffffc4 	addi	r3,r3,-1
 400a8c0:	1800491e 	bne	r3,zero,400a9e8 <__adddf3+0x400>
 400a8c4:	898bc83a 	sub	r5,r17,r6
 400a8c8:	8963803a 	cmpltu	r17,r17,r5
 400a8cc:	4251c83a 	sub	r8,r8,r9
 400a8d0:	4451c83a 	sub	r8,r8,r17
 400a8d4:	2823883a 	mov	r17,r5
 400a8d8:	003f9f06 	br	400a758 <__ram_exceptions_end+0xfbfea514>
 400a8dc:	4984b03a 	or	r2,r9,r6
 400a8e0:	103f6026 	beq	r2,zero,400a664 <__ram_exceptions_end+0xfbfea420>
 400a8e4:	213fffc4 	addi	r4,r4,-1
 400a8e8:	2000931e 	bne	r4,zero,400ab38 <__adddf3+0x550>
 400a8ec:	898d883a 	add	r6,r17,r6
 400a8f0:	3463803a 	cmpltu	r17,r6,r17
 400a8f4:	4251883a 	add	r8,r8,r9
 400a8f8:	8a11883a 	add	r8,r17,r8
 400a8fc:	3023883a 	mov	r17,r6
 400a900:	003fd806 	br	400a864 <__ram_exceptions_end+0xfbfea620>
 400a904:	1800541e 	bne	r3,zero,400aa58 <__adddf3+0x470>
 400a908:	80800044 	addi	r2,r16,1
 400a90c:	1081ffcc 	andi	r2,r2,2047
 400a910:	00c00044 	movi	r3,1
 400a914:	1880a00e 	bge	r3,r2,400ab98 <__adddf3+0x5b0>
 400a918:	8989c83a 	sub	r4,r17,r6
 400a91c:	8905803a 	cmpltu	r2,r17,r4
 400a920:	4267c83a 	sub	r19,r8,r9
 400a924:	98a7c83a 	sub	r19,r19,r2
 400a928:	9880202c 	andhi	r2,r19,128
 400a92c:	10006326 	beq	r2,zero,400aabc <__adddf3+0x4d4>
 400a930:	3463c83a 	sub	r17,r6,r17
 400a934:	4a07c83a 	sub	r3,r9,r8
 400a938:	344d803a 	cmpltu	r6,r6,r17
 400a93c:	19a7c83a 	sub	r19,r3,r6
 400a940:	3825883a 	mov	r18,r7
 400a944:	983f8a1e 	bne	r19,zero,400a770 <__ram_exceptions_end+0xfbfea52c>
 400a948:	8809883a 	mov	r4,r17
 400a94c:	400cbec0 	call	400cbec <__clzsi2>
 400a950:	10800804 	addi	r2,r2,32
 400a954:	10fffe04 	addi	r3,r2,-8
 400a958:	010007c4 	movi	r4,31
 400a95c:	20ff890e 	bge	r4,r3,400a784 <__ram_exceptions_end+0xfbfea540>
 400a960:	10bff604 	addi	r2,r2,-40
 400a964:	8884983a 	sll	r2,r17,r2
 400a968:	0023883a 	mov	r17,zero
 400a96c:	1c3f8c0e 	bge	r3,r16,400a7a0 <__ram_exceptions_end+0xfbfea55c>
 400a970:	023fe034 	movhi	r8,65408
 400a974:	423fffc4 	addi	r8,r8,-1
 400a978:	80e1c83a 	sub	r16,r16,r3
 400a97c:	1210703a 	and	r8,r2,r8
 400a980:	003f3806 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400a984:	9007883a 	mov	r3,r18
 400a988:	0011883a 	mov	r8,zero
 400a98c:	0005883a 	mov	r2,zero
 400a990:	003f4c06 	br	400a6c4 <__ram_exceptions_end+0xfbfea480>
 400a994:	498cb03a 	or	r6,r9,r6
 400a998:	300cc03a 	cmpne	r6,r6,zero
 400a99c:	0007883a 	mov	r3,zero
 400a9a0:	003f6806 	br	400a744 <__ram_exceptions_end+0xfbfea500>
 400a9a4:	20009c1e 	bne	r4,zero,400ac18 <__adddf3+0x630>
 400a9a8:	80800044 	addi	r2,r16,1
 400a9ac:	1141ffcc 	andi	r5,r2,2047
 400a9b0:	01000044 	movi	r4,1
 400a9b4:	2140670e 	bge	r4,r5,400ab54 <__adddf3+0x56c>
 400a9b8:	0101ffc4 	movi	r4,2047
 400a9bc:	11007f26 	beq	r2,r4,400abbc <__adddf3+0x5d4>
 400a9c0:	898d883a 	add	r6,r17,r6
 400a9c4:	4247883a 	add	r3,r8,r9
 400a9c8:	3451803a 	cmpltu	r8,r6,r17
 400a9cc:	40d1883a 	add	r8,r8,r3
 400a9d0:	402297fa 	slli	r17,r8,31
 400a9d4:	300cd07a 	srli	r6,r6,1
 400a9d8:	4010d07a 	srli	r8,r8,1
 400a9dc:	1021883a 	mov	r16,r2
 400a9e0:	89a2b03a 	or	r17,r17,r6
 400a9e4:	003f1f06 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400a9e8:	0081ffc4 	movi	r2,2047
 400a9ec:	80bf481e 	bne	r16,r2,400a710 <__ram_exceptions_end+0xfbfea4cc>
 400a9f0:	003f1c06 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400a9f4:	843ff844 	addi	r16,r16,-31
 400a9f8:	01000804 	movi	r4,32
 400a9fc:	1406d83a 	srl	r3,r2,r16
 400aa00:	41005026 	beq	r8,r4,400ab44 <__adddf3+0x55c>
 400aa04:	01001004 	movi	r4,64
 400aa08:	2211c83a 	sub	r8,r4,r8
 400aa0c:	1204983a 	sll	r2,r2,r8
 400aa10:	88a2b03a 	or	r17,r17,r2
 400aa14:	8822c03a 	cmpne	r17,r17,zero
 400aa18:	1c62b03a 	or	r17,r3,r17
 400aa1c:	0011883a 	mov	r8,zero
 400aa20:	0021883a 	mov	r16,zero
 400aa24:	003f7106 	br	400a7ec <__ram_exceptions_end+0xfbfea5a8>
 400aa28:	193ff804 	addi	r4,r3,-32
 400aa2c:	00800804 	movi	r2,32
 400aa30:	4908d83a 	srl	r4,r9,r4
 400aa34:	18804526 	beq	r3,r2,400ab4c <__adddf3+0x564>
 400aa38:	00801004 	movi	r2,64
 400aa3c:	10c5c83a 	sub	r2,r2,r3
 400aa40:	4886983a 	sll	r3,r9,r2
 400aa44:	198cb03a 	or	r6,r3,r6
 400aa48:	300cc03a 	cmpne	r6,r6,zero
 400aa4c:	218cb03a 	or	r6,r4,r6
 400aa50:	0007883a 	mov	r3,zero
 400aa54:	003f3b06 	br	400a744 <__ram_exceptions_end+0xfbfea500>
 400aa58:	80002a26 	beq	r16,zero,400ab04 <__adddf3+0x51c>
 400aa5c:	0101ffc4 	movi	r4,2047
 400aa60:	11006826 	beq	r2,r4,400ac04 <__adddf3+0x61c>
 400aa64:	00c7c83a 	sub	r3,zero,r3
 400aa68:	42002034 	orhi	r8,r8,128
 400aa6c:	01000e04 	movi	r4,56
 400aa70:	20c07c16 	blt	r4,r3,400ac64 <__adddf3+0x67c>
 400aa74:	010007c4 	movi	r4,31
 400aa78:	20c0da16 	blt	r4,r3,400ade4 <__adddf3+0x7fc>
 400aa7c:	01000804 	movi	r4,32
 400aa80:	20c9c83a 	sub	r4,r4,r3
 400aa84:	4114983a 	sll	r10,r8,r4
 400aa88:	88cad83a 	srl	r5,r17,r3
 400aa8c:	8908983a 	sll	r4,r17,r4
 400aa90:	40c6d83a 	srl	r3,r8,r3
 400aa94:	5162b03a 	or	r17,r10,r5
 400aa98:	2008c03a 	cmpne	r4,r4,zero
 400aa9c:	8922b03a 	or	r17,r17,r4
 400aaa0:	3463c83a 	sub	r17,r6,r17
 400aaa4:	48c7c83a 	sub	r3,r9,r3
 400aaa8:	344d803a 	cmpltu	r6,r6,r17
 400aaac:	1991c83a 	sub	r8,r3,r6
 400aab0:	1021883a 	mov	r16,r2
 400aab4:	3825883a 	mov	r18,r7
 400aab8:	003f2706 	br	400a758 <__ram_exceptions_end+0xfbfea514>
 400aabc:	24d0b03a 	or	r8,r4,r19
 400aac0:	40001b1e 	bne	r8,zero,400ab30 <__adddf3+0x548>
 400aac4:	0005883a 	mov	r2,zero
 400aac8:	0007883a 	mov	r3,zero
 400aacc:	0021883a 	mov	r16,zero
 400aad0:	003f4d06 	br	400a808 <__ram_exceptions_end+0xfbfea5c4>
 400aad4:	008007c4 	movi	r2,31
 400aad8:	11003c16 	blt	r2,r4,400abcc <__adddf3+0x5e4>
 400aadc:	00800804 	movi	r2,32
 400aae0:	1105c83a 	sub	r2,r2,r4
 400aae4:	488e983a 	sll	r7,r9,r2
 400aae8:	310ad83a 	srl	r5,r6,r4
 400aaec:	3084983a 	sll	r2,r6,r2
 400aaf0:	4912d83a 	srl	r9,r9,r4
 400aaf4:	394ab03a 	or	r5,r7,r5
 400aaf8:	1004c03a 	cmpne	r2,r2,zero
 400aafc:	288ab03a 	or	r5,r5,r2
 400ab00:	003f5306 	br	400a850 <__ram_exceptions_end+0xfbfea60c>
 400ab04:	4448b03a 	or	r4,r8,r17
 400ab08:	20003e26 	beq	r4,zero,400ac04 <__adddf3+0x61c>
 400ab0c:	00c6303a 	nor	r3,zero,r3
 400ab10:	18003a1e 	bne	r3,zero,400abfc <__adddf3+0x614>
 400ab14:	3463c83a 	sub	r17,r6,r17
 400ab18:	4a07c83a 	sub	r3,r9,r8
 400ab1c:	344d803a 	cmpltu	r6,r6,r17
 400ab20:	1991c83a 	sub	r8,r3,r6
 400ab24:	1021883a 	mov	r16,r2
 400ab28:	3825883a 	mov	r18,r7
 400ab2c:	003f0a06 	br	400a758 <__ram_exceptions_end+0xfbfea514>
 400ab30:	2023883a 	mov	r17,r4
 400ab34:	003f0d06 	br	400a76c <__ram_exceptions_end+0xfbfea528>
 400ab38:	0081ffc4 	movi	r2,2047
 400ab3c:	80bf3f1e 	bne	r16,r2,400a83c <__ram_exceptions_end+0xfbfea5f8>
 400ab40:	003ec806 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ab44:	0005883a 	mov	r2,zero
 400ab48:	003fb106 	br	400aa10 <__ram_exceptions_end+0xfbfea7cc>
 400ab4c:	0007883a 	mov	r3,zero
 400ab50:	003fbc06 	br	400aa44 <__ram_exceptions_end+0xfbfea800>
 400ab54:	4444b03a 	or	r2,r8,r17
 400ab58:	8000871e 	bne	r16,zero,400ad78 <__adddf3+0x790>
 400ab5c:	1000ba26 	beq	r2,zero,400ae48 <__adddf3+0x860>
 400ab60:	4984b03a 	or	r2,r9,r6
 400ab64:	103ebf26 	beq	r2,zero,400a664 <__ram_exceptions_end+0xfbfea420>
 400ab68:	8985883a 	add	r2,r17,r6
 400ab6c:	4247883a 	add	r3,r8,r9
 400ab70:	1451803a 	cmpltu	r8,r2,r17
 400ab74:	40d1883a 	add	r8,r8,r3
 400ab78:	40c0202c 	andhi	r3,r8,128
 400ab7c:	1023883a 	mov	r17,r2
 400ab80:	183f1a26 	beq	r3,zero,400a7ec <__ram_exceptions_end+0xfbfea5a8>
 400ab84:	00bfe034 	movhi	r2,65408
 400ab88:	10bfffc4 	addi	r2,r2,-1
 400ab8c:	2021883a 	mov	r16,r4
 400ab90:	4090703a 	and	r8,r8,r2
 400ab94:	003eb306 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ab98:	4444b03a 	or	r2,r8,r17
 400ab9c:	8000291e 	bne	r16,zero,400ac44 <__adddf3+0x65c>
 400aba0:	10004b1e 	bne	r2,zero,400acd0 <__adddf3+0x6e8>
 400aba4:	4990b03a 	or	r8,r9,r6
 400aba8:	40008b26 	beq	r8,zero,400add8 <__adddf3+0x7f0>
 400abac:	4811883a 	mov	r8,r9
 400abb0:	3023883a 	mov	r17,r6
 400abb4:	3825883a 	mov	r18,r7
 400abb8:	003eaa06 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400abbc:	1021883a 	mov	r16,r2
 400abc0:	0011883a 	mov	r8,zero
 400abc4:	0005883a 	mov	r2,zero
 400abc8:	003f0f06 	br	400a808 <__ram_exceptions_end+0xfbfea5c4>
 400abcc:	217ff804 	addi	r5,r4,-32
 400abd0:	00800804 	movi	r2,32
 400abd4:	494ad83a 	srl	r5,r9,r5
 400abd8:	20807d26 	beq	r4,r2,400add0 <__adddf3+0x7e8>
 400abdc:	00801004 	movi	r2,64
 400abe0:	1109c83a 	sub	r4,r2,r4
 400abe4:	4912983a 	sll	r9,r9,r4
 400abe8:	498cb03a 	or	r6,r9,r6
 400abec:	300cc03a 	cmpne	r6,r6,zero
 400abf0:	298ab03a 	or	r5,r5,r6
 400abf4:	0013883a 	mov	r9,zero
 400abf8:	003f1506 	br	400a850 <__ram_exceptions_end+0xfbfea60c>
 400abfc:	0101ffc4 	movi	r4,2047
 400ac00:	113f9a1e 	bne	r2,r4,400aa6c <__ram_exceptions_end+0xfbfea828>
 400ac04:	4811883a 	mov	r8,r9
 400ac08:	3023883a 	mov	r17,r6
 400ac0c:	1021883a 	mov	r16,r2
 400ac10:	3825883a 	mov	r18,r7
 400ac14:	003e9306 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ac18:	8000161e 	bne	r16,zero,400ac74 <__adddf3+0x68c>
 400ac1c:	444ab03a 	or	r5,r8,r17
 400ac20:	28005126 	beq	r5,zero,400ad68 <__adddf3+0x780>
 400ac24:	0108303a 	nor	r4,zero,r4
 400ac28:	20004d1e 	bne	r4,zero,400ad60 <__adddf3+0x778>
 400ac2c:	89a3883a 	add	r17,r17,r6
 400ac30:	4253883a 	add	r9,r8,r9
 400ac34:	898d803a 	cmpltu	r6,r17,r6
 400ac38:	3251883a 	add	r8,r6,r9
 400ac3c:	1021883a 	mov	r16,r2
 400ac40:	003f0806 	br	400a864 <__ram_exceptions_end+0xfbfea620>
 400ac44:	1000301e 	bne	r2,zero,400ad08 <__adddf3+0x720>
 400ac48:	4984b03a 	or	r2,r9,r6
 400ac4c:	10007126 	beq	r2,zero,400ae14 <__adddf3+0x82c>
 400ac50:	4811883a 	mov	r8,r9
 400ac54:	3023883a 	mov	r17,r6
 400ac58:	3825883a 	mov	r18,r7
 400ac5c:	0401ffc4 	movi	r16,2047
 400ac60:	003e8006 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ac64:	4462b03a 	or	r17,r8,r17
 400ac68:	8822c03a 	cmpne	r17,r17,zero
 400ac6c:	0007883a 	mov	r3,zero
 400ac70:	003f8b06 	br	400aaa0 <__ram_exceptions_end+0xfbfea85c>
 400ac74:	0141ffc4 	movi	r5,2047
 400ac78:	11403b26 	beq	r2,r5,400ad68 <__adddf3+0x780>
 400ac7c:	0109c83a 	sub	r4,zero,r4
 400ac80:	42002034 	orhi	r8,r8,128
 400ac84:	01400e04 	movi	r5,56
 400ac88:	29006716 	blt	r5,r4,400ae28 <__adddf3+0x840>
 400ac8c:	014007c4 	movi	r5,31
 400ac90:	29007016 	blt	r5,r4,400ae54 <__adddf3+0x86c>
 400ac94:	01400804 	movi	r5,32
 400ac98:	290bc83a 	sub	r5,r5,r4
 400ac9c:	4154983a 	sll	r10,r8,r5
 400aca0:	890ed83a 	srl	r7,r17,r4
 400aca4:	894a983a 	sll	r5,r17,r5
 400aca8:	4108d83a 	srl	r4,r8,r4
 400acac:	51e2b03a 	or	r17,r10,r7
 400acb0:	280ac03a 	cmpne	r5,r5,zero
 400acb4:	8962b03a 	or	r17,r17,r5
 400acb8:	89a3883a 	add	r17,r17,r6
 400acbc:	2253883a 	add	r9,r4,r9
 400acc0:	898d803a 	cmpltu	r6,r17,r6
 400acc4:	3251883a 	add	r8,r6,r9
 400acc8:	1021883a 	mov	r16,r2
 400accc:	003ee506 	br	400a864 <__ram_exceptions_end+0xfbfea620>
 400acd0:	4984b03a 	or	r2,r9,r6
 400acd4:	103e6326 	beq	r2,zero,400a664 <__ram_exceptions_end+0xfbfea420>
 400acd8:	8987c83a 	sub	r3,r17,r6
 400acdc:	88c9803a 	cmpltu	r4,r17,r3
 400ace0:	4245c83a 	sub	r2,r8,r9
 400ace4:	1105c83a 	sub	r2,r2,r4
 400ace8:	1100202c 	andhi	r4,r2,128
 400acec:	203ebb26 	beq	r4,zero,400a7dc <__ram_exceptions_end+0xfbfea598>
 400acf0:	3463c83a 	sub	r17,r6,r17
 400acf4:	4a07c83a 	sub	r3,r9,r8
 400acf8:	344d803a 	cmpltu	r6,r6,r17
 400acfc:	1991c83a 	sub	r8,r3,r6
 400ad00:	3825883a 	mov	r18,r7
 400ad04:	003e5706 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ad08:	4984b03a 	or	r2,r9,r6
 400ad0c:	10002e26 	beq	r2,zero,400adc8 <__adddf3+0x7e0>
 400ad10:	4004d0fa 	srli	r2,r8,3
 400ad14:	8822d0fa 	srli	r17,r17,3
 400ad18:	4010977a 	slli	r8,r8,29
 400ad1c:	10c0022c 	andhi	r3,r2,8
 400ad20:	4462b03a 	or	r17,r8,r17
 400ad24:	18000826 	beq	r3,zero,400ad48 <__adddf3+0x760>
 400ad28:	4808d0fa 	srli	r4,r9,3
 400ad2c:	20c0022c 	andhi	r3,r4,8
 400ad30:	1800051e 	bne	r3,zero,400ad48 <__adddf3+0x760>
 400ad34:	300cd0fa 	srli	r6,r6,3
 400ad38:	4806977a 	slli	r3,r9,29
 400ad3c:	2005883a 	mov	r2,r4
 400ad40:	3825883a 	mov	r18,r7
 400ad44:	19a2b03a 	or	r17,r3,r6
 400ad48:	8810d77a 	srli	r8,r17,29
 400ad4c:	100490fa 	slli	r2,r2,3
 400ad50:	882290fa 	slli	r17,r17,3
 400ad54:	0401ffc4 	movi	r16,2047
 400ad58:	4090b03a 	or	r8,r8,r2
 400ad5c:	003e4106 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ad60:	0141ffc4 	movi	r5,2047
 400ad64:	117fc71e 	bne	r2,r5,400ac84 <__ram_exceptions_end+0xfbfeaa40>
 400ad68:	4811883a 	mov	r8,r9
 400ad6c:	3023883a 	mov	r17,r6
 400ad70:	1021883a 	mov	r16,r2
 400ad74:	003e3b06 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ad78:	10002f26 	beq	r2,zero,400ae38 <__adddf3+0x850>
 400ad7c:	4984b03a 	or	r2,r9,r6
 400ad80:	10001126 	beq	r2,zero,400adc8 <__adddf3+0x7e0>
 400ad84:	4004d0fa 	srli	r2,r8,3
 400ad88:	8822d0fa 	srli	r17,r17,3
 400ad8c:	4010977a 	slli	r8,r8,29
 400ad90:	10c0022c 	andhi	r3,r2,8
 400ad94:	4462b03a 	or	r17,r8,r17
 400ad98:	183feb26 	beq	r3,zero,400ad48 <__ram_exceptions_end+0xfbfeab04>
 400ad9c:	4808d0fa 	srli	r4,r9,3
 400ada0:	20c0022c 	andhi	r3,r4,8
 400ada4:	183fe81e 	bne	r3,zero,400ad48 <__ram_exceptions_end+0xfbfeab04>
 400ada8:	300cd0fa 	srli	r6,r6,3
 400adac:	4806977a 	slli	r3,r9,29
 400adb0:	2005883a 	mov	r2,r4
 400adb4:	19a2b03a 	or	r17,r3,r6
 400adb8:	003fe306 	br	400ad48 <__ram_exceptions_end+0xfbfeab04>
 400adbc:	0011883a 	mov	r8,zero
 400adc0:	0005883a 	mov	r2,zero
 400adc4:	003e3f06 	br	400a6c4 <__ram_exceptions_end+0xfbfea480>
 400adc8:	0401ffc4 	movi	r16,2047
 400adcc:	003e2506 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400add0:	0013883a 	mov	r9,zero
 400add4:	003f8406 	br	400abe8 <__ram_exceptions_end+0xfbfea9a4>
 400add8:	0005883a 	mov	r2,zero
 400addc:	0007883a 	mov	r3,zero
 400ade0:	003e8906 	br	400a808 <__ram_exceptions_end+0xfbfea5c4>
 400ade4:	197ff804 	addi	r5,r3,-32
 400ade8:	01000804 	movi	r4,32
 400adec:	414ad83a 	srl	r5,r8,r5
 400adf0:	19002426 	beq	r3,r4,400ae84 <__adddf3+0x89c>
 400adf4:	01001004 	movi	r4,64
 400adf8:	20c7c83a 	sub	r3,r4,r3
 400adfc:	40c6983a 	sll	r3,r8,r3
 400ae00:	1c46b03a 	or	r3,r3,r17
 400ae04:	1806c03a 	cmpne	r3,r3,zero
 400ae08:	28e2b03a 	or	r17,r5,r3
 400ae0c:	0007883a 	mov	r3,zero
 400ae10:	003f2306 	br	400aaa0 <__ram_exceptions_end+0xfbfea85c>
 400ae14:	0007883a 	mov	r3,zero
 400ae18:	5811883a 	mov	r8,r11
 400ae1c:	00bfffc4 	movi	r2,-1
 400ae20:	0401ffc4 	movi	r16,2047
 400ae24:	003e7806 	br	400a808 <__ram_exceptions_end+0xfbfea5c4>
 400ae28:	4462b03a 	or	r17,r8,r17
 400ae2c:	8822c03a 	cmpne	r17,r17,zero
 400ae30:	0009883a 	mov	r4,zero
 400ae34:	003fa006 	br	400acb8 <__ram_exceptions_end+0xfbfeaa74>
 400ae38:	4811883a 	mov	r8,r9
 400ae3c:	3023883a 	mov	r17,r6
 400ae40:	0401ffc4 	movi	r16,2047
 400ae44:	003e0706 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ae48:	4811883a 	mov	r8,r9
 400ae4c:	3023883a 	mov	r17,r6
 400ae50:	003e0406 	br	400a664 <__ram_exceptions_end+0xfbfea420>
 400ae54:	21fff804 	addi	r7,r4,-32
 400ae58:	01400804 	movi	r5,32
 400ae5c:	41ced83a 	srl	r7,r8,r7
 400ae60:	21400a26 	beq	r4,r5,400ae8c <__adddf3+0x8a4>
 400ae64:	01401004 	movi	r5,64
 400ae68:	2909c83a 	sub	r4,r5,r4
 400ae6c:	4108983a 	sll	r4,r8,r4
 400ae70:	2448b03a 	or	r4,r4,r17
 400ae74:	2008c03a 	cmpne	r4,r4,zero
 400ae78:	3922b03a 	or	r17,r7,r4
 400ae7c:	0009883a 	mov	r4,zero
 400ae80:	003f8d06 	br	400acb8 <__ram_exceptions_end+0xfbfeaa74>
 400ae84:	0007883a 	mov	r3,zero
 400ae88:	003fdd06 	br	400ae00 <__ram_exceptions_end+0xfbfeabbc>
 400ae8c:	0009883a 	mov	r4,zero
 400ae90:	003ff706 	br	400ae70 <__ram_exceptions_end+0xfbfeac2c>

0400ae94 <__divdf3>:
 400ae94:	defff204 	addi	sp,sp,-56
 400ae98:	dd400915 	stw	r21,36(sp)
 400ae9c:	282ad53a 	srli	r21,r5,20
 400aea0:	dd000815 	stw	r20,32(sp)
 400aea4:	2828d7fa 	srli	r20,r5,31
 400aea8:	dc000415 	stw	r16,16(sp)
 400aeac:	04000434 	movhi	r16,16
 400aeb0:	df000c15 	stw	fp,48(sp)
 400aeb4:	843fffc4 	addi	r16,r16,-1
 400aeb8:	dfc00d15 	stw	ra,52(sp)
 400aebc:	ddc00b15 	stw	r23,44(sp)
 400aec0:	dd800a15 	stw	r22,40(sp)
 400aec4:	dcc00715 	stw	r19,28(sp)
 400aec8:	dc800615 	stw	r18,24(sp)
 400aecc:	dc400515 	stw	r17,20(sp)
 400aed0:	ad41ffcc 	andi	r21,r21,2047
 400aed4:	2c20703a 	and	r16,r5,r16
 400aed8:	a7003fcc 	andi	fp,r20,255
 400aedc:	a8006126 	beq	r21,zero,400b064 <__divdf3+0x1d0>
 400aee0:	0081ffc4 	movi	r2,2047
 400aee4:	2025883a 	mov	r18,r4
 400aee8:	a8803726 	beq	r21,r2,400afc8 <__divdf3+0x134>
 400aeec:	80c00434 	orhi	r3,r16,16
 400aef0:	180690fa 	slli	r3,r3,3
 400aef4:	2020d77a 	srli	r16,r4,29
 400aef8:	202490fa 	slli	r18,r4,3
 400aefc:	ad7f0044 	addi	r21,r21,-1023
 400af00:	80e0b03a 	or	r16,r16,r3
 400af04:	0027883a 	mov	r19,zero
 400af08:	0013883a 	mov	r9,zero
 400af0c:	3808d53a 	srli	r4,r7,20
 400af10:	382cd7fa 	srli	r22,r7,31
 400af14:	04400434 	movhi	r17,16
 400af18:	8c7fffc4 	addi	r17,r17,-1
 400af1c:	2101ffcc 	andi	r4,r4,2047
 400af20:	3011883a 	mov	r8,r6
 400af24:	3c62703a 	and	r17,r7,r17
 400af28:	b5c03fcc 	andi	r23,r22,255
 400af2c:	20006c26 	beq	r4,zero,400b0e0 <__divdf3+0x24c>
 400af30:	0081ffc4 	movi	r2,2047
 400af34:	20806426 	beq	r4,r2,400b0c8 <__divdf3+0x234>
 400af38:	88c00434 	orhi	r3,r17,16
 400af3c:	180690fa 	slli	r3,r3,3
 400af40:	3022d77a 	srli	r17,r6,29
 400af44:	301090fa 	slli	r8,r6,3
 400af48:	213f0044 	addi	r4,r4,-1023
 400af4c:	88e2b03a 	or	r17,r17,r3
 400af50:	000d883a 	mov	r6,zero
 400af54:	a584f03a 	xor	r2,r20,r22
 400af58:	34cab03a 	or	r5,r6,r19
 400af5c:	1007883a 	mov	r3,r2
 400af60:	14c03fcc 	andi	r19,r2,255
 400af64:	008003c4 	movi	r2,15
 400af68:	a92bc83a 	sub	r21,r21,r4
 400af6c:	11409036 	bltu	r2,r5,400b1b0 <__divdf3+0x31c>
 400af70:	280a90ba 	slli	r5,r5,2
 400af74:	00810074 	movhi	r2,1025
 400af78:	10abe204 	addi	r2,r2,-20600
 400af7c:	288b883a 	add	r5,r5,r2
 400af80:	28800017 	ldw	r2,0(r5)
 400af84:	1000683a 	jmp	r2
 400af88:	0400b1b0 	cmpltui	r16,zero,710
 400af8c:	0400b000 	call	400b00 <__alt_mem_new_sdram_controller_0-0x3bff500>
 400af90:	0400b1a0 	cmpeqi	r16,zero,710
 400af94:	0400aff4 	movhi	r16,703
 400af98:	0400b1a0 	cmpeqi	r16,zero,710
 400af9c:	0400b174 	movhi	r16,709
 400afa0:	0400b1a0 	cmpeqi	r16,zero,710
 400afa4:	0400aff4 	movhi	r16,703
 400afa8:	0400b000 	call	400b00 <__alt_mem_new_sdram_controller_0-0x3bff500>
 400afac:	0400b000 	call	400b00 <__alt_mem_new_sdram_controller_0-0x3bff500>
 400afb0:	0400b174 	movhi	r16,709
 400afb4:	0400aff4 	movhi	r16,703
 400afb8:	0400afe4 	muli	r16,zero,703
 400afbc:	0400afe4 	muli	r16,zero,703
 400afc0:	0400afe4 	muli	r16,zero,703
 400afc4:	0400b494 	movui	r16,722
 400afc8:	2404b03a 	or	r2,r4,r16
 400afcc:	1000661e 	bne	r2,zero,400b168 <__divdf3+0x2d4>
 400afd0:	04c00204 	movi	r19,8
 400afd4:	0021883a 	mov	r16,zero
 400afd8:	0025883a 	mov	r18,zero
 400afdc:	02400084 	movi	r9,2
 400afe0:	003fca06 	br	400af0c <__ram_exceptions_end+0xfbfeacc8>
 400afe4:	8023883a 	mov	r17,r16
 400afe8:	9011883a 	mov	r8,r18
 400afec:	e02f883a 	mov	r23,fp
 400aff0:	480d883a 	mov	r6,r9
 400aff4:	00800084 	movi	r2,2
 400aff8:	3081311e 	bne	r6,r2,400b4c0 <__divdf3+0x62c>
 400affc:	b827883a 	mov	r19,r23
 400b000:	98c0004c 	andi	r3,r19,1
 400b004:	0081ffc4 	movi	r2,2047
 400b008:	000b883a 	mov	r5,zero
 400b00c:	0025883a 	mov	r18,zero
 400b010:	1004953a 	slli	r2,r2,20
 400b014:	18c03fcc 	andi	r3,r3,255
 400b018:	04400434 	movhi	r17,16
 400b01c:	8c7fffc4 	addi	r17,r17,-1
 400b020:	180697fa 	slli	r3,r3,31
 400b024:	2c4a703a 	and	r5,r5,r17
 400b028:	288ab03a 	or	r5,r5,r2
 400b02c:	28c6b03a 	or	r3,r5,r3
 400b030:	9005883a 	mov	r2,r18
 400b034:	dfc00d17 	ldw	ra,52(sp)
 400b038:	df000c17 	ldw	fp,48(sp)
 400b03c:	ddc00b17 	ldw	r23,44(sp)
 400b040:	dd800a17 	ldw	r22,40(sp)
 400b044:	dd400917 	ldw	r21,36(sp)
 400b048:	dd000817 	ldw	r20,32(sp)
 400b04c:	dcc00717 	ldw	r19,28(sp)
 400b050:	dc800617 	ldw	r18,24(sp)
 400b054:	dc400517 	ldw	r17,20(sp)
 400b058:	dc000417 	ldw	r16,16(sp)
 400b05c:	dec00e04 	addi	sp,sp,56
 400b060:	f800283a 	ret
 400b064:	2404b03a 	or	r2,r4,r16
 400b068:	2027883a 	mov	r19,r4
 400b06c:	10003926 	beq	r2,zero,400b154 <__divdf3+0x2c0>
 400b070:	80012e26 	beq	r16,zero,400b52c <__divdf3+0x698>
 400b074:	8009883a 	mov	r4,r16
 400b078:	d9800315 	stw	r6,12(sp)
 400b07c:	d9c00215 	stw	r7,8(sp)
 400b080:	400cbec0 	call	400cbec <__clzsi2>
 400b084:	d9800317 	ldw	r6,12(sp)
 400b088:	d9c00217 	ldw	r7,8(sp)
 400b08c:	10fffd44 	addi	r3,r2,-11
 400b090:	01000704 	movi	r4,28
 400b094:	20c12116 	blt	r4,r3,400b51c <__divdf3+0x688>
 400b098:	01000744 	movi	r4,29
 400b09c:	147ffe04 	addi	r17,r2,-8
 400b0a0:	20c9c83a 	sub	r4,r4,r3
 400b0a4:	8460983a 	sll	r16,r16,r17
 400b0a8:	9908d83a 	srl	r4,r19,r4
 400b0ac:	9c64983a 	sll	r18,r19,r17
 400b0b0:	2420b03a 	or	r16,r4,r16
 400b0b4:	057f0084 	movi	r21,-1022
 400b0b8:	a8ebc83a 	sub	r21,r21,r3
 400b0bc:	0027883a 	mov	r19,zero
 400b0c0:	0013883a 	mov	r9,zero
 400b0c4:	003f9106 	br	400af0c <__ram_exceptions_end+0xfbfeacc8>
 400b0c8:	3444b03a 	or	r2,r6,r17
 400b0cc:	10001f1e 	bne	r2,zero,400b14c <__divdf3+0x2b8>
 400b0d0:	0023883a 	mov	r17,zero
 400b0d4:	0011883a 	mov	r8,zero
 400b0d8:	01800084 	movi	r6,2
 400b0dc:	003f9d06 	br	400af54 <__ram_exceptions_end+0xfbfead10>
 400b0e0:	3444b03a 	or	r2,r6,r17
 400b0e4:	10001526 	beq	r2,zero,400b13c <__divdf3+0x2a8>
 400b0e8:	88011b26 	beq	r17,zero,400b558 <__divdf3+0x6c4>
 400b0ec:	8809883a 	mov	r4,r17
 400b0f0:	d9800315 	stw	r6,12(sp)
 400b0f4:	da400115 	stw	r9,4(sp)
 400b0f8:	400cbec0 	call	400cbec <__clzsi2>
 400b0fc:	d9800317 	ldw	r6,12(sp)
 400b100:	da400117 	ldw	r9,4(sp)
 400b104:	10fffd44 	addi	r3,r2,-11
 400b108:	01000704 	movi	r4,28
 400b10c:	20c10e16 	blt	r4,r3,400b548 <__divdf3+0x6b4>
 400b110:	01000744 	movi	r4,29
 400b114:	123ffe04 	addi	r8,r2,-8
 400b118:	20c9c83a 	sub	r4,r4,r3
 400b11c:	8a22983a 	sll	r17,r17,r8
 400b120:	3108d83a 	srl	r4,r6,r4
 400b124:	3210983a 	sll	r8,r6,r8
 400b128:	2462b03a 	or	r17,r4,r17
 400b12c:	013f0084 	movi	r4,-1022
 400b130:	20c9c83a 	sub	r4,r4,r3
 400b134:	000d883a 	mov	r6,zero
 400b138:	003f8606 	br	400af54 <__ram_exceptions_end+0xfbfead10>
 400b13c:	0023883a 	mov	r17,zero
 400b140:	0011883a 	mov	r8,zero
 400b144:	01800044 	movi	r6,1
 400b148:	003f8206 	br	400af54 <__ram_exceptions_end+0xfbfead10>
 400b14c:	018000c4 	movi	r6,3
 400b150:	003f8006 	br	400af54 <__ram_exceptions_end+0xfbfead10>
 400b154:	04c00104 	movi	r19,4
 400b158:	0021883a 	mov	r16,zero
 400b15c:	0025883a 	mov	r18,zero
 400b160:	02400044 	movi	r9,1
 400b164:	003f6906 	br	400af0c <__ram_exceptions_end+0xfbfeacc8>
 400b168:	04c00304 	movi	r19,12
 400b16c:	024000c4 	movi	r9,3
 400b170:	003f6606 	br	400af0c <__ram_exceptions_end+0xfbfeacc8>
 400b174:	01400434 	movhi	r5,16
 400b178:	0007883a 	mov	r3,zero
 400b17c:	297fffc4 	addi	r5,r5,-1
 400b180:	04bfffc4 	movi	r18,-1
 400b184:	0081ffc4 	movi	r2,2047
 400b188:	003fa106 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b18c:	00c00044 	movi	r3,1
 400b190:	1887c83a 	sub	r3,r3,r2
 400b194:	01000e04 	movi	r4,56
 400b198:	20c1210e 	bge	r4,r3,400b620 <__divdf3+0x78c>
 400b19c:	98c0004c 	andi	r3,r19,1
 400b1a0:	0005883a 	mov	r2,zero
 400b1a4:	000b883a 	mov	r5,zero
 400b1a8:	0025883a 	mov	r18,zero
 400b1ac:	003f9806 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b1b0:	8c00fd36 	bltu	r17,r16,400b5a8 <__divdf3+0x714>
 400b1b4:	8440fb26 	beq	r16,r17,400b5a4 <__divdf3+0x710>
 400b1b8:	8007883a 	mov	r3,r16
 400b1bc:	ad7fffc4 	addi	r21,r21,-1
 400b1c0:	0021883a 	mov	r16,zero
 400b1c4:	400ad63a 	srli	r5,r8,24
 400b1c8:	8822923a 	slli	r17,r17,8
 400b1cc:	1809883a 	mov	r4,r3
 400b1d0:	402c923a 	slli	r22,r8,8
 400b1d4:	8978b03a 	or	fp,r17,r5
 400b1d8:	e028d43a 	srli	r20,fp,16
 400b1dc:	d8c00015 	stw	r3,0(sp)
 400b1e0:	e5ffffcc 	andi	r23,fp,65535
 400b1e4:	a00b883a 	mov	r5,r20
 400b1e8:	400a52c0 	call	400a52c <__udivsi3>
 400b1ec:	d8c00017 	ldw	r3,0(sp)
 400b1f0:	a00b883a 	mov	r5,r20
 400b1f4:	d8800315 	stw	r2,12(sp)
 400b1f8:	1809883a 	mov	r4,r3
 400b1fc:	400a5900 	call	400a590 <__umodsi3>
 400b200:	d9800317 	ldw	r6,12(sp)
 400b204:	1006943a 	slli	r3,r2,16
 400b208:	9004d43a 	srli	r2,r18,16
 400b20c:	b9a3383a 	mul	r17,r23,r6
 400b210:	10c4b03a 	or	r2,r2,r3
 400b214:	1440062e 	bgeu	r2,r17,400b230 <__divdf3+0x39c>
 400b218:	1705883a 	add	r2,r2,fp
 400b21c:	30ffffc4 	addi	r3,r6,-1
 400b220:	1700ee36 	bltu	r2,fp,400b5dc <__divdf3+0x748>
 400b224:	1440ed2e 	bgeu	r2,r17,400b5dc <__divdf3+0x748>
 400b228:	31bfff84 	addi	r6,r6,-2
 400b22c:	1705883a 	add	r2,r2,fp
 400b230:	1463c83a 	sub	r17,r2,r17
 400b234:	a00b883a 	mov	r5,r20
 400b238:	8809883a 	mov	r4,r17
 400b23c:	d9800315 	stw	r6,12(sp)
 400b240:	400a52c0 	call	400a52c <__udivsi3>
 400b244:	a00b883a 	mov	r5,r20
 400b248:	8809883a 	mov	r4,r17
 400b24c:	d8800215 	stw	r2,8(sp)
 400b250:	400a5900 	call	400a590 <__umodsi3>
 400b254:	d9c00217 	ldw	r7,8(sp)
 400b258:	1004943a 	slli	r2,r2,16
 400b25c:	94bfffcc 	andi	r18,r18,65535
 400b260:	b9d1383a 	mul	r8,r23,r7
 400b264:	90a4b03a 	or	r18,r18,r2
 400b268:	d9800317 	ldw	r6,12(sp)
 400b26c:	9200062e 	bgeu	r18,r8,400b288 <__divdf3+0x3f4>
 400b270:	9725883a 	add	r18,r18,fp
 400b274:	38bfffc4 	addi	r2,r7,-1
 400b278:	9700d636 	bltu	r18,fp,400b5d4 <__divdf3+0x740>
 400b27c:	9200d52e 	bgeu	r18,r8,400b5d4 <__divdf3+0x740>
 400b280:	39ffff84 	addi	r7,r7,-2
 400b284:	9725883a 	add	r18,r18,fp
 400b288:	3004943a 	slli	r2,r6,16
 400b28c:	b012d43a 	srli	r9,r22,16
 400b290:	b1bfffcc 	andi	r6,r22,65535
 400b294:	11e2b03a 	or	r17,r2,r7
 400b298:	8806d43a 	srli	r3,r17,16
 400b29c:	893fffcc 	andi	r4,r17,65535
 400b2a0:	218b383a 	mul	r5,r4,r6
 400b2a4:	30c5383a 	mul	r2,r6,r3
 400b2a8:	2249383a 	mul	r4,r4,r9
 400b2ac:	280ed43a 	srli	r7,r5,16
 400b2b0:	9225c83a 	sub	r18,r18,r8
 400b2b4:	2089883a 	add	r4,r4,r2
 400b2b8:	3909883a 	add	r4,r7,r4
 400b2bc:	1a47383a 	mul	r3,r3,r9
 400b2c0:	2080022e 	bgeu	r4,r2,400b2cc <__divdf3+0x438>
 400b2c4:	00800074 	movhi	r2,1
 400b2c8:	1887883a 	add	r3,r3,r2
 400b2cc:	2004d43a 	srli	r2,r4,16
 400b2d0:	2008943a 	slli	r4,r4,16
 400b2d4:	297fffcc 	andi	r5,r5,65535
 400b2d8:	10c7883a 	add	r3,r2,r3
 400b2dc:	2149883a 	add	r4,r4,r5
 400b2e0:	90c0a536 	bltu	r18,r3,400b578 <__divdf3+0x6e4>
 400b2e4:	90c0bf26 	beq	r18,r3,400b5e4 <__divdf3+0x750>
 400b2e8:	90c7c83a 	sub	r3,r18,r3
 400b2ec:	810fc83a 	sub	r7,r16,r4
 400b2f0:	81e5803a 	cmpltu	r18,r16,r7
 400b2f4:	1ca5c83a 	sub	r18,r3,r18
 400b2f8:	e480c126 	beq	fp,r18,400b600 <__divdf3+0x76c>
 400b2fc:	a00b883a 	mov	r5,r20
 400b300:	9009883a 	mov	r4,r18
 400b304:	d9800315 	stw	r6,12(sp)
 400b308:	d9c00215 	stw	r7,8(sp)
 400b30c:	da400115 	stw	r9,4(sp)
 400b310:	400a52c0 	call	400a52c <__udivsi3>
 400b314:	a00b883a 	mov	r5,r20
 400b318:	9009883a 	mov	r4,r18
 400b31c:	d8800015 	stw	r2,0(sp)
 400b320:	400a5900 	call	400a590 <__umodsi3>
 400b324:	d9c00217 	ldw	r7,8(sp)
 400b328:	da000017 	ldw	r8,0(sp)
 400b32c:	1006943a 	slli	r3,r2,16
 400b330:	3804d43a 	srli	r2,r7,16
 400b334:	ba21383a 	mul	r16,r23,r8
 400b338:	d9800317 	ldw	r6,12(sp)
 400b33c:	10c4b03a 	or	r2,r2,r3
 400b340:	da400117 	ldw	r9,4(sp)
 400b344:	1400062e 	bgeu	r2,r16,400b360 <__divdf3+0x4cc>
 400b348:	1705883a 	add	r2,r2,fp
 400b34c:	40ffffc4 	addi	r3,r8,-1
 400b350:	1700ad36 	bltu	r2,fp,400b608 <__divdf3+0x774>
 400b354:	1400ac2e 	bgeu	r2,r16,400b608 <__divdf3+0x774>
 400b358:	423fff84 	addi	r8,r8,-2
 400b35c:	1705883a 	add	r2,r2,fp
 400b360:	1421c83a 	sub	r16,r2,r16
 400b364:	a00b883a 	mov	r5,r20
 400b368:	8009883a 	mov	r4,r16
 400b36c:	d9800315 	stw	r6,12(sp)
 400b370:	d9c00215 	stw	r7,8(sp)
 400b374:	da000015 	stw	r8,0(sp)
 400b378:	da400115 	stw	r9,4(sp)
 400b37c:	400a52c0 	call	400a52c <__udivsi3>
 400b380:	8009883a 	mov	r4,r16
 400b384:	a00b883a 	mov	r5,r20
 400b388:	1025883a 	mov	r18,r2
 400b38c:	400a5900 	call	400a590 <__umodsi3>
 400b390:	d9c00217 	ldw	r7,8(sp)
 400b394:	1004943a 	slli	r2,r2,16
 400b398:	bcaf383a 	mul	r23,r23,r18
 400b39c:	393fffcc 	andi	r4,r7,65535
 400b3a0:	2088b03a 	or	r4,r4,r2
 400b3a4:	d9800317 	ldw	r6,12(sp)
 400b3a8:	da000017 	ldw	r8,0(sp)
 400b3ac:	da400117 	ldw	r9,4(sp)
 400b3b0:	25c0062e 	bgeu	r4,r23,400b3cc <__divdf3+0x538>
 400b3b4:	2709883a 	add	r4,r4,fp
 400b3b8:	90bfffc4 	addi	r2,r18,-1
 400b3bc:	27009436 	bltu	r4,fp,400b610 <__divdf3+0x77c>
 400b3c0:	25c0932e 	bgeu	r4,r23,400b610 <__divdf3+0x77c>
 400b3c4:	94bfff84 	addi	r18,r18,-2
 400b3c8:	2709883a 	add	r4,r4,fp
 400b3cc:	4004943a 	slli	r2,r8,16
 400b3d0:	25efc83a 	sub	r23,r4,r23
 400b3d4:	1490b03a 	or	r8,r2,r18
 400b3d8:	4008d43a 	srli	r4,r8,16
 400b3dc:	40ffffcc 	andi	r3,r8,65535
 400b3e0:	30c5383a 	mul	r2,r6,r3
 400b3e4:	1a47383a 	mul	r3,r3,r9
 400b3e8:	310d383a 	mul	r6,r6,r4
 400b3ec:	100ad43a 	srli	r5,r2,16
 400b3f0:	4913383a 	mul	r9,r9,r4
 400b3f4:	1987883a 	add	r3,r3,r6
 400b3f8:	28c7883a 	add	r3,r5,r3
 400b3fc:	1980022e 	bgeu	r3,r6,400b408 <__divdf3+0x574>
 400b400:	01000074 	movhi	r4,1
 400b404:	4913883a 	add	r9,r9,r4
 400b408:	1808d43a 	srli	r4,r3,16
 400b40c:	1806943a 	slli	r3,r3,16
 400b410:	10bfffcc 	andi	r2,r2,65535
 400b414:	2253883a 	add	r9,r4,r9
 400b418:	1887883a 	add	r3,r3,r2
 400b41c:	ba403836 	bltu	r23,r9,400b500 <__divdf3+0x66c>
 400b420:	ba403626 	beq	r23,r9,400b4fc <__divdf3+0x668>
 400b424:	42000054 	ori	r8,r8,1
 400b428:	a880ffc4 	addi	r2,r21,1023
 400b42c:	00bf570e 	bge	zero,r2,400b18c <__ram_exceptions_end+0xfbfeaf48>
 400b430:	40c001cc 	andi	r3,r8,7
 400b434:	18000726 	beq	r3,zero,400b454 <__divdf3+0x5c0>
 400b438:	40c003cc 	andi	r3,r8,15
 400b43c:	01000104 	movi	r4,4
 400b440:	19000426 	beq	r3,r4,400b454 <__divdf3+0x5c0>
 400b444:	4107883a 	add	r3,r8,r4
 400b448:	1a11803a 	cmpltu	r8,r3,r8
 400b44c:	8a23883a 	add	r17,r17,r8
 400b450:	1811883a 	mov	r8,r3
 400b454:	88c0402c 	andhi	r3,r17,256
 400b458:	18000426 	beq	r3,zero,400b46c <__divdf3+0x5d8>
 400b45c:	00ffc034 	movhi	r3,65280
 400b460:	18ffffc4 	addi	r3,r3,-1
 400b464:	a8810004 	addi	r2,r21,1024
 400b468:	88e2703a 	and	r17,r17,r3
 400b46c:	00c1ff84 	movi	r3,2046
 400b470:	18bee316 	blt	r3,r2,400b000 <__ram_exceptions_end+0xfbfeadbc>
 400b474:	8824977a 	slli	r18,r17,29
 400b478:	4010d0fa 	srli	r8,r8,3
 400b47c:	8822927a 	slli	r17,r17,9
 400b480:	1081ffcc 	andi	r2,r2,2047
 400b484:	9224b03a 	or	r18,r18,r8
 400b488:	880ad33a 	srli	r5,r17,12
 400b48c:	98c0004c 	andi	r3,r19,1
 400b490:	003edf06 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b494:	8080022c 	andhi	r2,r16,8
 400b498:	10001226 	beq	r2,zero,400b4e4 <__divdf3+0x650>
 400b49c:	8880022c 	andhi	r2,r17,8
 400b4a0:	1000101e 	bne	r2,zero,400b4e4 <__divdf3+0x650>
 400b4a4:	00800434 	movhi	r2,16
 400b4a8:	89400234 	orhi	r5,r17,8
 400b4ac:	10bfffc4 	addi	r2,r2,-1
 400b4b0:	b007883a 	mov	r3,r22
 400b4b4:	288a703a 	and	r5,r5,r2
 400b4b8:	4025883a 	mov	r18,r8
 400b4bc:	003f3106 	br	400b184 <__ram_exceptions_end+0xfbfeaf40>
 400b4c0:	008000c4 	movi	r2,3
 400b4c4:	3080a626 	beq	r6,r2,400b760 <__divdf3+0x8cc>
 400b4c8:	00800044 	movi	r2,1
 400b4cc:	3080521e 	bne	r6,r2,400b618 <__divdf3+0x784>
 400b4d0:	b807883a 	mov	r3,r23
 400b4d4:	0005883a 	mov	r2,zero
 400b4d8:	000b883a 	mov	r5,zero
 400b4dc:	0025883a 	mov	r18,zero
 400b4e0:	003ecb06 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b4e4:	00800434 	movhi	r2,16
 400b4e8:	81400234 	orhi	r5,r16,8
 400b4ec:	10bfffc4 	addi	r2,r2,-1
 400b4f0:	a007883a 	mov	r3,r20
 400b4f4:	288a703a 	and	r5,r5,r2
 400b4f8:	003f2206 	br	400b184 <__ram_exceptions_end+0xfbfeaf40>
 400b4fc:	183fca26 	beq	r3,zero,400b428 <__ram_exceptions_end+0xfbfeb1e4>
 400b500:	e5ef883a 	add	r23,fp,r23
 400b504:	40bfffc4 	addi	r2,r8,-1
 400b508:	bf00392e 	bgeu	r23,fp,400b5f0 <__divdf3+0x75c>
 400b50c:	1011883a 	mov	r8,r2
 400b510:	ba7fc41e 	bne	r23,r9,400b424 <__ram_exceptions_end+0xfbfeb1e0>
 400b514:	b0ffc31e 	bne	r22,r3,400b424 <__ram_exceptions_end+0xfbfeb1e0>
 400b518:	003fc306 	br	400b428 <__ram_exceptions_end+0xfbfeb1e4>
 400b51c:	10bff604 	addi	r2,r2,-40
 400b520:	98a0983a 	sll	r16,r19,r2
 400b524:	0025883a 	mov	r18,zero
 400b528:	003ee206 	br	400b0b4 <__ram_exceptions_end+0xfbfeae70>
 400b52c:	d9800315 	stw	r6,12(sp)
 400b530:	d9c00215 	stw	r7,8(sp)
 400b534:	400cbec0 	call	400cbec <__clzsi2>
 400b538:	10800804 	addi	r2,r2,32
 400b53c:	d9c00217 	ldw	r7,8(sp)
 400b540:	d9800317 	ldw	r6,12(sp)
 400b544:	003ed106 	br	400b08c <__ram_exceptions_end+0xfbfeae48>
 400b548:	10bff604 	addi	r2,r2,-40
 400b54c:	30a2983a 	sll	r17,r6,r2
 400b550:	0011883a 	mov	r8,zero
 400b554:	003ef506 	br	400b12c <__ram_exceptions_end+0xfbfeaee8>
 400b558:	3009883a 	mov	r4,r6
 400b55c:	d9800315 	stw	r6,12(sp)
 400b560:	da400115 	stw	r9,4(sp)
 400b564:	400cbec0 	call	400cbec <__clzsi2>
 400b568:	10800804 	addi	r2,r2,32
 400b56c:	da400117 	ldw	r9,4(sp)
 400b570:	d9800317 	ldw	r6,12(sp)
 400b574:	003ee306 	br	400b104 <__ram_exceptions_end+0xfbfeaec0>
 400b578:	85a1883a 	add	r16,r16,r22
 400b57c:	8585803a 	cmpltu	r2,r16,r22
 400b580:	1705883a 	add	r2,r2,fp
 400b584:	14a5883a 	add	r18,r2,r18
 400b588:	88bfffc4 	addi	r2,r17,-1
 400b58c:	e4800c2e 	bgeu	fp,r18,400b5c0 <__divdf3+0x72c>
 400b590:	90c03e36 	bltu	r18,r3,400b68c <__divdf3+0x7f8>
 400b594:	1c806926 	beq	r3,r18,400b73c <__divdf3+0x8a8>
 400b598:	90c7c83a 	sub	r3,r18,r3
 400b59c:	1023883a 	mov	r17,r2
 400b5a0:	003f5206 	br	400b2ec <__ram_exceptions_end+0xfbfeb0a8>
 400b5a4:	923f0436 	bltu	r18,r8,400b1b8 <__ram_exceptions_end+0xfbfeaf74>
 400b5a8:	800897fa 	slli	r4,r16,31
 400b5ac:	9004d07a 	srli	r2,r18,1
 400b5b0:	8006d07a 	srli	r3,r16,1
 400b5b4:	902097fa 	slli	r16,r18,31
 400b5b8:	20a4b03a 	or	r18,r4,r2
 400b5bc:	003f0106 	br	400b1c4 <__ram_exceptions_end+0xfbfeaf80>
 400b5c0:	e4bff51e 	bne	fp,r18,400b598 <__ram_exceptions_end+0xfbfeb354>
 400b5c4:	85bff22e 	bgeu	r16,r22,400b590 <__ram_exceptions_end+0xfbfeb34c>
 400b5c8:	e0c7c83a 	sub	r3,fp,r3
 400b5cc:	1023883a 	mov	r17,r2
 400b5d0:	003f4606 	br	400b2ec <__ram_exceptions_end+0xfbfeb0a8>
 400b5d4:	100f883a 	mov	r7,r2
 400b5d8:	003f2b06 	br	400b288 <__ram_exceptions_end+0xfbfeb044>
 400b5dc:	180d883a 	mov	r6,r3
 400b5e0:	003f1306 	br	400b230 <__ram_exceptions_end+0xfbfeafec>
 400b5e4:	813fe436 	bltu	r16,r4,400b578 <__ram_exceptions_end+0xfbfeb334>
 400b5e8:	0007883a 	mov	r3,zero
 400b5ec:	003f3f06 	br	400b2ec <__ram_exceptions_end+0xfbfeb0a8>
 400b5f0:	ba402c36 	bltu	r23,r9,400b6a4 <__divdf3+0x810>
 400b5f4:	4dc05426 	beq	r9,r23,400b748 <__divdf3+0x8b4>
 400b5f8:	1011883a 	mov	r8,r2
 400b5fc:	003f8906 	br	400b424 <__ram_exceptions_end+0xfbfeb1e0>
 400b600:	023fffc4 	movi	r8,-1
 400b604:	003f8806 	br	400b428 <__ram_exceptions_end+0xfbfeb1e4>
 400b608:	1811883a 	mov	r8,r3
 400b60c:	003f5406 	br	400b360 <__ram_exceptions_end+0xfbfeb11c>
 400b610:	1025883a 	mov	r18,r2
 400b614:	003f6d06 	br	400b3cc <__ram_exceptions_end+0xfbfeb188>
 400b618:	b827883a 	mov	r19,r23
 400b61c:	003f8206 	br	400b428 <__ram_exceptions_end+0xfbfeb1e4>
 400b620:	010007c4 	movi	r4,31
 400b624:	20c02616 	blt	r4,r3,400b6c0 <__divdf3+0x82c>
 400b628:	00800804 	movi	r2,32
 400b62c:	10c5c83a 	sub	r2,r2,r3
 400b630:	888a983a 	sll	r5,r17,r2
 400b634:	40c8d83a 	srl	r4,r8,r3
 400b638:	4084983a 	sll	r2,r8,r2
 400b63c:	88e2d83a 	srl	r17,r17,r3
 400b640:	2906b03a 	or	r3,r5,r4
 400b644:	1004c03a 	cmpne	r2,r2,zero
 400b648:	1886b03a 	or	r3,r3,r2
 400b64c:	188001cc 	andi	r2,r3,7
 400b650:	10000726 	beq	r2,zero,400b670 <__divdf3+0x7dc>
 400b654:	188003cc 	andi	r2,r3,15
 400b658:	01000104 	movi	r4,4
 400b65c:	11000426 	beq	r2,r4,400b670 <__divdf3+0x7dc>
 400b660:	1805883a 	mov	r2,r3
 400b664:	10c00104 	addi	r3,r2,4
 400b668:	1885803a 	cmpltu	r2,r3,r2
 400b66c:	88a3883a 	add	r17,r17,r2
 400b670:	8880202c 	andhi	r2,r17,128
 400b674:	10002726 	beq	r2,zero,400b714 <__divdf3+0x880>
 400b678:	98c0004c 	andi	r3,r19,1
 400b67c:	00800044 	movi	r2,1
 400b680:	000b883a 	mov	r5,zero
 400b684:	0025883a 	mov	r18,zero
 400b688:	003e6106 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b68c:	85a1883a 	add	r16,r16,r22
 400b690:	8585803a 	cmpltu	r2,r16,r22
 400b694:	1705883a 	add	r2,r2,fp
 400b698:	14a5883a 	add	r18,r2,r18
 400b69c:	8c7fff84 	addi	r17,r17,-2
 400b6a0:	003f1106 	br	400b2e8 <__ram_exceptions_end+0xfbfeb0a4>
 400b6a4:	b589883a 	add	r4,r22,r22
 400b6a8:	25ad803a 	cmpltu	r22,r4,r22
 400b6ac:	b739883a 	add	fp,r22,fp
 400b6b0:	40bfff84 	addi	r2,r8,-2
 400b6b4:	bf2f883a 	add	r23,r23,fp
 400b6b8:	202d883a 	mov	r22,r4
 400b6bc:	003f9306 	br	400b50c <__ram_exceptions_end+0xfbfeb2c8>
 400b6c0:	013ff844 	movi	r4,-31
 400b6c4:	2085c83a 	sub	r2,r4,r2
 400b6c8:	8888d83a 	srl	r4,r17,r2
 400b6cc:	00800804 	movi	r2,32
 400b6d0:	18802126 	beq	r3,r2,400b758 <__divdf3+0x8c4>
 400b6d4:	00801004 	movi	r2,64
 400b6d8:	10c5c83a 	sub	r2,r2,r3
 400b6dc:	8884983a 	sll	r2,r17,r2
 400b6e0:	1204b03a 	or	r2,r2,r8
 400b6e4:	1004c03a 	cmpne	r2,r2,zero
 400b6e8:	2084b03a 	or	r2,r4,r2
 400b6ec:	144001cc 	andi	r17,r2,7
 400b6f0:	88000d1e 	bne	r17,zero,400b728 <__divdf3+0x894>
 400b6f4:	000b883a 	mov	r5,zero
 400b6f8:	1024d0fa 	srli	r18,r2,3
 400b6fc:	98c0004c 	andi	r3,r19,1
 400b700:	0005883a 	mov	r2,zero
 400b704:	9464b03a 	or	r18,r18,r17
 400b708:	003e4106 	br	400b010 <__ram_exceptions_end+0xfbfeadcc>
 400b70c:	1007883a 	mov	r3,r2
 400b710:	0023883a 	mov	r17,zero
 400b714:	880a927a 	slli	r5,r17,9
 400b718:	1805883a 	mov	r2,r3
 400b71c:	8822977a 	slli	r17,r17,29
 400b720:	280ad33a 	srli	r5,r5,12
 400b724:	003ff406 	br	400b6f8 <__ram_exceptions_end+0xfbfeb4b4>
 400b728:	10c003cc 	andi	r3,r2,15
 400b72c:	01000104 	movi	r4,4
 400b730:	193ff626 	beq	r3,r4,400b70c <__ram_exceptions_end+0xfbfeb4c8>
 400b734:	0023883a 	mov	r17,zero
 400b738:	003fca06 	br	400b664 <__ram_exceptions_end+0xfbfeb420>
 400b73c:	813fd336 	bltu	r16,r4,400b68c <__ram_exceptions_end+0xfbfeb448>
 400b740:	1023883a 	mov	r17,r2
 400b744:	003fa806 	br	400b5e8 <__ram_exceptions_end+0xfbfeb3a4>
 400b748:	b0ffd636 	bltu	r22,r3,400b6a4 <__ram_exceptions_end+0xfbfeb460>
 400b74c:	1011883a 	mov	r8,r2
 400b750:	b0ff341e 	bne	r22,r3,400b424 <__ram_exceptions_end+0xfbfeb1e0>
 400b754:	003f3406 	br	400b428 <__ram_exceptions_end+0xfbfeb1e4>
 400b758:	0005883a 	mov	r2,zero
 400b75c:	003fe006 	br	400b6e0 <__ram_exceptions_end+0xfbfeb49c>
 400b760:	00800434 	movhi	r2,16
 400b764:	89400234 	orhi	r5,r17,8
 400b768:	10bfffc4 	addi	r2,r2,-1
 400b76c:	b807883a 	mov	r3,r23
 400b770:	288a703a 	and	r5,r5,r2
 400b774:	4025883a 	mov	r18,r8
 400b778:	003e8206 	br	400b184 <__ram_exceptions_end+0xfbfeaf40>

0400b77c <__eqdf2>:
 400b77c:	2804d53a 	srli	r2,r5,20
 400b780:	3806d53a 	srli	r3,r7,20
 400b784:	02000434 	movhi	r8,16
 400b788:	423fffc4 	addi	r8,r8,-1
 400b78c:	1081ffcc 	andi	r2,r2,2047
 400b790:	0281ffc4 	movi	r10,2047
 400b794:	2a12703a 	and	r9,r5,r8
 400b798:	18c1ffcc 	andi	r3,r3,2047
 400b79c:	3a10703a 	and	r8,r7,r8
 400b7a0:	280ad7fa 	srli	r5,r5,31
 400b7a4:	380ed7fa 	srli	r7,r7,31
 400b7a8:	12801026 	beq	r2,r10,400b7ec <__eqdf2+0x70>
 400b7ac:	0281ffc4 	movi	r10,2047
 400b7b0:	1a800a26 	beq	r3,r10,400b7dc <__eqdf2+0x60>
 400b7b4:	10c00226 	beq	r2,r3,400b7c0 <__eqdf2+0x44>
 400b7b8:	00800044 	movi	r2,1
 400b7bc:	f800283a 	ret
 400b7c0:	4a3ffd1e 	bne	r9,r8,400b7b8 <__ram_exceptions_end+0xfbfeb574>
 400b7c4:	21bffc1e 	bne	r4,r6,400b7b8 <__ram_exceptions_end+0xfbfeb574>
 400b7c8:	29c00c26 	beq	r5,r7,400b7fc <__eqdf2+0x80>
 400b7cc:	103ffa1e 	bne	r2,zero,400b7b8 <__ram_exceptions_end+0xfbfeb574>
 400b7d0:	2244b03a 	or	r2,r4,r9
 400b7d4:	1004c03a 	cmpne	r2,r2,zero
 400b7d8:	f800283a 	ret
 400b7dc:	3214b03a 	or	r10,r6,r8
 400b7e0:	503ff426 	beq	r10,zero,400b7b4 <__ram_exceptions_end+0xfbfeb570>
 400b7e4:	00800044 	movi	r2,1
 400b7e8:	f800283a 	ret
 400b7ec:	2254b03a 	or	r10,r4,r9
 400b7f0:	503fee26 	beq	r10,zero,400b7ac <__ram_exceptions_end+0xfbfeb568>
 400b7f4:	00800044 	movi	r2,1
 400b7f8:	f800283a 	ret
 400b7fc:	0005883a 	mov	r2,zero
 400b800:	f800283a 	ret

0400b804 <__gedf2>:
 400b804:	2804d53a 	srli	r2,r5,20
 400b808:	3806d53a 	srli	r3,r7,20
 400b80c:	02000434 	movhi	r8,16
 400b810:	423fffc4 	addi	r8,r8,-1
 400b814:	1081ffcc 	andi	r2,r2,2047
 400b818:	0241ffc4 	movi	r9,2047
 400b81c:	2a14703a 	and	r10,r5,r8
 400b820:	18c1ffcc 	andi	r3,r3,2047
 400b824:	3a10703a 	and	r8,r7,r8
 400b828:	280ad7fa 	srli	r5,r5,31
 400b82c:	380ed7fa 	srli	r7,r7,31
 400b830:	12401d26 	beq	r2,r9,400b8a8 <__gedf2+0xa4>
 400b834:	0241ffc4 	movi	r9,2047
 400b838:	1a401226 	beq	r3,r9,400b884 <__gedf2+0x80>
 400b83c:	1000081e 	bne	r2,zero,400b860 <__gedf2+0x5c>
 400b840:	2296b03a 	or	r11,r4,r10
 400b844:	5813003a 	cmpeq	r9,r11,zero
 400b848:	1800091e 	bne	r3,zero,400b870 <__gedf2+0x6c>
 400b84c:	3218b03a 	or	r12,r6,r8
 400b850:	6000071e 	bne	r12,zero,400b870 <__gedf2+0x6c>
 400b854:	0005883a 	mov	r2,zero
 400b858:	5800101e 	bne	r11,zero,400b89c <__gedf2+0x98>
 400b85c:	f800283a 	ret
 400b860:	18000c1e 	bne	r3,zero,400b894 <__gedf2+0x90>
 400b864:	3212b03a 	or	r9,r6,r8
 400b868:	48000c26 	beq	r9,zero,400b89c <__gedf2+0x98>
 400b86c:	0013883a 	mov	r9,zero
 400b870:	39c03fcc 	andi	r7,r7,255
 400b874:	48000826 	beq	r9,zero,400b898 <__gedf2+0x94>
 400b878:	38000926 	beq	r7,zero,400b8a0 <__gedf2+0x9c>
 400b87c:	00800044 	movi	r2,1
 400b880:	f800283a 	ret
 400b884:	3212b03a 	or	r9,r6,r8
 400b888:	483fec26 	beq	r9,zero,400b83c <__ram_exceptions_end+0xfbfeb5f8>
 400b88c:	00bfff84 	movi	r2,-2
 400b890:	f800283a 	ret
 400b894:	39c03fcc 	andi	r7,r7,255
 400b898:	29c00626 	beq	r5,r7,400b8b4 <__gedf2+0xb0>
 400b89c:	283ff726 	beq	r5,zero,400b87c <__ram_exceptions_end+0xfbfeb638>
 400b8a0:	00bfffc4 	movi	r2,-1
 400b8a4:	f800283a 	ret
 400b8a8:	2292b03a 	or	r9,r4,r10
 400b8ac:	483fe126 	beq	r9,zero,400b834 <__ram_exceptions_end+0xfbfeb5f0>
 400b8b0:	003ff606 	br	400b88c <__ram_exceptions_end+0xfbfeb648>
 400b8b4:	18bff916 	blt	r3,r2,400b89c <__ram_exceptions_end+0xfbfeb658>
 400b8b8:	10c00316 	blt	r2,r3,400b8c8 <__gedf2+0xc4>
 400b8bc:	42bff736 	bltu	r8,r10,400b89c <__ram_exceptions_end+0xfbfeb658>
 400b8c0:	52000326 	beq	r10,r8,400b8d0 <__gedf2+0xcc>
 400b8c4:	5200042e 	bgeu	r10,r8,400b8d8 <__gedf2+0xd4>
 400b8c8:	283fec1e 	bne	r5,zero,400b87c <__ram_exceptions_end+0xfbfeb638>
 400b8cc:	003ff406 	br	400b8a0 <__ram_exceptions_end+0xfbfeb65c>
 400b8d0:	313ff236 	bltu	r6,r4,400b89c <__ram_exceptions_end+0xfbfeb658>
 400b8d4:	21bffc36 	bltu	r4,r6,400b8c8 <__ram_exceptions_end+0xfbfeb684>
 400b8d8:	0005883a 	mov	r2,zero
 400b8dc:	f800283a 	ret

0400b8e0 <__ledf2>:
 400b8e0:	2804d53a 	srli	r2,r5,20
 400b8e4:	3810d53a 	srli	r8,r7,20
 400b8e8:	00c00434 	movhi	r3,16
 400b8ec:	18ffffc4 	addi	r3,r3,-1
 400b8f0:	1081ffcc 	andi	r2,r2,2047
 400b8f4:	0241ffc4 	movi	r9,2047
 400b8f8:	28d4703a 	and	r10,r5,r3
 400b8fc:	4201ffcc 	andi	r8,r8,2047
 400b900:	38c6703a 	and	r3,r7,r3
 400b904:	280ad7fa 	srli	r5,r5,31
 400b908:	380ed7fa 	srli	r7,r7,31
 400b90c:	12401f26 	beq	r2,r9,400b98c <__ledf2+0xac>
 400b910:	0241ffc4 	movi	r9,2047
 400b914:	42401426 	beq	r8,r9,400b968 <__ledf2+0x88>
 400b918:	1000091e 	bne	r2,zero,400b940 <__ledf2+0x60>
 400b91c:	2296b03a 	or	r11,r4,r10
 400b920:	5813003a 	cmpeq	r9,r11,zero
 400b924:	29403fcc 	andi	r5,r5,255
 400b928:	40000a1e 	bne	r8,zero,400b954 <__ledf2+0x74>
 400b92c:	30d8b03a 	or	r12,r6,r3
 400b930:	6000081e 	bne	r12,zero,400b954 <__ledf2+0x74>
 400b934:	0005883a 	mov	r2,zero
 400b938:	5800111e 	bne	r11,zero,400b980 <__ledf2+0xa0>
 400b93c:	f800283a 	ret
 400b940:	29403fcc 	andi	r5,r5,255
 400b944:	40000c1e 	bne	r8,zero,400b978 <__ledf2+0x98>
 400b948:	30d2b03a 	or	r9,r6,r3
 400b94c:	48000c26 	beq	r9,zero,400b980 <__ledf2+0xa0>
 400b950:	0013883a 	mov	r9,zero
 400b954:	39c03fcc 	andi	r7,r7,255
 400b958:	48000826 	beq	r9,zero,400b97c <__ledf2+0x9c>
 400b95c:	38001126 	beq	r7,zero,400b9a4 <__ledf2+0xc4>
 400b960:	00800044 	movi	r2,1
 400b964:	f800283a 	ret
 400b968:	30d2b03a 	or	r9,r6,r3
 400b96c:	483fea26 	beq	r9,zero,400b918 <__ram_exceptions_end+0xfbfeb6d4>
 400b970:	00800084 	movi	r2,2
 400b974:	f800283a 	ret
 400b978:	39c03fcc 	andi	r7,r7,255
 400b97c:	39400726 	beq	r7,r5,400b99c <__ledf2+0xbc>
 400b980:	2800081e 	bne	r5,zero,400b9a4 <__ledf2+0xc4>
 400b984:	00800044 	movi	r2,1
 400b988:	f800283a 	ret
 400b98c:	2292b03a 	or	r9,r4,r10
 400b990:	483fdf26 	beq	r9,zero,400b910 <__ram_exceptions_end+0xfbfeb6cc>
 400b994:	00800084 	movi	r2,2
 400b998:	f800283a 	ret
 400b99c:	4080030e 	bge	r8,r2,400b9ac <__ledf2+0xcc>
 400b9a0:	383fef26 	beq	r7,zero,400b960 <__ram_exceptions_end+0xfbfeb71c>
 400b9a4:	00bfffc4 	movi	r2,-1
 400b9a8:	f800283a 	ret
 400b9ac:	123feb16 	blt	r2,r8,400b95c <__ram_exceptions_end+0xfbfeb718>
 400b9b0:	1abff336 	bltu	r3,r10,400b980 <__ram_exceptions_end+0xfbfeb73c>
 400b9b4:	50c00326 	beq	r10,r3,400b9c4 <__ledf2+0xe4>
 400b9b8:	50c0042e 	bgeu	r10,r3,400b9cc <__ledf2+0xec>
 400b9bc:	283fe81e 	bne	r5,zero,400b960 <__ram_exceptions_end+0xfbfeb71c>
 400b9c0:	003ff806 	br	400b9a4 <__ram_exceptions_end+0xfbfeb760>
 400b9c4:	313fee36 	bltu	r6,r4,400b980 <__ram_exceptions_end+0xfbfeb73c>
 400b9c8:	21bffc36 	bltu	r4,r6,400b9bc <__ram_exceptions_end+0xfbfeb778>
 400b9cc:	0005883a 	mov	r2,zero
 400b9d0:	f800283a 	ret

0400b9d4 <__muldf3>:
 400b9d4:	defff304 	addi	sp,sp,-52
 400b9d8:	dd400815 	stw	r21,32(sp)
 400b9dc:	282ad53a 	srli	r21,r5,20
 400b9e0:	dd800915 	stw	r22,36(sp)
 400b9e4:	282cd7fa 	srli	r22,r5,31
 400b9e8:	dc000315 	stw	r16,12(sp)
 400b9ec:	04000434 	movhi	r16,16
 400b9f0:	dd000715 	stw	r20,28(sp)
 400b9f4:	843fffc4 	addi	r16,r16,-1
 400b9f8:	dfc00c15 	stw	ra,48(sp)
 400b9fc:	df000b15 	stw	fp,44(sp)
 400ba00:	ddc00a15 	stw	r23,40(sp)
 400ba04:	dcc00615 	stw	r19,24(sp)
 400ba08:	dc800515 	stw	r18,20(sp)
 400ba0c:	dc400415 	stw	r17,16(sp)
 400ba10:	ad41ffcc 	andi	r21,r21,2047
 400ba14:	2c20703a 	and	r16,r5,r16
 400ba18:	b029883a 	mov	r20,r22
 400ba1c:	b2403fcc 	andi	r9,r22,255
 400ba20:	a8006026 	beq	r21,zero,400bba4 <__muldf3+0x1d0>
 400ba24:	0081ffc4 	movi	r2,2047
 400ba28:	2027883a 	mov	r19,r4
 400ba2c:	a8803626 	beq	r21,r2,400bb08 <__muldf3+0x134>
 400ba30:	80c00434 	orhi	r3,r16,16
 400ba34:	180690fa 	slli	r3,r3,3
 400ba38:	2020d77a 	srli	r16,r4,29
 400ba3c:	202690fa 	slli	r19,r4,3
 400ba40:	ad7f0044 	addi	r21,r21,-1023
 400ba44:	80e0b03a 	or	r16,r16,r3
 400ba48:	0025883a 	mov	r18,zero
 400ba4c:	0039883a 	mov	fp,zero
 400ba50:	3808d53a 	srli	r4,r7,20
 400ba54:	382ed7fa 	srli	r23,r7,31
 400ba58:	04400434 	movhi	r17,16
 400ba5c:	8c7fffc4 	addi	r17,r17,-1
 400ba60:	2101ffcc 	andi	r4,r4,2047
 400ba64:	3011883a 	mov	r8,r6
 400ba68:	3c62703a 	and	r17,r7,r17
 400ba6c:	ba803fcc 	andi	r10,r23,255
 400ba70:	20006d26 	beq	r4,zero,400bc28 <__muldf3+0x254>
 400ba74:	0081ffc4 	movi	r2,2047
 400ba78:	20806526 	beq	r4,r2,400bc10 <__muldf3+0x23c>
 400ba7c:	88c00434 	orhi	r3,r17,16
 400ba80:	180690fa 	slli	r3,r3,3
 400ba84:	3022d77a 	srli	r17,r6,29
 400ba88:	301090fa 	slli	r8,r6,3
 400ba8c:	213f0044 	addi	r4,r4,-1023
 400ba90:	88e2b03a 	or	r17,r17,r3
 400ba94:	000b883a 	mov	r5,zero
 400ba98:	a909883a 	add	r4,r21,r4
 400ba9c:	2c84b03a 	or	r2,r5,r18
 400baa0:	00c003c4 	movi	r3,15
 400baa4:	bdacf03a 	xor	r22,r23,r22
 400baa8:	22c00044 	addi	r11,r4,1
 400baac:	18809936 	bltu	r3,r2,400bd14 <__muldf3+0x340>
 400bab0:	100490ba 	slli	r2,r2,2
 400bab4:	00c10074 	movhi	r3,1025
 400bab8:	18eeb204 	addi	r3,r3,-17720
 400babc:	10c5883a 	add	r2,r2,r3
 400bac0:	10800017 	ldw	r2,0(r2)
 400bac4:	1000683a 	jmp	r2
 400bac8:	0400bd14 	movui	r16,756
 400bacc:	0400bb28 	cmpgeui	r16,zero,748
 400bad0:	0400bb28 	cmpgeui	r16,zero,748
 400bad4:	0400bb24 	muli	r16,zero,748
 400bad8:	0400bcf0 	cmpltui	r16,zero,755
 400badc:	0400bcf0 	cmpltui	r16,zero,755
 400bae0:	0400bcd8 	cmpnei	r16,zero,755
 400bae4:	0400bb24 	muli	r16,zero,748
 400bae8:	0400bcf0 	cmpltui	r16,zero,755
 400baec:	0400bcd8 	cmpnei	r16,zero,755
 400baf0:	0400bcf0 	cmpltui	r16,zero,755
 400baf4:	0400bb24 	muli	r16,zero,748
 400baf8:	0400bd00 	call	400bd0 <__alt_mem_new_sdram_controller_0-0x3bff430>
 400bafc:	0400bd00 	call	400bd0 <__alt_mem_new_sdram_controller_0-0x3bff430>
 400bb00:	0400bd00 	call	400bd0 <__alt_mem_new_sdram_controller_0-0x3bff430>
 400bb04:	0400bf1c 	xori	r16,zero,764
 400bb08:	2404b03a 	or	r2,r4,r16
 400bb0c:	10006f1e 	bne	r2,zero,400bccc <__muldf3+0x2f8>
 400bb10:	04800204 	movi	r18,8
 400bb14:	0021883a 	mov	r16,zero
 400bb18:	0027883a 	mov	r19,zero
 400bb1c:	07000084 	movi	fp,2
 400bb20:	003fcb06 	br	400ba50 <__ram_exceptions_end+0xfbfeb80c>
 400bb24:	502d883a 	mov	r22,r10
 400bb28:	00800084 	movi	r2,2
 400bb2c:	28805726 	beq	r5,r2,400bc8c <__muldf3+0x2b8>
 400bb30:	008000c4 	movi	r2,3
 400bb34:	28816626 	beq	r5,r2,400c0d0 <__muldf3+0x6fc>
 400bb38:	00800044 	movi	r2,1
 400bb3c:	2881411e 	bne	r5,r2,400c044 <__muldf3+0x670>
 400bb40:	b029883a 	mov	r20,r22
 400bb44:	0005883a 	mov	r2,zero
 400bb48:	000b883a 	mov	r5,zero
 400bb4c:	0027883a 	mov	r19,zero
 400bb50:	1004953a 	slli	r2,r2,20
 400bb54:	a0c03fcc 	andi	r3,r20,255
 400bb58:	04400434 	movhi	r17,16
 400bb5c:	8c7fffc4 	addi	r17,r17,-1
 400bb60:	180697fa 	slli	r3,r3,31
 400bb64:	2c4a703a 	and	r5,r5,r17
 400bb68:	288ab03a 	or	r5,r5,r2
 400bb6c:	28c6b03a 	or	r3,r5,r3
 400bb70:	9805883a 	mov	r2,r19
 400bb74:	dfc00c17 	ldw	ra,48(sp)
 400bb78:	df000b17 	ldw	fp,44(sp)
 400bb7c:	ddc00a17 	ldw	r23,40(sp)
 400bb80:	dd800917 	ldw	r22,36(sp)
 400bb84:	dd400817 	ldw	r21,32(sp)
 400bb88:	dd000717 	ldw	r20,28(sp)
 400bb8c:	dcc00617 	ldw	r19,24(sp)
 400bb90:	dc800517 	ldw	r18,20(sp)
 400bb94:	dc400417 	ldw	r17,16(sp)
 400bb98:	dc000317 	ldw	r16,12(sp)
 400bb9c:	dec00d04 	addi	sp,sp,52
 400bba0:	f800283a 	ret
 400bba4:	2404b03a 	or	r2,r4,r16
 400bba8:	2025883a 	mov	r18,r4
 400bbac:	10004226 	beq	r2,zero,400bcb8 <__muldf3+0x2e4>
 400bbb0:	8000fc26 	beq	r16,zero,400bfa4 <__muldf3+0x5d0>
 400bbb4:	8009883a 	mov	r4,r16
 400bbb8:	d9800215 	stw	r6,8(sp)
 400bbbc:	d9c00015 	stw	r7,0(sp)
 400bbc0:	da400115 	stw	r9,4(sp)
 400bbc4:	400cbec0 	call	400cbec <__clzsi2>
 400bbc8:	d9800217 	ldw	r6,8(sp)
 400bbcc:	d9c00017 	ldw	r7,0(sp)
 400bbd0:	da400117 	ldw	r9,4(sp)
 400bbd4:	10fffd44 	addi	r3,r2,-11
 400bbd8:	01000704 	movi	r4,28
 400bbdc:	20c0ed16 	blt	r4,r3,400bf94 <__muldf3+0x5c0>
 400bbe0:	01000744 	movi	r4,29
 400bbe4:	147ffe04 	addi	r17,r2,-8
 400bbe8:	20c9c83a 	sub	r4,r4,r3
 400bbec:	8460983a 	sll	r16,r16,r17
 400bbf0:	9108d83a 	srl	r4,r18,r4
 400bbf4:	9466983a 	sll	r19,r18,r17
 400bbf8:	2420b03a 	or	r16,r4,r16
 400bbfc:	013f0084 	movi	r4,-1022
 400bc00:	20ebc83a 	sub	r21,r4,r3
 400bc04:	0025883a 	mov	r18,zero
 400bc08:	0039883a 	mov	fp,zero
 400bc0c:	003f9006 	br	400ba50 <__ram_exceptions_end+0xfbfeb80c>
 400bc10:	3444b03a 	or	r2,r6,r17
 400bc14:	1000261e 	bne	r2,zero,400bcb0 <__muldf3+0x2dc>
 400bc18:	0023883a 	mov	r17,zero
 400bc1c:	0011883a 	mov	r8,zero
 400bc20:	01400084 	movi	r5,2
 400bc24:	003f9c06 	br	400ba98 <__ram_exceptions_end+0xfbfeb854>
 400bc28:	3444b03a 	or	r2,r6,r17
 400bc2c:	10001c26 	beq	r2,zero,400bca0 <__muldf3+0x2cc>
 400bc30:	8800ce26 	beq	r17,zero,400bf6c <__muldf3+0x598>
 400bc34:	8809883a 	mov	r4,r17
 400bc38:	d9800215 	stw	r6,8(sp)
 400bc3c:	da400115 	stw	r9,4(sp)
 400bc40:	da800015 	stw	r10,0(sp)
 400bc44:	400cbec0 	call	400cbec <__clzsi2>
 400bc48:	d9800217 	ldw	r6,8(sp)
 400bc4c:	da400117 	ldw	r9,4(sp)
 400bc50:	da800017 	ldw	r10,0(sp)
 400bc54:	113ffd44 	addi	r4,r2,-11
 400bc58:	00c00704 	movi	r3,28
 400bc5c:	1900bf16 	blt	r3,r4,400bf5c <__muldf3+0x588>
 400bc60:	00c00744 	movi	r3,29
 400bc64:	123ffe04 	addi	r8,r2,-8
 400bc68:	1907c83a 	sub	r3,r3,r4
 400bc6c:	8a22983a 	sll	r17,r17,r8
 400bc70:	30c6d83a 	srl	r3,r6,r3
 400bc74:	3210983a 	sll	r8,r6,r8
 400bc78:	1c62b03a 	or	r17,r3,r17
 400bc7c:	017f0084 	movi	r5,-1022
 400bc80:	2909c83a 	sub	r4,r5,r4
 400bc84:	000b883a 	mov	r5,zero
 400bc88:	003f8306 	br	400ba98 <__ram_exceptions_end+0xfbfeb854>
 400bc8c:	b029883a 	mov	r20,r22
 400bc90:	0081ffc4 	movi	r2,2047
 400bc94:	000b883a 	mov	r5,zero
 400bc98:	0027883a 	mov	r19,zero
 400bc9c:	003fac06 	br	400bb50 <__ram_exceptions_end+0xfbfeb90c>
 400bca0:	0023883a 	mov	r17,zero
 400bca4:	0011883a 	mov	r8,zero
 400bca8:	01400044 	movi	r5,1
 400bcac:	003f7a06 	br	400ba98 <__ram_exceptions_end+0xfbfeb854>
 400bcb0:	014000c4 	movi	r5,3
 400bcb4:	003f7806 	br	400ba98 <__ram_exceptions_end+0xfbfeb854>
 400bcb8:	04800104 	movi	r18,4
 400bcbc:	0021883a 	mov	r16,zero
 400bcc0:	0027883a 	mov	r19,zero
 400bcc4:	07000044 	movi	fp,1
 400bcc8:	003f6106 	br	400ba50 <__ram_exceptions_end+0xfbfeb80c>
 400bccc:	04800304 	movi	r18,12
 400bcd0:	070000c4 	movi	fp,3
 400bcd4:	003f5e06 	br	400ba50 <__ram_exceptions_end+0xfbfeb80c>
 400bcd8:	01400434 	movhi	r5,16
 400bcdc:	0029883a 	mov	r20,zero
 400bce0:	297fffc4 	addi	r5,r5,-1
 400bce4:	04ffffc4 	movi	r19,-1
 400bce8:	0081ffc4 	movi	r2,2047
 400bcec:	003f9806 	br	400bb50 <__ram_exceptions_end+0xfbfeb90c>
 400bcf0:	8023883a 	mov	r17,r16
 400bcf4:	9811883a 	mov	r8,r19
 400bcf8:	e00b883a 	mov	r5,fp
 400bcfc:	003f8a06 	br	400bb28 <__ram_exceptions_end+0xfbfeb8e4>
 400bd00:	8023883a 	mov	r17,r16
 400bd04:	9811883a 	mov	r8,r19
 400bd08:	482d883a 	mov	r22,r9
 400bd0c:	e00b883a 	mov	r5,fp
 400bd10:	003f8506 	br	400bb28 <__ram_exceptions_end+0xfbfeb8e4>
 400bd14:	980ad43a 	srli	r5,r19,16
 400bd18:	401ad43a 	srli	r13,r8,16
 400bd1c:	9cffffcc 	andi	r19,r19,65535
 400bd20:	423fffcc 	andi	r8,r8,65535
 400bd24:	44d9383a 	mul	r12,r8,r19
 400bd28:	4145383a 	mul	r2,r8,r5
 400bd2c:	6ccd383a 	mul	r6,r13,r19
 400bd30:	6006d43a 	srli	r3,r12,16
 400bd34:	2b5d383a 	mul	r14,r5,r13
 400bd38:	308d883a 	add	r6,r6,r2
 400bd3c:	198d883a 	add	r6,r3,r6
 400bd40:	3080022e 	bgeu	r6,r2,400bd4c <__muldf3+0x378>
 400bd44:	00800074 	movhi	r2,1
 400bd48:	709d883a 	add	r14,r14,r2
 400bd4c:	8828d43a 	srli	r20,r17,16
 400bd50:	8bffffcc 	andi	r15,r17,65535
 400bd54:	7ce3383a 	mul	r17,r15,r19
 400bd58:	7945383a 	mul	r2,r15,r5
 400bd5c:	a4e7383a 	mul	r19,r20,r19
 400bd60:	8814d43a 	srli	r10,r17,16
 400bd64:	3012943a 	slli	r9,r6,16
 400bd68:	98a7883a 	add	r19,r19,r2
 400bd6c:	633fffcc 	andi	r12,r12,65535
 400bd70:	54d5883a 	add	r10,r10,r19
 400bd74:	3006d43a 	srli	r3,r6,16
 400bd78:	4b13883a 	add	r9,r9,r12
 400bd7c:	2d0b383a 	mul	r5,r5,r20
 400bd80:	5080022e 	bgeu	r10,r2,400bd8c <__muldf3+0x3b8>
 400bd84:	00800074 	movhi	r2,1
 400bd88:	288b883a 	add	r5,r5,r2
 400bd8c:	802ad43a 	srli	r21,r16,16
 400bd90:	843fffcc 	andi	r16,r16,65535
 400bd94:	440d383a 	mul	r6,r8,r16
 400bd98:	4565383a 	mul	r18,r8,r21
 400bd9c:	8359383a 	mul	r12,r16,r13
 400bda0:	500e943a 	slli	r7,r10,16
 400bda4:	3010d43a 	srli	r8,r6,16
 400bda8:	5026d43a 	srli	r19,r10,16
 400bdac:	6499883a 	add	r12,r12,r18
 400bdb0:	8abfffcc 	andi	r10,r17,65535
 400bdb4:	3a95883a 	add	r10,r7,r10
 400bdb8:	4319883a 	add	r12,r8,r12
 400bdbc:	9967883a 	add	r19,r19,r5
 400bdc0:	1a87883a 	add	r3,r3,r10
 400bdc4:	6d5b383a 	mul	r13,r13,r21
 400bdc8:	6480022e 	bgeu	r12,r18,400bdd4 <__muldf3+0x400>
 400bdcc:	00800074 	movhi	r2,1
 400bdd0:	689b883a 	add	r13,r13,r2
 400bdd4:	7c25383a 	mul	r18,r15,r16
 400bdd8:	7d4b383a 	mul	r5,r15,r21
 400bddc:	850f383a 	mul	r7,r16,r20
 400bde0:	901ed43a 	srli	r15,r18,16
 400bde4:	6004d43a 	srli	r2,r12,16
 400bde8:	6010943a 	slli	r8,r12,16
 400bdec:	394f883a 	add	r7,r7,r5
 400bdf0:	333fffcc 	andi	r12,r6,65535
 400bdf4:	79df883a 	add	r15,r15,r7
 400bdf8:	135b883a 	add	r13,r2,r13
 400bdfc:	a563383a 	mul	r17,r20,r21
 400be00:	4305883a 	add	r2,r8,r12
 400be04:	7940022e 	bgeu	r15,r5,400be10 <__muldf3+0x43c>
 400be08:	01400074 	movhi	r5,1
 400be0c:	8963883a 	add	r17,r17,r5
 400be10:	780a943a 	slli	r5,r15,16
 400be14:	91bfffcc 	andi	r6,r18,65535
 400be18:	70c7883a 	add	r3,r14,r3
 400be1c:	298d883a 	add	r6,r5,r6
 400be20:	1a8f803a 	cmpltu	r7,r3,r10
 400be24:	34cb883a 	add	r5,r6,r19
 400be28:	10c7883a 	add	r3,r2,r3
 400be2c:	3955883a 	add	r10,r7,r5
 400be30:	1885803a 	cmpltu	r2,r3,r2
 400be34:	6a91883a 	add	r8,r13,r10
 400be38:	780cd43a 	srli	r6,r15,16
 400be3c:	1219883a 	add	r12,r2,r8
 400be40:	2ccb803a 	cmpltu	r5,r5,r19
 400be44:	51cf803a 	cmpltu	r7,r10,r7
 400be48:	29ceb03a 	or	r7,r5,r7
 400be4c:	4351803a 	cmpltu	r8,r8,r13
 400be50:	608b803a 	cmpltu	r5,r12,r2
 400be54:	4144b03a 	or	r2,r8,r5
 400be58:	398f883a 	add	r7,r7,r6
 400be5c:	3885883a 	add	r2,r7,r2
 400be60:	1810927a 	slli	r8,r3,9
 400be64:	1445883a 	add	r2,r2,r17
 400be68:	1004927a 	slli	r2,r2,9
 400be6c:	6022d5fa 	srli	r17,r12,23
 400be70:	1806d5fa 	srli	r3,r3,23
 400be74:	4252b03a 	or	r9,r8,r9
 400be78:	600a927a 	slli	r5,r12,9
 400be7c:	4810c03a 	cmpne	r8,r9,zero
 400be80:	1462b03a 	or	r17,r2,r17
 400be84:	40c6b03a 	or	r3,r8,r3
 400be88:	8880402c 	andhi	r2,r17,256
 400be8c:	1950b03a 	or	r8,r3,r5
 400be90:	10000726 	beq	r2,zero,400beb0 <__muldf3+0x4dc>
 400be94:	4006d07a 	srli	r3,r8,1
 400be98:	880497fa 	slli	r2,r17,31
 400be9c:	4200004c 	andi	r8,r8,1
 400bea0:	8822d07a 	srli	r17,r17,1
 400bea4:	1a10b03a 	or	r8,r3,r8
 400bea8:	1210b03a 	or	r8,r2,r8
 400beac:	5809883a 	mov	r4,r11
 400beb0:	2080ffc4 	addi	r2,r4,1023
 400beb4:	0080440e 	bge	zero,r2,400bfc8 <__muldf3+0x5f4>
 400beb8:	40c001cc 	andi	r3,r8,7
 400bebc:	18000726 	beq	r3,zero,400bedc <__muldf3+0x508>
 400bec0:	40c003cc 	andi	r3,r8,15
 400bec4:	01400104 	movi	r5,4
 400bec8:	19400426 	beq	r3,r5,400bedc <__muldf3+0x508>
 400becc:	4147883a 	add	r3,r8,r5
 400bed0:	1a11803a 	cmpltu	r8,r3,r8
 400bed4:	8a23883a 	add	r17,r17,r8
 400bed8:	1811883a 	mov	r8,r3
 400bedc:	88c0402c 	andhi	r3,r17,256
 400bee0:	18000426 	beq	r3,zero,400bef4 <__muldf3+0x520>
 400bee4:	00ffc034 	movhi	r3,65280
 400bee8:	18ffffc4 	addi	r3,r3,-1
 400beec:	20810004 	addi	r2,r4,1024
 400bef0:	88e2703a 	and	r17,r17,r3
 400bef4:	00c1ff84 	movi	r3,2046
 400bef8:	18bf6416 	blt	r3,r2,400bc8c <__ram_exceptions_end+0xfbfeba48>
 400befc:	8826977a 	slli	r19,r17,29
 400bf00:	4010d0fa 	srli	r8,r8,3
 400bf04:	8822927a 	slli	r17,r17,9
 400bf08:	1081ffcc 	andi	r2,r2,2047
 400bf0c:	9a26b03a 	or	r19,r19,r8
 400bf10:	880ad33a 	srli	r5,r17,12
 400bf14:	b029883a 	mov	r20,r22
 400bf18:	003f0d06 	br	400bb50 <__ram_exceptions_end+0xfbfeb90c>
 400bf1c:	8080022c 	andhi	r2,r16,8
 400bf20:	10000926 	beq	r2,zero,400bf48 <__muldf3+0x574>
 400bf24:	8880022c 	andhi	r2,r17,8
 400bf28:	1000071e 	bne	r2,zero,400bf48 <__muldf3+0x574>
 400bf2c:	00800434 	movhi	r2,16
 400bf30:	89400234 	orhi	r5,r17,8
 400bf34:	10bfffc4 	addi	r2,r2,-1
 400bf38:	b829883a 	mov	r20,r23
 400bf3c:	288a703a 	and	r5,r5,r2
 400bf40:	4027883a 	mov	r19,r8
 400bf44:	003f6806 	br	400bce8 <__ram_exceptions_end+0xfbfebaa4>
 400bf48:	00800434 	movhi	r2,16
 400bf4c:	81400234 	orhi	r5,r16,8
 400bf50:	10bfffc4 	addi	r2,r2,-1
 400bf54:	288a703a 	and	r5,r5,r2
 400bf58:	003f6306 	br	400bce8 <__ram_exceptions_end+0xfbfebaa4>
 400bf5c:	10bff604 	addi	r2,r2,-40
 400bf60:	30a2983a 	sll	r17,r6,r2
 400bf64:	0011883a 	mov	r8,zero
 400bf68:	003f4406 	br	400bc7c <__ram_exceptions_end+0xfbfeba38>
 400bf6c:	3009883a 	mov	r4,r6
 400bf70:	d9800215 	stw	r6,8(sp)
 400bf74:	da400115 	stw	r9,4(sp)
 400bf78:	da800015 	stw	r10,0(sp)
 400bf7c:	400cbec0 	call	400cbec <__clzsi2>
 400bf80:	10800804 	addi	r2,r2,32
 400bf84:	da800017 	ldw	r10,0(sp)
 400bf88:	da400117 	ldw	r9,4(sp)
 400bf8c:	d9800217 	ldw	r6,8(sp)
 400bf90:	003f3006 	br	400bc54 <__ram_exceptions_end+0xfbfeba10>
 400bf94:	10bff604 	addi	r2,r2,-40
 400bf98:	90a0983a 	sll	r16,r18,r2
 400bf9c:	0027883a 	mov	r19,zero
 400bfa0:	003f1606 	br	400bbfc <__ram_exceptions_end+0xfbfeb9b8>
 400bfa4:	d9800215 	stw	r6,8(sp)
 400bfa8:	d9c00015 	stw	r7,0(sp)
 400bfac:	da400115 	stw	r9,4(sp)
 400bfb0:	400cbec0 	call	400cbec <__clzsi2>
 400bfb4:	10800804 	addi	r2,r2,32
 400bfb8:	da400117 	ldw	r9,4(sp)
 400bfbc:	d9c00017 	ldw	r7,0(sp)
 400bfc0:	d9800217 	ldw	r6,8(sp)
 400bfc4:	003f0306 	br	400bbd4 <__ram_exceptions_end+0xfbfeb990>
 400bfc8:	00c00044 	movi	r3,1
 400bfcc:	1887c83a 	sub	r3,r3,r2
 400bfd0:	01000e04 	movi	r4,56
 400bfd4:	20feda16 	blt	r4,r3,400bb40 <__ram_exceptions_end+0xfbfeb8fc>
 400bfd8:	010007c4 	movi	r4,31
 400bfdc:	20c01b16 	blt	r4,r3,400c04c <__muldf3+0x678>
 400bfe0:	00800804 	movi	r2,32
 400bfe4:	10c5c83a 	sub	r2,r2,r3
 400bfe8:	888a983a 	sll	r5,r17,r2
 400bfec:	40c8d83a 	srl	r4,r8,r3
 400bff0:	4084983a 	sll	r2,r8,r2
 400bff4:	88e2d83a 	srl	r17,r17,r3
 400bff8:	2906b03a 	or	r3,r5,r4
 400bffc:	1004c03a 	cmpne	r2,r2,zero
 400c000:	1886b03a 	or	r3,r3,r2
 400c004:	188001cc 	andi	r2,r3,7
 400c008:	10000726 	beq	r2,zero,400c028 <__muldf3+0x654>
 400c00c:	188003cc 	andi	r2,r3,15
 400c010:	01000104 	movi	r4,4
 400c014:	11000426 	beq	r2,r4,400c028 <__muldf3+0x654>
 400c018:	1805883a 	mov	r2,r3
 400c01c:	10c00104 	addi	r3,r2,4
 400c020:	1885803a 	cmpltu	r2,r3,r2
 400c024:	88a3883a 	add	r17,r17,r2
 400c028:	8880202c 	andhi	r2,r17,128
 400c02c:	10001c26 	beq	r2,zero,400c0a0 <__muldf3+0x6cc>
 400c030:	b029883a 	mov	r20,r22
 400c034:	00800044 	movi	r2,1
 400c038:	000b883a 	mov	r5,zero
 400c03c:	0027883a 	mov	r19,zero
 400c040:	003ec306 	br	400bb50 <__ram_exceptions_end+0xfbfeb90c>
 400c044:	5809883a 	mov	r4,r11
 400c048:	003f9906 	br	400beb0 <__ram_exceptions_end+0xfbfebc6c>
 400c04c:	013ff844 	movi	r4,-31
 400c050:	2085c83a 	sub	r2,r4,r2
 400c054:	8888d83a 	srl	r4,r17,r2
 400c058:	00800804 	movi	r2,32
 400c05c:	18801a26 	beq	r3,r2,400c0c8 <__muldf3+0x6f4>
 400c060:	00801004 	movi	r2,64
 400c064:	10c5c83a 	sub	r2,r2,r3
 400c068:	8884983a 	sll	r2,r17,r2
 400c06c:	1204b03a 	or	r2,r2,r8
 400c070:	1004c03a 	cmpne	r2,r2,zero
 400c074:	2084b03a 	or	r2,r4,r2
 400c078:	144001cc 	andi	r17,r2,7
 400c07c:	88000d1e 	bne	r17,zero,400c0b4 <__muldf3+0x6e0>
 400c080:	000b883a 	mov	r5,zero
 400c084:	1026d0fa 	srli	r19,r2,3
 400c088:	b029883a 	mov	r20,r22
 400c08c:	0005883a 	mov	r2,zero
 400c090:	9c66b03a 	or	r19,r19,r17
 400c094:	003eae06 	br	400bb50 <__ram_exceptions_end+0xfbfeb90c>
 400c098:	1007883a 	mov	r3,r2
 400c09c:	0023883a 	mov	r17,zero
 400c0a0:	880a927a 	slli	r5,r17,9
 400c0a4:	1805883a 	mov	r2,r3
 400c0a8:	8822977a 	slli	r17,r17,29
 400c0ac:	280ad33a 	srli	r5,r5,12
 400c0b0:	003ff406 	br	400c084 <__ram_exceptions_end+0xfbfebe40>
 400c0b4:	10c003cc 	andi	r3,r2,15
 400c0b8:	01000104 	movi	r4,4
 400c0bc:	193ff626 	beq	r3,r4,400c098 <__ram_exceptions_end+0xfbfebe54>
 400c0c0:	0023883a 	mov	r17,zero
 400c0c4:	003fd506 	br	400c01c <__ram_exceptions_end+0xfbfebdd8>
 400c0c8:	0005883a 	mov	r2,zero
 400c0cc:	003fe706 	br	400c06c <__ram_exceptions_end+0xfbfebe28>
 400c0d0:	00800434 	movhi	r2,16
 400c0d4:	89400234 	orhi	r5,r17,8
 400c0d8:	10bfffc4 	addi	r2,r2,-1
 400c0dc:	b029883a 	mov	r20,r22
 400c0e0:	288a703a 	and	r5,r5,r2
 400c0e4:	4027883a 	mov	r19,r8
 400c0e8:	003eff06 	br	400bce8 <__ram_exceptions_end+0xfbfebaa4>

0400c0ec <__subdf3>:
 400c0ec:	02000434 	movhi	r8,16
 400c0f0:	423fffc4 	addi	r8,r8,-1
 400c0f4:	defffb04 	addi	sp,sp,-20
 400c0f8:	2a14703a 	and	r10,r5,r8
 400c0fc:	3812d53a 	srli	r9,r7,20
 400c100:	3a10703a 	and	r8,r7,r8
 400c104:	2006d77a 	srli	r3,r4,29
 400c108:	3004d77a 	srli	r2,r6,29
 400c10c:	dc000015 	stw	r16,0(sp)
 400c110:	501490fa 	slli	r10,r10,3
 400c114:	2820d53a 	srli	r16,r5,20
 400c118:	401090fa 	slli	r8,r8,3
 400c11c:	dc800215 	stw	r18,8(sp)
 400c120:	dc400115 	stw	r17,4(sp)
 400c124:	dfc00415 	stw	ra,16(sp)
 400c128:	202290fa 	slli	r17,r4,3
 400c12c:	dcc00315 	stw	r19,12(sp)
 400c130:	4a41ffcc 	andi	r9,r9,2047
 400c134:	0101ffc4 	movi	r4,2047
 400c138:	2824d7fa 	srli	r18,r5,31
 400c13c:	8401ffcc 	andi	r16,r16,2047
 400c140:	50c6b03a 	or	r3,r10,r3
 400c144:	380ed7fa 	srli	r7,r7,31
 400c148:	408ab03a 	or	r5,r8,r2
 400c14c:	300c90fa 	slli	r6,r6,3
 400c150:	49009626 	beq	r9,r4,400c3ac <__subdf3+0x2c0>
 400c154:	39c0005c 	xori	r7,r7,1
 400c158:	8245c83a 	sub	r2,r16,r9
 400c15c:	3c807426 	beq	r7,r18,400c330 <__subdf3+0x244>
 400c160:	0080af0e 	bge	zero,r2,400c420 <__subdf3+0x334>
 400c164:	48002a1e 	bne	r9,zero,400c210 <__subdf3+0x124>
 400c168:	2988b03a 	or	r4,r5,r6
 400c16c:	20009a1e 	bne	r4,zero,400c3d8 <__subdf3+0x2ec>
 400c170:	888001cc 	andi	r2,r17,7
 400c174:	10000726 	beq	r2,zero,400c194 <__subdf3+0xa8>
 400c178:	888003cc 	andi	r2,r17,15
 400c17c:	01000104 	movi	r4,4
 400c180:	11000426 	beq	r2,r4,400c194 <__subdf3+0xa8>
 400c184:	890b883a 	add	r5,r17,r4
 400c188:	2c63803a 	cmpltu	r17,r5,r17
 400c18c:	1c47883a 	add	r3,r3,r17
 400c190:	2823883a 	mov	r17,r5
 400c194:	1880202c 	andhi	r2,r3,128
 400c198:	10005926 	beq	r2,zero,400c300 <__subdf3+0x214>
 400c19c:	84000044 	addi	r16,r16,1
 400c1a0:	0081ffc4 	movi	r2,2047
 400c1a4:	8080be26 	beq	r16,r2,400c4a0 <__subdf3+0x3b4>
 400c1a8:	017fe034 	movhi	r5,65408
 400c1ac:	297fffc4 	addi	r5,r5,-1
 400c1b0:	1946703a 	and	r3,r3,r5
 400c1b4:	1804977a 	slli	r2,r3,29
 400c1b8:	1806927a 	slli	r3,r3,9
 400c1bc:	8822d0fa 	srli	r17,r17,3
 400c1c0:	8401ffcc 	andi	r16,r16,2047
 400c1c4:	180ad33a 	srli	r5,r3,12
 400c1c8:	9100004c 	andi	r4,r18,1
 400c1cc:	1444b03a 	or	r2,r2,r17
 400c1d0:	80c1ffcc 	andi	r3,r16,2047
 400c1d4:	1820953a 	slli	r16,r3,20
 400c1d8:	20c03fcc 	andi	r3,r4,255
 400c1dc:	180897fa 	slli	r4,r3,31
 400c1e0:	00c00434 	movhi	r3,16
 400c1e4:	18ffffc4 	addi	r3,r3,-1
 400c1e8:	28c6703a 	and	r3,r5,r3
 400c1ec:	1c06b03a 	or	r3,r3,r16
 400c1f0:	1906b03a 	or	r3,r3,r4
 400c1f4:	dfc00417 	ldw	ra,16(sp)
 400c1f8:	dcc00317 	ldw	r19,12(sp)
 400c1fc:	dc800217 	ldw	r18,8(sp)
 400c200:	dc400117 	ldw	r17,4(sp)
 400c204:	dc000017 	ldw	r16,0(sp)
 400c208:	dec00504 	addi	sp,sp,20
 400c20c:	f800283a 	ret
 400c210:	0101ffc4 	movi	r4,2047
 400c214:	813fd626 	beq	r16,r4,400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c218:	29402034 	orhi	r5,r5,128
 400c21c:	01000e04 	movi	r4,56
 400c220:	2080a316 	blt	r4,r2,400c4b0 <__subdf3+0x3c4>
 400c224:	010007c4 	movi	r4,31
 400c228:	2080c616 	blt	r4,r2,400c544 <__subdf3+0x458>
 400c22c:	01000804 	movi	r4,32
 400c230:	2089c83a 	sub	r4,r4,r2
 400c234:	2910983a 	sll	r8,r5,r4
 400c238:	308ed83a 	srl	r7,r6,r2
 400c23c:	3108983a 	sll	r4,r6,r4
 400c240:	2884d83a 	srl	r2,r5,r2
 400c244:	41ccb03a 	or	r6,r8,r7
 400c248:	2008c03a 	cmpne	r4,r4,zero
 400c24c:	310cb03a 	or	r6,r6,r4
 400c250:	898dc83a 	sub	r6,r17,r6
 400c254:	89a3803a 	cmpltu	r17,r17,r6
 400c258:	1887c83a 	sub	r3,r3,r2
 400c25c:	1c47c83a 	sub	r3,r3,r17
 400c260:	3023883a 	mov	r17,r6
 400c264:	1880202c 	andhi	r2,r3,128
 400c268:	10002326 	beq	r2,zero,400c2f8 <__subdf3+0x20c>
 400c26c:	04c02034 	movhi	r19,128
 400c270:	9cffffc4 	addi	r19,r19,-1
 400c274:	1ce6703a 	and	r19,r3,r19
 400c278:	98007a26 	beq	r19,zero,400c464 <__subdf3+0x378>
 400c27c:	9809883a 	mov	r4,r19
 400c280:	400cbec0 	call	400cbec <__clzsi2>
 400c284:	113ffe04 	addi	r4,r2,-8
 400c288:	00c007c4 	movi	r3,31
 400c28c:	19007b16 	blt	r3,r4,400c47c <__subdf3+0x390>
 400c290:	00800804 	movi	r2,32
 400c294:	1105c83a 	sub	r2,r2,r4
 400c298:	8884d83a 	srl	r2,r17,r2
 400c29c:	9906983a 	sll	r3,r19,r4
 400c2a0:	8922983a 	sll	r17,r17,r4
 400c2a4:	10c4b03a 	or	r2,r2,r3
 400c2a8:	24007816 	blt	r4,r16,400c48c <__subdf3+0x3a0>
 400c2ac:	2421c83a 	sub	r16,r4,r16
 400c2b0:	80c00044 	addi	r3,r16,1
 400c2b4:	010007c4 	movi	r4,31
 400c2b8:	20c09516 	blt	r4,r3,400c510 <__subdf3+0x424>
 400c2bc:	01400804 	movi	r5,32
 400c2c0:	28cbc83a 	sub	r5,r5,r3
 400c2c4:	88c8d83a 	srl	r4,r17,r3
 400c2c8:	8962983a 	sll	r17,r17,r5
 400c2cc:	114a983a 	sll	r5,r2,r5
 400c2d0:	10c6d83a 	srl	r3,r2,r3
 400c2d4:	8804c03a 	cmpne	r2,r17,zero
 400c2d8:	290ab03a 	or	r5,r5,r4
 400c2dc:	28a2b03a 	or	r17,r5,r2
 400c2e0:	0021883a 	mov	r16,zero
 400c2e4:	003fa206 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c2e8:	2090b03a 	or	r8,r4,r2
 400c2ec:	40018e26 	beq	r8,zero,400c928 <__subdf3+0x83c>
 400c2f0:	1007883a 	mov	r3,r2
 400c2f4:	2023883a 	mov	r17,r4
 400c2f8:	888001cc 	andi	r2,r17,7
 400c2fc:	103f9e1e 	bne	r2,zero,400c178 <__ram_exceptions_end+0xfbfebf34>
 400c300:	1804977a 	slli	r2,r3,29
 400c304:	8822d0fa 	srli	r17,r17,3
 400c308:	1810d0fa 	srli	r8,r3,3
 400c30c:	9100004c 	andi	r4,r18,1
 400c310:	1444b03a 	or	r2,r2,r17
 400c314:	00c1ffc4 	movi	r3,2047
 400c318:	80c02826 	beq	r16,r3,400c3bc <__subdf3+0x2d0>
 400c31c:	01400434 	movhi	r5,16
 400c320:	297fffc4 	addi	r5,r5,-1
 400c324:	80e0703a 	and	r16,r16,r3
 400c328:	414a703a 	and	r5,r8,r5
 400c32c:	003fa806 	br	400c1d0 <__ram_exceptions_end+0xfbfebf8c>
 400c330:	0080630e 	bge	zero,r2,400c4c0 <__subdf3+0x3d4>
 400c334:	48003026 	beq	r9,zero,400c3f8 <__subdf3+0x30c>
 400c338:	0101ffc4 	movi	r4,2047
 400c33c:	813f8c26 	beq	r16,r4,400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c340:	29402034 	orhi	r5,r5,128
 400c344:	01000e04 	movi	r4,56
 400c348:	2080a90e 	bge	r4,r2,400c5f0 <__subdf3+0x504>
 400c34c:	298cb03a 	or	r6,r5,r6
 400c350:	3012c03a 	cmpne	r9,r6,zero
 400c354:	0005883a 	mov	r2,zero
 400c358:	4c53883a 	add	r9,r9,r17
 400c35c:	4c63803a 	cmpltu	r17,r9,r17
 400c360:	10c7883a 	add	r3,r2,r3
 400c364:	88c7883a 	add	r3,r17,r3
 400c368:	4823883a 	mov	r17,r9
 400c36c:	1880202c 	andhi	r2,r3,128
 400c370:	1000d026 	beq	r2,zero,400c6b4 <__subdf3+0x5c8>
 400c374:	84000044 	addi	r16,r16,1
 400c378:	0081ffc4 	movi	r2,2047
 400c37c:	8080fe26 	beq	r16,r2,400c778 <__subdf3+0x68c>
 400c380:	00bfe034 	movhi	r2,65408
 400c384:	10bfffc4 	addi	r2,r2,-1
 400c388:	1886703a 	and	r3,r3,r2
 400c38c:	880ad07a 	srli	r5,r17,1
 400c390:	180497fa 	slli	r2,r3,31
 400c394:	8900004c 	andi	r4,r17,1
 400c398:	2922b03a 	or	r17,r5,r4
 400c39c:	1806d07a 	srli	r3,r3,1
 400c3a0:	1462b03a 	or	r17,r2,r17
 400c3a4:	3825883a 	mov	r18,r7
 400c3a8:	003f7106 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c3ac:	2984b03a 	or	r2,r5,r6
 400c3b0:	103f6826 	beq	r2,zero,400c154 <__ram_exceptions_end+0xfbfebf10>
 400c3b4:	39c03fcc 	andi	r7,r7,255
 400c3b8:	003f6706 	br	400c158 <__ram_exceptions_end+0xfbfebf14>
 400c3bc:	4086b03a 	or	r3,r8,r2
 400c3c0:	18015226 	beq	r3,zero,400c90c <__subdf3+0x820>
 400c3c4:	00c00434 	movhi	r3,16
 400c3c8:	41400234 	orhi	r5,r8,8
 400c3cc:	18ffffc4 	addi	r3,r3,-1
 400c3d0:	28ca703a 	and	r5,r5,r3
 400c3d4:	003f7e06 	br	400c1d0 <__ram_exceptions_end+0xfbfebf8c>
 400c3d8:	10bfffc4 	addi	r2,r2,-1
 400c3dc:	1000491e 	bne	r2,zero,400c504 <__subdf3+0x418>
 400c3e0:	898fc83a 	sub	r7,r17,r6
 400c3e4:	89e3803a 	cmpltu	r17,r17,r7
 400c3e8:	1947c83a 	sub	r3,r3,r5
 400c3ec:	1c47c83a 	sub	r3,r3,r17
 400c3f0:	3823883a 	mov	r17,r7
 400c3f4:	003f9b06 	br	400c264 <__ram_exceptions_end+0xfbfec020>
 400c3f8:	2988b03a 	or	r4,r5,r6
 400c3fc:	203f5c26 	beq	r4,zero,400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c400:	10bfffc4 	addi	r2,r2,-1
 400c404:	1000931e 	bne	r2,zero,400c654 <__subdf3+0x568>
 400c408:	898d883a 	add	r6,r17,r6
 400c40c:	3463803a 	cmpltu	r17,r6,r17
 400c410:	1947883a 	add	r3,r3,r5
 400c414:	88c7883a 	add	r3,r17,r3
 400c418:	3023883a 	mov	r17,r6
 400c41c:	003fd306 	br	400c36c <__ram_exceptions_end+0xfbfec128>
 400c420:	1000541e 	bne	r2,zero,400c574 <__subdf3+0x488>
 400c424:	80800044 	addi	r2,r16,1
 400c428:	1081ffcc 	andi	r2,r2,2047
 400c42c:	01000044 	movi	r4,1
 400c430:	2080a20e 	bge	r4,r2,400c6bc <__subdf3+0x5d0>
 400c434:	8989c83a 	sub	r4,r17,r6
 400c438:	8905803a 	cmpltu	r2,r17,r4
 400c43c:	1967c83a 	sub	r19,r3,r5
 400c440:	98a7c83a 	sub	r19,r19,r2
 400c444:	9880202c 	andhi	r2,r19,128
 400c448:	10006326 	beq	r2,zero,400c5d8 <__subdf3+0x4ec>
 400c44c:	3463c83a 	sub	r17,r6,r17
 400c450:	28c7c83a 	sub	r3,r5,r3
 400c454:	344d803a 	cmpltu	r6,r6,r17
 400c458:	19a7c83a 	sub	r19,r3,r6
 400c45c:	3825883a 	mov	r18,r7
 400c460:	983f861e 	bne	r19,zero,400c27c <__ram_exceptions_end+0xfbfec038>
 400c464:	8809883a 	mov	r4,r17
 400c468:	400cbec0 	call	400cbec <__clzsi2>
 400c46c:	10800804 	addi	r2,r2,32
 400c470:	113ffe04 	addi	r4,r2,-8
 400c474:	00c007c4 	movi	r3,31
 400c478:	193f850e 	bge	r3,r4,400c290 <__ram_exceptions_end+0xfbfec04c>
 400c47c:	10bff604 	addi	r2,r2,-40
 400c480:	8884983a 	sll	r2,r17,r2
 400c484:	0023883a 	mov	r17,zero
 400c488:	243f880e 	bge	r4,r16,400c2ac <__ram_exceptions_end+0xfbfec068>
 400c48c:	00ffe034 	movhi	r3,65408
 400c490:	18ffffc4 	addi	r3,r3,-1
 400c494:	8121c83a 	sub	r16,r16,r4
 400c498:	10c6703a 	and	r3,r2,r3
 400c49c:	003f3406 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c4a0:	9100004c 	andi	r4,r18,1
 400c4a4:	000b883a 	mov	r5,zero
 400c4a8:	0005883a 	mov	r2,zero
 400c4ac:	003f4806 	br	400c1d0 <__ram_exceptions_end+0xfbfebf8c>
 400c4b0:	298cb03a 	or	r6,r5,r6
 400c4b4:	300cc03a 	cmpne	r6,r6,zero
 400c4b8:	0005883a 	mov	r2,zero
 400c4bc:	003f6406 	br	400c250 <__ram_exceptions_end+0xfbfec00c>
 400c4c0:	10009a1e 	bne	r2,zero,400c72c <__subdf3+0x640>
 400c4c4:	82400044 	addi	r9,r16,1
 400c4c8:	4881ffcc 	andi	r2,r9,2047
 400c4cc:	02800044 	movi	r10,1
 400c4d0:	5080670e 	bge	r10,r2,400c670 <__subdf3+0x584>
 400c4d4:	0081ffc4 	movi	r2,2047
 400c4d8:	4880af26 	beq	r9,r2,400c798 <__subdf3+0x6ac>
 400c4dc:	898d883a 	add	r6,r17,r6
 400c4e0:	1945883a 	add	r2,r3,r5
 400c4e4:	3447803a 	cmpltu	r3,r6,r17
 400c4e8:	1887883a 	add	r3,r3,r2
 400c4ec:	182297fa 	slli	r17,r3,31
 400c4f0:	300cd07a 	srli	r6,r6,1
 400c4f4:	1806d07a 	srli	r3,r3,1
 400c4f8:	4821883a 	mov	r16,r9
 400c4fc:	89a2b03a 	or	r17,r17,r6
 400c500:	003f1b06 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c504:	0101ffc4 	movi	r4,2047
 400c508:	813f441e 	bne	r16,r4,400c21c <__ram_exceptions_end+0xfbfebfd8>
 400c50c:	003f1806 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c510:	843ff844 	addi	r16,r16,-31
 400c514:	01400804 	movi	r5,32
 400c518:	1408d83a 	srl	r4,r2,r16
 400c51c:	19405026 	beq	r3,r5,400c660 <__subdf3+0x574>
 400c520:	01401004 	movi	r5,64
 400c524:	28c7c83a 	sub	r3,r5,r3
 400c528:	10c4983a 	sll	r2,r2,r3
 400c52c:	88a2b03a 	or	r17,r17,r2
 400c530:	8822c03a 	cmpne	r17,r17,zero
 400c534:	2462b03a 	or	r17,r4,r17
 400c538:	0007883a 	mov	r3,zero
 400c53c:	0021883a 	mov	r16,zero
 400c540:	003f6d06 	br	400c2f8 <__ram_exceptions_end+0xfbfec0b4>
 400c544:	11fff804 	addi	r7,r2,-32
 400c548:	01000804 	movi	r4,32
 400c54c:	29ced83a 	srl	r7,r5,r7
 400c550:	11004526 	beq	r2,r4,400c668 <__subdf3+0x57c>
 400c554:	01001004 	movi	r4,64
 400c558:	2089c83a 	sub	r4,r4,r2
 400c55c:	2904983a 	sll	r2,r5,r4
 400c560:	118cb03a 	or	r6,r2,r6
 400c564:	300cc03a 	cmpne	r6,r6,zero
 400c568:	398cb03a 	or	r6,r7,r6
 400c56c:	0005883a 	mov	r2,zero
 400c570:	003f3706 	br	400c250 <__ram_exceptions_end+0xfbfec00c>
 400c574:	80002a26 	beq	r16,zero,400c620 <__subdf3+0x534>
 400c578:	0101ffc4 	movi	r4,2047
 400c57c:	49006626 	beq	r9,r4,400c718 <__subdf3+0x62c>
 400c580:	0085c83a 	sub	r2,zero,r2
 400c584:	18c02034 	orhi	r3,r3,128
 400c588:	01000e04 	movi	r4,56
 400c58c:	20807e16 	blt	r4,r2,400c788 <__subdf3+0x69c>
 400c590:	010007c4 	movi	r4,31
 400c594:	2080e716 	blt	r4,r2,400c934 <__subdf3+0x848>
 400c598:	01000804 	movi	r4,32
 400c59c:	2089c83a 	sub	r4,r4,r2
 400c5a0:	1914983a 	sll	r10,r3,r4
 400c5a4:	8890d83a 	srl	r8,r17,r2
 400c5a8:	8908983a 	sll	r4,r17,r4
 400c5ac:	1884d83a 	srl	r2,r3,r2
 400c5b0:	5222b03a 	or	r17,r10,r8
 400c5b4:	2006c03a 	cmpne	r3,r4,zero
 400c5b8:	88e2b03a 	or	r17,r17,r3
 400c5bc:	3463c83a 	sub	r17,r6,r17
 400c5c0:	2885c83a 	sub	r2,r5,r2
 400c5c4:	344d803a 	cmpltu	r6,r6,r17
 400c5c8:	1187c83a 	sub	r3,r2,r6
 400c5cc:	4821883a 	mov	r16,r9
 400c5d0:	3825883a 	mov	r18,r7
 400c5d4:	003f2306 	br	400c264 <__ram_exceptions_end+0xfbfec020>
 400c5d8:	24d0b03a 	or	r8,r4,r19
 400c5dc:	40001b1e 	bne	r8,zero,400c64c <__subdf3+0x560>
 400c5e0:	0005883a 	mov	r2,zero
 400c5e4:	0009883a 	mov	r4,zero
 400c5e8:	0021883a 	mov	r16,zero
 400c5ec:	003f4906 	br	400c314 <__ram_exceptions_end+0xfbfec0d0>
 400c5f0:	010007c4 	movi	r4,31
 400c5f4:	20803a16 	blt	r4,r2,400c6e0 <__subdf3+0x5f4>
 400c5f8:	01000804 	movi	r4,32
 400c5fc:	2089c83a 	sub	r4,r4,r2
 400c600:	2912983a 	sll	r9,r5,r4
 400c604:	3090d83a 	srl	r8,r6,r2
 400c608:	3108983a 	sll	r4,r6,r4
 400c60c:	2884d83a 	srl	r2,r5,r2
 400c610:	4a12b03a 	or	r9,r9,r8
 400c614:	2008c03a 	cmpne	r4,r4,zero
 400c618:	4912b03a 	or	r9,r9,r4
 400c61c:	003f4e06 	br	400c358 <__ram_exceptions_end+0xfbfec114>
 400c620:	1c48b03a 	or	r4,r3,r17
 400c624:	20003c26 	beq	r4,zero,400c718 <__subdf3+0x62c>
 400c628:	0084303a 	nor	r2,zero,r2
 400c62c:	1000381e 	bne	r2,zero,400c710 <__subdf3+0x624>
 400c630:	3463c83a 	sub	r17,r6,r17
 400c634:	28c5c83a 	sub	r2,r5,r3
 400c638:	344d803a 	cmpltu	r6,r6,r17
 400c63c:	1187c83a 	sub	r3,r2,r6
 400c640:	4821883a 	mov	r16,r9
 400c644:	3825883a 	mov	r18,r7
 400c648:	003f0606 	br	400c264 <__ram_exceptions_end+0xfbfec020>
 400c64c:	2023883a 	mov	r17,r4
 400c650:	003f0906 	br	400c278 <__ram_exceptions_end+0xfbfec034>
 400c654:	0101ffc4 	movi	r4,2047
 400c658:	813f3a1e 	bne	r16,r4,400c344 <__ram_exceptions_end+0xfbfec100>
 400c65c:	003ec406 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c660:	0005883a 	mov	r2,zero
 400c664:	003fb106 	br	400c52c <__ram_exceptions_end+0xfbfec2e8>
 400c668:	0005883a 	mov	r2,zero
 400c66c:	003fbc06 	br	400c560 <__ram_exceptions_end+0xfbfec31c>
 400c670:	1c44b03a 	or	r2,r3,r17
 400c674:	80008e1e 	bne	r16,zero,400c8b0 <__subdf3+0x7c4>
 400c678:	1000c826 	beq	r2,zero,400c99c <__subdf3+0x8b0>
 400c67c:	2984b03a 	or	r2,r5,r6
 400c680:	103ebb26 	beq	r2,zero,400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c684:	8989883a 	add	r4,r17,r6
 400c688:	1945883a 	add	r2,r3,r5
 400c68c:	2447803a 	cmpltu	r3,r4,r17
 400c690:	1887883a 	add	r3,r3,r2
 400c694:	1880202c 	andhi	r2,r3,128
 400c698:	2023883a 	mov	r17,r4
 400c69c:	103f1626 	beq	r2,zero,400c2f8 <__ram_exceptions_end+0xfbfec0b4>
 400c6a0:	00bfe034 	movhi	r2,65408
 400c6a4:	10bfffc4 	addi	r2,r2,-1
 400c6a8:	5021883a 	mov	r16,r10
 400c6ac:	1886703a 	and	r3,r3,r2
 400c6b0:	003eaf06 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c6b4:	3825883a 	mov	r18,r7
 400c6b8:	003f0f06 	br	400c2f8 <__ram_exceptions_end+0xfbfec0b4>
 400c6bc:	1c44b03a 	or	r2,r3,r17
 400c6c0:	8000251e 	bne	r16,zero,400c758 <__subdf3+0x66c>
 400c6c4:	1000661e 	bne	r2,zero,400c860 <__subdf3+0x774>
 400c6c8:	2990b03a 	or	r8,r5,r6
 400c6cc:	40009626 	beq	r8,zero,400c928 <__subdf3+0x83c>
 400c6d0:	2807883a 	mov	r3,r5
 400c6d4:	3023883a 	mov	r17,r6
 400c6d8:	3825883a 	mov	r18,r7
 400c6dc:	003ea406 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c6e0:	127ff804 	addi	r9,r2,-32
 400c6e4:	01000804 	movi	r4,32
 400c6e8:	2a52d83a 	srl	r9,r5,r9
 400c6ec:	11008c26 	beq	r2,r4,400c920 <__subdf3+0x834>
 400c6f0:	01001004 	movi	r4,64
 400c6f4:	2085c83a 	sub	r2,r4,r2
 400c6f8:	2884983a 	sll	r2,r5,r2
 400c6fc:	118cb03a 	or	r6,r2,r6
 400c700:	300cc03a 	cmpne	r6,r6,zero
 400c704:	4992b03a 	or	r9,r9,r6
 400c708:	0005883a 	mov	r2,zero
 400c70c:	003f1206 	br	400c358 <__ram_exceptions_end+0xfbfec114>
 400c710:	0101ffc4 	movi	r4,2047
 400c714:	493f9c1e 	bne	r9,r4,400c588 <__ram_exceptions_end+0xfbfec344>
 400c718:	2807883a 	mov	r3,r5
 400c71c:	3023883a 	mov	r17,r6
 400c720:	4821883a 	mov	r16,r9
 400c724:	3825883a 	mov	r18,r7
 400c728:	003e9106 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c72c:	80001f1e 	bne	r16,zero,400c7ac <__subdf3+0x6c0>
 400c730:	1c48b03a 	or	r4,r3,r17
 400c734:	20005a26 	beq	r4,zero,400c8a0 <__subdf3+0x7b4>
 400c738:	0084303a 	nor	r2,zero,r2
 400c73c:	1000561e 	bne	r2,zero,400c898 <__subdf3+0x7ac>
 400c740:	89a3883a 	add	r17,r17,r6
 400c744:	1945883a 	add	r2,r3,r5
 400c748:	898d803a 	cmpltu	r6,r17,r6
 400c74c:	3087883a 	add	r3,r6,r2
 400c750:	4821883a 	mov	r16,r9
 400c754:	003f0506 	br	400c36c <__ram_exceptions_end+0xfbfec128>
 400c758:	10002b1e 	bne	r2,zero,400c808 <__subdf3+0x71c>
 400c75c:	2984b03a 	or	r2,r5,r6
 400c760:	10008026 	beq	r2,zero,400c964 <__subdf3+0x878>
 400c764:	2807883a 	mov	r3,r5
 400c768:	3023883a 	mov	r17,r6
 400c76c:	3825883a 	mov	r18,r7
 400c770:	0401ffc4 	movi	r16,2047
 400c774:	003e7e06 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c778:	3809883a 	mov	r4,r7
 400c77c:	0011883a 	mov	r8,zero
 400c780:	0005883a 	mov	r2,zero
 400c784:	003ee306 	br	400c314 <__ram_exceptions_end+0xfbfec0d0>
 400c788:	1c62b03a 	or	r17,r3,r17
 400c78c:	8822c03a 	cmpne	r17,r17,zero
 400c790:	0005883a 	mov	r2,zero
 400c794:	003f8906 	br	400c5bc <__ram_exceptions_end+0xfbfec378>
 400c798:	3809883a 	mov	r4,r7
 400c79c:	4821883a 	mov	r16,r9
 400c7a0:	0011883a 	mov	r8,zero
 400c7a4:	0005883a 	mov	r2,zero
 400c7a8:	003eda06 	br	400c314 <__ram_exceptions_end+0xfbfec0d0>
 400c7ac:	0101ffc4 	movi	r4,2047
 400c7b0:	49003b26 	beq	r9,r4,400c8a0 <__subdf3+0x7b4>
 400c7b4:	0085c83a 	sub	r2,zero,r2
 400c7b8:	18c02034 	orhi	r3,r3,128
 400c7bc:	01000e04 	movi	r4,56
 400c7c0:	20806e16 	blt	r4,r2,400c97c <__subdf3+0x890>
 400c7c4:	010007c4 	movi	r4,31
 400c7c8:	20807716 	blt	r4,r2,400c9a8 <__subdf3+0x8bc>
 400c7cc:	01000804 	movi	r4,32
 400c7d0:	2089c83a 	sub	r4,r4,r2
 400c7d4:	1914983a 	sll	r10,r3,r4
 400c7d8:	8890d83a 	srl	r8,r17,r2
 400c7dc:	8908983a 	sll	r4,r17,r4
 400c7e0:	1884d83a 	srl	r2,r3,r2
 400c7e4:	5222b03a 	or	r17,r10,r8
 400c7e8:	2006c03a 	cmpne	r3,r4,zero
 400c7ec:	88e2b03a 	or	r17,r17,r3
 400c7f0:	89a3883a 	add	r17,r17,r6
 400c7f4:	1145883a 	add	r2,r2,r5
 400c7f8:	898d803a 	cmpltu	r6,r17,r6
 400c7fc:	3087883a 	add	r3,r6,r2
 400c800:	4821883a 	mov	r16,r9
 400c804:	003ed906 	br	400c36c <__ram_exceptions_end+0xfbfec128>
 400c808:	2984b03a 	or	r2,r5,r6
 400c80c:	10004226 	beq	r2,zero,400c918 <__subdf3+0x82c>
 400c810:	1808d0fa 	srli	r4,r3,3
 400c814:	8822d0fa 	srli	r17,r17,3
 400c818:	1806977a 	slli	r3,r3,29
 400c81c:	2080022c 	andhi	r2,r4,8
 400c820:	1c62b03a 	or	r17,r3,r17
 400c824:	10000826 	beq	r2,zero,400c848 <__subdf3+0x75c>
 400c828:	2812d0fa 	srli	r9,r5,3
 400c82c:	4880022c 	andhi	r2,r9,8
 400c830:	1000051e 	bne	r2,zero,400c848 <__subdf3+0x75c>
 400c834:	300cd0fa 	srli	r6,r6,3
 400c838:	2804977a 	slli	r2,r5,29
 400c83c:	4809883a 	mov	r4,r9
 400c840:	3825883a 	mov	r18,r7
 400c844:	11a2b03a 	or	r17,r2,r6
 400c848:	8806d77a 	srli	r3,r17,29
 400c84c:	200890fa 	slli	r4,r4,3
 400c850:	882290fa 	slli	r17,r17,3
 400c854:	0401ffc4 	movi	r16,2047
 400c858:	1906b03a 	or	r3,r3,r4
 400c85c:	003e4406 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c860:	2984b03a 	or	r2,r5,r6
 400c864:	103e4226 	beq	r2,zero,400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c868:	8989c83a 	sub	r4,r17,r6
 400c86c:	8911803a 	cmpltu	r8,r17,r4
 400c870:	1945c83a 	sub	r2,r3,r5
 400c874:	1205c83a 	sub	r2,r2,r8
 400c878:	1200202c 	andhi	r8,r2,128
 400c87c:	403e9a26 	beq	r8,zero,400c2e8 <__ram_exceptions_end+0xfbfec0a4>
 400c880:	3463c83a 	sub	r17,r6,r17
 400c884:	28c5c83a 	sub	r2,r5,r3
 400c888:	344d803a 	cmpltu	r6,r6,r17
 400c88c:	1187c83a 	sub	r3,r2,r6
 400c890:	3825883a 	mov	r18,r7
 400c894:	003e3606 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c898:	0101ffc4 	movi	r4,2047
 400c89c:	493fc71e 	bne	r9,r4,400c7bc <__ram_exceptions_end+0xfbfec578>
 400c8a0:	2807883a 	mov	r3,r5
 400c8a4:	3023883a 	mov	r17,r6
 400c8a8:	4821883a 	mov	r16,r9
 400c8ac:	003e3006 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c8b0:	10003626 	beq	r2,zero,400c98c <__subdf3+0x8a0>
 400c8b4:	2984b03a 	or	r2,r5,r6
 400c8b8:	10001726 	beq	r2,zero,400c918 <__subdf3+0x82c>
 400c8bc:	1808d0fa 	srli	r4,r3,3
 400c8c0:	8822d0fa 	srli	r17,r17,3
 400c8c4:	1806977a 	slli	r3,r3,29
 400c8c8:	2080022c 	andhi	r2,r4,8
 400c8cc:	1c62b03a 	or	r17,r3,r17
 400c8d0:	10000726 	beq	r2,zero,400c8f0 <__subdf3+0x804>
 400c8d4:	2812d0fa 	srli	r9,r5,3
 400c8d8:	4880022c 	andhi	r2,r9,8
 400c8dc:	1000041e 	bne	r2,zero,400c8f0 <__subdf3+0x804>
 400c8e0:	300cd0fa 	srli	r6,r6,3
 400c8e4:	2804977a 	slli	r2,r5,29
 400c8e8:	4809883a 	mov	r4,r9
 400c8ec:	11a2b03a 	or	r17,r2,r6
 400c8f0:	8806d77a 	srli	r3,r17,29
 400c8f4:	200890fa 	slli	r4,r4,3
 400c8f8:	882290fa 	slli	r17,r17,3
 400c8fc:	3825883a 	mov	r18,r7
 400c900:	1906b03a 	or	r3,r3,r4
 400c904:	0401ffc4 	movi	r16,2047
 400c908:	003e1906 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c90c:	000b883a 	mov	r5,zero
 400c910:	0005883a 	mov	r2,zero
 400c914:	003e2e06 	br	400c1d0 <__ram_exceptions_end+0xfbfebf8c>
 400c918:	0401ffc4 	movi	r16,2047
 400c91c:	003e1406 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c920:	0005883a 	mov	r2,zero
 400c924:	003f7506 	br	400c6fc <__ram_exceptions_end+0xfbfec4b8>
 400c928:	0005883a 	mov	r2,zero
 400c92c:	0009883a 	mov	r4,zero
 400c930:	003e7806 	br	400c314 <__ram_exceptions_end+0xfbfec0d0>
 400c934:	123ff804 	addi	r8,r2,-32
 400c938:	01000804 	movi	r4,32
 400c93c:	1a10d83a 	srl	r8,r3,r8
 400c940:	11002526 	beq	r2,r4,400c9d8 <__subdf3+0x8ec>
 400c944:	01001004 	movi	r4,64
 400c948:	2085c83a 	sub	r2,r4,r2
 400c94c:	1884983a 	sll	r2,r3,r2
 400c950:	1444b03a 	or	r2,r2,r17
 400c954:	1004c03a 	cmpne	r2,r2,zero
 400c958:	40a2b03a 	or	r17,r8,r2
 400c95c:	0005883a 	mov	r2,zero
 400c960:	003f1606 	br	400c5bc <__ram_exceptions_end+0xfbfec378>
 400c964:	02000434 	movhi	r8,16
 400c968:	0009883a 	mov	r4,zero
 400c96c:	423fffc4 	addi	r8,r8,-1
 400c970:	00bfffc4 	movi	r2,-1
 400c974:	0401ffc4 	movi	r16,2047
 400c978:	003e6606 	br	400c314 <__ram_exceptions_end+0xfbfec0d0>
 400c97c:	1c62b03a 	or	r17,r3,r17
 400c980:	8822c03a 	cmpne	r17,r17,zero
 400c984:	0005883a 	mov	r2,zero
 400c988:	003f9906 	br	400c7f0 <__ram_exceptions_end+0xfbfec5ac>
 400c98c:	2807883a 	mov	r3,r5
 400c990:	3023883a 	mov	r17,r6
 400c994:	0401ffc4 	movi	r16,2047
 400c998:	003df506 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c99c:	2807883a 	mov	r3,r5
 400c9a0:	3023883a 	mov	r17,r6
 400c9a4:	003df206 	br	400c170 <__ram_exceptions_end+0xfbfebf2c>
 400c9a8:	123ff804 	addi	r8,r2,-32
 400c9ac:	01000804 	movi	r4,32
 400c9b0:	1a10d83a 	srl	r8,r3,r8
 400c9b4:	11000a26 	beq	r2,r4,400c9e0 <__subdf3+0x8f4>
 400c9b8:	01001004 	movi	r4,64
 400c9bc:	2085c83a 	sub	r2,r4,r2
 400c9c0:	1884983a 	sll	r2,r3,r2
 400c9c4:	1444b03a 	or	r2,r2,r17
 400c9c8:	1004c03a 	cmpne	r2,r2,zero
 400c9cc:	40a2b03a 	or	r17,r8,r2
 400c9d0:	0005883a 	mov	r2,zero
 400c9d4:	003f8606 	br	400c7f0 <__ram_exceptions_end+0xfbfec5ac>
 400c9d8:	0005883a 	mov	r2,zero
 400c9dc:	003fdc06 	br	400c950 <__ram_exceptions_end+0xfbfec70c>
 400c9e0:	0005883a 	mov	r2,zero
 400c9e4:	003ff706 	br	400c9c4 <__ram_exceptions_end+0xfbfec780>

0400c9e8 <__fixdfsi>:
 400c9e8:	280cd53a 	srli	r6,r5,20
 400c9ec:	00c00434 	movhi	r3,16
 400c9f0:	18ffffc4 	addi	r3,r3,-1
 400c9f4:	3181ffcc 	andi	r6,r6,2047
 400c9f8:	01c0ff84 	movi	r7,1022
 400c9fc:	28c6703a 	and	r3,r5,r3
 400ca00:	280ad7fa 	srli	r5,r5,31
 400ca04:	3980120e 	bge	r7,r6,400ca50 <__fixdfsi+0x68>
 400ca08:	00810744 	movi	r2,1053
 400ca0c:	11800c16 	blt	r2,r6,400ca40 <__fixdfsi+0x58>
 400ca10:	00810cc4 	movi	r2,1075
 400ca14:	1185c83a 	sub	r2,r2,r6
 400ca18:	01c007c4 	movi	r7,31
 400ca1c:	18c00434 	orhi	r3,r3,16
 400ca20:	38800d16 	blt	r7,r2,400ca58 <__fixdfsi+0x70>
 400ca24:	31befb44 	addi	r6,r6,-1043
 400ca28:	2084d83a 	srl	r2,r4,r2
 400ca2c:	1986983a 	sll	r3,r3,r6
 400ca30:	1884b03a 	or	r2,r3,r2
 400ca34:	28000726 	beq	r5,zero,400ca54 <__fixdfsi+0x6c>
 400ca38:	0085c83a 	sub	r2,zero,r2
 400ca3c:	f800283a 	ret
 400ca40:	00a00034 	movhi	r2,32768
 400ca44:	10bfffc4 	addi	r2,r2,-1
 400ca48:	2885883a 	add	r2,r5,r2
 400ca4c:	f800283a 	ret
 400ca50:	0005883a 	mov	r2,zero
 400ca54:	f800283a 	ret
 400ca58:	008104c4 	movi	r2,1043
 400ca5c:	1185c83a 	sub	r2,r2,r6
 400ca60:	1884d83a 	srl	r2,r3,r2
 400ca64:	003ff306 	br	400ca34 <__ram_exceptions_end+0xfbfec7f0>

0400ca68 <__floatsidf>:
 400ca68:	defffd04 	addi	sp,sp,-12
 400ca6c:	dfc00215 	stw	ra,8(sp)
 400ca70:	dc400115 	stw	r17,4(sp)
 400ca74:	dc000015 	stw	r16,0(sp)
 400ca78:	20002b26 	beq	r4,zero,400cb28 <__floatsidf+0xc0>
 400ca7c:	2023883a 	mov	r17,r4
 400ca80:	2020d7fa 	srli	r16,r4,31
 400ca84:	20002d16 	blt	r4,zero,400cb3c <__floatsidf+0xd4>
 400ca88:	8809883a 	mov	r4,r17
 400ca8c:	400cbec0 	call	400cbec <__clzsi2>
 400ca90:	01410784 	movi	r5,1054
 400ca94:	288bc83a 	sub	r5,r5,r2
 400ca98:	01010cc4 	movi	r4,1075
 400ca9c:	2149c83a 	sub	r4,r4,r5
 400caa0:	00c007c4 	movi	r3,31
 400caa4:	1900160e 	bge	r3,r4,400cb00 <__floatsidf+0x98>
 400caa8:	00c104c4 	movi	r3,1043
 400caac:	1947c83a 	sub	r3,r3,r5
 400cab0:	88c6983a 	sll	r3,r17,r3
 400cab4:	00800434 	movhi	r2,16
 400cab8:	10bfffc4 	addi	r2,r2,-1
 400cabc:	1886703a 	and	r3,r3,r2
 400cac0:	2941ffcc 	andi	r5,r5,2047
 400cac4:	800d883a 	mov	r6,r16
 400cac8:	0005883a 	mov	r2,zero
 400cacc:	280a953a 	slli	r5,r5,20
 400cad0:	31803fcc 	andi	r6,r6,255
 400cad4:	01000434 	movhi	r4,16
 400cad8:	300c97fa 	slli	r6,r6,31
 400cadc:	213fffc4 	addi	r4,r4,-1
 400cae0:	1906703a 	and	r3,r3,r4
 400cae4:	1946b03a 	or	r3,r3,r5
 400cae8:	1986b03a 	or	r3,r3,r6
 400caec:	dfc00217 	ldw	ra,8(sp)
 400caf0:	dc400117 	ldw	r17,4(sp)
 400caf4:	dc000017 	ldw	r16,0(sp)
 400caf8:	dec00304 	addi	sp,sp,12
 400cafc:	f800283a 	ret
 400cb00:	00c002c4 	movi	r3,11
 400cb04:	1887c83a 	sub	r3,r3,r2
 400cb08:	88c6d83a 	srl	r3,r17,r3
 400cb0c:	8904983a 	sll	r2,r17,r4
 400cb10:	01000434 	movhi	r4,16
 400cb14:	213fffc4 	addi	r4,r4,-1
 400cb18:	2941ffcc 	andi	r5,r5,2047
 400cb1c:	1906703a 	and	r3,r3,r4
 400cb20:	800d883a 	mov	r6,r16
 400cb24:	003fe906 	br	400cacc <__ram_exceptions_end+0xfbfec888>
 400cb28:	000d883a 	mov	r6,zero
 400cb2c:	000b883a 	mov	r5,zero
 400cb30:	0007883a 	mov	r3,zero
 400cb34:	0005883a 	mov	r2,zero
 400cb38:	003fe406 	br	400cacc <__ram_exceptions_end+0xfbfec888>
 400cb3c:	0123c83a 	sub	r17,zero,r4
 400cb40:	003fd106 	br	400ca88 <__ram_exceptions_end+0xfbfec844>

0400cb44 <__floatunsidf>:
 400cb44:	defffe04 	addi	sp,sp,-8
 400cb48:	dc000015 	stw	r16,0(sp)
 400cb4c:	dfc00115 	stw	ra,4(sp)
 400cb50:	2021883a 	mov	r16,r4
 400cb54:	20002226 	beq	r4,zero,400cbe0 <__floatunsidf+0x9c>
 400cb58:	400cbec0 	call	400cbec <__clzsi2>
 400cb5c:	01010784 	movi	r4,1054
 400cb60:	2089c83a 	sub	r4,r4,r2
 400cb64:	01810cc4 	movi	r6,1075
 400cb68:	310dc83a 	sub	r6,r6,r4
 400cb6c:	00c007c4 	movi	r3,31
 400cb70:	1980120e 	bge	r3,r6,400cbbc <__floatunsidf+0x78>
 400cb74:	00c104c4 	movi	r3,1043
 400cb78:	1907c83a 	sub	r3,r3,r4
 400cb7c:	80ca983a 	sll	r5,r16,r3
 400cb80:	00800434 	movhi	r2,16
 400cb84:	10bfffc4 	addi	r2,r2,-1
 400cb88:	2101ffcc 	andi	r4,r4,2047
 400cb8c:	0021883a 	mov	r16,zero
 400cb90:	288a703a 	and	r5,r5,r2
 400cb94:	2008953a 	slli	r4,r4,20
 400cb98:	00c00434 	movhi	r3,16
 400cb9c:	18ffffc4 	addi	r3,r3,-1
 400cba0:	28c6703a 	and	r3,r5,r3
 400cba4:	8005883a 	mov	r2,r16
 400cba8:	1906b03a 	or	r3,r3,r4
 400cbac:	dfc00117 	ldw	ra,4(sp)
 400cbb0:	dc000017 	ldw	r16,0(sp)
 400cbb4:	dec00204 	addi	sp,sp,8
 400cbb8:	f800283a 	ret
 400cbbc:	00c002c4 	movi	r3,11
 400cbc0:	188bc83a 	sub	r5,r3,r2
 400cbc4:	814ad83a 	srl	r5,r16,r5
 400cbc8:	00c00434 	movhi	r3,16
 400cbcc:	18ffffc4 	addi	r3,r3,-1
 400cbd0:	81a0983a 	sll	r16,r16,r6
 400cbd4:	2101ffcc 	andi	r4,r4,2047
 400cbd8:	28ca703a 	and	r5,r5,r3
 400cbdc:	003fed06 	br	400cb94 <__ram_exceptions_end+0xfbfec950>
 400cbe0:	0009883a 	mov	r4,zero
 400cbe4:	000b883a 	mov	r5,zero
 400cbe8:	003fea06 	br	400cb94 <__ram_exceptions_end+0xfbfec950>

0400cbec <__clzsi2>:
 400cbec:	00bfffd4 	movui	r2,65535
 400cbf0:	11000536 	bltu	r2,r4,400cc08 <__clzsi2+0x1c>
 400cbf4:	00803fc4 	movi	r2,255
 400cbf8:	11000f36 	bltu	r2,r4,400cc38 <__clzsi2+0x4c>
 400cbfc:	00800804 	movi	r2,32
 400cc00:	0007883a 	mov	r3,zero
 400cc04:	00000506 	br	400cc1c <__clzsi2+0x30>
 400cc08:	00804034 	movhi	r2,256
 400cc0c:	10bfffc4 	addi	r2,r2,-1
 400cc10:	11000c2e 	bgeu	r2,r4,400cc44 <__clzsi2+0x58>
 400cc14:	00800204 	movi	r2,8
 400cc18:	00c00604 	movi	r3,24
 400cc1c:	20c8d83a 	srl	r4,r4,r3
 400cc20:	00c10074 	movhi	r3,1025
 400cc24:	18ffc704 	addi	r3,r3,-228
 400cc28:	1909883a 	add	r4,r3,r4
 400cc2c:	20c00003 	ldbu	r3,0(r4)
 400cc30:	10c5c83a 	sub	r2,r2,r3
 400cc34:	f800283a 	ret
 400cc38:	00800604 	movi	r2,24
 400cc3c:	00c00204 	movi	r3,8
 400cc40:	003ff606 	br	400cc1c <__ram_exceptions_end+0xfbfec9d8>
 400cc44:	00800404 	movi	r2,16
 400cc48:	1007883a 	mov	r3,r2
 400cc4c:	003ff306 	br	400cc1c <__ram_exceptions_end+0xfbfec9d8>

0400cc50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cc50:	defffe04 	addi	sp,sp,-8
 400cc54:	dfc00115 	stw	ra,4(sp)
 400cc58:	df000015 	stw	fp,0(sp)
 400cc5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cc60:	00810074 	movhi	r2,1025
 400cc64:	10830a04 	addi	r2,r2,3112
 400cc68:	10800017 	ldw	r2,0(r2)
 400cc6c:	10000526 	beq	r2,zero,400cc84 <alt_get_errno+0x34>
 400cc70:	00810074 	movhi	r2,1025
 400cc74:	10830a04 	addi	r2,r2,3112
 400cc78:	10800017 	ldw	r2,0(r2)
 400cc7c:	103ee83a 	callr	r2
 400cc80:	00000206 	br	400cc8c <alt_get_errno+0x3c>
 400cc84:	00810074 	movhi	r2,1025
 400cc88:	10860a04 	addi	r2,r2,6184
}
 400cc8c:	e037883a 	mov	sp,fp
 400cc90:	dfc00117 	ldw	ra,4(sp)
 400cc94:	df000017 	ldw	fp,0(sp)
 400cc98:	dec00204 	addi	sp,sp,8
 400cc9c:	f800283a 	ret

0400cca0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400cca0:	defffb04 	addi	sp,sp,-20
 400cca4:	dfc00415 	stw	ra,16(sp)
 400cca8:	df000315 	stw	fp,12(sp)
 400ccac:	df000304 	addi	fp,sp,12
 400ccb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ccb4:	e0bfff17 	ldw	r2,-4(fp)
 400ccb8:	10000616 	blt	r2,zero,400ccd4 <close+0x34>
 400ccbc:	e0bfff17 	ldw	r2,-4(fp)
 400ccc0:	10c00324 	muli	r3,r2,12
 400ccc4:	00810074 	movhi	r2,1025
 400ccc8:	10825404 	addi	r2,r2,2384
 400cccc:	1885883a 	add	r2,r3,r2
 400ccd0:	00000106 	br	400ccd8 <close+0x38>
 400ccd4:	0005883a 	mov	r2,zero
 400ccd8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400ccdc:	e0bffd17 	ldw	r2,-12(fp)
 400cce0:	10001926 	beq	r2,zero,400cd48 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400cce4:	e0bffd17 	ldw	r2,-12(fp)
 400cce8:	10800017 	ldw	r2,0(r2)
 400ccec:	10800417 	ldw	r2,16(r2)
 400ccf0:	10000626 	beq	r2,zero,400cd0c <close+0x6c>
 400ccf4:	e0bffd17 	ldw	r2,-12(fp)
 400ccf8:	10800017 	ldw	r2,0(r2)
 400ccfc:	10800417 	ldw	r2,16(r2)
 400cd00:	e13ffd17 	ldw	r4,-12(fp)
 400cd04:	103ee83a 	callr	r2
 400cd08:	00000106 	br	400cd10 <close+0x70>
 400cd0c:	0005883a 	mov	r2,zero
 400cd10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400cd14:	e13fff17 	ldw	r4,-4(fp)
 400cd18:	400d3b00 	call	400d3b0 <alt_release_fd>
    if (rval < 0)
 400cd1c:	e0bffe17 	ldw	r2,-8(fp)
 400cd20:	1000070e 	bge	r2,zero,400cd40 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400cd24:	400cc500 	call	400cc50 <alt_get_errno>
 400cd28:	1007883a 	mov	r3,r2
 400cd2c:	e0bffe17 	ldw	r2,-8(fp)
 400cd30:	0085c83a 	sub	r2,zero,r2
 400cd34:	18800015 	stw	r2,0(r3)
      return -1;
 400cd38:	00bfffc4 	movi	r2,-1
 400cd3c:	00000706 	br	400cd5c <close+0xbc>
    }
    return 0;
 400cd40:	0005883a 	mov	r2,zero
 400cd44:	00000506 	br	400cd5c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400cd48:	400cc500 	call	400cc50 <alt_get_errno>
 400cd4c:	1007883a 	mov	r3,r2
 400cd50:	00801444 	movi	r2,81
 400cd54:	18800015 	stw	r2,0(r3)
    return -1;
 400cd58:	00bfffc4 	movi	r2,-1
  }
}
 400cd5c:	e037883a 	mov	sp,fp
 400cd60:	dfc00117 	ldw	ra,4(sp)
 400cd64:	df000017 	ldw	fp,0(sp)
 400cd68:	dec00204 	addi	sp,sp,8
 400cd6c:	f800283a 	ret

0400cd70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400cd70:	defffc04 	addi	sp,sp,-16
 400cd74:	df000315 	stw	fp,12(sp)
 400cd78:	df000304 	addi	fp,sp,12
 400cd7c:	e13ffd15 	stw	r4,-12(fp)
 400cd80:	e17ffe15 	stw	r5,-8(fp)
 400cd84:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400cd88:	e0bfff17 	ldw	r2,-4(fp)
}
 400cd8c:	e037883a 	mov	sp,fp
 400cd90:	df000017 	ldw	fp,0(sp)
 400cd94:	dec00104 	addi	sp,sp,4
 400cd98:	f800283a 	ret

0400cd9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cd9c:	defffe04 	addi	sp,sp,-8
 400cda0:	dfc00115 	stw	ra,4(sp)
 400cda4:	df000015 	stw	fp,0(sp)
 400cda8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cdac:	00810074 	movhi	r2,1025
 400cdb0:	10830a04 	addi	r2,r2,3112
 400cdb4:	10800017 	ldw	r2,0(r2)
 400cdb8:	10000526 	beq	r2,zero,400cdd0 <alt_get_errno+0x34>
 400cdbc:	00810074 	movhi	r2,1025
 400cdc0:	10830a04 	addi	r2,r2,3112
 400cdc4:	10800017 	ldw	r2,0(r2)
 400cdc8:	103ee83a 	callr	r2
 400cdcc:	00000206 	br	400cdd8 <alt_get_errno+0x3c>
 400cdd0:	00810074 	movhi	r2,1025
 400cdd4:	10860a04 	addi	r2,r2,6184
}
 400cdd8:	e037883a 	mov	sp,fp
 400cddc:	dfc00117 	ldw	ra,4(sp)
 400cde0:	df000017 	ldw	fp,0(sp)
 400cde4:	dec00204 	addi	sp,sp,8
 400cde8:	f800283a 	ret

0400cdec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400cdec:	defffb04 	addi	sp,sp,-20
 400cdf0:	dfc00415 	stw	ra,16(sp)
 400cdf4:	df000315 	stw	fp,12(sp)
 400cdf8:	df000304 	addi	fp,sp,12
 400cdfc:	e13ffe15 	stw	r4,-8(fp)
 400ce00:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ce04:	e0bffe17 	ldw	r2,-8(fp)
 400ce08:	10000616 	blt	r2,zero,400ce24 <fstat+0x38>
 400ce0c:	e0bffe17 	ldw	r2,-8(fp)
 400ce10:	10c00324 	muli	r3,r2,12
 400ce14:	00810074 	movhi	r2,1025
 400ce18:	10825404 	addi	r2,r2,2384
 400ce1c:	1885883a 	add	r2,r3,r2
 400ce20:	00000106 	br	400ce28 <fstat+0x3c>
 400ce24:	0005883a 	mov	r2,zero
 400ce28:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400ce2c:	e0bffd17 	ldw	r2,-12(fp)
 400ce30:	10001026 	beq	r2,zero,400ce74 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400ce34:	e0bffd17 	ldw	r2,-12(fp)
 400ce38:	10800017 	ldw	r2,0(r2)
 400ce3c:	10800817 	ldw	r2,32(r2)
 400ce40:	10000726 	beq	r2,zero,400ce60 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400ce44:	e0bffd17 	ldw	r2,-12(fp)
 400ce48:	10800017 	ldw	r2,0(r2)
 400ce4c:	10800817 	ldw	r2,32(r2)
 400ce50:	e17fff17 	ldw	r5,-4(fp)
 400ce54:	e13ffd17 	ldw	r4,-12(fp)
 400ce58:	103ee83a 	callr	r2
 400ce5c:	00000a06 	br	400ce88 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ce60:	e0bfff17 	ldw	r2,-4(fp)
 400ce64:	00c80004 	movi	r3,8192
 400ce68:	10c00115 	stw	r3,4(r2)
      return 0;
 400ce6c:	0005883a 	mov	r2,zero
 400ce70:	00000506 	br	400ce88 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ce74:	400cd9c0 	call	400cd9c <alt_get_errno>
 400ce78:	1007883a 	mov	r3,r2
 400ce7c:	00801444 	movi	r2,81
 400ce80:	18800015 	stw	r2,0(r3)
    return -1;
 400ce84:	00bfffc4 	movi	r2,-1
  }
}
 400ce88:	e037883a 	mov	sp,fp
 400ce8c:	dfc00117 	ldw	ra,4(sp)
 400ce90:	df000017 	ldw	fp,0(sp)
 400ce94:	dec00204 	addi	sp,sp,8
 400ce98:	f800283a 	ret

0400ce9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ce9c:	defffe04 	addi	sp,sp,-8
 400cea0:	dfc00115 	stw	ra,4(sp)
 400cea4:	df000015 	stw	fp,0(sp)
 400cea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ceac:	00810074 	movhi	r2,1025
 400ceb0:	10830a04 	addi	r2,r2,3112
 400ceb4:	10800017 	ldw	r2,0(r2)
 400ceb8:	10000526 	beq	r2,zero,400ced0 <alt_get_errno+0x34>
 400cebc:	00810074 	movhi	r2,1025
 400cec0:	10830a04 	addi	r2,r2,3112
 400cec4:	10800017 	ldw	r2,0(r2)
 400cec8:	103ee83a 	callr	r2
 400cecc:	00000206 	br	400ced8 <alt_get_errno+0x3c>
 400ced0:	00810074 	movhi	r2,1025
 400ced4:	10860a04 	addi	r2,r2,6184
}
 400ced8:	e037883a 	mov	sp,fp
 400cedc:	dfc00117 	ldw	ra,4(sp)
 400cee0:	df000017 	ldw	fp,0(sp)
 400cee4:	dec00204 	addi	sp,sp,8
 400cee8:	f800283a 	ret

0400ceec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400ceec:	deffed04 	addi	sp,sp,-76
 400cef0:	dfc01215 	stw	ra,72(sp)
 400cef4:	df001115 	stw	fp,68(sp)
 400cef8:	df001104 	addi	fp,sp,68
 400cefc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400cf00:	e0bfff17 	ldw	r2,-4(fp)
 400cf04:	10000616 	blt	r2,zero,400cf20 <isatty+0x34>
 400cf08:	e0bfff17 	ldw	r2,-4(fp)
 400cf0c:	10c00324 	muli	r3,r2,12
 400cf10:	00810074 	movhi	r2,1025
 400cf14:	10825404 	addi	r2,r2,2384
 400cf18:	1885883a 	add	r2,r3,r2
 400cf1c:	00000106 	br	400cf24 <isatty+0x38>
 400cf20:	0005883a 	mov	r2,zero
 400cf24:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400cf28:	e0bfef17 	ldw	r2,-68(fp)
 400cf2c:	10000e26 	beq	r2,zero,400cf68 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400cf30:	e0bfef17 	ldw	r2,-68(fp)
 400cf34:	10800017 	ldw	r2,0(r2)
 400cf38:	10800817 	ldw	r2,32(r2)
 400cf3c:	1000021e 	bne	r2,zero,400cf48 <isatty+0x5c>
    {
      return 1;
 400cf40:	00800044 	movi	r2,1
 400cf44:	00000d06 	br	400cf7c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400cf48:	e0bff004 	addi	r2,fp,-64
 400cf4c:	100b883a 	mov	r5,r2
 400cf50:	e13fff17 	ldw	r4,-4(fp)
 400cf54:	400cdec0 	call	400cdec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400cf58:	e0bff117 	ldw	r2,-60(fp)
 400cf5c:	10880020 	cmpeqi	r2,r2,8192
 400cf60:	10803fcc 	andi	r2,r2,255
 400cf64:	00000506 	br	400cf7c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400cf68:	400ce9c0 	call	400ce9c <alt_get_errno>
 400cf6c:	1007883a 	mov	r3,r2
 400cf70:	00801444 	movi	r2,81
 400cf74:	18800015 	stw	r2,0(r3)
    return 0;
 400cf78:	0005883a 	mov	r2,zero
  }
}
 400cf7c:	e037883a 	mov	sp,fp
 400cf80:	dfc00117 	ldw	ra,4(sp)
 400cf84:	df000017 	ldw	fp,0(sp)
 400cf88:	dec00204 	addi	sp,sp,8
 400cf8c:	f800283a 	ret

0400cf90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400cf90:	defffc04 	addi	sp,sp,-16
 400cf94:	df000315 	stw	fp,12(sp)
 400cf98:	df000304 	addi	fp,sp,12
 400cf9c:	e13ffd15 	stw	r4,-12(fp)
 400cfa0:	e17ffe15 	stw	r5,-8(fp)
 400cfa4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400cfa8:	e0fffe17 	ldw	r3,-8(fp)
 400cfac:	e0bffd17 	ldw	r2,-12(fp)
 400cfb0:	18800c26 	beq	r3,r2,400cfe4 <alt_load_section+0x54>
  {
    while( to != end )
 400cfb4:	00000806 	br	400cfd8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400cfb8:	e0bffe17 	ldw	r2,-8(fp)
 400cfbc:	10c00104 	addi	r3,r2,4
 400cfc0:	e0fffe15 	stw	r3,-8(fp)
 400cfc4:	e0fffd17 	ldw	r3,-12(fp)
 400cfc8:	19000104 	addi	r4,r3,4
 400cfcc:	e13ffd15 	stw	r4,-12(fp)
 400cfd0:	18c00017 	ldw	r3,0(r3)
 400cfd4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400cfd8:	e0fffe17 	ldw	r3,-8(fp)
 400cfdc:	e0bfff17 	ldw	r2,-4(fp)
 400cfe0:	18bff51e 	bne	r3,r2,400cfb8 <__ram_exceptions_end+0xfbfecd74>
    {
      *to++ = *from++;
    }
  }
}
 400cfe4:	0001883a 	nop
 400cfe8:	e037883a 	mov	sp,fp
 400cfec:	df000017 	ldw	fp,0(sp)
 400cff0:	dec00104 	addi	sp,sp,4
 400cff4:	f800283a 	ret

0400cff8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400cff8:	defffe04 	addi	sp,sp,-8
 400cffc:	dfc00115 	stw	ra,4(sp)
 400d000:	df000015 	stw	fp,0(sp)
 400d004:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400d008:	01810074 	movhi	r6,1025
 400d00c:	31831104 	addi	r6,r6,3140
 400d010:	01410074 	movhi	r5,1025
 400d014:	29401e04 	addi	r5,r5,120
 400d018:	01010074 	movhi	r4,1025
 400d01c:	21031104 	addi	r4,r4,3140
 400d020:	400cf900 	call	400cf90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400d024:	018200b4 	movhi	r6,2050
 400d028:	31809104 	addi	r6,r6,580
 400d02c:	014200b4 	movhi	r5,2050
 400d030:	29400804 	addi	r5,r5,32
 400d034:	01010034 	movhi	r4,1024
 400d038:	21000004 	addi	r4,r4,0
 400d03c:	400cf900 	call	400cf90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400d040:	01810074 	movhi	r6,1025
 400d044:	31801e04 	addi	r6,r6,120
 400d048:	01410074 	movhi	r5,1025
 400d04c:	297f3b04 	addi	r5,r5,-788
 400d050:	01010074 	movhi	r4,1025
 400d054:	213f3b04 	addi	r4,r4,-788
 400d058:	400cf900 	call	400cf90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400d05c:	400ecfc0 	call	400ecfc <alt_dcache_flush_all>
  alt_icache_flush_all();
 400d060:	400ef880 	call	400ef88 <alt_icache_flush_all>
}
 400d064:	0001883a 	nop
 400d068:	e037883a 	mov	sp,fp
 400d06c:	dfc00117 	ldw	ra,4(sp)
 400d070:	df000017 	ldw	fp,0(sp)
 400d074:	dec00204 	addi	sp,sp,8
 400d078:	f800283a 	ret

0400d07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d07c:	defffe04 	addi	sp,sp,-8
 400d080:	dfc00115 	stw	ra,4(sp)
 400d084:	df000015 	stw	fp,0(sp)
 400d088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d08c:	00810074 	movhi	r2,1025
 400d090:	10830a04 	addi	r2,r2,3112
 400d094:	10800017 	ldw	r2,0(r2)
 400d098:	10000526 	beq	r2,zero,400d0b0 <alt_get_errno+0x34>
 400d09c:	00810074 	movhi	r2,1025
 400d0a0:	10830a04 	addi	r2,r2,3112
 400d0a4:	10800017 	ldw	r2,0(r2)
 400d0a8:	103ee83a 	callr	r2
 400d0ac:	00000206 	br	400d0b8 <alt_get_errno+0x3c>
 400d0b0:	00810074 	movhi	r2,1025
 400d0b4:	10860a04 	addi	r2,r2,6184
}
 400d0b8:	e037883a 	mov	sp,fp
 400d0bc:	dfc00117 	ldw	ra,4(sp)
 400d0c0:	df000017 	ldw	fp,0(sp)
 400d0c4:	dec00204 	addi	sp,sp,8
 400d0c8:	f800283a 	ret

0400d0cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d0cc:	defff904 	addi	sp,sp,-28
 400d0d0:	dfc00615 	stw	ra,24(sp)
 400d0d4:	df000515 	stw	fp,20(sp)
 400d0d8:	df000504 	addi	fp,sp,20
 400d0dc:	e13ffd15 	stw	r4,-12(fp)
 400d0e0:	e17ffe15 	stw	r5,-8(fp)
 400d0e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400d0e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d0ec:	e0bffd17 	ldw	r2,-12(fp)
 400d0f0:	10000616 	blt	r2,zero,400d10c <lseek+0x40>
 400d0f4:	e0bffd17 	ldw	r2,-12(fp)
 400d0f8:	10c00324 	muli	r3,r2,12
 400d0fc:	00810074 	movhi	r2,1025
 400d100:	10825404 	addi	r2,r2,2384
 400d104:	1885883a 	add	r2,r3,r2
 400d108:	00000106 	br	400d110 <lseek+0x44>
 400d10c:	0005883a 	mov	r2,zero
 400d110:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400d114:	e0bffc17 	ldw	r2,-16(fp)
 400d118:	10001026 	beq	r2,zero,400d15c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400d11c:	e0bffc17 	ldw	r2,-16(fp)
 400d120:	10800017 	ldw	r2,0(r2)
 400d124:	10800717 	ldw	r2,28(r2)
 400d128:	10000926 	beq	r2,zero,400d150 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400d12c:	e0bffc17 	ldw	r2,-16(fp)
 400d130:	10800017 	ldw	r2,0(r2)
 400d134:	10800717 	ldw	r2,28(r2)
 400d138:	e1bfff17 	ldw	r6,-4(fp)
 400d13c:	e17ffe17 	ldw	r5,-8(fp)
 400d140:	e13ffc17 	ldw	r4,-16(fp)
 400d144:	103ee83a 	callr	r2
 400d148:	e0bffb15 	stw	r2,-20(fp)
 400d14c:	00000506 	br	400d164 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400d150:	00bfde84 	movi	r2,-134
 400d154:	e0bffb15 	stw	r2,-20(fp)
 400d158:	00000206 	br	400d164 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400d15c:	00bfebc4 	movi	r2,-81
 400d160:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400d164:	e0bffb17 	ldw	r2,-20(fp)
 400d168:	1000070e 	bge	r2,zero,400d188 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400d16c:	400d07c0 	call	400d07c <alt_get_errno>
 400d170:	1007883a 	mov	r3,r2
 400d174:	e0bffb17 	ldw	r2,-20(fp)
 400d178:	0085c83a 	sub	r2,zero,r2
 400d17c:	18800015 	stw	r2,0(r3)
    rc = -1;
 400d180:	00bfffc4 	movi	r2,-1
 400d184:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400d188:	e0bffb17 	ldw	r2,-20(fp)
}
 400d18c:	e037883a 	mov	sp,fp
 400d190:	dfc00117 	ldw	ra,4(sp)
 400d194:	df000017 	ldw	fp,0(sp)
 400d198:	dec00204 	addi	sp,sp,8
 400d19c:	f800283a 	ret

0400d1a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d1a0:	defffd04 	addi	sp,sp,-12
 400d1a4:	dfc00215 	stw	ra,8(sp)
 400d1a8:	df000115 	stw	fp,4(sp)
 400d1ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d1b0:	0009883a 	mov	r4,zero
 400d1b4:	400d7000 	call	400d700 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400d1b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400d1bc:	400d7380 	call	400d738 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400d1c0:	01810074 	movhi	r6,1025
 400d1c4:	31800a04 	addi	r6,r6,40
 400d1c8:	01410074 	movhi	r5,1025
 400d1cc:	29400a04 	addi	r5,r5,40
 400d1d0:	01010074 	movhi	r4,1025
 400d1d4:	21000a04 	addi	r4,r4,40
 400d1d8:	400f3500 	call	400f350 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400d1dc:	400ee380 	call	400ee38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400d1e0:	01010074 	movhi	r4,1025
 400d1e4:	213ba604 	addi	r4,r4,-4456
 400d1e8:	400f9580 	call	400f958 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d1ec:	d0a30c17 	ldw	r2,-29648(gp)
 400d1f0:	d0e30d17 	ldw	r3,-29644(gp)
 400d1f4:	d1230e17 	ldw	r4,-29640(gp)
 400d1f8:	200d883a 	mov	r6,r4
 400d1fc:	180b883a 	mov	r5,r3
 400d200:	1009883a 	mov	r4,r2
 400d204:	40002b40 	call	40002b4 <main>
 400d208:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400d20c:	01000044 	movi	r4,1
 400d210:	400cca00 	call	400cca0 <close>
  exit (result);
 400d214:	e13fff17 	ldw	r4,-4(fp)
 400d218:	400f96c0 	call	400f96c <exit>

0400d21c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400d21c:	defffe04 	addi	sp,sp,-8
 400d220:	df000115 	stw	fp,4(sp)
 400d224:	df000104 	addi	fp,sp,4
 400d228:	e13fff15 	stw	r4,-4(fp)
}
 400d22c:	0001883a 	nop
 400d230:	e037883a 	mov	sp,fp
 400d234:	df000017 	ldw	fp,0(sp)
 400d238:	dec00104 	addi	sp,sp,4
 400d23c:	f800283a 	ret

0400d240 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400d240:	defffe04 	addi	sp,sp,-8
 400d244:	df000115 	stw	fp,4(sp)
 400d248:	df000104 	addi	fp,sp,4
 400d24c:	e13fff15 	stw	r4,-4(fp)
}
 400d250:	0001883a 	nop
 400d254:	e037883a 	mov	sp,fp
 400d258:	df000017 	ldw	fp,0(sp)
 400d25c:	dec00104 	addi	sp,sp,4
 400d260:	f800283a 	ret

0400d264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d264:	defffe04 	addi	sp,sp,-8
 400d268:	dfc00115 	stw	ra,4(sp)
 400d26c:	df000015 	stw	fp,0(sp)
 400d270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d274:	00810074 	movhi	r2,1025
 400d278:	10830a04 	addi	r2,r2,3112
 400d27c:	10800017 	ldw	r2,0(r2)
 400d280:	10000526 	beq	r2,zero,400d298 <alt_get_errno+0x34>
 400d284:	00810074 	movhi	r2,1025
 400d288:	10830a04 	addi	r2,r2,3112
 400d28c:	10800017 	ldw	r2,0(r2)
 400d290:	103ee83a 	callr	r2
 400d294:	00000206 	br	400d2a0 <alt_get_errno+0x3c>
 400d298:	00810074 	movhi	r2,1025
 400d29c:	10860a04 	addi	r2,r2,6184
}
 400d2a0:	e037883a 	mov	sp,fp
 400d2a4:	dfc00117 	ldw	ra,4(sp)
 400d2a8:	df000017 	ldw	fp,0(sp)
 400d2ac:	dec00204 	addi	sp,sp,8
 400d2b0:	f800283a 	ret

0400d2b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400d2b4:	defff904 	addi	sp,sp,-28
 400d2b8:	dfc00615 	stw	ra,24(sp)
 400d2bc:	df000515 	stw	fp,20(sp)
 400d2c0:	df000504 	addi	fp,sp,20
 400d2c4:	e13ffd15 	stw	r4,-12(fp)
 400d2c8:	e17ffe15 	stw	r5,-8(fp)
 400d2cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d2d0:	e0bffd17 	ldw	r2,-12(fp)
 400d2d4:	10000616 	blt	r2,zero,400d2f0 <read+0x3c>
 400d2d8:	e0bffd17 	ldw	r2,-12(fp)
 400d2dc:	10c00324 	muli	r3,r2,12
 400d2e0:	00810074 	movhi	r2,1025
 400d2e4:	10825404 	addi	r2,r2,2384
 400d2e8:	1885883a 	add	r2,r3,r2
 400d2ec:	00000106 	br	400d2f4 <read+0x40>
 400d2f0:	0005883a 	mov	r2,zero
 400d2f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d2f8:	e0bffb17 	ldw	r2,-20(fp)
 400d2fc:	10002226 	beq	r2,zero,400d388 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d300:	e0bffb17 	ldw	r2,-20(fp)
 400d304:	10800217 	ldw	r2,8(r2)
 400d308:	108000cc 	andi	r2,r2,3
 400d30c:	10800060 	cmpeqi	r2,r2,1
 400d310:	1000181e 	bne	r2,zero,400d374 <read+0xc0>
        (fd->dev->read))
 400d314:	e0bffb17 	ldw	r2,-20(fp)
 400d318:	10800017 	ldw	r2,0(r2)
 400d31c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d320:	10001426 	beq	r2,zero,400d374 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400d324:	e0bffb17 	ldw	r2,-20(fp)
 400d328:	10800017 	ldw	r2,0(r2)
 400d32c:	10800517 	ldw	r2,20(r2)
 400d330:	e0ffff17 	ldw	r3,-4(fp)
 400d334:	180d883a 	mov	r6,r3
 400d338:	e17ffe17 	ldw	r5,-8(fp)
 400d33c:	e13ffb17 	ldw	r4,-20(fp)
 400d340:	103ee83a 	callr	r2
 400d344:	e0bffc15 	stw	r2,-16(fp)
 400d348:	e0bffc17 	ldw	r2,-16(fp)
 400d34c:	1000070e 	bge	r2,zero,400d36c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400d350:	400d2640 	call	400d264 <alt_get_errno>
 400d354:	1007883a 	mov	r3,r2
 400d358:	e0bffc17 	ldw	r2,-16(fp)
 400d35c:	0085c83a 	sub	r2,zero,r2
 400d360:	18800015 	stw	r2,0(r3)
          return -1;
 400d364:	00bfffc4 	movi	r2,-1
 400d368:	00000c06 	br	400d39c <read+0xe8>
        }
        return rval;
 400d36c:	e0bffc17 	ldw	r2,-16(fp)
 400d370:	00000a06 	br	400d39c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400d374:	400d2640 	call	400d264 <alt_get_errno>
 400d378:	1007883a 	mov	r3,r2
 400d37c:	00800344 	movi	r2,13
 400d380:	18800015 	stw	r2,0(r3)
 400d384:	00000406 	br	400d398 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400d388:	400d2640 	call	400d264 <alt_get_errno>
 400d38c:	1007883a 	mov	r3,r2
 400d390:	00801444 	movi	r2,81
 400d394:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d398:	00bfffc4 	movi	r2,-1
}
 400d39c:	e037883a 	mov	sp,fp
 400d3a0:	dfc00117 	ldw	ra,4(sp)
 400d3a4:	df000017 	ldw	fp,0(sp)
 400d3a8:	dec00204 	addi	sp,sp,8
 400d3ac:	f800283a 	ret

0400d3b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400d3b0:	defffe04 	addi	sp,sp,-8
 400d3b4:	df000115 	stw	fp,4(sp)
 400d3b8:	df000104 	addi	fp,sp,4
 400d3bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400d3c0:	e0bfff17 	ldw	r2,-4(fp)
 400d3c4:	108000d0 	cmplti	r2,r2,3
 400d3c8:	10000d1e 	bne	r2,zero,400d400 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400d3cc:	00810074 	movhi	r2,1025
 400d3d0:	10825404 	addi	r2,r2,2384
 400d3d4:	e0ffff17 	ldw	r3,-4(fp)
 400d3d8:	18c00324 	muli	r3,r3,12
 400d3dc:	10c5883a 	add	r2,r2,r3
 400d3e0:	10800204 	addi	r2,r2,8
 400d3e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400d3e8:	00810074 	movhi	r2,1025
 400d3ec:	10825404 	addi	r2,r2,2384
 400d3f0:	e0ffff17 	ldw	r3,-4(fp)
 400d3f4:	18c00324 	muli	r3,r3,12
 400d3f8:	10c5883a 	add	r2,r2,r3
 400d3fc:	10000015 	stw	zero,0(r2)
  }
}
 400d400:	0001883a 	nop
 400d404:	e037883a 	mov	sp,fp
 400d408:	df000017 	ldw	fp,0(sp)
 400d40c:	dec00104 	addi	sp,sp,4
 400d410:	f800283a 	ret

0400d414 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400d414:	defff904 	addi	sp,sp,-28
 400d418:	df000615 	stw	fp,24(sp)
 400d41c:	df000604 	addi	fp,sp,24
 400d420:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d424:	0005303a 	rdctl	r2,status
 400d428:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d42c:	e0fffe17 	ldw	r3,-8(fp)
 400d430:	00bfff84 	movi	r2,-2
 400d434:	1884703a 	and	r2,r3,r2
 400d438:	1001703a 	wrctl	status,r2
  
  return context;
 400d43c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400d440:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d444:	d0a00c17 	ldw	r2,-32720(gp)
 400d448:	10c000c4 	addi	r3,r2,3
 400d44c:	00bfff04 	movi	r2,-4
 400d450:	1884703a 	and	r2,r3,r2
 400d454:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d458:	d0e00c17 	ldw	r3,-32720(gp)
 400d45c:	e0bfff17 	ldw	r2,-4(fp)
 400d460:	1887883a 	add	r3,r3,r2
 400d464:	00820034 	movhi	r2,2048
 400d468:	10800004 	addi	r2,r2,0
 400d46c:	10c0062e 	bgeu	r2,r3,400d488 <sbrk+0x74>
 400d470:	e0bffb17 	ldw	r2,-20(fp)
 400d474:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d478:	e0bffa17 	ldw	r2,-24(fp)
 400d47c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400d480:	00bfffc4 	movi	r2,-1
 400d484:	00000b06 	br	400d4b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400d488:	d0a00c17 	ldw	r2,-32720(gp)
 400d48c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400d490:	d0e00c17 	ldw	r3,-32720(gp)
 400d494:	e0bfff17 	ldw	r2,-4(fp)
 400d498:	1885883a 	add	r2,r3,r2
 400d49c:	d0a00c15 	stw	r2,-32720(gp)
 400d4a0:	e0bffb17 	ldw	r2,-20(fp)
 400d4a4:	e0bffc15 	stw	r2,-16(fp)
 400d4a8:	e0bffc17 	ldw	r2,-16(fp)
 400d4ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400d4b0:	e0bffd17 	ldw	r2,-12(fp)
} 
 400d4b4:	e037883a 	mov	sp,fp
 400d4b8:	df000017 	ldw	fp,0(sp)
 400d4bc:	dec00104 	addi	sp,sp,4
 400d4c0:	f800283a 	ret

0400d4c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d4c4:	defffe04 	addi	sp,sp,-8
 400d4c8:	dfc00115 	stw	ra,4(sp)
 400d4cc:	df000015 	stw	fp,0(sp)
 400d4d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d4d4:	00810074 	movhi	r2,1025
 400d4d8:	10830a04 	addi	r2,r2,3112
 400d4dc:	10800017 	ldw	r2,0(r2)
 400d4e0:	10000526 	beq	r2,zero,400d4f8 <alt_get_errno+0x34>
 400d4e4:	00810074 	movhi	r2,1025
 400d4e8:	10830a04 	addi	r2,r2,3112
 400d4ec:	10800017 	ldw	r2,0(r2)
 400d4f0:	103ee83a 	callr	r2
 400d4f4:	00000206 	br	400d500 <alt_get_errno+0x3c>
 400d4f8:	00810074 	movhi	r2,1025
 400d4fc:	10860a04 	addi	r2,r2,6184
}
 400d500:	e037883a 	mov	sp,fp
 400d504:	dfc00117 	ldw	ra,4(sp)
 400d508:	df000017 	ldw	fp,0(sp)
 400d50c:	dec00204 	addi	sp,sp,8
 400d510:	f800283a 	ret

0400d514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400d514:	defff904 	addi	sp,sp,-28
 400d518:	dfc00615 	stw	ra,24(sp)
 400d51c:	df000515 	stw	fp,20(sp)
 400d520:	df000504 	addi	fp,sp,20
 400d524:	e13ffd15 	stw	r4,-12(fp)
 400d528:	e17ffe15 	stw	r5,-8(fp)
 400d52c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d530:	e0bffd17 	ldw	r2,-12(fp)
 400d534:	10000616 	blt	r2,zero,400d550 <write+0x3c>
 400d538:	e0bffd17 	ldw	r2,-12(fp)
 400d53c:	10c00324 	muli	r3,r2,12
 400d540:	00810074 	movhi	r2,1025
 400d544:	10825404 	addi	r2,r2,2384
 400d548:	1885883a 	add	r2,r3,r2
 400d54c:	00000106 	br	400d554 <write+0x40>
 400d550:	0005883a 	mov	r2,zero
 400d554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d558:	e0bffb17 	ldw	r2,-20(fp)
 400d55c:	10002126 	beq	r2,zero,400d5e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400d560:	e0bffb17 	ldw	r2,-20(fp)
 400d564:	10800217 	ldw	r2,8(r2)
 400d568:	108000cc 	andi	r2,r2,3
 400d56c:	10001826 	beq	r2,zero,400d5d0 <write+0xbc>
 400d570:	e0bffb17 	ldw	r2,-20(fp)
 400d574:	10800017 	ldw	r2,0(r2)
 400d578:	10800617 	ldw	r2,24(r2)
 400d57c:	10001426 	beq	r2,zero,400d5d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400d580:	e0bffb17 	ldw	r2,-20(fp)
 400d584:	10800017 	ldw	r2,0(r2)
 400d588:	10800617 	ldw	r2,24(r2)
 400d58c:	e0ffff17 	ldw	r3,-4(fp)
 400d590:	180d883a 	mov	r6,r3
 400d594:	e17ffe17 	ldw	r5,-8(fp)
 400d598:	e13ffb17 	ldw	r4,-20(fp)
 400d59c:	103ee83a 	callr	r2
 400d5a0:	e0bffc15 	stw	r2,-16(fp)
 400d5a4:	e0bffc17 	ldw	r2,-16(fp)
 400d5a8:	1000070e 	bge	r2,zero,400d5c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400d5ac:	400d4c40 	call	400d4c4 <alt_get_errno>
 400d5b0:	1007883a 	mov	r3,r2
 400d5b4:	e0bffc17 	ldw	r2,-16(fp)
 400d5b8:	0085c83a 	sub	r2,zero,r2
 400d5bc:	18800015 	stw	r2,0(r3)
        return -1;
 400d5c0:	00bfffc4 	movi	r2,-1
 400d5c4:	00000c06 	br	400d5f8 <write+0xe4>
      }
      return rval;
 400d5c8:	e0bffc17 	ldw	r2,-16(fp)
 400d5cc:	00000a06 	br	400d5f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400d5d0:	400d4c40 	call	400d4c4 <alt_get_errno>
 400d5d4:	1007883a 	mov	r3,r2
 400d5d8:	00800344 	movi	r2,13
 400d5dc:	18800015 	stw	r2,0(r3)
 400d5e0:	00000406 	br	400d5f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400d5e4:	400d4c40 	call	400d4c4 <alt_get_errno>
 400d5e8:	1007883a 	mov	r3,r2
 400d5ec:	00801444 	movi	r2,81
 400d5f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d5f4:	00bfffc4 	movi	r2,-1
}
 400d5f8:	e037883a 	mov	sp,fp
 400d5fc:	dfc00117 	ldw	ra,4(sp)
 400d600:	df000017 	ldw	fp,0(sp)
 400d604:	dec00204 	addi	sp,sp,8
 400d608:	f800283a 	ret

0400d60c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400d60c:	defffd04 	addi	sp,sp,-12
 400d610:	dfc00215 	stw	ra,8(sp)
 400d614:	df000115 	stw	fp,4(sp)
 400d618:	df000104 	addi	fp,sp,4
 400d61c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400d620:	01410074 	movhi	r5,1025
 400d624:	29430704 	addi	r5,r5,3100
 400d628:	e13fff17 	ldw	r4,-4(fp)
 400d62c:	400ed940 	call	400ed94 <alt_dev_llist_insert>
}
 400d630:	e037883a 	mov	sp,fp
 400d634:	dfc00117 	ldw	ra,4(sp)
 400d638:	df000017 	ldw	fp,0(sp)
 400d63c:	dec00204 	addi	sp,sp,8
 400d640:	f800283a 	ret

0400d644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d644:	defffe04 	addi	sp,sp,-8
 400d648:	dfc00115 	stw	ra,4(sp)
 400d64c:	df000015 	stw	fp,0(sp)
 400d650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d654:	00810074 	movhi	r2,1025
 400d658:	10830a04 	addi	r2,r2,3112
 400d65c:	10800017 	ldw	r2,0(r2)
 400d660:	10000526 	beq	r2,zero,400d678 <alt_get_errno+0x34>
 400d664:	00810074 	movhi	r2,1025
 400d668:	10830a04 	addi	r2,r2,3112
 400d66c:	10800017 	ldw	r2,0(r2)
 400d670:	103ee83a 	callr	r2
 400d674:	00000206 	br	400d680 <alt_get_errno+0x3c>
 400d678:	00810074 	movhi	r2,1025
 400d67c:	10860a04 	addi	r2,r2,6184
}
 400d680:	e037883a 	mov	sp,fp
 400d684:	dfc00117 	ldw	ra,4(sp)
 400d688:	df000017 	ldw	fp,0(sp)
 400d68c:	dec00204 	addi	sp,sp,8
 400d690:	f800283a 	ret

0400d694 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 400d694:	defffc04 	addi	sp,sp,-16
 400d698:	dfc00315 	stw	ra,12(sp)
 400d69c:	df000215 	stw	fp,8(sp)
 400d6a0:	df000204 	addi	fp,sp,8
 400d6a4:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400d6a8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 400d6ac:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 400d6b0:	e0bffe17 	ldw	r2,-8(fp)
 400d6b4:	1000061e 	bne	r2,zero,400d6d0 <alt_avalon_mutex_reg+0x3c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 400d6b8:	01410074 	movhi	r5,1025
 400d6bc:	29430e04 	addi	r5,r5,3128
 400d6c0:	e13fff17 	ldw	r4,-4(fp)
 400d6c4:	400ed940 	call	400ed94 <alt_dev_llist_insert>
 400d6c8:	e0bffe15 	stw	r2,-8(fp)
 400d6cc:	00000606 	br	400d6e8 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 400d6d0:	400d6440 	call	400d644 <alt_get_errno>
 400d6d4:	1007883a 	mov	r3,r2
 400d6d8:	00800304 	movi	r2,12
 400d6dc:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 400d6e0:	00bffd04 	movi	r2,-12
 400d6e4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 400d6e8:	e0bffe17 	ldw	r2,-8(fp)
}
 400d6ec:	e037883a 	mov	sp,fp
 400d6f0:	dfc00117 	ldw	ra,4(sp)
 400d6f4:	df000017 	ldw	fp,0(sp)
 400d6f8:	dec00204 	addi	sp,sp,8
 400d6fc:	f800283a 	ret

0400d700 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400d700:	defffd04 	addi	sp,sp,-12
 400d704:	dfc00215 	stw	ra,8(sp)
 400d708:	df000115 	stw	fp,4(sp)
 400d70c:	df000104 	addi	fp,sp,4
 400d710:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400d714:	400f6400 	call	400f640 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400d718:	00800044 	movi	r2,1
 400d71c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400d720:	0001883a 	nop
 400d724:	e037883a 	mov	sp,fp
 400d728:	dfc00117 	ldw	ra,4(sp)
 400d72c:	df000017 	ldw	fp,0(sp)
 400d730:	dec00204 	addi	sp,sp,8
 400d734:	f800283a 	ret

0400d738 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400d738:	defffe04 	addi	sp,sp,-8
 400d73c:	dfc00115 	stw	ra,4(sp)
 400d740:	df000015 	stw	fp,0(sp)
 400d744:	d839883a 	mov	fp,sp
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 400d748:	01bfffc4 	movi	r6,-1
 400d74c:	000b883a 	mov	r5,zero
 400d750:	01010074 	movhi	r4,1025
 400d754:	2102b404 	addi	r4,r4,2768
 400d758:	400daa40 	call	400daa4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 400d75c:	01010074 	movhi	r4,1025
 400d760:	2102c604 	addi	r4,r4,2840
 400d764:	400d6940 	call	400d694 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 400d768:	01010074 	movhi	r4,1025
 400d76c:	2102ca04 	addi	r4,r4,2856
 400d770:	400d6940 	call	400d694 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 400d774:	00c00044 	movi	r3,1
 400d778:	00820134 	movhi	r2,2052
 400d77c:	10840004 	addi	r2,r2,4096
 400d780:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 400d784:	01800084 	movi	r6,2
 400d788:	000b883a 	mov	r5,zero
 400d78c:	01010074 	movhi	r4,1025
 400d790:	2102d804 	addi	r4,r4,2912
 400d794:	400e50c0 	call	400e50c <altera_avalon_uart_init>
 400d798:	01010074 	movhi	r4,1025
 400d79c:	2102ce04 	addi	r4,r4,2872
 400d7a0:	400d60c0 	call	400d60c <alt_dev_reg>
}
 400d7a4:	0001883a 	nop
 400d7a8:	e037883a 	mov	sp,fp
 400d7ac:	dfc00117 	ldw	ra,4(sp)
 400d7b0:	df000017 	ldw	fp,0(sp)
 400d7b4:	dec00204 	addi	sp,sp,8
 400d7b8:	f800283a 	ret

0400d7bc <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 400d7bc:	defffd04 	addi	sp,sp,-12
 400d7c0:	df000215 	stw	fp,8(sp)
 400d7c4:	df000204 	addi	fp,sp,8
 400d7c8:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 400d7cc:	008e84b4 	movhi	r2,14866
 400d7d0:	10ac1144 	addi	r2,r2,-20411
 400d7d4:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 400d7d8:	e0bfff17 	ldw	r2,-4(fp)
 400d7dc:	10800a17 	ldw	r2,40(r2)
 400d7e0:	10800104 	addi	r2,r2,4
 400d7e4:	1007883a 	mov	r3,r2
 400d7e8:	e0bffe17 	ldw	r2,-8(fp)
 400d7ec:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 400d7f0:	e0bfff17 	ldw	r2,-4(fp)
 400d7f4:	10800a17 	ldw	r2,40(r2)
 400d7f8:	10800104 	addi	r2,r2,4
 400d7fc:	10800037 	ldwio	r2,0(r2)
 400d800:	1007883a 	mov	r3,r2
 400d804:	e0bffe17 	ldw	r2,-8(fp)
 400d808:	1880081e 	bne	r3,r2,400d82c <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 400d80c:	e0bfff17 	ldw	r2,-4(fp)
 400d810:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 400d814:	e0bfff17 	ldw	r2,-4(fp)
 400d818:	10800a17 	ldw	r2,40(r2)
 400d81c:	10800104 	addi	r2,r2,4
 400d820:	0007883a 	mov	r3,zero
 400d824:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 400d828:	00000306 	br	400d838 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 400d82c:	e0bfff17 	ldw	r2,-4(fp)
 400d830:	00c00044 	movi	r3,1
 400d834:	10c00f15 	stw	r3,60(r2)
    }
}
 400d838:	0001883a 	nop
 400d83c:	e037883a 	mov	sp,fp
 400d840:	df000017 	ldw	fp,0(sp)
 400d844:	dec00104 	addi	sp,sp,4
 400d848:	f800283a 	ret

0400d84c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 400d84c:	defffc04 	addi	sp,sp,-16
 400d850:	df000315 	stw	fp,12(sp)
 400d854:	df000304 	addi	fp,sp,12
 400d858:	e13ffe15 	stw	r4,-8(fp)
 400d85c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 400d860:	e0bfff17 	ldw	r2,-4(fp)
 400d864:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 400d868:	e0bffd17 	ldw	r2,-12(fp)
 400d86c:	10001026 	beq	r2,zero,400d8b0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 400d870:	e0bffe17 	ldw	r2,-8(fp)
 400d874:	10800a17 	ldw	r2,40(r2)
 400d878:	10800104 	addi	r2,r2,4
 400d87c:	1007883a 	mov	r3,r2
 400d880:	e0bffd17 	ldw	r2,-12(fp)
 400d884:	10800104 	addi	r2,r2,4
 400d888:	10800017 	ldw	r2,0(r2)
 400d88c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 400d890:	e0bffe17 	ldw	r2,-8(fp)
 400d894:	10800a17 	ldw	r2,40(r2)
 400d898:	1007883a 	mov	r3,r2
 400d89c:	e0bffd17 	ldw	r2,-12(fp)
 400d8a0:	10800017 	ldw	r2,0(r2)
 400d8a4:	18800035 	stwio	r2,0(r3)
        return 0;
 400d8a8:	0005883a 	mov	r2,zero
 400d8ac:	00000106 	br	400d8b4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 400d8b0:	00bffa84 	movi	r2,-22
}
 400d8b4:	e037883a 	mov	sp,fp
 400d8b8:	df000017 	ldw	fp,0(sp)
 400d8bc:	dec00104 	addi	sp,sp,4
 400d8c0:	f800283a 	ret

0400d8c4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 400d8c4:	defff604 	addi	sp,sp,-40
 400d8c8:	dfc00915 	stw	ra,36(sp)
 400d8cc:	df000815 	stw	fp,32(sp)
 400d8d0:	df000804 	addi	fp,sp,32
 400d8d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400d8d8:	e0bfff17 	ldw	r2,-4(fp)
 400d8dc:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 400d8e0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 400d8e4:	e0bff817 	ldw	r2,-32(fp)
 400d8e8:	10801017 	ldw	r2,64(r2)
 400d8ec:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400d8f0:	e0bff817 	ldw	r2,-32(fp)
 400d8f4:	10800a17 	ldw	r2,40(r2)
 400d8f8:	10800304 	addi	r2,r2,12
 400d8fc:	10800037 	ldwio	r2,0(r2)
 400d900:	1007883a 	mov	r3,r2
 400d904:	00bfff44 	movi	r2,-3
 400d908:	1884703a 	and	r2,r3,r2
 400d90c:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400d910:	e0bff817 	ldw	r2,-32(fp)
 400d914:	10800a17 	ldw	r2,40(r2)
 400d918:	10800304 	addi	r2,r2,12
 400d91c:	1007883a 	mov	r3,r2
 400d920:	e0bffb17 	ldw	r2,-20(fp)
 400d924:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 400d928:	e0bffa17 	ldw	r2,-24(fp)
 400d92c:	10002d26 	beq	r2,zero,400d9e4 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 400d930:	e0bff817 	ldw	r2,-32(fp)
 400d934:	10800a17 	ldw	r2,40(r2)
 400d938:	10800104 	addi	r2,r2,4
 400d93c:	1007883a 	mov	r3,r2
 400d940:	e0bffa17 	ldw	r2,-24(fp)
 400d944:	10800104 	addi	r2,r2,4
 400d948:	10800017 	ldw	r2,0(r2)
 400d94c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 400d950:	e0bff817 	ldw	r2,-32(fp)
 400d954:	10800a17 	ldw	r2,40(r2)
 400d958:	1007883a 	mov	r3,r2
 400d95c:	e0bffa17 	ldw	r2,-24(fp)
 400d960:	10800017 	ldw	r2,0(r2)
 400d964:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400d968:	e0bff817 	ldw	r2,-32(fp)
 400d96c:	10800a17 	ldw	r2,40(r2)
 400d970:	10800204 	addi	r2,r2,8
 400d974:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400d978:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400d97c:	1005d07a 	srai	r2,r2,1
 400d980:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 400d984:	e0bff817 	ldw	r2,-32(fp)
 400d988:	10800d17 	ldw	r2,52(r2)
 400d98c:	10001126 	beq	r2,zero,400d9d4 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d990:	0005303a 	rdctl	r2,status
 400d994:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d998:	e0fffd17 	ldw	r3,-12(fp)
 400d99c:	00bfff84 	movi	r2,-2
 400d9a0:	1884703a 	and	r2,r3,r2
 400d9a4:	1001703a 	wrctl	status,r2
  
  return context;
 400d9a8:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 400d9ac:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 400d9b0:	e0bff817 	ldw	r2,-32(fp)
 400d9b4:	10800d17 	ldw	r2,52(r2)
 400d9b8:	e17ff917 	ldw	r5,-28(fp)
 400d9bc:	e13ffa17 	ldw	r4,-24(fp)
 400d9c0:	103ee83a 	callr	r2
 400d9c4:	e0bffc17 	ldw	r2,-16(fp)
 400d9c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d9cc:	e0bffe17 	ldw	r2,-8(fp)
 400d9d0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400d9d4:	e0bff817 	ldw	r2,-32(fp)
 400d9d8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 400d9dc:	e0bff817 	ldw	r2,-32(fp)
 400d9e0:	10001105 	stb	zero,68(r2)
    }
}
 400d9e4:	0001883a 	nop
 400d9e8:	e037883a 	mov	sp,fp
 400d9ec:	dfc00117 	ldw	ra,4(sp)
 400d9f0:	df000017 	ldw	fp,0(sp)
 400d9f4:	dec00204 	addi	sp,sp,8
 400d9f8:	f800283a 	ret

0400d9fc <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 400d9fc:	defff704 	addi	sp,sp,-36
 400da00:	dfc00815 	stw	ra,32(sp)
 400da04:	df000715 	stw	fp,28(sp)
 400da08:	df000704 	addi	fp,sp,28
 400da0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400da10:	e0bfff17 	ldw	r2,-4(fp)
 400da14:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400da18:	e0bff917 	ldw	r2,-28(fp)
 400da1c:	10800a17 	ldw	r2,40(r2)
 400da20:	10800104 	addi	r2,r2,4
 400da24:	10800037 	ldwio	r2,0(r2)
 400da28:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400da2c:	e0bff917 	ldw	r2,-28(fp)
 400da30:	10800a17 	ldw	r2,40(r2)
 400da34:	10800037 	ldwio	r2,0(r2)
 400da38:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 400da3c:	e0bff917 	ldw	r2,-28(fp)
 400da40:	10800e17 	ldw	r2,56(r2)
 400da44:	10001126 	beq	r2,zero,400da8c <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400da48:	0005303a 	rdctl	r2,status
 400da4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400da50:	e0fffb17 	ldw	r3,-20(fp)
 400da54:	00bfff84 	movi	r2,-2
 400da58:	1884703a 	and	r2,r3,r2
 400da5c:	1001703a 	wrctl	status,r2
  
  return context;
 400da60:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400da64:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 400da68:	e0bff917 	ldw	r2,-28(fp)
 400da6c:	10800e17 	ldw	r2,56(r2)
 400da70:	e0fffd04 	addi	r3,fp,-12
 400da74:	1809883a 	mov	r4,r3
 400da78:	103ee83a 	callr	r2
 400da7c:	e0bffa17 	ldw	r2,-24(fp)
 400da80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400da84:	e0bffc17 	ldw	r2,-16(fp)
 400da88:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 400da8c:	0001883a 	nop
 400da90:	e037883a 	mov	sp,fp
 400da94:	dfc00117 	ldw	ra,4(sp)
 400da98:	df000017 	ldw	fp,0(sp)
 400da9c:	dec00204 	addi	sp,sp,8
 400daa0:	f800283a 	ret

0400daa4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 400daa4:	defffb04 	addi	sp,sp,-20
 400daa8:	dfc00415 	stw	ra,16(sp)
 400daac:	df000315 	stw	fp,12(sp)
 400dab0:	df000304 	addi	fp,sp,12
 400dab4:	e13ffd15 	stw	r4,-12(fp)
 400dab8:	e17ffe15 	stw	r5,-8(fp)
 400dabc:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 400dac0:	d1600d04 	addi	r5,gp,-32716
 400dac4:	e13ffd17 	ldw	r4,-12(fp)
 400dac8:	400ed940 	call	400ed94 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 400dacc:	e0ffff17 	ldw	r3,-4(fp)
 400dad0:	e0bffd17 	ldw	r2,-12(fp)
 400dad4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 400dad8:	e0fffe17 	ldw	r3,-8(fp)
 400dadc:	e0bffd17 	ldw	r2,-12(fp)
 400dae0:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 400dae4:	e0bffd17 	ldw	r2,-12(fp)
 400dae8:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 400daec:	e0bffd17 	ldw	r2,-12(fp)
 400daf0:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 400daf4:	e0bffd17 	ldw	r2,-12(fp)
 400daf8:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 400dafc:	e13ffd17 	ldw	r4,-12(fp)
 400db00:	400d7bc0 	call	400d7bc <altera_avalon_mailbox_identify>
}
 400db04:	0001883a 	nop
 400db08:	e037883a 	mov	sp,fp
 400db0c:	dfc00117 	ldw	ra,4(sp)
 400db10:	df000017 	ldw	fp,0(sp)
 400db14:	dec00204 	addi	sp,sp,8
 400db18:	f800283a 	ret

0400db1c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 400db1c:	defff804 	addi	sp,sp,-32
 400db20:	dfc00715 	stw	ra,28(sp)
 400db24:	df000615 	stw	fp,24(sp)
 400db28:	df000604 	addi	fp,sp,24
 400db2c:	e13ffd15 	stw	r4,-12(fp)
 400db30:	e17ffe15 	stw	r5,-8(fp)
 400db34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 400db38:	d1600d04 	addi	r5,gp,-32716
 400db3c:	e13ffd17 	ldw	r4,-12(fp)
 400db40:	400eef80 	call	400eef8 <alt_find_dev>
 400db44:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 400db48:	e0bffb17 	ldw	r2,-20(fp)
 400db4c:	1000021e 	bne	r2,zero,400db58 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 400db50:	0005883a 	mov	r2,zero
 400db54:	00006506 	br	400dcec <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400db58:	e0bffb17 	ldw	r2,-20(fp)
 400db5c:	10800a17 	ldw	r2,40(r2)
 400db60:	10800304 	addi	r2,r2,12
 400db64:	10800037 	ldwio	r2,0(r2)
 400db68:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 400db6c:	e0bffb17 	ldw	r2,-20(fp)
 400db70:	10800f17 	ldw	r2,60(r2)
 400db74:	1000081e 	bne	r2,zero,400db98 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400db78:	e0bffb17 	ldw	r2,-20(fp)
 400db7c:	10800a17 	ldw	r2,40(r2)
 400db80:	10800304 	addi	r2,r2,12
 400db84:	1009883a 	mov	r4,r2
 400db88:	e0fffc17 	ldw	r3,-16(fp)
 400db8c:	00bfff44 	movi	r2,-3
 400db90:	1884703a 	and	r2,r3,r2
 400db94:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 400db98:	e0bffb17 	ldw	r2,-20(fp)
 400db9c:	10800f17 	ldw	r2,60(r2)
 400dba0:	10800058 	cmpnei	r2,r2,1
 400dba4:	1000081e 	bne	r2,zero,400dbc8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400dba8:	e0bffb17 	ldw	r2,-20(fp)
 400dbac:	10800a17 	ldw	r2,40(r2)
 400dbb0:	10800304 	addi	r2,r2,12
 400dbb4:	1009883a 	mov	r4,r2
 400dbb8:	e0fffc17 	ldw	r3,-16(fp)
 400dbbc:	00bfff84 	movi	r2,-2
 400dbc0:	1884703a 	and	r2,r3,r2
 400dbc4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 400dbc8:	e0bffb17 	ldw	r2,-20(fp)
 400dbcc:	10800b17 	ldw	r2,44(r2)
 400dbd0:	10bfffd8 	cmpnei	r2,r2,-1
 400dbd4:	1000021e 	bne	r2,zero,400dbe0 <altera_avalon_mailbox_open+0xc4>
        return dev;
 400dbd8:	e0bffb17 	ldw	r2,-20(fp)
 400dbdc:	00004306 	br	400dcec <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 400dbe0:	e0bffe17 	ldw	r2,-8(fp)
 400dbe4:	1000041e 	bne	r2,zero,400dbf8 <altera_avalon_mailbox_open+0xdc>
 400dbe8:	e0bfff17 	ldw	r2,-4(fp)
 400dbec:	1000021e 	bne	r2,zero,400dbf8 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 400dbf0:	e0bffb17 	ldw	r2,-20(fp)
 400dbf4:	00003d06 	br	400dcec <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400dbf8:	e0bffb17 	ldw	r2,-20(fp)
 400dbfc:	10800f17 	ldw	r2,60(r2)
 400dc00:	1000021e 	bne	r2,zero,400dc0c <altera_avalon_mailbox_open+0xf0>
 400dc04:	e0bfff17 	ldw	r2,-4(fp)
 400dc08:	1000061e 	bne	r2,zero,400dc24 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400dc0c:	e0bffb17 	ldw	r2,-20(fp)
 400dc10:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400dc14:	10800058 	cmpnei	r2,r2,1
 400dc18:	1000041e 	bne	r2,zero,400dc2c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400dc1c:	e0bffe17 	ldw	r2,-8(fp)
 400dc20:	10000226 	beq	r2,zero,400dc2c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 400dc24:	0005883a 	mov	r2,zero
 400dc28:	00003006 	br	400dcec <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 400dc2c:	e0bffb17 	ldw	r2,-20(fp)
 400dc30:	e0fffe17 	ldw	r3,-8(fp)
 400dc34:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 400dc38:	e0bffb17 	ldw	r2,-20(fp)
 400dc3c:	e0ffff17 	ldw	r3,-4(fp)
 400dc40:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 400dc44:	e0bffb17 	ldw	r2,-20(fp)
 400dc48:	10800f17 	ldw	r2,60(r2)
 400dc4c:	10000b1e 	bne	r2,zero,400dc7c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 400dc50:	e0bffb17 	ldw	r2,-20(fp)
 400dc54:	10c00c17 	ldw	r3,48(r2)
 400dc58:	e0bffb17 	ldw	r2,-20(fp)
 400dc5c:	10800b17 	ldw	r2,44(r2)
 400dc60:	d8000015 	stw	zero,0(sp)
 400dc64:	e1fffb17 	ldw	r7,-20(fp)
 400dc68:	01810074 	movhi	r6,1025
 400dc6c:	31b63104 	addi	r6,r6,-10044
 400dc70:	100b883a 	mov	r5,r2
 400dc74:	1809883a 	mov	r4,r3
 400dc78:	400efbc0 	call	400efbc <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 400dc7c:	e0bffb17 	ldw	r2,-20(fp)
 400dc80:	10800f17 	ldw	r2,60(r2)
 400dc84:	10800058 	cmpnei	r2,r2,1
 400dc88:	1000171e 	bne	r2,zero,400dce8 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 400dc8c:	e0bffb17 	ldw	r2,-20(fp)
 400dc90:	10c00c17 	ldw	r3,48(r2)
 400dc94:	e0bffb17 	ldw	r2,-20(fp)
 400dc98:	10800b17 	ldw	r2,44(r2)
 400dc9c:	d8000015 	stw	zero,0(sp)
 400dca0:	e1fffb17 	ldw	r7,-20(fp)
 400dca4:	01810074 	movhi	r6,1025
 400dca8:	31b67f04 	addi	r6,r6,-9732
 400dcac:	100b883a 	mov	r5,r2
 400dcb0:	1809883a 	mov	r4,r3
 400dcb4:	400efbc0 	call	400efbc <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400dcb8:	e0bffb17 	ldw	r2,-20(fp)
 400dcbc:	10800a17 	ldw	r2,40(r2)
 400dcc0:	10800304 	addi	r2,r2,12
 400dcc4:	10800037 	ldwio	r2,0(r2)
 400dcc8:	10800054 	ori	r2,r2,1
 400dccc:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400dcd0:	e0bffb17 	ldw	r2,-20(fp)
 400dcd4:	10800a17 	ldw	r2,40(r2)
 400dcd8:	10800304 	addi	r2,r2,12
 400dcdc:	1007883a 	mov	r3,r2
 400dce0:	e0bffc17 	ldw	r2,-16(fp)
 400dce4:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 400dce8:	e0bffb17 	ldw	r2,-20(fp)
}
 400dcec:	e037883a 	mov	sp,fp
 400dcf0:	dfc00117 	ldw	ra,4(sp)
 400dcf4:	df000017 	ldw	fp,0(sp)
 400dcf8:	dec00204 	addi	sp,sp,8
 400dcfc:	f800283a 	ret

0400dd00 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 400dd00:	defffb04 	addi	sp,sp,-20
 400dd04:	dfc00415 	stw	ra,16(sp)
 400dd08:	df000315 	stw	fp,12(sp)
 400dd0c:	df000304 	addi	fp,sp,12
 400dd10:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 400dd14:	e0bfff17 	ldw	r2,-4(fp)
 400dd18:	10003926 	beq	r2,zero,400de00 <altera_avalon_mailbox_close+0x100>
 400dd1c:	e0bfff17 	ldw	r2,-4(fp)
 400dd20:	10800b17 	ldw	r2,44(r2)
 400dd24:	10bfffe0 	cmpeqi	r2,r2,-1
 400dd28:	1000351e 	bne	r2,zero,400de00 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 400dd2c:	e0bfff17 	ldw	r2,-4(fp)
 400dd30:	10800f17 	ldw	r2,60(r2)
 400dd34:	10000e1e 	bne	r2,zero,400dd70 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400dd38:	e0bfff17 	ldw	r2,-4(fp)
 400dd3c:	10800a17 	ldw	r2,40(r2)
 400dd40:	10800304 	addi	r2,r2,12
 400dd44:	10800037 	ldwio	r2,0(r2)
 400dd48:	1007883a 	mov	r3,r2
 400dd4c:	00bfff44 	movi	r2,-3
 400dd50:	1884703a 	and	r2,r3,r2
 400dd54:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400dd58:	e0bfff17 	ldw	r2,-4(fp)
 400dd5c:	10800a17 	ldw	r2,40(r2)
 400dd60:	10800304 	addi	r2,r2,12
 400dd64:	1007883a 	mov	r3,r2
 400dd68:	e0bffe17 	ldw	r2,-8(fp)
 400dd6c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 400dd70:	e0bfff17 	ldw	r2,-4(fp)
 400dd74:	10800f17 	ldw	r2,60(r2)
 400dd78:	10800058 	cmpnei	r2,r2,1
 400dd7c:	10000e1e 	bne	r2,zero,400ddb8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400dd80:	e0bfff17 	ldw	r2,-4(fp)
 400dd84:	10800a17 	ldw	r2,40(r2)
 400dd88:	10800304 	addi	r2,r2,12
 400dd8c:	10800037 	ldwio	r2,0(r2)
 400dd90:	1007883a 	mov	r3,r2
 400dd94:	00bfff84 	movi	r2,-2
 400dd98:	1884703a 	and	r2,r3,r2
 400dd9c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400dda0:	e0bfff17 	ldw	r2,-4(fp)
 400dda4:	10800a17 	ldw	r2,40(r2)
 400dda8:	10800304 	addi	r2,r2,12
 400ddac:	1007883a 	mov	r3,r2
 400ddb0:	e0bffe17 	ldw	r2,-8(fp)
 400ddb4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 400ddb8:	e0bfff17 	ldw	r2,-4(fp)
 400ddbc:	10800b17 	ldw	r2,44(r2)
 400ddc0:	10bfffe0 	cmpeqi	r2,r2,-1
 400ddc4:	10000a1e 	bne	r2,zero,400ddf0 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 400ddc8:	e0bfff17 	ldw	r2,-4(fp)
 400ddcc:	10c00c17 	ldw	r3,48(r2)
 400ddd0:	e0bfff17 	ldw	r2,-4(fp)
 400ddd4:	10800b17 	ldw	r2,44(r2)
 400ddd8:	d8000015 	stw	zero,0(sp)
 400dddc:	e1ffff17 	ldw	r7,-4(fp)
 400dde0:	000d883a 	mov	r6,zero
 400dde4:	100b883a 	mov	r5,r2
 400dde8:	1809883a 	mov	r4,r3
 400ddec:	400efbc0 	call	400efbc <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 400ddf0:	e0bfff17 	ldw	r2,-4(fp)
 400ddf4:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 400ddf8:	e0bfff17 	ldw	r2,-4(fp)
 400ddfc:	10000e15 	stw	zero,56(r2)
    }
}
 400de00:	0001883a 	nop
 400de04:	e037883a 	mov	sp,fp
 400de08:	dfc00117 	ldw	ra,4(sp)
 400de0c:	df000017 	ldw	fp,0(sp)
 400de10:	dec00204 	addi	sp,sp,8
 400de14:	f800283a 	ret

0400de18 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 400de18:	defffd04 	addi	sp,sp,-12
 400de1c:	df000215 	stw	fp,8(sp)
 400de20:	df000204 	addi	fp,sp,8
 400de24:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 400de28:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 400de2c:	e0bfff17 	ldw	r2,-4(fp)
 400de30:	10800a17 	ldw	r2,40(r2)
 400de34:	10800204 	addi	r2,r2,8
 400de38:	10800037 	ldwio	r2,0(r2)
 400de3c:	108000cc 	andi	r2,r2,3
 400de40:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 400de44:	e0bfff17 	ldw	r2,-4(fp)
 400de48:	10800f17 	ldw	r2,60(r2)
 400de4c:	1000041e 	bne	r2,zero,400de60 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400de50:	e0bffe17 	ldw	r2,-8(fp)
 400de54:	1080008c 	andi	r2,r2,2
 400de58:	1004d07a 	srli	r2,r2,1
 400de5c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 400de60:	e0bfff17 	ldw	r2,-4(fp)
 400de64:	10800f17 	ldw	r2,60(r2)
 400de68:	10800058 	cmpnei	r2,r2,1
 400de6c:	1000031e 	bne	r2,zero,400de7c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 400de70:	e0bffe17 	ldw	r2,-8(fp)
 400de74:	1080004c 	andi	r2,r2,1
 400de78:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 400de7c:	e0bffe17 	ldw	r2,-8(fp)
}
 400de80:	e037883a 	mov	sp,fp
 400de84:	df000017 	ldw	fp,0(sp)
 400de88:	dec00104 	addi	sp,sp,4
 400de8c:	f800283a 	ret

0400de90 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 400de90:	defff704 	addi	sp,sp,-36
 400de94:	dfc00815 	stw	ra,32(sp)
 400de98:	df000715 	stw	fp,28(sp)
 400de9c:	df000704 	addi	fp,sp,28
 400dea0:	e13ffc15 	stw	r4,-16(fp)
 400dea4:	e17ffd15 	stw	r5,-12(fp)
 400dea8:	e1bffe15 	stw	r6,-8(fp)
 400deac:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 400deb0:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400deb4:	e0bffc17 	ldw	r2,-16(fp)
 400deb8:	10801103 	ldbu	r2,68(r2)
 400debc:	10803fcc 	andi	r2,r2,255
 400dec0:	1000061e 	bne	r2,zero,400dedc <altera_avalon_mailbox_send+0x4c>
 400dec4:	e0bffc17 	ldw	r2,-16(fp)
 400dec8:	10800a17 	ldw	r2,40(r2)
 400decc:	10800204 	addi	r2,r2,8
 400ded0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 400ded4:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400ded8:	10000226 	beq	r2,zero,400dee4 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 400dedc:	00bfffc4 	movi	r2,-1
 400dee0:	00003a06 	br	400dfcc <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 400dee4:	e0bffc17 	ldw	r2,-16(fp)
 400dee8:	e0fffd17 	ldw	r3,-12(fp)
 400deec:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 400def0:	e0bffc17 	ldw	r2,-16(fp)
 400def4:	00c00044 	movi	r3,1
 400def8:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 400defc:	e0bffc17 	ldw	r2,-16(fp)
 400df00:	10800b17 	ldw	r2,44(r2)
 400df04:	10bfffe0 	cmpeqi	r2,r2,-1
 400df08:	1000031e 	bne	r2,zero,400df18 <altera_avalon_mailbox_send+0x88>
 400df0c:	e0bfff17 	ldw	r2,-4(fp)
 400df10:	10800058 	cmpnei	r2,r2,1
 400df14:	1000201e 	bne	r2,zero,400df98 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 400df18:	e0bffe17 	ldw	r2,-8(fp)
 400df1c:	1000061e 	bne	r2,zero,400df38 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400df20:	e13ffc17 	ldw	r4,-16(fp)
 400df24:	400de180 	call	400de18 <altera_avalon_mailbox_status>
 400df28:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 400df2c:	e0bffb17 	ldw	r2,-20(fp)
 400df30:	103ffb1e 	bne	r2,zero,400df20 <__ram_exceptions_end+0xfbfedcdc>
 400df34:	00000e06 	br	400df70 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400df38:	e13ffc17 	ldw	r4,-16(fp)
 400df3c:	400de180 	call	400de18 <altera_avalon_mailbox_status>
 400df40:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 400df44:	e0bffe17 	ldw	r2,-8(fp)
 400df48:	10bfffc4 	addi	r2,r2,-1
 400df4c:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 400df50:	e0bffb17 	ldw	r2,-20(fp)
 400df54:	10000226 	beq	r2,zero,400df60 <altera_avalon_mailbox_send+0xd0>
 400df58:	e0bffe17 	ldw	r2,-8(fp)
 400df5c:	103ff61e 	bne	r2,zero,400df38 <__ram_exceptions_end+0xfbfedcf4>
            if (timeout == 0)
 400df60:	e0bffe17 	ldw	r2,-8(fp)
 400df64:	1000021e 	bne	r2,zero,400df70 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 400df68:	00bff084 	movi	r2,-62
 400df6c:	00001706 	br	400dfcc <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 400df70:	e17ffd17 	ldw	r5,-12(fp)
 400df74:	e13ffc17 	ldw	r4,-16(fp)
 400df78:	400d84c0 	call	400d84c <altera_avalon_mailbox_post>
 400df7c:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400df80:	e0bffc17 	ldw	r2,-16(fp)
 400df84:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 400df88:	e0bffc17 	ldw	r2,-16(fp)
 400df8c:	10001105 	stb	zero,68(r2)
        return status;
 400df90:	e0bff917 	ldw	r2,-28(fp)
 400df94:	00000d06 	br	400dfcc <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400df98:	e0bffc17 	ldw	r2,-16(fp)
 400df9c:	10800a17 	ldw	r2,40(r2)
 400dfa0:	10800304 	addi	r2,r2,12
 400dfa4:	10800037 	ldwio	r2,0(r2)
 400dfa8:	10800094 	ori	r2,r2,2
 400dfac:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400dfb0:	e0bffc17 	ldw	r2,-16(fp)
 400dfb4:	10800a17 	ldw	r2,40(r2)
 400dfb8:	10800304 	addi	r2,r2,12
 400dfbc:	1007883a 	mov	r3,r2
 400dfc0:	e0bffa17 	ldw	r2,-24(fp)
 400dfc4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 400dfc8:	0005883a 	mov	r2,zero
}
 400dfcc:	e037883a 	mov	sp,fp
 400dfd0:	dfc00117 	ldw	ra,4(sp)
 400dfd4:	df000017 	ldw	fp,0(sp)
 400dfd8:	dec00204 	addi	sp,sp,8
 400dfdc:	f800283a 	ret

0400dfe0 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 400dfe0:	defff904 	addi	sp,sp,-28
 400dfe4:	dfc00615 	stw	ra,24(sp)
 400dfe8:	df000515 	stw	fp,20(sp)
 400dfec:	df000504 	addi	fp,sp,20
 400dff0:	e13ffd15 	stw	r4,-12(fp)
 400dff4:	e17ffe15 	stw	r5,-8(fp)
 400dff8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 400dffc:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 400e000:	e0bffd17 	ldw	r2,-12(fp)
 400e004:	10003a26 	beq	r2,zero,400e0f0 <altera_avalon_mailbox_retrieve_poll+0x110>
 400e008:	e0bffe17 	ldw	r2,-8(fp)
 400e00c:	10003826 	beq	r2,zero,400e0f0 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400e010:	e0bffd17 	ldw	r2,-12(fp)
 400e014:	10800a17 	ldw	r2,40(r2)
 400e018:	10800304 	addi	r2,r2,12
 400e01c:	10800037 	ldwio	r2,0(r2)
 400e020:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 400e024:	e0bffd17 	ldw	r2,-12(fp)
 400e028:	10800a17 	ldw	r2,40(r2)
 400e02c:	10800304 	addi	r2,r2,12
 400e030:	1009883a 	mov	r4,r2
 400e034:	e0fffc17 	ldw	r3,-16(fp)
 400e038:	00bfff84 	movi	r2,-2
 400e03c:	1884703a 	and	r2,r3,r2
 400e040:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 400e044:	e0bfff17 	ldw	r2,-4(fp)
 400e048:	1000061e 	bne	r2,zero,400e064 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 400e04c:	e13ffd17 	ldw	r4,-12(fp)
 400e050:	400de180 	call	400de18 <altera_avalon_mailbox_status>
 400e054:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 400e058:	e0bffb17 	ldw	r2,-20(fp)
 400e05c:	103ffb26 	beq	r2,zero,400e04c <__ram_exceptions_end+0xfbfede08>
 400e060:	00000a06 	br	400e08c <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 400e064:	e13ffd17 	ldw	r4,-12(fp)
 400e068:	400de180 	call	400de18 <altera_avalon_mailbox_status>
 400e06c:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 400e070:	e0bfff17 	ldw	r2,-4(fp)
 400e074:	10bfffc4 	addi	r2,r2,-1
 400e078:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 400e07c:	e0bffb17 	ldw	r2,-20(fp)
 400e080:	1000021e 	bne	r2,zero,400e08c <altera_avalon_mailbox_retrieve_poll+0xac>
 400e084:	e0bfff17 	ldw	r2,-4(fp)
 400e088:	103ff61e 	bne	r2,zero,400e064 <__ram_exceptions_end+0xfbfede20>
        }

        /* if timeout, status remain 0 */
        if (status)
 400e08c:	e0bffb17 	ldw	r2,-20(fp)
 400e090:	10000d26 	beq	r2,zero,400e0c8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400e094:	e0bffe17 	ldw	r2,-8(fp)
 400e098:	10800104 	addi	r2,r2,4
 400e09c:	e0fffd17 	ldw	r3,-12(fp)
 400e0a0:	18c00a17 	ldw	r3,40(r3)
 400e0a4:	18c00104 	addi	r3,r3,4
 400e0a8:	18c00037 	ldwio	r3,0(r3)
 400e0ac:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400e0b0:	e0bffd17 	ldw	r2,-12(fp)
 400e0b4:	10800a17 	ldw	r2,40(r2)
 400e0b8:	10800037 	ldwio	r2,0(r2)
 400e0bc:	1007883a 	mov	r3,r2
 400e0c0:	e0bffe17 	ldw	r2,-8(fp)
 400e0c4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400e0c8:	e0bffd17 	ldw	r2,-12(fp)
 400e0cc:	10800a17 	ldw	r2,40(r2)
 400e0d0:	10800304 	addi	r2,r2,12
 400e0d4:	1007883a 	mov	r3,r2
 400e0d8:	e0bffc17 	ldw	r2,-16(fp)
 400e0dc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 400e0e0:	e0bffb17 	ldw	r2,-20(fp)
 400e0e4:	10000226 	beq	r2,zero,400e0f0 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 400e0e8:	0005883a 	mov	r2,zero
 400e0ec:	00000606 	br	400e108 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 400e0f0:	e0bffe17 	ldw	r2,-8(fp)
 400e0f4:	10800104 	addi	r2,r2,4
 400e0f8:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 400e0fc:	e0bffe17 	ldw	r2,-8(fp)
 400e100:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 400e104:	00bffa84 	movi	r2,-22
}
 400e108:	e037883a 	mov	sp,fp
 400e10c:	dfc00117 	ldw	ra,4(sp)
 400e110:	df000017 	ldw	fp,0(sp)
 400e114:	dec00204 	addi	sp,sp,8
 400e118:	f800283a 	ret

0400e11c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e11c:	defffe04 	addi	sp,sp,-8
 400e120:	dfc00115 	stw	ra,4(sp)
 400e124:	df000015 	stw	fp,0(sp)
 400e128:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e12c:	00810074 	movhi	r2,1025
 400e130:	10830a04 	addi	r2,r2,3112
 400e134:	10800017 	ldw	r2,0(r2)
 400e138:	10000526 	beq	r2,zero,400e150 <alt_get_errno+0x34>
 400e13c:	00810074 	movhi	r2,1025
 400e140:	10830a04 	addi	r2,r2,3112
 400e144:	10800017 	ldw	r2,0(r2)
 400e148:	103ee83a 	callr	r2
 400e14c:	00000206 	br	400e158 <alt_get_errno+0x3c>
 400e150:	00810074 	movhi	r2,1025
 400e154:	10860a04 	addi	r2,r2,6184
}
 400e158:	e037883a 	mov	sp,fp
 400e15c:	dfc00117 	ldw	ra,4(sp)
 400e160:	df000017 	ldw	fp,0(sp)
 400e164:	dec00204 	addi	sp,sp,8
 400e168:	f800283a 	ret

0400e16c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400e16c:	defff904 	addi	sp,sp,-28
 400e170:	df000615 	stw	fp,24(sp)
 400e174:	df000604 	addi	fp,sp,24
 400e178:	e13ffe15 	stw	r4,-8(fp)
 400e17c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 400e180:	00bfffc4 	movi	r2,-1
 400e184:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 400e188:	0005317a 	rdctl	r2,cpuid
 400e18c:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400e190:	e0bffb17 	ldw	r2,-20(fp)
 400e194:	1006943a 	slli	r3,r2,16
 400e198:	e0bfff17 	ldw	r2,-4(fp)
 400e19c:	1884b03a 	or	r2,r3,r2
 400e1a0:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 400e1a4:	e0bffe17 	ldw	r2,-8(fp)
 400e1a8:	10800317 	ldw	r2,12(r2)
 400e1ac:	e0fffc17 	ldw	r3,-16(fp)
 400e1b0:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400e1b4:	e0bffe17 	ldw	r2,-8(fp)
 400e1b8:	10800317 	ldw	r2,12(r2)
 400e1bc:	10800037 	ldwio	r2,0(r2)
 400e1c0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 400e1c4:	e0fffd17 	ldw	r3,-12(fp)
 400e1c8:	e0bffc17 	ldw	r2,-16(fp)
 400e1cc:	1880011e 	bne	r3,r2,400e1d4 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 400e1d0:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 400e1d4:	e0bffa17 	ldw	r2,-24(fp)
}
 400e1d8:	e037883a 	mov	sp,fp
 400e1dc:	df000017 	ldw	fp,0(sp)
 400e1e0:	dec00104 	addi	sp,sp,4
 400e1e4:	f800283a 	ret

0400e1e8 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 400e1e8:	defffc04 	addi	sp,sp,-16
 400e1ec:	dfc00315 	stw	ra,12(sp)
 400e1f0:	df000215 	stw	fp,8(sp)
 400e1f4:	df000204 	addi	fp,sp,8
 400e1f8:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400e1fc:	d1600f04 	addi	r5,gp,-32708
 400e200:	e13fff17 	ldw	r4,-4(fp)
 400e204:	400eef80 	call	400eef8 <alt_find_dev>
 400e208:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 400e20c:	e0bffe17 	ldw	r2,-8(fp)
 400e210:	1000041e 	bne	r2,zero,400e224 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 400e214:	400e11c0 	call	400e11c <alt_get_errno>
 400e218:	1007883a 	mov	r3,r2
 400e21c:	008004c4 	movi	r2,19
 400e220:	18800015 	stw	r2,0(r3)
  }

  return dev;
 400e224:	e0bffe17 	ldw	r2,-8(fp)
}
 400e228:	e037883a 	mov	sp,fp
 400e22c:	dfc00117 	ldw	ra,4(sp)
 400e230:	df000017 	ldw	fp,0(sp)
 400e234:	dec00204 	addi	sp,sp,8
 400e238:	f800283a 	ret

0400e23c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400e23c:	defffe04 	addi	sp,sp,-8
 400e240:	df000115 	stw	fp,4(sp)
 400e244:	df000104 	addi	fp,sp,4
 400e248:	e13fff15 	stw	r4,-4(fp)
  return;
 400e24c:	0001883a 	nop
}
 400e250:	e037883a 	mov	sp,fp
 400e254:	df000017 	ldw	fp,0(sp)
 400e258:	dec00104 	addi	sp,sp,4
 400e25c:	f800283a 	ret

0400e260 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 400e260:	defffc04 	addi	sp,sp,-16
 400e264:	dfc00315 	stw	ra,12(sp)
 400e268:	df000215 	stw	fp,8(sp)
 400e26c:	df000204 	addi	fp,sp,8
 400e270:	e13ffe15 	stw	r4,-8(fp)
 400e274:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 400e278:	0001883a 	nop
 400e27c:	e17fff17 	ldw	r5,-4(fp)
 400e280:	e13ffe17 	ldw	r4,-8(fp)
 400e284:	400e16c0 	call	400e16c <alt_mutex_trylock>
 400e288:	103ffc1e 	bne	r2,zero,400e27c <__ram_exceptions_end+0xfbfee038>
}
 400e28c:	0001883a 	nop
 400e290:	e037883a 	mov	sp,fp
 400e294:	dfc00117 	ldw	ra,4(sp)
 400e298:	df000017 	ldw	fp,0(sp)
 400e29c:	dec00204 	addi	sp,sp,8
 400e2a0:	f800283a 	ret

0400e2a4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400e2a4:	defffa04 	addi	sp,sp,-24
 400e2a8:	dfc00515 	stw	ra,20(sp)
 400e2ac:	df000415 	stw	fp,16(sp)
 400e2b0:	df000404 	addi	fp,sp,16
 400e2b4:	e13ffd15 	stw	r4,-12(fp)
 400e2b8:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 400e2bc:	e17ffe17 	ldw	r5,-8(fp)
 400e2c0:	e13ffd17 	ldw	r4,-12(fp)
 400e2c4:	400e16c0 	call	400e16c <alt_mutex_trylock>
 400e2c8:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 400e2cc:	e0bffc17 	ldw	r2,-16(fp)
}
 400e2d0:	e037883a 	mov	sp,fp
 400e2d4:	dfc00117 	ldw	ra,4(sp)
 400e2d8:	df000017 	ldw	fp,0(sp)
 400e2dc:	dec00204 	addi	sp,sp,8
 400e2e0:	f800283a 	ret

0400e2e4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 400e2e4:	defffd04 	addi	sp,sp,-12
 400e2e8:	df000215 	stw	fp,8(sp)
 400e2ec:	df000204 	addi	fp,sp,8
 400e2f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 400e2f4:	0005317a 	rdctl	r2,cpuid
 400e2f8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 400e2fc:	e0bfff17 	ldw	r2,-4(fp)
 400e300:	10800317 	ldw	r2,12(r2)
 400e304:	10800104 	addi	r2,r2,4
 400e308:	00c00044 	movi	r3,1
 400e30c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 400e310:	e0bfff17 	ldw	r2,-4(fp)
 400e314:	10800317 	ldw	r2,12(r2)
 400e318:	e0fffe17 	ldw	r3,-8(fp)
 400e31c:	1806943a 	slli	r3,r3,16
 400e320:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 400e324:	0001883a 	nop
 400e328:	e037883a 	mov	sp,fp
 400e32c:	df000017 	ldw	fp,0(sp)
 400e330:	dec00104 	addi	sp,sp,4
 400e334:	f800283a 	ret

0400e338 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 400e338:	defff904 	addi	sp,sp,-28
 400e33c:	df000615 	stw	fp,24(sp)
 400e340:	df000604 	addi	fp,sp,24
 400e344:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 400e348:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 400e34c:	0005317a 	rdctl	r2,cpuid
 400e350:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400e354:	e0bfff17 	ldw	r2,-4(fp)
 400e358:	10800317 	ldw	r2,12(r2)
 400e35c:	10800037 	ldwio	r2,0(r2)
 400e360:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 400e364:	e0bffc17 	ldw	r2,-16(fp)
 400e368:	1004d43a 	srli	r2,r2,16
 400e36c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 400e370:	e0fffd17 	ldw	r3,-12(fp)
 400e374:	e0bffb17 	ldw	r2,-20(fp)
 400e378:	1880071e 	bne	r3,r2,400e398 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 400e37c:	e0bffc17 	ldw	r2,-16(fp)
 400e380:	10bfffcc 	andi	r2,r2,65535
 400e384:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 400e388:	e0bffe17 	ldw	r2,-8(fp)
 400e38c:	10000226 	beq	r2,zero,400e398 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 400e390:	00800044 	movi	r2,1
 400e394:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 400e398:	e0bffa17 	ldw	r2,-24(fp)
}
 400e39c:	e037883a 	mov	sp,fp
 400e3a0:	df000017 	ldw	fp,0(sp)
 400e3a4:	dec00104 	addi	sp,sp,4
 400e3a8:	f800283a 	ret

0400e3ac <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 400e3ac:	defffc04 	addi	sp,sp,-16
 400e3b0:	df000315 	stw	fp,12(sp)
 400e3b4:	df000304 	addi	fp,sp,12
 400e3b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 400e3bc:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 400e3c0:	e0bfff17 	ldw	r2,-4(fp)
 400e3c4:	10800317 	ldw	r2,12(r2)
 400e3c8:	10800104 	addi	r2,r2,4
 400e3cc:	10800037 	ldwio	r2,0(r2)
 400e3d0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 400e3d4:	e0bffe17 	ldw	r2,-8(fp)
 400e3d8:	1080004c 	andi	r2,r2,1
 400e3dc:	10000226 	beq	r2,zero,400e3e8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 400e3e0:	00800044 	movi	r2,1
 400e3e4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 400e3e8:	e0bffd17 	ldw	r2,-12(fp)
}
 400e3ec:	e037883a 	mov	sp,fp
 400e3f0:	df000017 	ldw	fp,0(sp)
 400e3f4:	dec00104 	addi	sp,sp,4
 400e3f8:	f800283a 	ret

0400e3fc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400e3fc:	defffa04 	addi	sp,sp,-24
 400e400:	dfc00515 	stw	ra,20(sp)
 400e404:	df000415 	stw	fp,16(sp)
 400e408:	df000404 	addi	fp,sp,16
 400e40c:	e13ffd15 	stw	r4,-12(fp)
 400e410:	e17ffe15 	stw	r5,-8(fp)
 400e414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400e418:	e0bffd17 	ldw	r2,-12(fp)
 400e41c:	10800017 	ldw	r2,0(r2)
 400e420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 400e424:	e0bffc17 	ldw	r2,-16(fp)
 400e428:	10c00a04 	addi	r3,r2,40
 400e42c:	e0bffd17 	ldw	r2,-12(fp)
 400e430:	10800217 	ldw	r2,8(r2)
 400e434:	100f883a 	mov	r7,r2
 400e438:	e1bfff17 	ldw	r6,-4(fp)
 400e43c:	e17ffe17 	ldw	r5,-8(fp)
 400e440:	1809883a 	mov	r4,r3
 400e444:	400e9240 	call	400e924 <altera_avalon_uart_read>
      fd->fd_flags);
}
 400e448:	e037883a 	mov	sp,fp
 400e44c:	dfc00117 	ldw	ra,4(sp)
 400e450:	df000017 	ldw	fp,0(sp)
 400e454:	dec00204 	addi	sp,sp,8
 400e458:	f800283a 	ret

0400e45c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400e45c:	defffa04 	addi	sp,sp,-24
 400e460:	dfc00515 	stw	ra,20(sp)
 400e464:	df000415 	stw	fp,16(sp)
 400e468:	df000404 	addi	fp,sp,16
 400e46c:	e13ffd15 	stw	r4,-12(fp)
 400e470:	e17ffe15 	stw	r5,-8(fp)
 400e474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400e478:	e0bffd17 	ldw	r2,-12(fp)
 400e47c:	10800017 	ldw	r2,0(r2)
 400e480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 400e484:	e0bffc17 	ldw	r2,-16(fp)
 400e488:	10c00a04 	addi	r3,r2,40
 400e48c:	e0bffd17 	ldw	r2,-12(fp)
 400e490:	10800217 	ldw	r2,8(r2)
 400e494:	100f883a 	mov	r7,r2
 400e498:	e1bfff17 	ldw	r6,-4(fp)
 400e49c:	e17ffe17 	ldw	r5,-8(fp)
 400e4a0:	1809883a 	mov	r4,r3
 400e4a4:	400eb500 	call	400eb50 <altera_avalon_uart_write>
      fd->fd_flags);
}
 400e4a8:	e037883a 	mov	sp,fp
 400e4ac:	dfc00117 	ldw	ra,4(sp)
 400e4b0:	df000017 	ldw	fp,0(sp)
 400e4b4:	dec00204 	addi	sp,sp,8
 400e4b8:	f800283a 	ret

0400e4bc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 400e4bc:	defffc04 	addi	sp,sp,-16
 400e4c0:	dfc00315 	stw	ra,12(sp)
 400e4c4:	df000215 	stw	fp,8(sp)
 400e4c8:	df000204 	addi	fp,sp,8
 400e4cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400e4d0:	e0bfff17 	ldw	r2,-4(fp)
 400e4d4:	10800017 	ldw	r2,0(r2)
 400e4d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 400e4dc:	e0bffe17 	ldw	r2,-8(fp)
 400e4e0:	10c00a04 	addi	r3,r2,40
 400e4e4:	e0bfff17 	ldw	r2,-4(fp)
 400e4e8:	10800217 	ldw	r2,8(r2)
 400e4ec:	100b883a 	mov	r5,r2
 400e4f0:	1809883a 	mov	r4,r3
 400e4f4:	400e8800 	call	400e880 <altera_avalon_uart_close>
}
 400e4f8:	e037883a 	mov	sp,fp
 400e4fc:	dfc00117 	ldw	ra,4(sp)
 400e500:	df000017 	ldw	fp,0(sp)
 400e504:	dec00204 	addi	sp,sp,8
 400e508:	f800283a 	ret

0400e50c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 400e50c:	defff804 	addi	sp,sp,-32
 400e510:	dfc00715 	stw	ra,28(sp)
 400e514:	df000615 	stw	fp,24(sp)
 400e518:	df000604 	addi	fp,sp,24
 400e51c:	e13ffd15 	stw	r4,-12(fp)
 400e520:	e17ffe15 	stw	r5,-8(fp)
 400e524:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 400e528:	e0bffd17 	ldw	r2,-12(fp)
 400e52c:	10800017 	ldw	r2,0(r2)
 400e530:	e0bffb15 	stw	r2,-20(fp)
 400e534:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 400e538:	1000041e 	bne	r2,zero,400e54c <altera_avalon_uart_init+0x40>
 400e53c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 400e540:	1000021e 	bne	r2,zero,400e54c <altera_avalon_uart_init+0x40>
 400e544:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 400e548:	10000226 	beq	r2,zero,400e554 <altera_avalon_uart_init+0x48>
 400e54c:	00800044 	movi	r2,1
 400e550:	00000106 	br	400e558 <altera_avalon_uart_init+0x4c>
 400e554:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 400e558:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 400e55c:	e0bffc17 	ldw	r2,-16(fp)
 400e560:	10000f1e 	bne	r2,zero,400e5a0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 400e564:	e0bffd17 	ldw	r2,-12(fp)
 400e568:	00c32004 	movi	r3,3200
 400e56c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 400e570:	e0bffb17 	ldw	r2,-20(fp)
 400e574:	10800304 	addi	r2,r2,12
 400e578:	e0fffd17 	ldw	r3,-12(fp)
 400e57c:	18c00117 	ldw	r3,4(r3)
 400e580:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 400e584:	d8000015 	stw	zero,0(sp)
 400e588:	e1fffd17 	ldw	r7,-12(fp)
 400e58c:	01810074 	movhi	r6,1025
 400e590:	31b96e04 	addi	r6,r6,-6728
 400e594:	e17fff17 	ldw	r5,-4(fp)
 400e598:	e13ffe17 	ldw	r4,-8(fp)
 400e59c:	400efbc0 	call	400efbc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 400e5a0:	0001883a 	nop
 400e5a4:	e037883a 	mov	sp,fp
 400e5a8:	dfc00117 	ldw	ra,4(sp)
 400e5ac:	df000017 	ldw	fp,0(sp)
 400e5b0:	dec00204 	addi	sp,sp,8
 400e5b4:	f800283a 	ret

0400e5b8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 400e5b8:	defffa04 	addi	sp,sp,-24
 400e5bc:	dfc00515 	stw	ra,20(sp)
 400e5c0:	df000415 	stw	fp,16(sp)
 400e5c4:	df000404 	addi	fp,sp,16
 400e5c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 400e5cc:	e0bfff17 	ldw	r2,-4(fp)
 400e5d0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 400e5d4:	e0bffc17 	ldw	r2,-16(fp)
 400e5d8:	10800017 	ldw	r2,0(r2)
 400e5dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 400e5e0:	e0bffd17 	ldw	r2,-12(fp)
 400e5e4:	10800204 	addi	r2,r2,8
 400e5e8:	10800037 	ldwio	r2,0(r2)
 400e5ec:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 400e5f0:	e0bffd17 	ldw	r2,-12(fp)
 400e5f4:	10800204 	addi	r2,r2,8
 400e5f8:	0007883a 	mov	r3,zero
 400e5fc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 400e600:	e0bffd17 	ldw	r2,-12(fp)
 400e604:	10800204 	addi	r2,r2,8
 400e608:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 400e60c:	e0bffe17 	ldw	r2,-8(fp)
 400e610:	1080200c 	andi	r2,r2,128
 400e614:	10000326 	beq	r2,zero,400e624 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 400e618:	e17ffe17 	ldw	r5,-8(fp)
 400e61c:	e13ffc17 	ldw	r4,-16(fp)
 400e620:	400e6540 	call	400e654 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 400e624:	e0bffe17 	ldw	r2,-8(fp)
 400e628:	1081100c 	andi	r2,r2,1088
 400e62c:	10000326 	beq	r2,zero,400e63c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 400e630:	e17ffe17 	ldw	r5,-8(fp)
 400e634:	e13ffc17 	ldw	r4,-16(fp)
 400e638:	400e7380 	call	400e738 <altera_avalon_uart_txirq>
  }
  

}
 400e63c:	0001883a 	nop
 400e640:	e037883a 	mov	sp,fp
 400e644:	dfc00117 	ldw	ra,4(sp)
 400e648:	df000017 	ldw	fp,0(sp)
 400e64c:	dec00204 	addi	sp,sp,8
 400e650:	f800283a 	ret

0400e654 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 400e654:	defffc04 	addi	sp,sp,-16
 400e658:	df000315 	stw	fp,12(sp)
 400e65c:	df000304 	addi	fp,sp,12
 400e660:	e13ffe15 	stw	r4,-8(fp)
 400e664:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 400e668:	e0bfff17 	ldw	r2,-4(fp)
 400e66c:	108000cc 	andi	r2,r2,3
 400e670:	10002c1e 	bne	r2,zero,400e724 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 400e674:	e0bffe17 	ldw	r2,-8(fp)
 400e678:	10800317 	ldw	r2,12(r2)
 400e67c:	e0bffe17 	ldw	r2,-8(fp)
 400e680:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400e684:	e0bffe17 	ldw	r2,-8(fp)
 400e688:	10800317 	ldw	r2,12(r2)
 400e68c:	10800044 	addi	r2,r2,1
 400e690:	10800fcc 	andi	r2,r2,63
 400e694:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 400e698:	e0bffe17 	ldw	r2,-8(fp)
 400e69c:	10800317 	ldw	r2,12(r2)
 400e6a0:	e0fffe17 	ldw	r3,-8(fp)
 400e6a4:	18c00017 	ldw	r3,0(r3)
 400e6a8:	18c00037 	ldwio	r3,0(r3)
 400e6ac:	1809883a 	mov	r4,r3
 400e6b0:	e0fffe17 	ldw	r3,-8(fp)
 400e6b4:	1885883a 	add	r2,r3,r2
 400e6b8:	10800704 	addi	r2,r2,28
 400e6bc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 400e6c0:	e0bffe17 	ldw	r2,-8(fp)
 400e6c4:	e0fffd17 	ldw	r3,-12(fp)
 400e6c8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400e6cc:	e0bffe17 	ldw	r2,-8(fp)
 400e6d0:	10800317 	ldw	r2,12(r2)
 400e6d4:	10800044 	addi	r2,r2,1
 400e6d8:	10800fcc 	andi	r2,r2,63
 400e6dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 400e6e0:	e0bffe17 	ldw	r2,-8(fp)
 400e6e4:	10c00217 	ldw	r3,8(r2)
 400e6e8:	e0bffd17 	ldw	r2,-12(fp)
 400e6ec:	18800e1e 	bne	r3,r2,400e728 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400e6f0:	e0bffe17 	ldw	r2,-8(fp)
 400e6f4:	10c00117 	ldw	r3,4(r2)
 400e6f8:	00bfdfc4 	movi	r2,-129
 400e6fc:	1886703a 	and	r3,r3,r2
 400e700:	e0bffe17 	ldw	r2,-8(fp)
 400e704:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 400e708:	e0bffe17 	ldw	r2,-8(fp)
 400e70c:	10800017 	ldw	r2,0(r2)
 400e710:	10800304 	addi	r2,r2,12
 400e714:	e0fffe17 	ldw	r3,-8(fp)
 400e718:	18c00117 	ldw	r3,4(r3)
 400e71c:	10c00035 	stwio	r3,0(r2)
 400e720:	00000106 	br	400e728 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 400e724:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 400e728:	e037883a 	mov	sp,fp
 400e72c:	df000017 	ldw	fp,0(sp)
 400e730:	dec00104 	addi	sp,sp,4
 400e734:	f800283a 	ret

0400e738 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 400e738:	defffb04 	addi	sp,sp,-20
 400e73c:	df000415 	stw	fp,16(sp)
 400e740:	df000404 	addi	fp,sp,16
 400e744:	e13ffc15 	stw	r4,-16(fp)
 400e748:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 400e74c:	e0bffc17 	ldw	r2,-16(fp)
 400e750:	10c00417 	ldw	r3,16(r2)
 400e754:	e0bffc17 	ldw	r2,-16(fp)
 400e758:	10800517 	ldw	r2,20(r2)
 400e75c:	18803226 	beq	r3,r2,400e828 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 400e760:	e0bffc17 	ldw	r2,-16(fp)
 400e764:	10800617 	ldw	r2,24(r2)
 400e768:	1080008c 	andi	r2,r2,2
 400e76c:	10000326 	beq	r2,zero,400e77c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 400e770:	e0bffd17 	ldw	r2,-12(fp)
 400e774:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 400e778:	10001d26 	beq	r2,zero,400e7f0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 400e77c:	e0bffc17 	ldw	r2,-16(fp)
 400e780:	10800417 	ldw	r2,16(r2)
 400e784:	e0bffc17 	ldw	r2,-16(fp)
 400e788:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 400e78c:	e0bffc17 	ldw	r2,-16(fp)
 400e790:	10800017 	ldw	r2,0(r2)
 400e794:	10800104 	addi	r2,r2,4
 400e798:	e0fffc17 	ldw	r3,-16(fp)
 400e79c:	18c00417 	ldw	r3,16(r3)
 400e7a0:	e13ffc17 	ldw	r4,-16(fp)
 400e7a4:	20c7883a 	add	r3,r4,r3
 400e7a8:	18c01704 	addi	r3,r3,92
 400e7ac:	18c00003 	ldbu	r3,0(r3)
 400e7b0:	18c03fcc 	andi	r3,r3,255
 400e7b4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 400e7b8:	e0bffc17 	ldw	r2,-16(fp)
 400e7bc:	10800417 	ldw	r2,16(r2)
 400e7c0:	10800044 	addi	r2,r2,1
 400e7c4:	e0fffc17 	ldw	r3,-16(fp)
 400e7c8:	18800415 	stw	r2,16(r3)
 400e7cc:	10c00fcc 	andi	r3,r2,63
 400e7d0:	e0bffc17 	ldw	r2,-16(fp)
 400e7d4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 400e7d8:	e0bffc17 	ldw	r2,-16(fp)
 400e7dc:	10800117 	ldw	r2,4(r2)
 400e7e0:	10c01014 	ori	r3,r2,64
 400e7e4:	e0bffc17 	ldw	r2,-16(fp)
 400e7e8:	10c00115 	stw	r3,4(r2)
 400e7ec:	00000e06 	br	400e828 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 400e7f0:	e0bffc17 	ldw	r2,-16(fp)
 400e7f4:	10800017 	ldw	r2,0(r2)
 400e7f8:	10800204 	addi	r2,r2,8
 400e7fc:	10800037 	ldwio	r2,0(r2)
 400e800:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 400e804:	e0bffd17 	ldw	r2,-12(fp)
 400e808:	1082000c 	andi	r2,r2,2048
 400e80c:	1000061e 	bne	r2,zero,400e828 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 400e810:	e0bffc17 	ldw	r2,-16(fp)
 400e814:	10c00117 	ldw	r3,4(r2)
 400e818:	00bfefc4 	movi	r2,-65
 400e81c:	1886703a 	and	r3,r3,r2
 400e820:	e0bffc17 	ldw	r2,-16(fp)
 400e824:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 400e828:	e0bffc17 	ldw	r2,-16(fp)
 400e82c:	10c00417 	ldw	r3,16(r2)
 400e830:	e0bffc17 	ldw	r2,-16(fp)
 400e834:	10800517 	ldw	r2,20(r2)
 400e838:	1880061e 	bne	r3,r2,400e854 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400e83c:	e0bffc17 	ldw	r2,-16(fp)
 400e840:	10c00117 	ldw	r3,4(r2)
 400e844:	00beefc4 	movi	r2,-1089
 400e848:	1886703a 	and	r3,r3,r2
 400e84c:	e0bffc17 	ldw	r2,-16(fp)
 400e850:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400e854:	e0bffc17 	ldw	r2,-16(fp)
 400e858:	10800017 	ldw	r2,0(r2)
 400e85c:	10800304 	addi	r2,r2,12
 400e860:	e0fffc17 	ldw	r3,-16(fp)
 400e864:	18c00117 	ldw	r3,4(r3)
 400e868:	10c00035 	stwio	r3,0(r2)
}
 400e86c:	0001883a 	nop
 400e870:	e037883a 	mov	sp,fp
 400e874:	df000017 	ldw	fp,0(sp)
 400e878:	dec00104 	addi	sp,sp,4
 400e87c:	f800283a 	ret

0400e880 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 400e880:	defffd04 	addi	sp,sp,-12
 400e884:	df000215 	stw	fp,8(sp)
 400e888:	df000204 	addi	fp,sp,8
 400e88c:	e13ffe15 	stw	r4,-8(fp)
 400e890:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 400e894:	00000506 	br	400e8ac <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400e898:	e0bfff17 	ldw	r2,-4(fp)
 400e89c:	1090000c 	andi	r2,r2,16384
 400e8a0:	10000226 	beq	r2,zero,400e8ac <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400e8a4:	00bffd44 	movi	r2,-11
 400e8a8:	00000606 	br	400e8c4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 400e8ac:	e0bffe17 	ldw	r2,-8(fp)
 400e8b0:	10c00417 	ldw	r3,16(r2)
 400e8b4:	e0bffe17 	ldw	r2,-8(fp)
 400e8b8:	10800517 	ldw	r2,20(r2)
 400e8bc:	18bff61e 	bne	r3,r2,400e898 <__ram_exceptions_end+0xfbfee654>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400e8c0:	0005883a 	mov	r2,zero
}
 400e8c4:	e037883a 	mov	sp,fp
 400e8c8:	df000017 	ldw	fp,0(sp)
 400e8cc:	dec00104 	addi	sp,sp,4
 400e8d0:	f800283a 	ret

0400e8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e8d4:	defffe04 	addi	sp,sp,-8
 400e8d8:	dfc00115 	stw	ra,4(sp)
 400e8dc:	df000015 	stw	fp,0(sp)
 400e8e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e8e4:	00810074 	movhi	r2,1025
 400e8e8:	10830a04 	addi	r2,r2,3112
 400e8ec:	10800017 	ldw	r2,0(r2)
 400e8f0:	10000526 	beq	r2,zero,400e908 <alt_get_errno+0x34>
 400e8f4:	00810074 	movhi	r2,1025
 400e8f8:	10830a04 	addi	r2,r2,3112
 400e8fc:	10800017 	ldw	r2,0(r2)
 400e900:	103ee83a 	callr	r2
 400e904:	00000206 	br	400e910 <alt_get_errno+0x3c>
 400e908:	00810074 	movhi	r2,1025
 400e90c:	10860a04 	addi	r2,r2,6184
}
 400e910:	e037883a 	mov	sp,fp
 400e914:	dfc00117 	ldw	ra,4(sp)
 400e918:	df000017 	ldw	fp,0(sp)
 400e91c:	dec00204 	addi	sp,sp,8
 400e920:	f800283a 	ret

0400e924 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 400e924:	defff204 	addi	sp,sp,-56
 400e928:	dfc00d15 	stw	ra,52(sp)
 400e92c:	df000c15 	stw	fp,48(sp)
 400e930:	df000c04 	addi	fp,sp,48
 400e934:	e13ffc15 	stw	r4,-16(fp)
 400e938:	e17ffd15 	stw	r5,-12(fp)
 400e93c:	e1bffe15 	stw	r6,-8(fp)
 400e940:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 400e944:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 400e948:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 400e94c:	e0bfff17 	ldw	r2,-4(fp)
 400e950:	1090000c 	andi	r2,r2,16384
 400e954:	1005003a 	cmpeq	r2,r2,zero
 400e958:	10803fcc 	andi	r2,r2,255
 400e95c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 400e960:	00001306 	br	400e9b0 <altera_avalon_uart_read+0x8c>
    {
      count++;
 400e964:	e0bff517 	ldw	r2,-44(fp)
 400e968:	10800044 	addi	r2,r2,1
 400e96c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 400e970:	e0bffd17 	ldw	r2,-12(fp)
 400e974:	10c00044 	addi	r3,r2,1
 400e978:	e0fffd15 	stw	r3,-12(fp)
 400e97c:	e0fffc17 	ldw	r3,-16(fp)
 400e980:	18c00217 	ldw	r3,8(r3)
 400e984:	e13ffc17 	ldw	r4,-16(fp)
 400e988:	20c7883a 	add	r3,r4,r3
 400e98c:	18c00704 	addi	r3,r3,28
 400e990:	18c00003 	ldbu	r3,0(r3)
 400e994:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 400e998:	e0bffc17 	ldw	r2,-16(fp)
 400e99c:	10800217 	ldw	r2,8(r2)
 400e9a0:	10800044 	addi	r2,r2,1
 400e9a4:	10c00fcc 	andi	r3,r2,63
 400e9a8:	e0bffc17 	ldw	r2,-16(fp)
 400e9ac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 400e9b0:	e0fff517 	ldw	r3,-44(fp)
 400e9b4:	e0bffe17 	ldw	r2,-8(fp)
 400e9b8:	1880050e 	bge	r3,r2,400e9d0 <altera_avalon_uart_read+0xac>
 400e9bc:	e0bffc17 	ldw	r2,-16(fp)
 400e9c0:	10c00217 	ldw	r3,8(r2)
 400e9c4:	e0bffc17 	ldw	r2,-16(fp)
 400e9c8:	10800317 	ldw	r2,12(r2)
 400e9cc:	18bfe51e 	bne	r3,r2,400e964 <__ram_exceptions_end+0xfbfee720>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 400e9d0:	e0bff517 	ldw	r2,-44(fp)
 400e9d4:	1000251e 	bne	r2,zero,400ea6c <altera_avalon_uart_read+0x148>
 400e9d8:	e0bffc17 	ldw	r2,-16(fp)
 400e9dc:	10c00217 	ldw	r3,8(r2)
 400e9e0:	e0bffc17 	ldw	r2,-16(fp)
 400e9e4:	10800317 	ldw	r2,12(r2)
 400e9e8:	1880201e 	bne	r3,r2,400ea6c <altera_avalon_uart_read+0x148>
    {
      if (!block)
 400e9ec:	e0bff617 	ldw	r2,-40(fp)
 400e9f0:	1000071e 	bne	r2,zero,400ea10 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 400e9f4:	400e8d40 	call	400e8d4 <alt_get_errno>
 400e9f8:	1007883a 	mov	r3,r2
 400e9fc:	008002c4 	movi	r2,11
 400ea00:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 400ea04:	00800044 	movi	r2,1
 400ea08:	e0bff405 	stb	r2,-48(fp)
        break;
 400ea0c:	00001b06 	br	400ea7c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ea10:	0005303a 	rdctl	r2,status
 400ea14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ea18:	e0fff917 	ldw	r3,-28(fp)
 400ea1c:	00bfff84 	movi	r2,-2
 400ea20:	1884703a 	and	r2,r3,r2
 400ea24:	1001703a 	wrctl	status,r2
  
  return context;
 400ea28:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 400ea2c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400ea30:	e0bffc17 	ldw	r2,-16(fp)
 400ea34:	10800117 	ldw	r2,4(r2)
 400ea38:	10c02014 	ori	r3,r2,128
 400ea3c:	e0bffc17 	ldw	r2,-16(fp)
 400ea40:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400ea44:	e0bffc17 	ldw	r2,-16(fp)
 400ea48:	10800017 	ldw	r2,0(r2)
 400ea4c:	10800304 	addi	r2,r2,12
 400ea50:	e0fffc17 	ldw	r3,-16(fp)
 400ea54:	18c00117 	ldw	r3,4(r3)
 400ea58:	10c00035 	stwio	r3,0(r2)
 400ea5c:	e0bff817 	ldw	r2,-32(fp)
 400ea60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ea64:	e0bffa17 	ldw	r2,-24(fp)
 400ea68:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 400ea6c:	e0bff517 	ldw	r2,-44(fp)
 400ea70:	1000021e 	bne	r2,zero,400ea7c <altera_avalon_uart_read+0x158>
 400ea74:	e0bffe17 	ldw	r2,-8(fp)
 400ea78:	103fcd1e 	bne	r2,zero,400e9b0 <__ram_exceptions_end+0xfbfee76c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ea7c:	0005303a 	rdctl	r2,status
 400ea80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ea84:	e0fffb17 	ldw	r3,-20(fp)
 400ea88:	00bfff84 	movi	r2,-2
 400ea8c:	1884703a 	and	r2,r3,r2
 400ea90:	1001703a 	wrctl	status,r2
  
  return context;
 400ea94:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 400ea98:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400ea9c:	e0bffc17 	ldw	r2,-16(fp)
 400eaa0:	10800117 	ldw	r2,4(r2)
 400eaa4:	10c02014 	ori	r3,r2,128
 400eaa8:	e0bffc17 	ldw	r2,-16(fp)
 400eaac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400eab0:	e0bffc17 	ldw	r2,-16(fp)
 400eab4:	10800017 	ldw	r2,0(r2)
 400eab8:	10800304 	addi	r2,r2,12
 400eabc:	e0fffc17 	ldw	r3,-16(fp)
 400eac0:	18c00117 	ldw	r3,4(r3)
 400eac4:	10c00035 	stwio	r3,0(r2)
 400eac8:	e0bff817 	ldw	r2,-32(fp)
 400eacc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ead0:	e0bff717 	ldw	r2,-36(fp)
 400ead4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 400ead8:	e0bff403 	ldbu	r2,-48(fp)
 400eadc:	10000226 	beq	r2,zero,400eae8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 400eae0:	00bffd44 	movi	r2,-11
 400eae4:	00000106 	br	400eaec <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 400eae8:	e0bff517 	ldw	r2,-44(fp)
  }
}
 400eaec:	e037883a 	mov	sp,fp
 400eaf0:	dfc00117 	ldw	ra,4(sp)
 400eaf4:	df000017 	ldw	fp,0(sp)
 400eaf8:	dec00204 	addi	sp,sp,8
 400eafc:	f800283a 	ret

0400eb00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eb00:	defffe04 	addi	sp,sp,-8
 400eb04:	dfc00115 	stw	ra,4(sp)
 400eb08:	df000015 	stw	fp,0(sp)
 400eb0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eb10:	00810074 	movhi	r2,1025
 400eb14:	10830a04 	addi	r2,r2,3112
 400eb18:	10800017 	ldw	r2,0(r2)
 400eb1c:	10000526 	beq	r2,zero,400eb34 <alt_get_errno+0x34>
 400eb20:	00810074 	movhi	r2,1025
 400eb24:	10830a04 	addi	r2,r2,3112
 400eb28:	10800017 	ldw	r2,0(r2)
 400eb2c:	103ee83a 	callr	r2
 400eb30:	00000206 	br	400eb3c <alt_get_errno+0x3c>
 400eb34:	00810074 	movhi	r2,1025
 400eb38:	10860a04 	addi	r2,r2,6184
}
 400eb3c:	e037883a 	mov	sp,fp
 400eb40:	dfc00117 	ldw	ra,4(sp)
 400eb44:	df000017 	ldw	fp,0(sp)
 400eb48:	dec00204 	addi	sp,sp,8
 400eb4c:	f800283a 	ret

0400eb50 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 400eb50:	defff204 	addi	sp,sp,-56
 400eb54:	dfc00d15 	stw	ra,52(sp)
 400eb58:	df000c15 	stw	fp,48(sp)
 400eb5c:	df000c04 	addi	fp,sp,48
 400eb60:	e13ffc15 	stw	r4,-16(fp)
 400eb64:	e17ffd15 	stw	r5,-12(fp)
 400eb68:	e1bffe15 	stw	r6,-8(fp)
 400eb6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 400eb70:	e0bffe17 	ldw	r2,-8(fp)
 400eb74:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 400eb78:	e0bfff17 	ldw	r2,-4(fp)
 400eb7c:	1090000c 	andi	r2,r2,16384
 400eb80:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400eb84:	00003c06 	br	400ec78 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400eb88:	e0bffc17 	ldw	r2,-16(fp)
 400eb8c:	10800517 	ldw	r2,20(r2)
 400eb90:	10800044 	addi	r2,r2,1
 400eb94:	10800fcc 	andi	r2,r2,63
 400eb98:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 400eb9c:	e0bffc17 	ldw	r2,-16(fp)
 400eba0:	10c00417 	ldw	r3,16(r2)
 400eba4:	e0bff717 	ldw	r2,-36(fp)
 400eba8:	1880221e 	bne	r3,r2,400ec34 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 400ebac:	e0bff517 	ldw	r2,-44(fp)
 400ebb0:	10000526 	beq	r2,zero,400ebc8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 400ebb4:	400eb000 	call	400eb00 <alt_get_errno>
 400ebb8:	1007883a 	mov	r3,r2
 400ebbc:	008002c4 	movi	r2,11
 400ebc0:	18800015 	stw	r2,0(r3)
        break;
 400ebc4:	00002e06 	br	400ec80 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ebc8:	0005303a 	rdctl	r2,status
 400ebcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ebd0:	e0fff917 	ldw	r3,-28(fp)
 400ebd4:	00bfff84 	movi	r2,-2
 400ebd8:	1884703a 	and	r2,r3,r2
 400ebdc:	1001703a 	wrctl	status,r2
  
  return context;
 400ebe0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 400ebe4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400ebe8:	e0bffc17 	ldw	r2,-16(fp)
 400ebec:	10800117 	ldw	r2,4(r2)
 400ebf0:	10c11014 	ori	r3,r2,1088
 400ebf4:	e0bffc17 	ldw	r2,-16(fp)
 400ebf8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400ebfc:	e0bffc17 	ldw	r2,-16(fp)
 400ec00:	10800017 	ldw	r2,0(r2)
 400ec04:	10800304 	addi	r2,r2,12
 400ec08:	e0fffc17 	ldw	r3,-16(fp)
 400ec0c:	18c00117 	ldw	r3,4(r3)
 400ec10:	10c00035 	stwio	r3,0(r2)
 400ec14:	e0bff817 	ldw	r2,-32(fp)
 400ec18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec1c:	e0bff617 	ldw	r2,-40(fp)
 400ec20:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 400ec24:	e0bffc17 	ldw	r2,-16(fp)
 400ec28:	10c00417 	ldw	r3,16(r2)
 400ec2c:	e0bff717 	ldw	r2,-36(fp)
 400ec30:	18bffc26 	beq	r3,r2,400ec24 <__ram_exceptions_end+0xfbfee9e0>
      }
    }

    count--;
 400ec34:	e0bff417 	ldw	r2,-48(fp)
 400ec38:	10bfffc4 	addi	r2,r2,-1
 400ec3c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 400ec40:	e0bffc17 	ldw	r2,-16(fp)
 400ec44:	10c00517 	ldw	r3,20(r2)
 400ec48:	e0bffd17 	ldw	r2,-12(fp)
 400ec4c:	11000044 	addi	r4,r2,1
 400ec50:	e13ffd15 	stw	r4,-12(fp)
 400ec54:	10800003 	ldbu	r2,0(r2)
 400ec58:	1009883a 	mov	r4,r2
 400ec5c:	e0bffc17 	ldw	r2,-16(fp)
 400ec60:	10c5883a 	add	r2,r2,r3
 400ec64:	10801704 	addi	r2,r2,92
 400ec68:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 400ec6c:	e0bffc17 	ldw	r2,-16(fp)
 400ec70:	e0fff717 	ldw	r3,-36(fp)
 400ec74:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400ec78:	e0bff417 	ldw	r2,-48(fp)
 400ec7c:	103fc21e 	bne	r2,zero,400eb88 <__ram_exceptions_end+0xfbfee944>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ec80:	0005303a 	rdctl	r2,status
 400ec84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ec88:	e0fffb17 	ldw	r3,-20(fp)
 400ec8c:	00bfff84 	movi	r2,-2
 400ec90:	1884703a 	and	r2,r3,r2
 400ec94:	1001703a 	wrctl	status,r2
  
  return context;
 400ec98:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 400ec9c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400eca0:	e0bffc17 	ldw	r2,-16(fp)
 400eca4:	10800117 	ldw	r2,4(r2)
 400eca8:	10c11014 	ori	r3,r2,1088
 400ecac:	e0bffc17 	ldw	r2,-16(fp)
 400ecb0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400ecb4:	e0bffc17 	ldw	r2,-16(fp)
 400ecb8:	10800017 	ldw	r2,0(r2)
 400ecbc:	10800304 	addi	r2,r2,12
 400ecc0:	e0fffc17 	ldw	r3,-16(fp)
 400ecc4:	18c00117 	ldw	r3,4(r3)
 400ecc8:	10c00035 	stwio	r3,0(r2)
 400eccc:	e0bff817 	ldw	r2,-32(fp)
 400ecd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ecd4:	e0bffa17 	ldw	r2,-24(fp)
 400ecd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 400ecdc:	e0fffe17 	ldw	r3,-8(fp)
 400ece0:	e0bff417 	ldw	r2,-48(fp)
 400ece4:	1885c83a 	sub	r2,r3,r2
}
 400ece8:	e037883a 	mov	sp,fp
 400ecec:	dfc00117 	ldw	ra,4(sp)
 400ecf0:	df000017 	ldw	fp,0(sp)
 400ecf4:	dec00204 	addi	sp,sp,8
 400ecf8:	f800283a 	ret

0400ecfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400ecfc:	defffe04 	addi	sp,sp,-8
 400ed00:	df000115 	stw	fp,4(sp)
 400ed04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400ed08:	e03fff15 	stw	zero,-4(fp)
 400ed0c:	00000506 	br	400ed24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400ed10:	e0bfff17 	ldw	r2,-4(fp)
 400ed14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400ed18:	e0bfff17 	ldw	r2,-4(fp)
 400ed1c:	10800804 	addi	r2,r2,32
 400ed20:	e0bfff15 	stw	r2,-4(fp)
 400ed24:	e0bfff17 	ldw	r2,-4(fp)
 400ed28:	10820030 	cmpltui	r2,r2,2048
 400ed2c:	103ff81e 	bne	r2,zero,400ed10 <__ram_exceptions_end+0xfbfeeacc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400ed30:	0001883a 	nop
 400ed34:	e037883a 	mov	sp,fp
 400ed38:	df000017 	ldw	fp,0(sp)
 400ed3c:	dec00104 	addi	sp,sp,4
 400ed40:	f800283a 	ret

0400ed44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ed44:	defffe04 	addi	sp,sp,-8
 400ed48:	dfc00115 	stw	ra,4(sp)
 400ed4c:	df000015 	stw	fp,0(sp)
 400ed50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ed54:	00810074 	movhi	r2,1025
 400ed58:	10830a04 	addi	r2,r2,3112
 400ed5c:	10800017 	ldw	r2,0(r2)
 400ed60:	10000526 	beq	r2,zero,400ed78 <alt_get_errno+0x34>
 400ed64:	00810074 	movhi	r2,1025
 400ed68:	10830a04 	addi	r2,r2,3112
 400ed6c:	10800017 	ldw	r2,0(r2)
 400ed70:	103ee83a 	callr	r2
 400ed74:	00000206 	br	400ed80 <alt_get_errno+0x3c>
 400ed78:	00810074 	movhi	r2,1025
 400ed7c:	10860a04 	addi	r2,r2,6184
}
 400ed80:	e037883a 	mov	sp,fp
 400ed84:	dfc00117 	ldw	ra,4(sp)
 400ed88:	df000017 	ldw	fp,0(sp)
 400ed8c:	dec00204 	addi	sp,sp,8
 400ed90:	f800283a 	ret

0400ed94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400ed94:	defffa04 	addi	sp,sp,-24
 400ed98:	dfc00515 	stw	ra,20(sp)
 400ed9c:	df000415 	stw	fp,16(sp)
 400eda0:	df000404 	addi	fp,sp,16
 400eda4:	e13ffe15 	stw	r4,-8(fp)
 400eda8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400edac:	e0bffe17 	ldw	r2,-8(fp)
 400edb0:	10000326 	beq	r2,zero,400edc0 <alt_dev_llist_insert+0x2c>
 400edb4:	e0bffe17 	ldw	r2,-8(fp)
 400edb8:	10800217 	ldw	r2,8(r2)
 400edbc:	1000061e 	bne	r2,zero,400edd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400edc0:	400ed440 	call	400ed44 <alt_get_errno>
 400edc4:	1007883a 	mov	r3,r2
 400edc8:	00800584 	movi	r2,22
 400edcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400edd0:	00bffa84 	movi	r2,-22
 400edd4:	00001306 	br	400ee24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400edd8:	e0bffe17 	ldw	r2,-8(fp)
 400eddc:	e0ffff17 	ldw	r3,-4(fp)
 400ede0:	e0fffc15 	stw	r3,-16(fp)
 400ede4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ede8:	e0bffd17 	ldw	r2,-12(fp)
 400edec:	e0fffc17 	ldw	r3,-16(fp)
 400edf0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400edf4:	e0bffc17 	ldw	r2,-16(fp)
 400edf8:	10c00017 	ldw	r3,0(r2)
 400edfc:	e0bffd17 	ldw	r2,-12(fp)
 400ee00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ee04:	e0bffc17 	ldw	r2,-16(fp)
 400ee08:	10800017 	ldw	r2,0(r2)
 400ee0c:	e0fffd17 	ldw	r3,-12(fp)
 400ee10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400ee14:	e0bffc17 	ldw	r2,-16(fp)
 400ee18:	e0fffd17 	ldw	r3,-12(fp)
 400ee1c:	10c00015 	stw	r3,0(r2)

  return 0;  
 400ee20:	0005883a 	mov	r2,zero
}
 400ee24:	e037883a 	mov	sp,fp
 400ee28:	dfc00117 	ldw	ra,4(sp)
 400ee2c:	df000017 	ldw	fp,0(sp)
 400ee30:	dec00204 	addi	sp,sp,8
 400ee34:	f800283a 	ret

0400ee38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400ee38:	defffd04 	addi	sp,sp,-12
 400ee3c:	dfc00215 	stw	ra,8(sp)
 400ee40:	df000115 	stw	fp,4(sp)
 400ee44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400ee48:	00810074 	movhi	r2,1025
 400ee4c:	10bf3a04 	addi	r2,r2,-792
 400ee50:	e0bfff15 	stw	r2,-4(fp)
 400ee54:	00000606 	br	400ee70 <_do_ctors+0x38>
        (*ctor) (); 
 400ee58:	e0bfff17 	ldw	r2,-4(fp)
 400ee5c:	10800017 	ldw	r2,0(r2)
 400ee60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400ee64:	e0bfff17 	ldw	r2,-4(fp)
 400ee68:	10bfff04 	addi	r2,r2,-4
 400ee6c:	e0bfff15 	stw	r2,-4(fp)
 400ee70:	e0ffff17 	ldw	r3,-4(fp)
 400ee74:	00810074 	movhi	r2,1025
 400ee78:	10bf3b04 	addi	r2,r2,-788
 400ee7c:	18bff62e 	bgeu	r3,r2,400ee58 <__ram_exceptions_end+0xfbfeec14>
        (*ctor) (); 
}
 400ee80:	0001883a 	nop
 400ee84:	e037883a 	mov	sp,fp
 400ee88:	dfc00117 	ldw	ra,4(sp)
 400ee8c:	df000017 	ldw	fp,0(sp)
 400ee90:	dec00204 	addi	sp,sp,8
 400ee94:	f800283a 	ret

0400ee98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400ee98:	defffd04 	addi	sp,sp,-12
 400ee9c:	dfc00215 	stw	ra,8(sp)
 400eea0:	df000115 	stw	fp,4(sp)
 400eea4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400eea8:	00810074 	movhi	r2,1025
 400eeac:	10bf3a04 	addi	r2,r2,-792
 400eeb0:	e0bfff15 	stw	r2,-4(fp)
 400eeb4:	00000606 	br	400eed0 <_do_dtors+0x38>
        (*dtor) (); 
 400eeb8:	e0bfff17 	ldw	r2,-4(fp)
 400eebc:	10800017 	ldw	r2,0(r2)
 400eec0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400eec4:	e0bfff17 	ldw	r2,-4(fp)
 400eec8:	10bfff04 	addi	r2,r2,-4
 400eecc:	e0bfff15 	stw	r2,-4(fp)
 400eed0:	e0ffff17 	ldw	r3,-4(fp)
 400eed4:	00810074 	movhi	r2,1025
 400eed8:	10bf3b04 	addi	r2,r2,-788
 400eedc:	18bff62e 	bgeu	r3,r2,400eeb8 <__ram_exceptions_end+0xfbfeec74>
        (*dtor) (); 
}
 400eee0:	0001883a 	nop
 400eee4:	e037883a 	mov	sp,fp
 400eee8:	dfc00117 	ldw	ra,4(sp)
 400eeec:	df000017 	ldw	fp,0(sp)
 400eef0:	dec00204 	addi	sp,sp,8
 400eef4:	f800283a 	ret

0400eef8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400eef8:	defffa04 	addi	sp,sp,-24
 400eefc:	dfc00515 	stw	ra,20(sp)
 400ef00:	df000415 	stw	fp,16(sp)
 400ef04:	df000404 	addi	fp,sp,16
 400ef08:	e13ffe15 	stw	r4,-8(fp)
 400ef0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400ef10:	e0bfff17 	ldw	r2,-4(fp)
 400ef14:	10800017 	ldw	r2,0(r2)
 400ef18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400ef1c:	e13ffe17 	ldw	r4,-8(fp)
 400ef20:	4006df40 	call	4006df4 <strlen>
 400ef24:	10800044 	addi	r2,r2,1
 400ef28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ef2c:	00000d06 	br	400ef64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400ef30:	e0bffc17 	ldw	r2,-16(fp)
 400ef34:	10800217 	ldw	r2,8(r2)
 400ef38:	e0fffd17 	ldw	r3,-12(fp)
 400ef3c:	180d883a 	mov	r6,r3
 400ef40:	e17ffe17 	ldw	r5,-8(fp)
 400ef44:	1009883a 	mov	r4,r2
 400ef48:	400f9a40 	call	400f9a4 <memcmp>
 400ef4c:	1000021e 	bne	r2,zero,400ef58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400ef50:	e0bffc17 	ldw	r2,-16(fp)
 400ef54:	00000706 	br	400ef74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400ef58:	e0bffc17 	ldw	r2,-16(fp)
 400ef5c:	10800017 	ldw	r2,0(r2)
 400ef60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ef64:	e0fffc17 	ldw	r3,-16(fp)
 400ef68:	e0bfff17 	ldw	r2,-4(fp)
 400ef6c:	18bff01e 	bne	r3,r2,400ef30 <__ram_exceptions_end+0xfbfeecec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400ef70:	0005883a 	mov	r2,zero
}
 400ef74:	e037883a 	mov	sp,fp
 400ef78:	dfc00117 	ldw	ra,4(sp)
 400ef7c:	df000017 	ldw	fp,0(sp)
 400ef80:	dec00204 	addi	sp,sp,8
 400ef84:	f800283a 	ret

0400ef88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400ef88:	defffe04 	addi	sp,sp,-8
 400ef8c:	dfc00115 	stw	ra,4(sp)
 400ef90:	df000015 	stw	fp,0(sp)
 400ef94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400ef98:	01440004 	movi	r5,4096
 400ef9c:	0009883a 	mov	r4,zero
 400efa0:	400f82c0 	call	400f82c <alt_icache_flush>
#endif
}
 400efa4:	0001883a 	nop
 400efa8:	e037883a 	mov	sp,fp
 400efac:	dfc00117 	ldw	ra,4(sp)
 400efb0:	df000017 	ldw	fp,0(sp)
 400efb4:	dec00204 	addi	sp,sp,8
 400efb8:	f800283a 	ret

0400efbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400efbc:	defff904 	addi	sp,sp,-28
 400efc0:	dfc00615 	stw	ra,24(sp)
 400efc4:	df000515 	stw	fp,20(sp)
 400efc8:	df000504 	addi	fp,sp,20
 400efcc:	e13ffc15 	stw	r4,-16(fp)
 400efd0:	e17ffd15 	stw	r5,-12(fp)
 400efd4:	e1bffe15 	stw	r6,-8(fp)
 400efd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400efdc:	e0800217 	ldw	r2,8(fp)
 400efe0:	d8800015 	stw	r2,0(sp)
 400efe4:	e1ffff17 	ldw	r7,-4(fp)
 400efe8:	e1bffe17 	ldw	r6,-8(fp)
 400efec:	e17ffd17 	ldw	r5,-12(fp)
 400eff0:	e13ffc17 	ldw	r4,-16(fp)
 400eff4:	400f19c0 	call	400f19c <alt_iic_isr_register>
}  
 400eff8:	e037883a 	mov	sp,fp
 400effc:	dfc00117 	ldw	ra,4(sp)
 400f000:	df000017 	ldw	fp,0(sp)
 400f004:	dec00204 	addi	sp,sp,8
 400f008:	f800283a 	ret

0400f00c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400f00c:	defff904 	addi	sp,sp,-28
 400f010:	df000615 	stw	fp,24(sp)
 400f014:	df000604 	addi	fp,sp,24
 400f018:	e13ffe15 	stw	r4,-8(fp)
 400f01c:	e17fff15 	stw	r5,-4(fp)
 400f020:	e0bfff17 	ldw	r2,-4(fp)
 400f024:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f028:	0005303a 	rdctl	r2,status
 400f02c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f030:	e0fffb17 	ldw	r3,-20(fp)
 400f034:	00bfff84 	movi	r2,-2
 400f038:	1884703a 	and	r2,r3,r2
 400f03c:	1001703a 	wrctl	status,r2
  
  return context;
 400f040:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f044:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400f048:	00c00044 	movi	r3,1
 400f04c:	e0bffa17 	ldw	r2,-24(fp)
 400f050:	1884983a 	sll	r2,r3,r2
 400f054:	1007883a 	mov	r3,r2
 400f058:	00810074 	movhi	r2,1025
 400f05c:	10860e04 	addi	r2,r2,6200
 400f060:	10800017 	ldw	r2,0(r2)
 400f064:	1886b03a 	or	r3,r3,r2
 400f068:	00810074 	movhi	r2,1025
 400f06c:	10860e04 	addi	r2,r2,6200
 400f070:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f074:	00810074 	movhi	r2,1025
 400f078:	10860e04 	addi	r2,r2,6200
 400f07c:	10800017 	ldw	r2,0(r2)
 400f080:	100170fa 	wrctl	ienable,r2
 400f084:	e0bffc17 	ldw	r2,-16(fp)
 400f088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f08c:	e0bffd17 	ldw	r2,-12(fp)
 400f090:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f094:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400f098:	0001883a 	nop
}
 400f09c:	e037883a 	mov	sp,fp
 400f0a0:	df000017 	ldw	fp,0(sp)
 400f0a4:	dec00104 	addi	sp,sp,4
 400f0a8:	f800283a 	ret

0400f0ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400f0ac:	defff904 	addi	sp,sp,-28
 400f0b0:	df000615 	stw	fp,24(sp)
 400f0b4:	df000604 	addi	fp,sp,24
 400f0b8:	e13ffe15 	stw	r4,-8(fp)
 400f0bc:	e17fff15 	stw	r5,-4(fp)
 400f0c0:	e0bfff17 	ldw	r2,-4(fp)
 400f0c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f0c8:	0005303a 	rdctl	r2,status
 400f0cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f0d0:	e0fffb17 	ldw	r3,-20(fp)
 400f0d4:	00bfff84 	movi	r2,-2
 400f0d8:	1884703a 	and	r2,r3,r2
 400f0dc:	1001703a 	wrctl	status,r2
  
  return context;
 400f0e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f0e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400f0e8:	00c00044 	movi	r3,1
 400f0ec:	e0bffa17 	ldw	r2,-24(fp)
 400f0f0:	1884983a 	sll	r2,r3,r2
 400f0f4:	0084303a 	nor	r2,zero,r2
 400f0f8:	1007883a 	mov	r3,r2
 400f0fc:	00810074 	movhi	r2,1025
 400f100:	10860e04 	addi	r2,r2,6200
 400f104:	10800017 	ldw	r2,0(r2)
 400f108:	1886703a 	and	r3,r3,r2
 400f10c:	00810074 	movhi	r2,1025
 400f110:	10860e04 	addi	r2,r2,6200
 400f114:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f118:	00810074 	movhi	r2,1025
 400f11c:	10860e04 	addi	r2,r2,6200
 400f120:	10800017 	ldw	r2,0(r2)
 400f124:	100170fa 	wrctl	ienable,r2
 400f128:	e0bffc17 	ldw	r2,-16(fp)
 400f12c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f130:	e0bffd17 	ldw	r2,-12(fp)
 400f134:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f138:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400f13c:	0001883a 	nop
}
 400f140:	e037883a 	mov	sp,fp
 400f144:	df000017 	ldw	fp,0(sp)
 400f148:	dec00104 	addi	sp,sp,4
 400f14c:	f800283a 	ret

0400f150 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400f150:	defffc04 	addi	sp,sp,-16
 400f154:	df000315 	stw	fp,12(sp)
 400f158:	df000304 	addi	fp,sp,12
 400f15c:	e13ffe15 	stw	r4,-8(fp)
 400f160:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400f164:	000530fa 	rdctl	r2,ienable
 400f168:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400f16c:	00c00044 	movi	r3,1
 400f170:	e0bfff17 	ldw	r2,-4(fp)
 400f174:	1884983a 	sll	r2,r3,r2
 400f178:	1007883a 	mov	r3,r2
 400f17c:	e0bffd17 	ldw	r2,-12(fp)
 400f180:	1884703a 	and	r2,r3,r2
 400f184:	1004c03a 	cmpne	r2,r2,zero
 400f188:	10803fcc 	andi	r2,r2,255
}
 400f18c:	e037883a 	mov	sp,fp
 400f190:	df000017 	ldw	fp,0(sp)
 400f194:	dec00104 	addi	sp,sp,4
 400f198:	f800283a 	ret

0400f19c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f19c:	defff504 	addi	sp,sp,-44
 400f1a0:	dfc00a15 	stw	ra,40(sp)
 400f1a4:	df000915 	stw	fp,36(sp)
 400f1a8:	df000904 	addi	fp,sp,36
 400f1ac:	e13ffc15 	stw	r4,-16(fp)
 400f1b0:	e17ffd15 	stw	r5,-12(fp)
 400f1b4:	e1bffe15 	stw	r6,-8(fp)
 400f1b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400f1bc:	00bffa84 	movi	r2,-22
 400f1c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400f1c4:	e0bffd17 	ldw	r2,-12(fp)
 400f1c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400f1cc:	e0bff817 	ldw	r2,-32(fp)
 400f1d0:	10800808 	cmpgei	r2,r2,32
 400f1d4:	1000271e 	bne	r2,zero,400f274 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f1d8:	0005303a 	rdctl	r2,status
 400f1dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f1e0:	e0fffb17 	ldw	r3,-20(fp)
 400f1e4:	00bfff84 	movi	r2,-2
 400f1e8:	1884703a 	and	r2,r3,r2
 400f1ec:	1001703a 	wrctl	status,r2
  
  return context;
 400f1f0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400f1f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400f1f8:	00810074 	movhi	r2,1025
 400f1fc:	10861a04 	addi	r2,r2,6248
 400f200:	e0fff817 	ldw	r3,-32(fp)
 400f204:	180690fa 	slli	r3,r3,3
 400f208:	10c5883a 	add	r2,r2,r3
 400f20c:	e0fffe17 	ldw	r3,-8(fp)
 400f210:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400f214:	00810074 	movhi	r2,1025
 400f218:	10861a04 	addi	r2,r2,6248
 400f21c:	e0fff817 	ldw	r3,-32(fp)
 400f220:	180690fa 	slli	r3,r3,3
 400f224:	10c5883a 	add	r2,r2,r3
 400f228:	10800104 	addi	r2,r2,4
 400f22c:	e0ffff17 	ldw	r3,-4(fp)
 400f230:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400f234:	e0bffe17 	ldw	r2,-8(fp)
 400f238:	10000526 	beq	r2,zero,400f250 <alt_iic_isr_register+0xb4>
 400f23c:	e0bff817 	ldw	r2,-32(fp)
 400f240:	100b883a 	mov	r5,r2
 400f244:	e13ffc17 	ldw	r4,-16(fp)
 400f248:	400f00c0 	call	400f00c <alt_ic_irq_enable>
 400f24c:	00000406 	br	400f260 <alt_iic_isr_register+0xc4>
 400f250:	e0bff817 	ldw	r2,-32(fp)
 400f254:	100b883a 	mov	r5,r2
 400f258:	e13ffc17 	ldw	r4,-16(fp)
 400f25c:	400f0ac0 	call	400f0ac <alt_ic_irq_disable>
 400f260:	e0bff715 	stw	r2,-36(fp)
 400f264:	e0bffa17 	ldw	r2,-24(fp)
 400f268:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f26c:	e0bff917 	ldw	r2,-28(fp)
 400f270:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400f274:	e0bff717 	ldw	r2,-36(fp)
}
 400f278:	e037883a 	mov	sp,fp
 400f27c:	dfc00117 	ldw	ra,4(sp)
 400f280:	df000017 	ldw	fp,0(sp)
 400f284:	dec00204 	addi	sp,sp,8
 400f288:	f800283a 	ret

0400f28c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400f28c:	defff904 	addi	sp,sp,-28
 400f290:	dfc00615 	stw	ra,24(sp)
 400f294:	df000515 	stw	fp,20(sp)
 400f298:	df000504 	addi	fp,sp,20
 400f29c:	e13ffc15 	stw	r4,-16(fp)
 400f2a0:	e17ffd15 	stw	r5,-12(fp)
 400f2a4:	e1bffe15 	stw	r6,-8(fp)
 400f2a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400f2ac:	e1bfff17 	ldw	r6,-4(fp)
 400f2b0:	e17ffe17 	ldw	r5,-8(fp)
 400f2b4:	e13ffd17 	ldw	r4,-12(fp)
 400f2b8:	400f4e80 	call	400f4e8 <open>
 400f2bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400f2c0:	e0bffb17 	ldw	r2,-20(fp)
 400f2c4:	10001c16 	blt	r2,zero,400f338 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400f2c8:	00810074 	movhi	r2,1025
 400f2cc:	10825404 	addi	r2,r2,2384
 400f2d0:	e0fffb17 	ldw	r3,-20(fp)
 400f2d4:	18c00324 	muli	r3,r3,12
 400f2d8:	10c5883a 	add	r2,r2,r3
 400f2dc:	10c00017 	ldw	r3,0(r2)
 400f2e0:	e0bffc17 	ldw	r2,-16(fp)
 400f2e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400f2e8:	00810074 	movhi	r2,1025
 400f2ec:	10825404 	addi	r2,r2,2384
 400f2f0:	e0fffb17 	ldw	r3,-20(fp)
 400f2f4:	18c00324 	muli	r3,r3,12
 400f2f8:	10c5883a 	add	r2,r2,r3
 400f2fc:	10800104 	addi	r2,r2,4
 400f300:	10c00017 	ldw	r3,0(r2)
 400f304:	e0bffc17 	ldw	r2,-16(fp)
 400f308:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400f30c:	00810074 	movhi	r2,1025
 400f310:	10825404 	addi	r2,r2,2384
 400f314:	e0fffb17 	ldw	r3,-20(fp)
 400f318:	18c00324 	muli	r3,r3,12
 400f31c:	10c5883a 	add	r2,r2,r3
 400f320:	10800204 	addi	r2,r2,8
 400f324:	10c00017 	ldw	r3,0(r2)
 400f328:	e0bffc17 	ldw	r2,-16(fp)
 400f32c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400f330:	e13ffb17 	ldw	r4,-20(fp)
 400f334:	400d3b00 	call	400d3b0 <alt_release_fd>
  }
} 
 400f338:	0001883a 	nop
 400f33c:	e037883a 	mov	sp,fp
 400f340:	dfc00117 	ldw	ra,4(sp)
 400f344:	df000017 	ldw	fp,0(sp)
 400f348:	dec00204 	addi	sp,sp,8
 400f34c:	f800283a 	ret

0400f350 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400f350:	defffb04 	addi	sp,sp,-20
 400f354:	dfc00415 	stw	ra,16(sp)
 400f358:	df000315 	stw	fp,12(sp)
 400f35c:	df000304 	addi	fp,sp,12
 400f360:	e13ffd15 	stw	r4,-12(fp)
 400f364:	e17ffe15 	stw	r5,-8(fp)
 400f368:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400f36c:	01c07fc4 	movi	r7,511
 400f370:	01800044 	movi	r6,1
 400f374:	e17ffd17 	ldw	r5,-12(fp)
 400f378:	01010074 	movhi	r4,1025
 400f37c:	21025704 	addi	r4,r4,2396
 400f380:	400f28c0 	call	400f28c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400f384:	01c07fc4 	movi	r7,511
 400f388:	000d883a 	mov	r6,zero
 400f38c:	e17ffe17 	ldw	r5,-8(fp)
 400f390:	01010074 	movhi	r4,1025
 400f394:	21025404 	addi	r4,r4,2384
 400f398:	400f28c0 	call	400f28c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400f39c:	01c07fc4 	movi	r7,511
 400f3a0:	01800044 	movi	r6,1
 400f3a4:	e17fff17 	ldw	r5,-4(fp)
 400f3a8:	01010074 	movhi	r4,1025
 400f3ac:	21025a04 	addi	r4,r4,2408
 400f3b0:	400f28c0 	call	400f28c <alt_open_fd>
}  
 400f3b4:	0001883a 	nop
 400f3b8:	e037883a 	mov	sp,fp
 400f3bc:	dfc00117 	ldw	ra,4(sp)
 400f3c0:	df000017 	ldw	fp,0(sp)
 400f3c4:	dec00204 	addi	sp,sp,8
 400f3c8:	f800283a 	ret

0400f3cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f3cc:	defffe04 	addi	sp,sp,-8
 400f3d0:	dfc00115 	stw	ra,4(sp)
 400f3d4:	df000015 	stw	fp,0(sp)
 400f3d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f3dc:	00810074 	movhi	r2,1025
 400f3e0:	10830a04 	addi	r2,r2,3112
 400f3e4:	10800017 	ldw	r2,0(r2)
 400f3e8:	10000526 	beq	r2,zero,400f400 <alt_get_errno+0x34>
 400f3ec:	00810074 	movhi	r2,1025
 400f3f0:	10830a04 	addi	r2,r2,3112
 400f3f4:	10800017 	ldw	r2,0(r2)
 400f3f8:	103ee83a 	callr	r2
 400f3fc:	00000206 	br	400f408 <alt_get_errno+0x3c>
 400f400:	00810074 	movhi	r2,1025
 400f404:	10860a04 	addi	r2,r2,6184
}
 400f408:	e037883a 	mov	sp,fp
 400f40c:	dfc00117 	ldw	ra,4(sp)
 400f410:	df000017 	ldw	fp,0(sp)
 400f414:	dec00204 	addi	sp,sp,8
 400f418:	f800283a 	ret

0400f41c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400f41c:	defffd04 	addi	sp,sp,-12
 400f420:	df000215 	stw	fp,8(sp)
 400f424:	df000204 	addi	fp,sp,8
 400f428:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400f42c:	e0bfff17 	ldw	r2,-4(fp)
 400f430:	10800217 	ldw	r2,8(r2)
 400f434:	10d00034 	orhi	r3,r2,16384
 400f438:	e0bfff17 	ldw	r2,-4(fp)
 400f43c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f440:	e03ffe15 	stw	zero,-8(fp)
 400f444:	00001d06 	br	400f4bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f448:	00810074 	movhi	r2,1025
 400f44c:	10825404 	addi	r2,r2,2384
 400f450:	e0fffe17 	ldw	r3,-8(fp)
 400f454:	18c00324 	muli	r3,r3,12
 400f458:	10c5883a 	add	r2,r2,r3
 400f45c:	10c00017 	ldw	r3,0(r2)
 400f460:	e0bfff17 	ldw	r2,-4(fp)
 400f464:	10800017 	ldw	r2,0(r2)
 400f468:	1880111e 	bne	r3,r2,400f4b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f46c:	00810074 	movhi	r2,1025
 400f470:	10825404 	addi	r2,r2,2384
 400f474:	e0fffe17 	ldw	r3,-8(fp)
 400f478:	18c00324 	muli	r3,r3,12
 400f47c:	10c5883a 	add	r2,r2,r3
 400f480:	10800204 	addi	r2,r2,8
 400f484:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f488:	1000090e 	bge	r2,zero,400f4b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400f48c:	e0bffe17 	ldw	r2,-8(fp)
 400f490:	10c00324 	muli	r3,r2,12
 400f494:	00810074 	movhi	r2,1025
 400f498:	10825404 	addi	r2,r2,2384
 400f49c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f4a0:	e0bfff17 	ldw	r2,-4(fp)
 400f4a4:	18800226 	beq	r3,r2,400f4b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400f4a8:	00bffcc4 	movi	r2,-13
 400f4ac:	00000a06 	br	400f4d8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f4b0:	e0bffe17 	ldw	r2,-8(fp)
 400f4b4:	10800044 	addi	r2,r2,1
 400f4b8:	e0bffe15 	stw	r2,-8(fp)
 400f4bc:	00810074 	movhi	r2,1025
 400f4c0:	10830904 	addi	r2,r2,3108
 400f4c4:	10800017 	ldw	r2,0(r2)
 400f4c8:	1007883a 	mov	r3,r2
 400f4cc:	e0bffe17 	ldw	r2,-8(fp)
 400f4d0:	18bfdd2e 	bgeu	r3,r2,400f448 <__ram_exceptions_end+0xfbfef204>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400f4d4:	0005883a 	mov	r2,zero
}
 400f4d8:	e037883a 	mov	sp,fp
 400f4dc:	df000017 	ldw	fp,0(sp)
 400f4e0:	dec00104 	addi	sp,sp,4
 400f4e4:	f800283a 	ret

0400f4e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400f4e8:	defff604 	addi	sp,sp,-40
 400f4ec:	dfc00915 	stw	ra,36(sp)
 400f4f0:	df000815 	stw	fp,32(sp)
 400f4f4:	df000804 	addi	fp,sp,32
 400f4f8:	e13ffd15 	stw	r4,-12(fp)
 400f4fc:	e17ffe15 	stw	r5,-8(fp)
 400f500:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400f504:	00bfffc4 	movi	r2,-1
 400f508:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400f50c:	00bffb44 	movi	r2,-19
 400f510:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400f514:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400f518:	01410074 	movhi	r5,1025
 400f51c:	29430704 	addi	r5,r5,3100
 400f520:	e13ffd17 	ldw	r4,-12(fp)
 400f524:	400eef80 	call	400eef8 <alt_find_dev>
 400f528:	e0bff815 	stw	r2,-32(fp)
 400f52c:	e0bff817 	ldw	r2,-32(fp)
 400f530:	1000051e 	bne	r2,zero,400f548 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400f534:	e13ffd17 	ldw	r4,-12(fp)
 400f538:	400f6640 	call	400f664 <alt_find_file>
 400f53c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400f540:	00800044 	movi	r2,1
 400f544:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400f548:	e0bff817 	ldw	r2,-32(fp)
 400f54c:	10002926 	beq	r2,zero,400f5f4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400f550:	e13ff817 	ldw	r4,-32(fp)
 400f554:	400f7780 	call	400f778 <alt_get_fd>
 400f558:	e0bff915 	stw	r2,-28(fp)
 400f55c:	e0bff917 	ldw	r2,-28(fp)
 400f560:	1000030e 	bge	r2,zero,400f570 <open+0x88>
    {
      status = index;
 400f564:	e0bff917 	ldw	r2,-28(fp)
 400f568:	e0bffa15 	stw	r2,-24(fp)
 400f56c:	00002306 	br	400f5fc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 400f570:	e0bff917 	ldw	r2,-28(fp)
 400f574:	10c00324 	muli	r3,r2,12
 400f578:	00810074 	movhi	r2,1025
 400f57c:	10825404 	addi	r2,r2,2384
 400f580:	1885883a 	add	r2,r3,r2
 400f584:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400f588:	e0fffe17 	ldw	r3,-8(fp)
 400f58c:	00900034 	movhi	r2,16384
 400f590:	10bfffc4 	addi	r2,r2,-1
 400f594:	1886703a 	and	r3,r3,r2
 400f598:	e0bffc17 	ldw	r2,-16(fp)
 400f59c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400f5a0:	e0bffb17 	ldw	r2,-20(fp)
 400f5a4:	1000051e 	bne	r2,zero,400f5bc <open+0xd4>
 400f5a8:	e13ffc17 	ldw	r4,-16(fp)
 400f5ac:	400f41c0 	call	400f41c <alt_file_locked>
 400f5b0:	e0bffa15 	stw	r2,-24(fp)
 400f5b4:	e0bffa17 	ldw	r2,-24(fp)
 400f5b8:	10001016 	blt	r2,zero,400f5fc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400f5bc:	e0bff817 	ldw	r2,-32(fp)
 400f5c0:	10800317 	ldw	r2,12(r2)
 400f5c4:	10000826 	beq	r2,zero,400f5e8 <open+0x100>
 400f5c8:	e0bff817 	ldw	r2,-32(fp)
 400f5cc:	10800317 	ldw	r2,12(r2)
 400f5d0:	e1ffff17 	ldw	r7,-4(fp)
 400f5d4:	e1bffe17 	ldw	r6,-8(fp)
 400f5d8:	e17ffd17 	ldw	r5,-12(fp)
 400f5dc:	e13ffc17 	ldw	r4,-16(fp)
 400f5e0:	103ee83a 	callr	r2
 400f5e4:	00000106 	br	400f5ec <open+0x104>
 400f5e8:	0005883a 	mov	r2,zero
 400f5ec:	e0bffa15 	stw	r2,-24(fp)
 400f5f0:	00000206 	br	400f5fc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400f5f4:	00bffb44 	movi	r2,-19
 400f5f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400f5fc:	e0bffa17 	ldw	r2,-24(fp)
 400f600:	1000090e 	bge	r2,zero,400f628 <open+0x140>
  {
    alt_release_fd (index);  
 400f604:	e13ff917 	ldw	r4,-28(fp)
 400f608:	400d3b00 	call	400d3b0 <alt_release_fd>
    ALT_ERRNO = -status;
 400f60c:	400f3cc0 	call	400f3cc <alt_get_errno>
 400f610:	1007883a 	mov	r3,r2
 400f614:	e0bffa17 	ldw	r2,-24(fp)
 400f618:	0085c83a 	sub	r2,zero,r2
 400f61c:	18800015 	stw	r2,0(r3)
    return -1;
 400f620:	00bfffc4 	movi	r2,-1
 400f624:	00000106 	br	400f62c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 400f628:	e0bff917 	ldw	r2,-28(fp)
}
 400f62c:	e037883a 	mov	sp,fp
 400f630:	dfc00117 	ldw	ra,4(sp)
 400f634:	df000017 	ldw	fp,0(sp)
 400f638:	dec00204 	addi	sp,sp,8
 400f63c:	f800283a 	ret

0400f640 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400f640:	deffff04 	addi	sp,sp,-4
 400f644:	df000015 	stw	fp,0(sp)
 400f648:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400f64c:	000170fa 	wrctl	ienable,zero
}
 400f650:	0001883a 	nop
 400f654:	e037883a 	mov	sp,fp
 400f658:	df000017 	ldw	fp,0(sp)
 400f65c:	dec00104 	addi	sp,sp,4
 400f660:	f800283a 	ret

0400f664 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400f664:	defffb04 	addi	sp,sp,-20
 400f668:	dfc00415 	stw	ra,16(sp)
 400f66c:	df000315 	stw	fp,12(sp)
 400f670:	df000304 	addi	fp,sp,12
 400f674:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400f678:	00810074 	movhi	r2,1025
 400f67c:	10830504 	addi	r2,r2,3092
 400f680:	10800017 	ldw	r2,0(r2)
 400f684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f688:	00003106 	br	400f750 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 400f68c:	e0bffd17 	ldw	r2,-12(fp)
 400f690:	10800217 	ldw	r2,8(r2)
 400f694:	1009883a 	mov	r4,r2
 400f698:	4006df40 	call	4006df4 <strlen>
 400f69c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400f6a0:	e0bffd17 	ldw	r2,-12(fp)
 400f6a4:	10c00217 	ldw	r3,8(r2)
 400f6a8:	e0bffe17 	ldw	r2,-8(fp)
 400f6ac:	10bfffc4 	addi	r2,r2,-1
 400f6b0:	1885883a 	add	r2,r3,r2
 400f6b4:	10800003 	ldbu	r2,0(r2)
 400f6b8:	10803fcc 	andi	r2,r2,255
 400f6bc:	1080201c 	xori	r2,r2,128
 400f6c0:	10bfe004 	addi	r2,r2,-128
 400f6c4:	10800bd8 	cmpnei	r2,r2,47
 400f6c8:	1000031e 	bne	r2,zero,400f6d8 <alt_find_file+0x74>
    {
      len -= 1;
 400f6cc:	e0bffe17 	ldw	r2,-8(fp)
 400f6d0:	10bfffc4 	addi	r2,r2,-1
 400f6d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f6d8:	e0bffe17 	ldw	r2,-8(fp)
 400f6dc:	e0ffff17 	ldw	r3,-4(fp)
 400f6e0:	1885883a 	add	r2,r3,r2
 400f6e4:	10800003 	ldbu	r2,0(r2)
 400f6e8:	10803fcc 	andi	r2,r2,255
 400f6ec:	1080201c 	xori	r2,r2,128
 400f6f0:	10bfe004 	addi	r2,r2,-128
 400f6f4:	10800be0 	cmpeqi	r2,r2,47
 400f6f8:	1000081e 	bne	r2,zero,400f71c <alt_find_file+0xb8>
 400f6fc:	e0bffe17 	ldw	r2,-8(fp)
 400f700:	e0ffff17 	ldw	r3,-4(fp)
 400f704:	1885883a 	add	r2,r3,r2
 400f708:	10800003 	ldbu	r2,0(r2)
 400f70c:	10803fcc 	andi	r2,r2,255
 400f710:	1080201c 	xori	r2,r2,128
 400f714:	10bfe004 	addi	r2,r2,-128
 400f718:	10000a1e 	bne	r2,zero,400f744 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 400f71c:	e0bffd17 	ldw	r2,-12(fp)
 400f720:	10800217 	ldw	r2,8(r2)
 400f724:	e0fffe17 	ldw	r3,-8(fp)
 400f728:	180d883a 	mov	r6,r3
 400f72c:	e17fff17 	ldw	r5,-4(fp)
 400f730:	1009883a 	mov	r4,r2
 400f734:	400f9a40 	call	400f9a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f738:	1000021e 	bne	r2,zero,400f744 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400f73c:	e0bffd17 	ldw	r2,-12(fp)
 400f740:	00000806 	br	400f764 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400f744:	e0bffd17 	ldw	r2,-12(fp)
 400f748:	10800017 	ldw	r2,0(r2)
 400f74c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f750:	e0fffd17 	ldw	r3,-12(fp)
 400f754:	00810074 	movhi	r2,1025
 400f758:	10830504 	addi	r2,r2,3092
 400f75c:	18bfcb1e 	bne	r3,r2,400f68c <__ram_exceptions_end+0xfbfef448>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400f760:	0005883a 	mov	r2,zero
}
 400f764:	e037883a 	mov	sp,fp
 400f768:	dfc00117 	ldw	ra,4(sp)
 400f76c:	df000017 	ldw	fp,0(sp)
 400f770:	dec00204 	addi	sp,sp,8
 400f774:	f800283a 	ret

0400f778 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400f778:	defffc04 	addi	sp,sp,-16
 400f77c:	df000315 	stw	fp,12(sp)
 400f780:	df000304 	addi	fp,sp,12
 400f784:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400f788:	00bffa04 	movi	r2,-24
 400f78c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f790:	e03ffd15 	stw	zero,-12(fp)
 400f794:	00001d06 	br	400f80c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 400f798:	00810074 	movhi	r2,1025
 400f79c:	10825404 	addi	r2,r2,2384
 400f7a0:	e0fffd17 	ldw	r3,-12(fp)
 400f7a4:	18c00324 	muli	r3,r3,12
 400f7a8:	10c5883a 	add	r2,r2,r3
 400f7ac:	10800017 	ldw	r2,0(r2)
 400f7b0:	1000131e 	bne	r2,zero,400f800 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 400f7b4:	00810074 	movhi	r2,1025
 400f7b8:	10825404 	addi	r2,r2,2384
 400f7bc:	e0fffd17 	ldw	r3,-12(fp)
 400f7c0:	18c00324 	muli	r3,r3,12
 400f7c4:	10c5883a 	add	r2,r2,r3
 400f7c8:	e0ffff17 	ldw	r3,-4(fp)
 400f7cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400f7d0:	00810074 	movhi	r2,1025
 400f7d4:	10830904 	addi	r2,r2,3108
 400f7d8:	10c00017 	ldw	r3,0(r2)
 400f7dc:	e0bffd17 	ldw	r2,-12(fp)
 400f7e0:	1880040e 	bge	r3,r2,400f7f4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 400f7e4:	00810074 	movhi	r2,1025
 400f7e8:	10830904 	addi	r2,r2,3108
 400f7ec:	e0fffd17 	ldw	r3,-12(fp)
 400f7f0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400f7f4:	e0bffd17 	ldw	r2,-12(fp)
 400f7f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400f7fc:	00000606 	br	400f818 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f800:	e0bffd17 	ldw	r2,-12(fp)
 400f804:	10800044 	addi	r2,r2,1
 400f808:	e0bffd15 	stw	r2,-12(fp)
 400f80c:	e0bffd17 	ldw	r2,-12(fp)
 400f810:	10800810 	cmplti	r2,r2,32
 400f814:	103fe01e 	bne	r2,zero,400f798 <__ram_exceptions_end+0xfbfef554>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400f818:	e0bffe17 	ldw	r2,-8(fp)
}
 400f81c:	e037883a 	mov	sp,fp
 400f820:	df000017 	ldw	fp,0(sp)
 400f824:	dec00104 	addi	sp,sp,4
 400f828:	f800283a 	ret

0400f82c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400f82c:	defffb04 	addi	sp,sp,-20
 400f830:	df000415 	stw	fp,16(sp)
 400f834:	df000404 	addi	fp,sp,16
 400f838:	e13ffe15 	stw	r4,-8(fp)
 400f83c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400f840:	e0bfff17 	ldw	r2,-4(fp)
 400f844:	10840070 	cmpltui	r2,r2,4097
 400f848:	1000021e 	bne	r2,zero,400f854 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400f84c:	00840004 	movi	r2,4096
 400f850:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400f854:	e0fffe17 	ldw	r3,-8(fp)
 400f858:	e0bfff17 	ldw	r2,-4(fp)
 400f85c:	1885883a 	add	r2,r3,r2
 400f860:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400f864:	e0bffe17 	ldw	r2,-8(fp)
 400f868:	e0bffc15 	stw	r2,-16(fp)
 400f86c:	00000506 	br	400f884 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400f870:	e0bffc17 	ldw	r2,-16(fp)
 400f874:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400f878:	e0bffc17 	ldw	r2,-16(fp)
 400f87c:	10800804 	addi	r2,r2,32
 400f880:	e0bffc15 	stw	r2,-16(fp)
 400f884:	e0fffc17 	ldw	r3,-16(fp)
 400f888:	e0bffd17 	ldw	r2,-12(fp)
 400f88c:	18bff836 	bltu	r3,r2,400f870 <__ram_exceptions_end+0xfbfef62c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400f890:	e0bffe17 	ldw	r2,-8(fp)
 400f894:	108007cc 	andi	r2,r2,31
 400f898:	10000226 	beq	r2,zero,400f8a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400f89c:	e0bffc17 	ldw	r2,-16(fp)
 400f8a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400f8a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400f8a8:	0001883a 	nop
 400f8ac:	e037883a 	mov	sp,fp
 400f8b0:	df000017 	ldw	fp,0(sp)
 400f8b4:	dec00104 	addi	sp,sp,4
 400f8b8:	f800283a 	ret

0400f8bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400f8bc:	defffe04 	addi	sp,sp,-8
 400f8c0:	df000115 	stw	fp,4(sp)
 400f8c4:	df000104 	addi	fp,sp,4
 400f8c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400f8cc:	e0bfff17 	ldw	r2,-4(fp)
 400f8d0:	10bffe84 	addi	r2,r2,-6
 400f8d4:	10c00428 	cmpgeui	r3,r2,16
 400f8d8:	18001a1e 	bne	r3,zero,400f944 <alt_exception_cause_generated_bad_addr+0x88>
 400f8dc:	100690ba 	slli	r3,r2,2
 400f8e0:	00810074 	movhi	r2,1025
 400f8e4:	10be3d04 	addi	r2,r2,-1804
 400f8e8:	1885883a 	add	r2,r3,r2
 400f8ec:	10800017 	ldw	r2,0(r2)
 400f8f0:	1000683a 	jmp	r2
 400f8f4:	0400f934 	movhi	r16,996
 400f8f8:	0400f934 	movhi	r16,996
 400f8fc:	0400f944 	movi	r16,997
 400f900:	0400f944 	movi	r16,997
 400f904:	0400f944 	movi	r16,997
 400f908:	0400f934 	movhi	r16,996
 400f90c:	0400f93c 	xorhi	r16,zero,996
 400f910:	0400f944 	movi	r16,997
 400f914:	0400f934 	movhi	r16,996
 400f918:	0400f934 	movhi	r16,996
 400f91c:	0400f944 	movi	r16,997
 400f920:	0400f934 	movhi	r16,996
 400f924:	0400f93c 	xorhi	r16,zero,996
 400f928:	0400f944 	movi	r16,997
 400f92c:	0400f944 	movi	r16,997
 400f930:	0400f934 	movhi	r16,996
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400f934:	00800044 	movi	r2,1
 400f938:	00000306 	br	400f948 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400f93c:	0005883a 	mov	r2,zero
 400f940:	00000106 	br	400f948 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400f944:	0005883a 	mov	r2,zero
  }
}
 400f948:	e037883a 	mov	sp,fp
 400f94c:	df000017 	ldw	fp,0(sp)
 400f950:	dec00104 	addi	sp,sp,4
 400f954:	f800283a 	ret

0400f958 <atexit>:
 400f958:	200b883a 	mov	r5,r4
 400f95c:	000f883a 	mov	r7,zero
 400f960:	000d883a 	mov	r6,zero
 400f964:	0009883a 	mov	r4,zero
 400f968:	400fa201 	jmpi	400fa20 <__register_exitproc>

0400f96c <exit>:
 400f96c:	defffe04 	addi	sp,sp,-8
 400f970:	000b883a 	mov	r5,zero
 400f974:	dc000015 	stw	r16,0(sp)
 400f978:	dfc00115 	stw	ra,4(sp)
 400f97c:	2021883a 	mov	r16,r4
 400f980:	400fb380 	call	400fb38 <__call_exitprocs>
 400f984:	00810074 	movhi	r2,1025
 400f988:	1082ff04 	addi	r2,r2,3068
 400f98c:	11000017 	ldw	r4,0(r2)
 400f990:	20800f17 	ldw	r2,60(r4)
 400f994:	10000126 	beq	r2,zero,400f99c <exit+0x30>
 400f998:	103ee83a 	callr	r2
 400f99c:	8009883a 	mov	r4,r16
 400f9a0:	400fcb80 	call	400fcb8 <_exit>

0400f9a4 <memcmp>:
 400f9a4:	01c000c4 	movi	r7,3
 400f9a8:	3980192e 	bgeu	r7,r6,400fa10 <memcmp+0x6c>
 400f9ac:	2144b03a 	or	r2,r4,r5
 400f9b0:	11c4703a 	and	r2,r2,r7
 400f9b4:	10000f26 	beq	r2,zero,400f9f4 <memcmp+0x50>
 400f9b8:	20800003 	ldbu	r2,0(r4)
 400f9bc:	28c00003 	ldbu	r3,0(r5)
 400f9c0:	10c0151e 	bne	r2,r3,400fa18 <memcmp+0x74>
 400f9c4:	31bfff84 	addi	r6,r6,-2
 400f9c8:	01ffffc4 	movi	r7,-1
 400f9cc:	00000406 	br	400f9e0 <memcmp+0x3c>
 400f9d0:	20800003 	ldbu	r2,0(r4)
 400f9d4:	28c00003 	ldbu	r3,0(r5)
 400f9d8:	31bfffc4 	addi	r6,r6,-1
 400f9dc:	10c00e1e 	bne	r2,r3,400fa18 <memcmp+0x74>
 400f9e0:	21000044 	addi	r4,r4,1
 400f9e4:	29400044 	addi	r5,r5,1
 400f9e8:	31fff91e 	bne	r6,r7,400f9d0 <__ram_exceptions_end+0xfbfef78c>
 400f9ec:	0005883a 	mov	r2,zero
 400f9f0:	f800283a 	ret
 400f9f4:	20c00017 	ldw	r3,0(r4)
 400f9f8:	28800017 	ldw	r2,0(r5)
 400f9fc:	18bfee1e 	bne	r3,r2,400f9b8 <__ram_exceptions_end+0xfbfef774>
 400fa00:	31bfff04 	addi	r6,r6,-4
 400fa04:	21000104 	addi	r4,r4,4
 400fa08:	29400104 	addi	r5,r5,4
 400fa0c:	39bff936 	bltu	r7,r6,400f9f4 <__ram_exceptions_end+0xfbfef7b0>
 400fa10:	303fe91e 	bne	r6,zero,400f9b8 <__ram_exceptions_end+0xfbfef774>
 400fa14:	003ff506 	br	400f9ec <__ram_exceptions_end+0xfbfef7a8>
 400fa18:	10c5c83a 	sub	r2,r2,r3
 400fa1c:	f800283a 	ret

0400fa20 <__register_exitproc>:
 400fa20:	defffa04 	addi	sp,sp,-24
 400fa24:	dc000315 	stw	r16,12(sp)
 400fa28:	04010074 	movhi	r16,1025
 400fa2c:	8402ff04 	addi	r16,r16,3068
 400fa30:	80c00017 	ldw	r3,0(r16)
 400fa34:	dc400415 	stw	r17,16(sp)
 400fa38:	dfc00515 	stw	ra,20(sp)
 400fa3c:	18805217 	ldw	r2,328(r3)
 400fa40:	2023883a 	mov	r17,r4
 400fa44:	10003726 	beq	r2,zero,400fb24 <__register_exitproc+0x104>
 400fa48:	10c00117 	ldw	r3,4(r2)
 400fa4c:	010007c4 	movi	r4,31
 400fa50:	20c00e16 	blt	r4,r3,400fa8c <__register_exitproc+0x6c>
 400fa54:	1a000044 	addi	r8,r3,1
 400fa58:	8800221e 	bne	r17,zero,400fae4 <__register_exitproc+0xc4>
 400fa5c:	18c00084 	addi	r3,r3,2
 400fa60:	18c7883a 	add	r3,r3,r3
 400fa64:	18c7883a 	add	r3,r3,r3
 400fa68:	12000115 	stw	r8,4(r2)
 400fa6c:	10c7883a 	add	r3,r2,r3
 400fa70:	19400015 	stw	r5,0(r3)
 400fa74:	0005883a 	mov	r2,zero
 400fa78:	dfc00517 	ldw	ra,20(sp)
 400fa7c:	dc400417 	ldw	r17,16(sp)
 400fa80:	dc000317 	ldw	r16,12(sp)
 400fa84:	dec00604 	addi	sp,sp,24
 400fa88:	f800283a 	ret
 400fa8c:	00800034 	movhi	r2,0
 400fa90:	10800004 	addi	r2,r2,0
 400fa94:	10002626 	beq	r2,zero,400fb30 <__register_exitproc+0x110>
 400fa98:	01006404 	movi	r4,400
 400fa9c:	d9400015 	stw	r5,0(sp)
 400faa0:	d9800115 	stw	r6,4(sp)
 400faa4:	d9c00215 	stw	r7,8(sp)
 400faa8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 400faac:	d9400017 	ldw	r5,0(sp)
 400fab0:	d9800117 	ldw	r6,4(sp)
 400fab4:	d9c00217 	ldw	r7,8(sp)
 400fab8:	10001d26 	beq	r2,zero,400fb30 <__register_exitproc+0x110>
 400fabc:	81000017 	ldw	r4,0(r16)
 400fac0:	10000115 	stw	zero,4(r2)
 400fac4:	02000044 	movi	r8,1
 400fac8:	22405217 	ldw	r9,328(r4)
 400facc:	0007883a 	mov	r3,zero
 400fad0:	12400015 	stw	r9,0(r2)
 400fad4:	20805215 	stw	r2,328(r4)
 400fad8:	10006215 	stw	zero,392(r2)
 400fadc:	10006315 	stw	zero,396(r2)
 400fae0:	883fde26 	beq	r17,zero,400fa5c <__ram_exceptions_end+0xfbfef818>
 400fae4:	18c9883a 	add	r4,r3,r3
 400fae8:	2109883a 	add	r4,r4,r4
 400faec:	1109883a 	add	r4,r2,r4
 400faf0:	21802215 	stw	r6,136(r4)
 400faf4:	01800044 	movi	r6,1
 400faf8:	12406217 	ldw	r9,392(r2)
 400fafc:	30cc983a 	sll	r6,r6,r3
 400fb00:	4992b03a 	or	r9,r9,r6
 400fb04:	12406215 	stw	r9,392(r2)
 400fb08:	21c04215 	stw	r7,264(r4)
 400fb0c:	01000084 	movi	r4,2
 400fb10:	893fd21e 	bne	r17,r4,400fa5c <__ram_exceptions_end+0xfbfef818>
 400fb14:	11006317 	ldw	r4,396(r2)
 400fb18:	218cb03a 	or	r6,r4,r6
 400fb1c:	11806315 	stw	r6,396(r2)
 400fb20:	003fce06 	br	400fa5c <__ram_exceptions_end+0xfbfef818>
 400fb24:	18805304 	addi	r2,r3,332
 400fb28:	18805215 	stw	r2,328(r3)
 400fb2c:	003fc606 	br	400fa48 <__ram_exceptions_end+0xfbfef804>
 400fb30:	00bfffc4 	movi	r2,-1
 400fb34:	003fd006 	br	400fa78 <__ram_exceptions_end+0xfbfef834>

0400fb38 <__call_exitprocs>:
 400fb38:	defff504 	addi	sp,sp,-44
 400fb3c:	df000915 	stw	fp,36(sp)
 400fb40:	dd400615 	stw	r21,24(sp)
 400fb44:	dc800315 	stw	r18,12(sp)
 400fb48:	dfc00a15 	stw	ra,40(sp)
 400fb4c:	ddc00815 	stw	r23,32(sp)
 400fb50:	dd800715 	stw	r22,28(sp)
 400fb54:	dd000515 	stw	r20,20(sp)
 400fb58:	dcc00415 	stw	r19,16(sp)
 400fb5c:	dc400215 	stw	r17,8(sp)
 400fb60:	dc000115 	stw	r16,4(sp)
 400fb64:	d9000015 	stw	r4,0(sp)
 400fb68:	2839883a 	mov	fp,r5
 400fb6c:	04800044 	movi	r18,1
 400fb70:	057fffc4 	movi	r21,-1
 400fb74:	00810074 	movhi	r2,1025
 400fb78:	1082ff04 	addi	r2,r2,3068
 400fb7c:	12000017 	ldw	r8,0(r2)
 400fb80:	45005217 	ldw	r20,328(r8)
 400fb84:	44c05204 	addi	r19,r8,328
 400fb88:	a0001c26 	beq	r20,zero,400fbfc <__call_exitprocs+0xc4>
 400fb8c:	a0800117 	ldw	r2,4(r20)
 400fb90:	15ffffc4 	addi	r23,r2,-1
 400fb94:	b8000d16 	blt	r23,zero,400fbcc <__call_exitprocs+0x94>
 400fb98:	14000044 	addi	r16,r2,1
 400fb9c:	8421883a 	add	r16,r16,r16
 400fba0:	8421883a 	add	r16,r16,r16
 400fba4:	84402004 	addi	r17,r16,128
 400fba8:	a463883a 	add	r17,r20,r17
 400fbac:	a421883a 	add	r16,r20,r16
 400fbb0:	e0001e26 	beq	fp,zero,400fc2c <__call_exitprocs+0xf4>
 400fbb4:	80804017 	ldw	r2,256(r16)
 400fbb8:	e0801c26 	beq	fp,r2,400fc2c <__call_exitprocs+0xf4>
 400fbbc:	bdffffc4 	addi	r23,r23,-1
 400fbc0:	843fff04 	addi	r16,r16,-4
 400fbc4:	8c7fff04 	addi	r17,r17,-4
 400fbc8:	bd7ff91e 	bne	r23,r21,400fbb0 <__ram_exceptions_end+0xfbfef96c>
 400fbcc:	00800034 	movhi	r2,0
 400fbd0:	10800004 	addi	r2,r2,0
 400fbd4:	10000926 	beq	r2,zero,400fbfc <__call_exitprocs+0xc4>
 400fbd8:	a0800117 	ldw	r2,4(r20)
 400fbdc:	1000301e 	bne	r2,zero,400fca0 <__call_exitprocs+0x168>
 400fbe0:	a0800017 	ldw	r2,0(r20)
 400fbe4:	10003226 	beq	r2,zero,400fcb0 <__call_exitprocs+0x178>
 400fbe8:	a009883a 	mov	r4,r20
 400fbec:	98800015 	stw	r2,0(r19)
 400fbf0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 400fbf4:	9d000017 	ldw	r20,0(r19)
 400fbf8:	a03fe41e 	bne	r20,zero,400fb8c <__ram_exceptions_end+0xfbfef948>
 400fbfc:	dfc00a17 	ldw	ra,40(sp)
 400fc00:	df000917 	ldw	fp,36(sp)
 400fc04:	ddc00817 	ldw	r23,32(sp)
 400fc08:	dd800717 	ldw	r22,28(sp)
 400fc0c:	dd400617 	ldw	r21,24(sp)
 400fc10:	dd000517 	ldw	r20,20(sp)
 400fc14:	dcc00417 	ldw	r19,16(sp)
 400fc18:	dc800317 	ldw	r18,12(sp)
 400fc1c:	dc400217 	ldw	r17,8(sp)
 400fc20:	dc000117 	ldw	r16,4(sp)
 400fc24:	dec00b04 	addi	sp,sp,44
 400fc28:	f800283a 	ret
 400fc2c:	a0800117 	ldw	r2,4(r20)
 400fc30:	80c00017 	ldw	r3,0(r16)
 400fc34:	10bfffc4 	addi	r2,r2,-1
 400fc38:	15c01426 	beq	r2,r23,400fc8c <__call_exitprocs+0x154>
 400fc3c:	80000015 	stw	zero,0(r16)
 400fc40:	183fde26 	beq	r3,zero,400fbbc <__ram_exceptions_end+0xfbfef978>
 400fc44:	95c8983a 	sll	r4,r18,r23
 400fc48:	a0806217 	ldw	r2,392(r20)
 400fc4c:	a5800117 	ldw	r22,4(r20)
 400fc50:	2084703a 	and	r2,r4,r2
 400fc54:	10000b26 	beq	r2,zero,400fc84 <__call_exitprocs+0x14c>
 400fc58:	a0806317 	ldw	r2,396(r20)
 400fc5c:	2088703a 	and	r4,r4,r2
 400fc60:	20000c1e 	bne	r4,zero,400fc94 <__call_exitprocs+0x15c>
 400fc64:	89400017 	ldw	r5,0(r17)
 400fc68:	d9000017 	ldw	r4,0(sp)
 400fc6c:	183ee83a 	callr	r3
 400fc70:	a0800117 	ldw	r2,4(r20)
 400fc74:	15bfbf1e 	bne	r2,r22,400fb74 <__ram_exceptions_end+0xfbfef930>
 400fc78:	98800017 	ldw	r2,0(r19)
 400fc7c:	153fcf26 	beq	r2,r20,400fbbc <__ram_exceptions_end+0xfbfef978>
 400fc80:	003fbc06 	br	400fb74 <__ram_exceptions_end+0xfbfef930>
 400fc84:	183ee83a 	callr	r3
 400fc88:	003ff906 	br	400fc70 <__ram_exceptions_end+0xfbfefa2c>
 400fc8c:	a5c00115 	stw	r23,4(r20)
 400fc90:	003feb06 	br	400fc40 <__ram_exceptions_end+0xfbfef9fc>
 400fc94:	89000017 	ldw	r4,0(r17)
 400fc98:	183ee83a 	callr	r3
 400fc9c:	003ff406 	br	400fc70 <__ram_exceptions_end+0xfbfefa2c>
 400fca0:	a0800017 	ldw	r2,0(r20)
 400fca4:	a027883a 	mov	r19,r20
 400fca8:	1029883a 	mov	r20,r2
 400fcac:	003fb606 	br	400fb88 <__ram_exceptions_end+0xfbfef944>
 400fcb0:	0005883a 	mov	r2,zero
 400fcb4:	003ffb06 	br	400fca4 <__ram_exceptions_end+0xfbfefa60>

0400fcb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400fcb8:	defffd04 	addi	sp,sp,-12
 400fcbc:	df000215 	stw	fp,8(sp)
 400fcc0:	df000204 	addi	fp,sp,8
 400fcc4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400fcc8:	0001883a 	nop
 400fccc:	e0bfff17 	ldw	r2,-4(fp)
 400fcd0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400fcd4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400fcd8:	10000226 	beq	r2,zero,400fce4 <_exit+0x2c>
    ALT_SIM_FAIL();
 400fcdc:	002af070 	cmpltui	zero,zero,43969
 400fce0:	00000106 	br	400fce8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400fce4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400fce8:	003fff06 	br	400fce8 <__ram_exceptions_end+0xfbfefaa4>
