
nio1.elf:     file format elf32-littlenios2
nio1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x04000000 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00002224 vaddr 0x04000224 paddr 0x04000224 align 2**12
         filesz 0x000102c4 memsz 0x000102c4 flags r-x
    LOAD off    0x000124e8 vaddr 0x040104e8 paddr 0x04012058 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x00014bc8 vaddr 0x04013bc8 paddr 0x04013bc8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ff38  04000224  04000224  00002224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000038c  0401015c  0401015c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  040104e8  04012058  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04013bc8  04013bc8  00014bc8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00020244  00020244  00014058  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  04013d28  04013d28  00014058  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014058  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000eb0  00000000  00000000  00014080  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023684  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009181  00000000  00000000  000385b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b53b  00000000  00000000  00041735  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002338  00000000  00000000  0004cc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ad2  00000000  00000000  0004efa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a2f  00000000  00000000  00052a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0006a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  0006a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f20e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006f211  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f21d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f21e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006f21f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006f22a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006f235  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000002  00000000  00000000  0006f240  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001c  00000000  00000000  0006f242  2**0
                  CONTENTS, READONLY
 27 .jdi          00006f7a  00000000  00000000  0006f25e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000bc7e9  00000000  00000000  000761d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
0401015c l    d  .rodata	00000000 .rodata
040104e8 l    d  .rwdata	00000000 .rwdata
04013bc8 l    d  .bss	00000000 .bss
00020244 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
04013d28 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nio1_bsp//obj/HAL/src/crt0.o
0400026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
040104e8 l     O .rwdata	0000000a _hex_digits_data.2706
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
040101f6 l     O .rodata	00000010 zeroes.4404
04002698 l     F .text	000000bc __sbprintf
04010206 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040028a8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040043d8 l     F .text	00000008 __fp_unlock
040043ec l     F .text	0000019c __sinit.part.1
04004588 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
040104f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04010938 l     O .rwdata	00000020 lc_ctype_charset
04010918 l     O .rwdata	00000020 lc_message_charset
04010958 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04010238 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04006ea0 l     F .text	000000fc __sprint_r.part.0
0401036c l     O .rodata	00000010 blanks.4348
0401035c l     O .rodata	00000010 zeroes.4349
0400842c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400cc64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400cd84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400cdb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400ceb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400cfa4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400d090 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400d278 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04012038 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400d4d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400d620 l     F .text	00000038 alt_dev_reg
0400d658 l     F .text	00000050 alt_get_errno
0400d6a8 l     F .text	0000006c alt_avalon_mutex_reg
04010f40 l     O .rwdata	00001060 jtag_uart_0
04011fa0 l     O .rwdata	00000048 mailbox_simple_0
04011fe8 l     O .rwdata	00000010 mutex_0
04011ff8 l     O .rwdata	00000010 mutex_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400d9fc l     F .text	0000020c altera_avalon_jtag_uart_irq
0400dc08 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0400e248 l     F .text	00000090 altera_avalon_mailbox_identify
0400e2d8 l     F .text	00000078 altera_avalon_mailbox_post
0400e350 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0400e488 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0400eba8 l     F .text	00000050 alt_get_errno
0400ebf8 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400f010 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400f558 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400f698 l     F .text	00000050 alt_get_errno
0400f6e8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04013bfc g     O .bss	00000004 alt_instruction_exception_handler
040069b0 g     F .text	00000074 _mprec_log10
0400e91c g     F .text	00000150 altera_avalon_mailbox_send
04006a9c g     F .text	0000008c __any_on
04008e84 g     F .text	00000054 _isatty_r
04010244 g     O .rodata	00000028 __mprec_tinytens
0400d1b4 g     F .text	0000007c alt_main
04013c28 g     O .bss	00000100 alt_irq
04008ed8 g     F .text	00000060 _lseek_r
04012058 g       *ABS*	00000000 __flash_rwdata_start
0400b790 g     F .text	00000088 .hidden __eqdf2
04013d28 g       *ABS*	00000000 __alt_heap_start
04000448 g     F .text	0000003c printf
040097b0 g     F .text	0000009c _wcrtomb_r
04006cc8 g     F .text	0000005c __sseek
04004728 g     F .text	00000010 __sinit
04009658 g     F .text	00000140 __swbuf_r
04004d34 g     F .text	0000007c _setlocale_r
04004590 g     F .text	00000068 __sfmoreglue
0400d254 g     F .text	00000024 __malloc_unlock
04008f38 g     F .text	0000015c memmove
04004710 g     F .text	00000018 _cleanup
0400ed30 g     F .text	00000040 altera_avalon_mutex_trylock
04005b2c g     F .text	000000a8 _Balloc
0400b818 g     F .text	000000dc .hidden __gtdf2
0400fab0 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
0400edc4 g     F .text	00000074 altera_avalon_mutex_is_mine
04000000 g       *ABS*	00000000 __flash_exceptions_start
0400896c g     F .text	0000005c _fstat_r
04013be0 g     O .bss	00000004 errno
04006c44 g     F .text	00000008 __seofread
04013be8 g     O .bss	00000004 alt_argv
0401a008 g       *ABS*	00000000 _gp
0400ea6c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04010dc0 g     O .rwdata	00000180 alt_fd_list
0400f1c4 g     F .text	00000090 alt_find_dev
040058bc g     F .text	00000148 memcpy
040043e0 g     F .text	0000000c _cleanup_r
0400ca7c g     F .text	000000dc .hidden __floatsidf
0400f61c g     F .text	0000007c alt_io_redirect
0400b8f4 g     F .text	000000f4 .hidden __ltdf2
0401015c g       *ABS*	00000000 __DTOR_END__
0400fd2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400e530 g     F .text	00000078 altera_avalon_mailbox_simple_init
04006b28 g     F .text	00000074 __fpclassifyd
0400690c g     F .text	000000a4 __ratio
04008410 g     F .text	0000001c __vfiprintf_internal
0400de08 g     F .text	0000021c altera_avalon_jtag_uart_read
04000418 g     F .text	00000030 _printf_r
0400a540 g     F .text	00000064 .hidden __udivsi3
0400cf00 g     F .text	000000a4 isatty
04010294 g     O .rodata	000000c8 __mprec_tens
0400e8a4 g     F .text	00000078 altera_avalon_mailbox_status
0400e78c g     F .text	00000118 altera_avalon_mailbox_close
04004db0 g     F .text	0000000c __locale_charset
0400fc9c g     F .text	00000090 alt_icache_flush
04013bdc g     O .bss	00000004 __malloc_top_pad
04012010 g     O .rwdata	00000004 __mb_cur_max
04004de0 g     F .text	0000000c _localeconv_r
040089c8 g     F .text	000004bc __sfvwrite_r
04005f38 g     F .text	0000003c __i2b
04006b9c g     F .text	00000054 _sbrk_r
04009094 g     F .text	00000060 _read_r
04012030 g     O .rwdata	00000004 alt_max_fd
04008660 g     F .text	000000f0 _fclose_r
040043a8 g     F .text	00000030 fflush
04013bd8 g     O .bss	00000004 __malloc_max_sbrked_mem
0400a5fc g     F .text	000008ac .hidden __adddf3
040066b4 g     F .text	0000010c __b2d
04009f10 g     F .text	00000538 .hidden __umoddi3
0400d0e0 g     F .text	000000d4 lseek
0400ee38 g     F .text	00000050 altera_avalon_mutex_first_lock
04012008 g     O .rwdata	00000004 _global_impure_ptr
040090f4 g     F .text	00000564 _realloc_r
04013d28 g       *ABS*	00000000 __bss_end
0400f468 g     F .text	000000f0 alt_iic_isr_register
0400f9a8 g     F .text	00000108 alt_tick
04009998 g     F .text	00000578 .hidden __udivdi3
040088c8 g     F .text	00000024 _fputwc_r
0401026c g     O .rodata	00000028 __mprec_bigtens
04005d1c g     F .text	00000104 __s2b
0400cb58 g     F .text	000000a8 .hidden __floatunsidf
040063f4 g     F .text	00000060 __mcmp
04004748 g     F .text	00000018 __fp_lock_all
0400f41c g     F .text	0000004c alt_ic_irq_enabled
04000270 g     F .text	00000044 value_showhex
0400f90c g     F .text	0000009c alt_alarm_stop
04013bf0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
04010d98 g     O .rwdata	00000028 alt_dev_null
0400ec74 g     F .text	00000054 altera_avalon_mutex_open
0400efc8 g     F .text	00000048 alt_dcache_flush_all
04005e20 g     F .text	00000068 __hi0bits
0400c9fc g     F .text	00000080 .hidden __fixdfsi
04012058 g       *ABS*	00000000 __ram_rwdata_end
04012028 g     O .rwdata	00000008 alt_dev_list
0400d528 g     F .text	000000f8 write
04012044 g     O .rwdata	00000008 alt_mutex_list
040104e8 g       *ABS*	00000000 __ram_rodata_end
0400ce00 g     F .text	000000b0 fstat
0400b8f4 g     F .text	000000f4 .hidden __ledf2
0400616c g     F .text	00000140 __pow5mult
04006fb4 g     F .text	0000145c ___vfiprintf_internal_r
04013bd0 g     O .bss	00000004 __nlocale_changed
0400a5a4 g     F .text	00000058 .hidden __umodsi3
04013d28 g       *ABS*	00000000 end
0400d934 g     F .text	000000c8 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0401015c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400cc00 g     F .text	00000064 .hidden __clzsi2
0400e024 g     F .text	00000224 altera_avalon_jtag_uart_write
04004738 g     F .text	00000004 __sfp_lock_acquire
040057d8 g     F .text	000000e4 memchr
04000484 g     F .text	000021f8 ___vfprintf_internal_r
0400489c g     F .text	00000310 _free_r
04004dbc g     F .text	00000010 __locale_mb_cur_max
0400ffa8 g     F .text	00000180 __call_exitprocs
04013bcc g     O .bss	00000004 __mlocale_changed
04012014 g     O .rwdata	00000004 __malloc_sbrk_base
04000224 g     F .text	0000004c _start
04013bf4 g     O .bss	00000004 _alt_tick_rate
040062ac g     F .text	00000148 __lshift
04013bf8 g     O .bss	00000004 _alt_nticks
0400d2c8 g     F .text	000000fc read
0400d74c g     F .text	00000084 alt_sys_init
0400fe90 g     F .text	00000118 __register_exitproc
0400ed70 g     F .text	00000054 altera_avalon_mutex_unlock
04005f74 g     F .text	000001f8 __multiply
0400dcb0 g     F .text	00000068 altera_avalon_jtag_uart_close
040104e8 g       *ABS*	00000000 __ram_rwdata_start
0401015c g       *ABS*	00000000 __ram_rodata_start
04013c00 g     O .bss	00000028 __malloc_current_mallinfo
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
040067c0 g     F .text	0000014c __d2b
0400d7d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400fbe8 g     F .text	000000b4 alt_get_fd
04008548 g     F .text	00000054 _close_r
0400fe14 g     F .text	0000007c memcmp
0400d890 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04013d28 g       *ABS*	00000000 __alt_stack_base
0400d8e0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002754 g     F .text	00000154 __swsetup_r
0400aea8 g     F .text	000008e8 .hidden __divdf3
040045f8 g     F .text	00000118 __sfp
04006a24 g     F .text	00000078 __copybits
04010990 g     O .rwdata	00000408 __malloc_av_
04004744 g     F .text	00000004 __sinit_lock_release
0400b9e8 g     F .text	00000718 .hidden __muldf3
04006bf0 g     F .text	00000054 __sread
0400fad4 g     F .text	00000114 alt_find_file
0400f060 g     F .text	000000a4 alt_dev_llist_insert
0400d230 g     F .text	00000024 __malloc_lock
0400d428 g     F .text	000000b0 sbrk
0400434c g     F .text	0000005c _fflush_r
0400859c g     F .text	000000c4 _calloc_r
04013bc8 g       *ABS*	00000000 __bss_start
04005a04 g     F .text	00000128 memset
040002b4 g     F .text	00000164 main
04013bec g     O .bss	00000004 alt_envp
04013bd4 g     O .bss	00000004 __malloc_max_total_mem
0400d830 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04009798 g     F .text	00000018 __swbuf
04006d24 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04008750 g     F .text	00000014 fclose
0400ecec g     F .text	00000044 altera_avalon_mutex_lock
04002aa8 g     F .text	00001688 _dtoa_r
04004fcc g     F .text	0000080c _malloc_r
0400990c g     F .text	00000030 __ascii_wctomb
04012034 g     O .rwdata	00000004 alt_errno
04004bac g     F .text	000000c4 _fwalk
0400a448 g     F .text	00000084 .hidden __divsi3
04004778 g     F .text	00000124 _malloc_trim_r
0401015c g       *ABS*	00000000 __CTOR_END__
04006d2c g     F .text	000000dc strcmp
0401015c g       *ABS*	00000000 __flash_rodata_start
0401015c g       *ABS*	00000000 __DTOR_LIST__
0400b790 g     F .text	00000088 .hidden __nedf2
0400d714 g     F .text	00000038 alt_irq_init
0400d3c4 g     F .text	00000064 alt_release_fd
0401037c g     O .rodata	00000100 .hidden __clz_tab
04013bc8 g     O .bss	00000004 _PathLocale
0400fdc8 g     F .text	00000014 atexit
040084e8 g     F .text	00000060 _write_r
04004dec g     F .text	00000018 setlocale
0401200c g     O .rwdata	00000004 _impure_ptr
04013be4 g     O .bss	00000004 alt_argc
04004130 g     F .text	0000021c __sflush_r
0400f164 g     F .text	00000060 _do_dtors
04004dd8 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
04006650 g     F .text	00000064 __ulp
04004760 g     F .text	00000018 __fp_unlock_all
04012020 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
04004e04 g     F .text	0000000c localeconv
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0400f288 g     F .text	00000050 alt_ic_isr_register
04012058 g       *ABS*	00000000 _edata
04013d28 g       *ABS*	00000000 _end
04008764 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0400dd18 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400f378 g     F .text	000000a4 alt_ic_irq_disable
0401203c g     O .rwdata	00000008 alt_mailbox_simple_list
04006c4c g     F .text	0000007c __swrite
04012018 g     O .rwdata	00000004 __malloc_trim_threshold
04004dcc g     F .text	0000000c __locale_msgcharset
0400fddc g     F .text	00000038 exit
04004c70 g     F .text	000000c4 _fwalk_reent
04006454 g     F .text	000001fc __mdiff
0400a4cc g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0400473c g     F .text	00000004 __sfp_lock_release
0400e5a8 g     F .text	000001e4 altera_avalon_mailbox_open
04010128 g     F .text	00000034 _exit
0400ee88 g     F .text	00000140 alt_alarm_start
04004e10 g     F .text	000001bc __smakebuf_r
04006e08 g     F .text	00000098 strlen
0400f7b4 g     F .text	00000158 open
0400b818 g     F .text	000000dc .hidden __gedf2
0401201c g     O .rwdata	00000004 __wctomb
04006f9c g     F .text	00000018 __sprint_r
0400f254 g     F .text	00000034 alt_icache_flush_all
0401204c g     O .rwdata	00000004 alt_priority_mask
0400f2d8 g     F .text	000000a0 alt_ic_irq_enable
0400267c g     F .text	0000001c __vfprintf_internal
0400ecc8 g     F .text	00000024 altera_avalon_mutex_close
0400993c g     F .text	0000005c _wctomb_r
0400c100 g     F .text	000008fc .hidden __subdf3
04005e88 g     F .text	000000b0 __lo0bits
04012050 g     O .rwdata	00000008 alt_alarm_list
0400f104 g     F .text	00000060 _do_ctors
0400984c g     F .text	000000c0 wcrtomb
0400ccb4 g     F .text	000000d0 close
0400d00c g     F .text	00000084 alt_load
040088ec g     F .text	00000080 fputwc
04004740 g     F .text	00000004 __sinit_lock_acquire
04005bfc g     F .text	00000120 __multadd
04005bd4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf8020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
   20014:	08408914 	ori	at,at,548
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00810074 	movhi	r2,1025
   20140:	108f0a04 	addi	r2,r2,15400
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00810074 	movhi	r2,1025
   20158:	108f0a04 	addi	r2,r2,15400
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xf802012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xf8020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6fd17 	ldw	r2,-25612(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6fd17 	ldw	r2,-25612(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000224:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000228:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400022c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000230:	00bffd16 	blt	zero,r2,4000228 <__alt_data_end+0xfc000228>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000234:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400023c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000240:	d6a80214 	ori	gp,gp,40968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000244:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000248:	108ef214 	ori	r2,r2,15304

    movhi r3, %hi(__bss_end)
 400024c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000250:	18cf4a14 	ori	r3,r3,15656

    beq r2, r3, 1f
 4000254:	10c00326 	beq	r2,r3,4000264 <_start+0x40>

0:
    stw zero, (r2)
 4000258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000260:	10fffd36 	bltu	r2,r3,4000258 <__alt_data_end+0xfc000258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000264:	400d00c0 	call	400d00c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000268:	400d1b40 	call	400d1b4 <alt_main>

0400026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400026c:	003fff06 	br	400026c <__alt_data_end+0xfc00026c>

04000270 <value_showhex>:
#define WRITE_OFFSET 4
#define SET_OFFSET 12
#define CLEAR_OFFSET 16

int value_showhex(int value)
{
 4000270:	defffd04 	addi	sp,sp,-12
 4000274:	df000215 	stw	fp,8(sp)
 4000278:	df000204 	addi	fp,sp,8
 400027c:	e13fff15 	stw	r4,-4(fp)
	static unsigned char _hex_digits_data[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
	int led_value;
	led_value = _hex_digits_data[value & 0xF];
 4000280:	e0bfff17 	ldw	r2,-4(fp)
 4000284:	10c003cc 	andi	r3,r2,15
 4000288:	00810074 	movhi	r2,1025
 400028c:	10813a04 	addi	r2,r2,1256
 4000290:	10c5883a 	add	r2,r2,r3
 4000294:	10800003 	ldbu	r2,0(r2)
 4000298:	10803fcc 	andi	r2,r2,255
 400029c:	e0bffe15 	stw	r2,-8(fp)
	//printf("led value %d\n",led_value);
	return led_value;
 40002a0:	e0bffe17 	ldw	r2,-8(fp)
}
 40002a4:	e037883a 	mov	sp,fp
 40002a8:	df000017 	ldw	fp,0(sp)
 40002ac:	dec00104 	addi	sp,sp,4
 40002b0:	f800283a 	ret

040002b4 <main>:

int main()
{
 40002b4:	defffb04 	addi	sp,sp,-20
 40002b8:	dfc00415 	stw	ra,16(sp)
 40002bc:	df000315 	stw	fp,12(sp)
 40002c0:	df000304 	addi	fp,sp,12
	printf("Hello from Nios II %d \n",ALT_CPU_CPU_ID_VALUE);
 40002c4:	000b883a 	mov	r5,zero
 40002c8:	01010074 	movhi	r4,1025
 40002cc:	21005704 	addi	r4,r4,348
 40002d0:	40004480 	call	4000448 <printf>
alt_mutex_dev* mutex=altera_avalon_mutex_open(MUTEX_1_NAME);
 40002d4:	01010074 	movhi	r4,1025
 40002d8:	21005d04 	addi	r4,r4,372
 40002dc:	400ec740 	call	400ec74 <altera_avalon_mutex_open>
 40002e0:	e0bfff15 	stw	r2,-4(fp)

	printf("Hello from Nios II %d \n",1);
 40002e4:	01400044 	movi	r5,1
 40002e8:	01010074 	movhi	r4,1025
 40002ec:	21005704 	addi	r4,r4,348
 40002f0:	40004480 	call	4000448 <printf>
	int i=0;
 40002f4:	e03ffd15 	stw	zero,-12(fp)
	altera_avalon_mutex_lock(mutex,1);
 40002f8:	01400044 	movi	r5,1
 40002fc:	e13fff17 	ldw	r4,-4(fp)
 4000300:	400ecec0 	call	400ecec <altera_avalon_mutex_lock>
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, RESET_COUNTER, 0);
 4000304:	0007883a 	mov	r3,zero
 4000308:	00820134 	movhi	r2,2052
 400030c:	10841104 	addi	r2,r2,4164
 4000310:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, SET_COMP_COUNTER, 50);
 4000314:	00c00c84 	movi	r3,50
 4000318:	00820134 	movhi	r2,2052
 400031c:	10841704 	addi	r2,r2,4188
 4000320:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, CLR_EOT_COUNTER, 1);
 4000324:	00c00044 	movi	r3,1
 4000328:	00820134 	movhi	r2,2052
 400032c:	10841504 	addi	r2,r2,4180
 4000330:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, START_COUNTER, 0);
 4000334:	0007883a 	mov	r3,zero
 4000338:	00820134 	movhi	r2,2052
 400033c:	10841204 	addi	r2,r2,4168
 4000340:	10c00035 	stwio	r3,0(r2)
	altera_avalon_mutex_unlock(mutex);
 4000344:	e13fff17 	ldw	r4,-4(fp)
 4000348:	400ed700 	call	400ed70 <altera_avalon_mutex_unlock>

	int j;
	while(i<=10000){
 400034c:	00002906 	br	40003f4 <main+0x140>

		for(j=0;j<31500;j++)
 4000350:	e03ffe15 	stw	zero,-8(fp)
 4000354:	00000306 	br	4000364 <main+0xb0>
 4000358:	e0bffe17 	ldw	r2,-8(fp)
 400035c:	10800044 	addi	r2,r2,1
 4000360:	e0bffe15 	stw	r2,-8(fp)
 4000364:	e0bffe17 	ldw	r2,-8(fp)
 4000368:	109ec310 	cmplti	r2,r2,31500
 400036c:	103ffa1e 	bne	r2,zero,4000358 <__alt_data_end+0xfc000358>
		{

		}
		altera_avalon_mutex_lock(mutex,1);
 4000370:	01400044 	movi	r5,1
 4000374:	e13fff17 	ldw	r4,-4(fp)
 4000378:	400ecec0 	call	400ecec <altera_avalon_mutex_lock>

		printf("nios1 read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 400037c:	00820134 	movhi	r2,2052
 4000380:	10841004 	addi	r2,r2,4160
 4000384:	10800037 	ldwio	r2,0(r2)
 4000388:	100b883a 	mov	r5,r2
 400038c:	01010074 	movhi	r4,1025
 4000390:	21006104 	addi	r4,r4,388
 4000394:	40004480 	call	4000448 <printf>
		IOWR_32DIRECT(PROG_COUNTER_2_BASE, START_COUNTER, 0);
 4000398:	0007883a 	mov	r3,zero
 400039c:	00820134 	movhi	r2,2052
 40003a0:	10841204 	addi	r2,r2,4168
 40003a4:	10c00035 	stwio	r3,0(r2)
		printf("nios1 after restart read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 40003a8:	00820134 	movhi	r2,2052
 40003ac:	10841004 	addi	r2,r2,4160
 40003b0:	10800037 	ldwio	r2,0(r2)
 40003b4:	100b883a 	mov	r5,r2
 40003b8:	01010074 	movhi	r4,1025
 40003bc:	21006504 	addi	r4,r4,404
 40003c0:	40004480 	call	4000448 <printf>
		printf("nios1 after restart read %d \n",IORD_32DIRECT(PROG_COUNTER_2_BASE,0));
 40003c4:	00820134 	movhi	r2,2052
 40003c8:	10841004 	addi	r2,r2,4160
 40003cc:	10800037 	ldwio	r2,0(r2)
 40003d0:	100b883a 	mov	r5,r2
 40003d4:	01010074 	movhi	r4,1025
 40003d8:	21006504 	addi	r4,r4,404
 40003dc:	40004480 	call	4000448 <printf>

		altera_avalon_mutex_unlock(mutex);
 40003e0:	e13fff17 	ldw	r4,-4(fp)
 40003e4:	400ed700 	call	400ed70 <altera_avalon_mutex_unlock>
		i++;
 40003e8:	e0bffd17 	ldw	r2,-12(fp)
 40003ec:	10800044 	addi	r2,r2,1
 40003f0:	e0bffd15 	stw	r2,-12(fp)
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, CLR_EOT_COUNTER, 1);
	IOWR_32DIRECT(PROG_COUNTER_2_BASE, START_COUNTER, 0);
	altera_avalon_mutex_unlock(mutex);

	int j;
	while(i<=10000){
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	1089c450 	cmplti	r2,r2,10001
 40003fc:	103fd41e 	bne	r2,zero,4000350 <__alt_data_end+0xfc000350>

		altera_avalon_mutex_unlock(mutex);
		i++;

	}
  return 0;
 4000400:	0005883a 	mov	r2,zero

}
 4000404:	e037883a 	mov	sp,fp
 4000408:	dfc00117 	ldw	ra,4(sp)
 400040c:	df000017 	ldw	fp,0(sp)
 4000410:	dec00204 	addi	sp,sp,8
 4000414:	f800283a 	ret

04000418 <_printf_r>:
 4000418:	defffd04 	addi	sp,sp,-12
 400041c:	2805883a 	mov	r2,r5
 4000420:	dfc00015 	stw	ra,0(sp)
 4000424:	d9800115 	stw	r6,4(sp)
 4000428:	d9c00215 	stw	r7,8(sp)
 400042c:	21400217 	ldw	r5,8(r4)
 4000430:	d9c00104 	addi	r7,sp,4
 4000434:	100d883a 	mov	r6,r2
 4000438:	40004840 	call	4000484 <___vfprintf_internal_r>
 400043c:	dfc00017 	ldw	ra,0(sp)
 4000440:	dec00304 	addi	sp,sp,12
 4000444:	f800283a 	ret

04000448 <printf>:
 4000448:	defffc04 	addi	sp,sp,-16
 400044c:	dfc00015 	stw	ra,0(sp)
 4000450:	d9400115 	stw	r5,4(sp)
 4000454:	d9800215 	stw	r6,8(sp)
 4000458:	d9c00315 	stw	r7,12(sp)
 400045c:	00810074 	movhi	r2,1025
 4000460:	10880304 	addi	r2,r2,8204
 4000464:	10800017 	ldw	r2,0(r2)
 4000468:	200b883a 	mov	r5,r4
 400046c:	d9800104 	addi	r6,sp,4
 4000470:	11000217 	ldw	r4,8(r2)
 4000474:	400267c0 	call	400267c <__vfprintf_internal>
 4000478:	dfc00017 	ldw	ra,0(sp)
 400047c:	dec00404 	addi	sp,sp,16
 4000480:	f800283a 	ret

04000484 <___vfprintf_internal_r>:
 4000484:	deffb804 	addi	sp,sp,-288
 4000488:	dfc04715 	stw	ra,284(sp)
 400048c:	ddc04515 	stw	r23,276(sp)
 4000490:	dd404315 	stw	r21,268(sp)
 4000494:	d9002c15 	stw	r4,176(sp)
 4000498:	282f883a 	mov	r23,r5
 400049c:	302b883a 	mov	r21,r6
 40004a0:	d9c02d15 	stw	r7,180(sp)
 40004a4:	df004615 	stw	fp,280(sp)
 40004a8:	dd804415 	stw	r22,272(sp)
 40004ac:	dd004215 	stw	r20,264(sp)
 40004b0:	dcc04115 	stw	r19,260(sp)
 40004b4:	dc804015 	stw	r18,256(sp)
 40004b8:	dc403f15 	stw	r17,252(sp)
 40004bc:	dc003e15 	stw	r16,248(sp)
 40004c0:	4004de00 	call	4004de0 <_localeconv_r>
 40004c4:	10800017 	ldw	r2,0(r2)
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	d8803415 	stw	r2,208(sp)
 40004d0:	4006e080 	call	4006e08 <strlen>
 40004d4:	d8803715 	stw	r2,220(sp)
 40004d8:	d8802c17 	ldw	r2,176(sp)
 40004dc:	10000226 	beq	r2,zero,40004e8 <___vfprintf_internal_r+0x64>
 40004e0:	10800e17 	ldw	r2,56(r2)
 40004e4:	1000f926 	beq	r2,zero,40008cc <___vfprintf_internal_r+0x448>
 40004e8:	b880030b 	ldhu	r2,12(r23)
 40004ec:	10c8000c 	andi	r3,r2,8192
 40004f0:	1800061e 	bne	r3,zero,400050c <___vfprintf_internal_r+0x88>
 40004f4:	b9001917 	ldw	r4,100(r23)
 40004f8:	00f7ffc4 	movi	r3,-8193
 40004fc:	10880014 	ori	r2,r2,8192
 4000500:	20c6703a 	and	r3,r4,r3
 4000504:	b880030d 	sth	r2,12(r23)
 4000508:	b8c01915 	stw	r3,100(r23)
 400050c:	10c0020c 	andi	r3,r2,8
 4000510:	1800c126 	beq	r3,zero,4000818 <___vfprintf_internal_r+0x394>
 4000514:	b8c00417 	ldw	r3,16(r23)
 4000518:	1800bf26 	beq	r3,zero,4000818 <___vfprintf_internal_r+0x394>
 400051c:	1080068c 	andi	r2,r2,26
 4000520:	00c00284 	movi	r3,10
 4000524:	10c0c426 	beq	r2,r3,4000838 <___vfprintf_internal_r+0x3b4>
 4000528:	d8c00404 	addi	r3,sp,16
 400052c:	05010074 	movhi	r20,1025
 4000530:	d9001e04 	addi	r4,sp,120
 4000534:	a5007d84 	addi	r20,r20,502
 4000538:	d8c01e15 	stw	r3,120(sp)
 400053c:	d8002015 	stw	zero,128(sp)
 4000540:	d8001f15 	stw	zero,124(sp)
 4000544:	d8003315 	stw	zero,204(sp)
 4000548:	d8003615 	stw	zero,216(sp)
 400054c:	d8003815 	stw	zero,224(sp)
 4000550:	1811883a 	mov	r8,r3
 4000554:	d8003915 	stw	zero,228(sp)
 4000558:	d8003a15 	stw	zero,232(sp)
 400055c:	d8002f15 	stw	zero,188(sp)
 4000560:	d9002815 	stw	r4,160(sp)
 4000564:	a8800007 	ldb	r2,0(r21)
 4000568:	10027b26 	beq	r2,zero,4000f58 <___vfprintf_internal_r+0xad4>
 400056c:	00c00944 	movi	r3,37
 4000570:	a821883a 	mov	r16,r21
 4000574:	10c0021e 	bne	r2,r3,4000580 <___vfprintf_internal_r+0xfc>
 4000578:	00001406 	br	40005cc <___vfprintf_internal_r+0x148>
 400057c:	10c00326 	beq	r2,r3,400058c <___vfprintf_internal_r+0x108>
 4000580:	84000044 	addi	r16,r16,1
 4000584:	80800007 	ldb	r2,0(r16)
 4000588:	103ffc1e 	bne	r2,zero,400057c <__alt_data_end+0xfc00057c>
 400058c:	8563c83a 	sub	r17,r16,r21
 4000590:	88000e26 	beq	r17,zero,40005cc <___vfprintf_internal_r+0x148>
 4000594:	d8c02017 	ldw	r3,128(sp)
 4000598:	d8801f17 	ldw	r2,124(sp)
 400059c:	45400015 	stw	r21,0(r8)
 40005a0:	1c47883a 	add	r3,r3,r17
 40005a4:	10800044 	addi	r2,r2,1
 40005a8:	d8c02015 	stw	r3,128(sp)
 40005ac:	44400115 	stw	r17,4(r8)
 40005b0:	d8801f15 	stw	r2,124(sp)
 40005b4:	00c001c4 	movi	r3,7
 40005b8:	1880a716 	blt	r3,r2,4000858 <___vfprintf_internal_r+0x3d4>
 40005bc:	42000204 	addi	r8,r8,8
 40005c0:	d9402f17 	ldw	r5,188(sp)
 40005c4:	2c4b883a 	add	r5,r5,r17
 40005c8:	d9402f15 	stw	r5,188(sp)
 40005cc:	80800007 	ldb	r2,0(r16)
 40005d0:	1000a826 	beq	r2,zero,4000874 <___vfprintf_internal_r+0x3f0>
 40005d4:	84400047 	ldb	r17,1(r16)
 40005d8:	00bfffc4 	movi	r2,-1
 40005dc:	85400044 	addi	r21,r16,1
 40005e0:	d8002785 	stb	zero,158(sp)
 40005e4:	0007883a 	mov	r3,zero
 40005e8:	000f883a 	mov	r7,zero
 40005ec:	d8802915 	stw	r2,164(sp)
 40005f0:	d8003115 	stw	zero,196(sp)
 40005f4:	0025883a 	mov	r18,zero
 40005f8:	01401604 	movi	r5,88
 40005fc:	01800244 	movi	r6,9
 4000600:	02800a84 	movi	r10,42
 4000604:	02401b04 	movi	r9,108
 4000608:	ad400044 	addi	r21,r21,1
 400060c:	88bff804 	addi	r2,r17,-32
 4000610:	28830436 	bltu	r5,r2,4001224 <___vfprintf_internal_r+0xda0>
 4000614:	100490ba 	slli	r2,r2,2
 4000618:	01010034 	movhi	r4,1024
 400061c:	21018b04 	addi	r4,r4,1580
 4000620:	1105883a 	add	r2,r2,r4
 4000624:	10800017 	ldw	r2,0(r2)
 4000628:	1000683a 	jmp	r2
 400062c:	04001144 	movi	r16,69
 4000630:	04001224 	muli	r16,zero,72
 4000634:	04001224 	muli	r16,zero,72
 4000638:	04001164 	muli	r16,zero,69
 400063c:	04001224 	muli	r16,zero,72
 4000640:	04001224 	muli	r16,zero,72
 4000644:	04001224 	muli	r16,zero,72
 4000648:	04001224 	muli	r16,zero,72
 400064c:	04001224 	muli	r16,zero,72
 4000650:	04001224 	muli	r16,zero,72
 4000654:	040008d8 	cmpnei	r16,zero,35
 4000658:	04001080 	call	400108 <__ram_exceptions_end+0x3dfec4>
 400065c:	04001224 	muli	r16,zero,72
 4000660:	040007a0 	cmpeqi	r16,zero,30
 4000664:	04000900 	call	400090 <__ram_exceptions_end+0x3dfe4c>
 4000668:	04001224 	muli	r16,zero,72
 400066c:	04000940 	call	400094 <__ram_exceptions_end+0x3dfe50>
 4000670:	0400094c 	andi	r16,zero,37
 4000674:	0400094c 	andi	r16,zero,37
 4000678:	0400094c 	andi	r16,zero,37
 400067c:	0400094c 	andi	r16,zero,37
 4000680:	0400094c 	andi	r16,zero,37
 4000684:	0400094c 	andi	r16,zero,37
 4000688:	0400094c 	andi	r16,zero,37
 400068c:	0400094c 	andi	r16,zero,37
 4000690:	0400094c 	andi	r16,zero,37
 4000694:	04001224 	muli	r16,zero,72
 4000698:	04001224 	muli	r16,zero,72
 400069c:	04001224 	muli	r16,zero,72
 40006a0:	04001224 	muli	r16,zero,72
 40006a4:	04001224 	muli	r16,zero,72
 40006a8:	04001224 	muli	r16,zero,72
 40006ac:	04001224 	muli	r16,zero,72
 40006b0:	04001224 	muli	r16,zero,72
 40006b4:	04001224 	muli	r16,zero,72
 40006b8:	04001224 	muli	r16,zero,72
 40006bc:	04000980 	call	400098 <__ram_exceptions_end+0x3dfe54>
 40006c0:	04000a3c 	xorhi	r16,zero,40
 40006c4:	04001224 	muli	r16,zero,72
 40006c8:	04000a3c 	xorhi	r16,zero,40
 40006cc:	04001224 	muli	r16,zero,72
 40006d0:	04001224 	muli	r16,zero,72
 40006d4:	04001224 	muli	r16,zero,72
 40006d8:	04001224 	muli	r16,zero,72
 40006dc:	04000adc 	xori	r16,zero,43
 40006e0:	04001224 	muli	r16,zero,72
 40006e4:	04001224 	muli	r16,zero,72
 40006e8:	04000ae8 	cmpgeui	r16,zero,43
 40006ec:	04001224 	muli	r16,zero,72
 40006f0:	04001224 	muli	r16,zero,72
 40006f4:	04001224 	muli	r16,zero,72
 40006f8:	04001224 	muli	r16,zero,72
 40006fc:	04001224 	muli	r16,zero,72
 4000700:	04000f60 	cmpeqi	r16,zero,61
 4000704:	04001224 	muli	r16,zero,72
 4000708:	04001224 	muli	r16,zero,72
 400070c:	04000fc0 	call	4000fc <__ram_exceptions_end+0x3dfeb8>
 4000710:	04001224 	muli	r16,zero,72
 4000714:	04001224 	muli	r16,zero,72
 4000718:	04001224 	muli	r16,zero,72
 400071c:	04001224 	muli	r16,zero,72
 4000720:	04001224 	muli	r16,zero,72
 4000724:	04001224 	muli	r16,zero,72
 4000728:	04001224 	muli	r16,zero,72
 400072c:	04001224 	muli	r16,zero,72
 4000730:	04001224 	muli	r16,zero,72
 4000734:	04001224 	muli	r16,zero,72
 4000738:	040011d0 	cmplti	r16,zero,71
 400073c:	04001170 	cmpltui	r16,zero,69
 4000740:	04000a3c 	xorhi	r16,zero,40
 4000744:	04000a3c 	xorhi	r16,zero,40
 4000748:	04000a3c 	xorhi	r16,zero,40
 400074c:	04001180 	call	400118 <__ram_exceptions_end+0x3dfed4>
 4000750:	04001170 	cmpltui	r16,zero,69
 4000754:	04001224 	muli	r16,zero,72
 4000758:	04001224 	muli	r16,zero,72
 400075c:	0400118c 	andi	r16,zero,70
 4000760:	04001224 	muli	r16,zero,72
 4000764:	0400119c 	xori	r16,zero,70
 4000768:	04001070 	cmpltui	r16,zero,65
 400076c:	040007ac 	andhi	r16,zero,30
 4000770:	04001090 	cmplti	r16,zero,66
 4000774:	04001224 	muli	r16,zero,72
 4000778:	0400109c 	xori	r16,zero,66
 400077c:	04001224 	muli	r16,zero,72
 4000780:	040010f8 	rdprs	r16,zero,67
 4000784:	04001224 	muli	r16,zero,72
 4000788:	04001224 	muli	r16,zero,72
 400078c:	04001108 	cmpgei	r16,zero,68
 4000790:	d9003117 	ldw	r4,196(sp)
 4000794:	d8802d15 	stw	r2,180(sp)
 4000798:	0109c83a 	sub	r4,zero,r4
 400079c:	d9003115 	stw	r4,196(sp)
 40007a0:	94800114 	ori	r18,r18,4
 40007a4:	ac400007 	ldb	r17,0(r21)
 40007a8:	003f9706 	br	4000608 <__alt_data_end+0xfc000608>
 40007ac:	00800c04 	movi	r2,48
 40007b0:	d9002d17 	ldw	r4,180(sp)
 40007b4:	d9402917 	ldw	r5,164(sp)
 40007b8:	d8802705 	stb	r2,156(sp)
 40007bc:	00801e04 	movi	r2,120
 40007c0:	d8802745 	stb	r2,157(sp)
 40007c4:	d8002785 	stb	zero,158(sp)
 40007c8:	20c00104 	addi	r3,r4,4
 40007cc:	24c00017 	ldw	r19,0(r4)
 40007d0:	002d883a 	mov	r22,zero
 40007d4:	90800094 	ori	r2,r18,2
 40007d8:	28029a16 	blt	r5,zero,4001244 <___vfprintf_internal_r+0xdc0>
 40007dc:	00bfdfc4 	movi	r2,-129
 40007e0:	90a4703a 	and	r18,r18,r2
 40007e4:	d8c02d15 	stw	r3,180(sp)
 40007e8:	94800094 	ori	r18,r18,2
 40007ec:	9802871e 	bne	r19,zero,400120c <___vfprintf_internal_r+0xd88>
 40007f0:	00810074 	movhi	r2,1025
 40007f4:	10807604 	addi	r2,r2,472
 40007f8:	d8803915 	stw	r2,228(sp)
 40007fc:	04401e04 	movi	r17,120
 4000800:	d8802917 	ldw	r2,164(sp)
 4000804:	0039883a 	mov	fp,zero
 4000808:	1001e926 	beq	r2,zero,4000fb0 <___vfprintf_internal_r+0xb2c>
 400080c:	0027883a 	mov	r19,zero
 4000810:	002d883a 	mov	r22,zero
 4000814:	00020506 	br	400102c <___vfprintf_internal_r+0xba8>
 4000818:	d9002c17 	ldw	r4,176(sp)
 400081c:	b80b883a 	mov	r5,r23
 4000820:	40027540 	call	4002754 <__swsetup_r>
 4000824:	1005ac1e 	bne	r2,zero,4001ed8 <___vfprintf_internal_r+0x1a54>
 4000828:	b880030b 	ldhu	r2,12(r23)
 400082c:	00c00284 	movi	r3,10
 4000830:	1080068c 	andi	r2,r2,26
 4000834:	10ff3c1e 	bne	r2,r3,4000528 <__alt_data_end+0xfc000528>
 4000838:	b880038f 	ldh	r2,14(r23)
 400083c:	103f3a16 	blt	r2,zero,4000528 <__alt_data_end+0xfc000528>
 4000840:	d9c02d17 	ldw	r7,180(sp)
 4000844:	d9002c17 	ldw	r4,176(sp)
 4000848:	a80d883a 	mov	r6,r21
 400084c:	b80b883a 	mov	r5,r23
 4000850:	40026980 	call	4002698 <__sbprintf>
 4000854:	00001106 	br	400089c <___vfprintf_internal_r+0x418>
 4000858:	d9002c17 	ldw	r4,176(sp)
 400085c:	d9801e04 	addi	r6,sp,120
 4000860:	b80b883a 	mov	r5,r23
 4000864:	4006f9c0 	call	4006f9c <__sprint_r>
 4000868:	1000081e 	bne	r2,zero,400088c <___vfprintf_internal_r+0x408>
 400086c:	da000404 	addi	r8,sp,16
 4000870:	003f5306 	br	40005c0 <__alt_data_end+0xfc0005c0>
 4000874:	d8802017 	ldw	r2,128(sp)
 4000878:	10000426 	beq	r2,zero,400088c <___vfprintf_internal_r+0x408>
 400087c:	d9002c17 	ldw	r4,176(sp)
 4000880:	d9801e04 	addi	r6,sp,120
 4000884:	b80b883a 	mov	r5,r23
 4000888:	4006f9c0 	call	4006f9c <__sprint_r>
 400088c:	b880030b 	ldhu	r2,12(r23)
 4000890:	1080100c 	andi	r2,r2,64
 4000894:	1005901e 	bne	r2,zero,4001ed8 <___vfprintf_internal_r+0x1a54>
 4000898:	d8802f17 	ldw	r2,188(sp)
 400089c:	dfc04717 	ldw	ra,284(sp)
 40008a0:	df004617 	ldw	fp,280(sp)
 40008a4:	ddc04517 	ldw	r23,276(sp)
 40008a8:	dd804417 	ldw	r22,272(sp)
 40008ac:	dd404317 	ldw	r21,268(sp)
 40008b0:	dd004217 	ldw	r20,264(sp)
 40008b4:	dcc04117 	ldw	r19,260(sp)
 40008b8:	dc804017 	ldw	r18,256(sp)
 40008bc:	dc403f17 	ldw	r17,252(sp)
 40008c0:	dc003e17 	ldw	r16,248(sp)
 40008c4:	dec04804 	addi	sp,sp,288
 40008c8:	f800283a 	ret
 40008cc:	d9002c17 	ldw	r4,176(sp)
 40008d0:	40047280 	call	4004728 <__sinit>
 40008d4:	003f0406 	br	40004e8 <__alt_data_end+0xfc0004e8>
 40008d8:	d8802d17 	ldw	r2,180(sp)
 40008dc:	d9002d17 	ldw	r4,180(sp)
 40008e0:	10800017 	ldw	r2,0(r2)
 40008e4:	d8803115 	stw	r2,196(sp)
 40008e8:	20800104 	addi	r2,r4,4
 40008ec:	d9003117 	ldw	r4,196(sp)
 40008f0:	203fa716 	blt	r4,zero,4000790 <__alt_data_end+0xfc000790>
 40008f4:	d8802d15 	stw	r2,180(sp)
 40008f8:	ac400007 	ldb	r17,0(r21)
 40008fc:	003f4206 	br	4000608 <__alt_data_end+0xfc000608>
 4000900:	ac400007 	ldb	r17,0(r21)
 4000904:	aac00044 	addi	r11,r21,1
 4000908:	8a872826 	beq	r17,r10,40025ac <___vfprintf_internal_r+0x2128>
 400090c:	88bff404 	addi	r2,r17,-48
 4000910:	0009883a 	mov	r4,zero
 4000914:	30867d36 	bltu	r6,r2,400230c <___vfprintf_internal_r+0x1e88>
 4000918:	5c400007 	ldb	r17,0(r11)
 400091c:	210002a4 	muli	r4,r4,10
 4000920:	5d400044 	addi	r21,r11,1
 4000924:	a817883a 	mov	r11,r21
 4000928:	2089883a 	add	r4,r4,r2
 400092c:	88bff404 	addi	r2,r17,-48
 4000930:	30bff92e 	bgeu	r6,r2,4000918 <__alt_data_end+0xfc000918>
 4000934:	2005c916 	blt	r4,zero,400205c <___vfprintf_internal_r+0x1bd8>
 4000938:	d9002915 	stw	r4,164(sp)
 400093c:	003f3306 	br	400060c <__alt_data_end+0xfc00060c>
 4000940:	94802014 	ori	r18,r18,128
 4000944:	ac400007 	ldb	r17,0(r21)
 4000948:	003f2f06 	br	4000608 <__alt_data_end+0xfc000608>
 400094c:	a809883a 	mov	r4,r21
 4000950:	d8003115 	stw	zero,196(sp)
 4000954:	88bff404 	addi	r2,r17,-48
 4000958:	0017883a 	mov	r11,zero
 400095c:	24400007 	ldb	r17,0(r4)
 4000960:	5ac002a4 	muli	r11,r11,10
 4000964:	ad400044 	addi	r21,r21,1
 4000968:	a809883a 	mov	r4,r21
 400096c:	12d7883a 	add	r11,r2,r11
 4000970:	88bff404 	addi	r2,r17,-48
 4000974:	30bff92e 	bgeu	r6,r2,400095c <__alt_data_end+0xfc00095c>
 4000978:	dac03115 	stw	r11,196(sp)
 400097c:	003f2306 	br	400060c <__alt_data_end+0xfc00060c>
 4000980:	18c03fcc 	andi	r3,r3,255
 4000984:	18072b1e 	bne	r3,zero,4002634 <___vfprintf_internal_r+0x21b0>
 4000988:	94800414 	ori	r18,r18,16
 400098c:	9080080c 	andi	r2,r18,32
 4000990:	10037b26 	beq	r2,zero,4001780 <___vfprintf_internal_r+0x12fc>
 4000994:	d9402d17 	ldw	r5,180(sp)
 4000998:	28800117 	ldw	r2,4(r5)
 400099c:	2cc00017 	ldw	r19,0(r5)
 40009a0:	29400204 	addi	r5,r5,8
 40009a4:	d9402d15 	stw	r5,180(sp)
 40009a8:	102d883a 	mov	r22,r2
 40009ac:	10044b16 	blt	r2,zero,4001adc <___vfprintf_internal_r+0x1658>
 40009b0:	d9402917 	ldw	r5,164(sp)
 40009b4:	df002783 	ldbu	fp,158(sp)
 40009b8:	2803bc16 	blt	r5,zero,40018ac <___vfprintf_internal_r+0x1428>
 40009bc:	00ffdfc4 	movi	r3,-129
 40009c0:	9d84b03a 	or	r2,r19,r22
 40009c4:	90e4703a 	and	r18,r18,r3
 40009c8:	10017726 	beq	r2,zero,4000fa8 <___vfprintf_internal_r+0xb24>
 40009cc:	b0038326 	beq	r22,zero,40017dc <___vfprintf_internal_r+0x1358>
 40009d0:	dc402a15 	stw	r17,168(sp)
 40009d4:	dc001e04 	addi	r16,sp,120
 40009d8:	b023883a 	mov	r17,r22
 40009dc:	402d883a 	mov	r22,r8
 40009e0:	9809883a 	mov	r4,r19
 40009e4:	880b883a 	mov	r5,r17
 40009e8:	01800284 	movi	r6,10
 40009ec:	000f883a 	mov	r7,zero
 40009f0:	4009f100 	call	4009f10 <__umoddi3>
 40009f4:	10800c04 	addi	r2,r2,48
 40009f8:	843fffc4 	addi	r16,r16,-1
 40009fc:	9809883a 	mov	r4,r19
 4000a00:	880b883a 	mov	r5,r17
 4000a04:	80800005 	stb	r2,0(r16)
 4000a08:	01800284 	movi	r6,10
 4000a0c:	000f883a 	mov	r7,zero
 4000a10:	40099980 	call	4009998 <__udivdi3>
 4000a14:	1027883a 	mov	r19,r2
 4000a18:	10c4b03a 	or	r2,r2,r3
 4000a1c:	1823883a 	mov	r17,r3
 4000a20:	103fef1e 	bne	r2,zero,40009e0 <__alt_data_end+0xfc0009e0>
 4000a24:	d8c02817 	ldw	r3,160(sp)
 4000a28:	dc402a17 	ldw	r17,168(sp)
 4000a2c:	b011883a 	mov	r8,r22
 4000a30:	1c07c83a 	sub	r3,r3,r16
 4000a34:	d8c02e15 	stw	r3,184(sp)
 4000a38:	00005906 	br	4000ba0 <___vfprintf_internal_r+0x71c>
 4000a3c:	18c03fcc 	andi	r3,r3,255
 4000a40:	1806fa1e 	bne	r3,zero,400262c <___vfprintf_internal_r+0x21a8>
 4000a44:	9080020c 	andi	r2,r18,8
 4000a48:	10048a26 	beq	r2,zero,4001c74 <___vfprintf_internal_r+0x17f0>
 4000a4c:	d8c02d17 	ldw	r3,180(sp)
 4000a50:	d9002d17 	ldw	r4,180(sp)
 4000a54:	d9402d17 	ldw	r5,180(sp)
 4000a58:	18c00017 	ldw	r3,0(r3)
 4000a5c:	21000117 	ldw	r4,4(r4)
 4000a60:	29400204 	addi	r5,r5,8
 4000a64:	d8c03615 	stw	r3,216(sp)
 4000a68:	d9003815 	stw	r4,224(sp)
 4000a6c:	d9402d15 	stw	r5,180(sp)
 4000a70:	d9003617 	ldw	r4,216(sp)
 4000a74:	d9403817 	ldw	r5,224(sp)
 4000a78:	da003d15 	stw	r8,244(sp)
 4000a7c:	04000044 	movi	r16,1
 4000a80:	4006b280 	call	4006b28 <__fpclassifyd>
 4000a84:	da003d17 	ldw	r8,244(sp)
 4000a88:	14041f1e 	bne	r2,r16,4001b08 <___vfprintf_internal_r+0x1684>
 4000a8c:	d9003617 	ldw	r4,216(sp)
 4000a90:	d9403817 	ldw	r5,224(sp)
 4000a94:	000d883a 	mov	r6,zero
 4000a98:	000f883a 	mov	r7,zero
 4000a9c:	400b8f40 	call	400b8f4 <__ledf2>
 4000aa0:	da003d17 	ldw	r8,244(sp)
 4000aa4:	1005be16 	blt	r2,zero,40021a0 <___vfprintf_internal_r+0x1d1c>
 4000aa8:	df002783 	ldbu	fp,158(sp)
 4000aac:	008011c4 	movi	r2,71
 4000ab0:	1445330e 	bge	r2,r17,4001f80 <___vfprintf_internal_r+0x1afc>
 4000ab4:	04010074 	movhi	r16,1025
 4000ab8:	84006e04 	addi	r16,r16,440
 4000abc:	00c000c4 	movi	r3,3
 4000ac0:	00bfdfc4 	movi	r2,-129
 4000ac4:	d8c02a15 	stw	r3,168(sp)
 4000ac8:	90a4703a 	and	r18,r18,r2
 4000acc:	d8c02e15 	stw	r3,184(sp)
 4000ad0:	d8002915 	stw	zero,164(sp)
 4000ad4:	d8003215 	stw	zero,200(sp)
 4000ad8:	00003706 	br	4000bb8 <___vfprintf_internal_r+0x734>
 4000adc:	94800214 	ori	r18,r18,8
 4000ae0:	ac400007 	ldb	r17,0(r21)
 4000ae4:	003ec806 	br	4000608 <__alt_data_end+0xfc000608>
 4000ae8:	18c03fcc 	andi	r3,r3,255
 4000aec:	1806db1e 	bne	r3,zero,400265c <___vfprintf_internal_r+0x21d8>
 4000af0:	94800414 	ori	r18,r18,16
 4000af4:	9080080c 	andi	r2,r18,32
 4000af8:	1002d826 	beq	r2,zero,400165c <___vfprintf_internal_r+0x11d8>
 4000afc:	d9402d17 	ldw	r5,180(sp)
 4000b00:	d8c02917 	ldw	r3,164(sp)
 4000b04:	d8002785 	stb	zero,158(sp)
 4000b08:	28800204 	addi	r2,r5,8
 4000b0c:	2cc00017 	ldw	r19,0(r5)
 4000b10:	2d800117 	ldw	r22,4(r5)
 4000b14:	18048f16 	blt	r3,zero,4001d54 <___vfprintf_internal_r+0x18d0>
 4000b18:	013fdfc4 	movi	r4,-129
 4000b1c:	9d86b03a 	or	r3,r19,r22
 4000b20:	d8802d15 	stw	r2,180(sp)
 4000b24:	9124703a 	and	r18,r18,r4
 4000b28:	1802d91e 	bne	r3,zero,4001690 <___vfprintf_internal_r+0x120c>
 4000b2c:	d8c02917 	ldw	r3,164(sp)
 4000b30:	0039883a 	mov	fp,zero
 4000b34:	1805c326 	beq	r3,zero,4002244 <___vfprintf_internal_r+0x1dc0>
 4000b38:	0027883a 	mov	r19,zero
 4000b3c:	002d883a 	mov	r22,zero
 4000b40:	dc001e04 	addi	r16,sp,120
 4000b44:	9806d0fa 	srli	r3,r19,3
 4000b48:	b008977a 	slli	r4,r22,29
 4000b4c:	b02cd0fa 	srli	r22,r22,3
 4000b50:	9cc001cc 	andi	r19,r19,7
 4000b54:	98800c04 	addi	r2,r19,48
 4000b58:	843fffc4 	addi	r16,r16,-1
 4000b5c:	20e6b03a 	or	r19,r4,r3
 4000b60:	80800005 	stb	r2,0(r16)
 4000b64:	9d86b03a 	or	r3,r19,r22
 4000b68:	183ff61e 	bne	r3,zero,4000b44 <__alt_data_end+0xfc000b44>
 4000b6c:	90c0004c 	andi	r3,r18,1
 4000b70:	18013b26 	beq	r3,zero,4001060 <___vfprintf_internal_r+0xbdc>
 4000b74:	10803fcc 	andi	r2,r2,255
 4000b78:	1080201c 	xori	r2,r2,128
 4000b7c:	10bfe004 	addi	r2,r2,-128
 4000b80:	00c00c04 	movi	r3,48
 4000b84:	10c13626 	beq	r2,r3,4001060 <___vfprintf_internal_r+0xbdc>
 4000b88:	80ffffc5 	stb	r3,-1(r16)
 4000b8c:	d8c02817 	ldw	r3,160(sp)
 4000b90:	80bfffc4 	addi	r2,r16,-1
 4000b94:	1021883a 	mov	r16,r2
 4000b98:	1887c83a 	sub	r3,r3,r2
 4000b9c:	d8c02e15 	stw	r3,184(sp)
 4000ba0:	d8802e17 	ldw	r2,184(sp)
 4000ba4:	d9002917 	ldw	r4,164(sp)
 4000ba8:	1100010e 	bge	r2,r4,4000bb0 <___vfprintf_internal_r+0x72c>
 4000bac:	2005883a 	mov	r2,r4
 4000bb0:	d8802a15 	stw	r2,168(sp)
 4000bb4:	d8003215 	stw	zero,200(sp)
 4000bb8:	e7003fcc 	andi	fp,fp,255
 4000bbc:	e700201c 	xori	fp,fp,128
 4000bc0:	e73fe004 	addi	fp,fp,-128
 4000bc4:	e0000326 	beq	fp,zero,4000bd4 <___vfprintf_internal_r+0x750>
 4000bc8:	d8c02a17 	ldw	r3,168(sp)
 4000bcc:	18c00044 	addi	r3,r3,1
 4000bd0:	d8c02a15 	stw	r3,168(sp)
 4000bd4:	90c0008c 	andi	r3,r18,2
 4000bd8:	d8c02b15 	stw	r3,172(sp)
 4000bdc:	18000326 	beq	r3,zero,4000bec <___vfprintf_internal_r+0x768>
 4000be0:	d8c02a17 	ldw	r3,168(sp)
 4000be4:	18c00084 	addi	r3,r3,2
 4000be8:	d8c02a15 	stw	r3,168(sp)
 4000bec:	90c0210c 	andi	r3,r18,132
 4000bf0:	d8c03015 	stw	r3,192(sp)
 4000bf4:	1801a31e 	bne	r3,zero,4001284 <___vfprintf_internal_r+0xe00>
 4000bf8:	d9003117 	ldw	r4,196(sp)
 4000bfc:	d8c02a17 	ldw	r3,168(sp)
 4000c00:	20e7c83a 	sub	r19,r4,r3
 4000c04:	04c19f0e 	bge	zero,r19,4001284 <___vfprintf_internal_r+0xe00>
 4000c08:	02400404 	movi	r9,16
 4000c0c:	d8c02017 	ldw	r3,128(sp)
 4000c10:	d8801f17 	ldw	r2,124(sp)
 4000c14:	4cc50d0e 	bge	r9,r19,400204c <___vfprintf_internal_r+0x1bc8>
 4000c18:	01410074 	movhi	r5,1025
 4000c1c:	29408184 	addi	r5,r5,518
 4000c20:	dc403b15 	stw	r17,236(sp)
 4000c24:	d9403515 	stw	r5,212(sp)
 4000c28:	9823883a 	mov	r17,r19
 4000c2c:	482d883a 	mov	r22,r9
 4000c30:	9027883a 	mov	r19,r18
 4000c34:	070001c4 	movi	fp,7
 4000c38:	8025883a 	mov	r18,r16
 4000c3c:	dc002c17 	ldw	r16,176(sp)
 4000c40:	00000306 	br	4000c50 <___vfprintf_internal_r+0x7cc>
 4000c44:	8c7ffc04 	addi	r17,r17,-16
 4000c48:	42000204 	addi	r8,r8,8
 4000c4c:	b440130e 	bge	r22,r17,4000c9c <___vfprintf_internal_r+0x818>
 4000c50:	01010074 	movhi	r4,1025
 4000c54:	18c00404 	addi	r3,r3,16
 4000c58:	10800044 	addi	r2,r2,1
 4000c5c:	21008184 	addi	r4,r4,518
 4000c60:	41000015 	stw	r4,0(r8)
 4000c64:	45800115 	stw	r22,4(r8)
 4000c68:	d8c02015 	stw	r3,128(sp)
 4000c6c:	d8801f15 	stw	r2,124(sp)
 4000c70:	e0bff40e 	bge	fp,r2,4000c44 <__alt_data_end+0xfc000c44>
 4000c74:	d9801e04 	addi	r6,sp,120
 4000c78:	b80b883a 	mov	r5,r23
 4000c7c:	8009883a 	mov	r4,r16
 4000c80:	4006f9c0 	call	4006f9c <__sprint_r>
 4000c84:	103f011e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4000c88:	8c7ffc04 	addi	r17,r17,-16
 4000c8c:	d8c02017 	ldw	r3,128(sp)
 4000c90:	d8801f17 	ldw	r2,124(sp)
 4000c94:	da000404 	addi	r8,sp,16
 4000c98:	b47fed16 	blt	r22,r17,4000c50 <__alt_data_end+0xfc000c50>
 4000c9c:	9021883a 	mov	r16,r18
 4000ca0:	9825883a 	mov	r18,r19
 4000ca4:	8827883a 	mov	r19,r17
 4000ca8:	dc403b17 	ldw	r17,236(sp)
 4000cac:	d9403517 	ldw	r5,212(sp)
 4000cb0:	98c7883a 	add	r3,r19,r3
 4000cb4:	10800044 	addi	r2,r2,1
 4000cb8:	41400015 	stw	r5,0(r8)
 4000cbc:	44c00115 	stw	r19,4(r8)
 4000cc0:	d8c02015 	stw	r3,128(sp)
 4000cc4:	d8801f15 	stw	r2,124(sp)
 4000cc8:	010001c4 	movi	r4,7
 4000ccc:	2082a316 	blt	r4,r2,400175c <___vfprintf_internal_r+0x12d8>
 4000cd0:	df002787 	ldb	fp,158(sp)
 4000cd4:	42000204 	addi	r8,r8,8
 4000cd8:	e0000c26 	beq	fp,zero,4000d0c <___vfprintf_internal_r+0x888>
 4000cdc:	d8801f17 	ldw	r2,124(sp)
 4000ce0:	d9002784 	addi	r4,sp,158
 4000ce4:	18c00044 	addi	r3,r3,1
 4000ce8:	10800044 	addi	r2,r2,1
 4000cec:	41000015 	stw	r4,0(r8)
 4000cf0:	01000044 	movi	r4,1
 4000cf4:	41000115 	stw	r4,4(r8)
 4000cf8:	d8c02015 	stw	r3,128(sp)
 4000cfc:	d8801f15 	stw	r2,124(sp)
 4000d00:	010001c4 	movi	r4,7
 4000d04:	20823c16 	blt	r4,r2,40015f8 <___vfprintf_internal_r+0x1174>
 4000d08:	42000204 	addi	r8,r8,8
 4000d0c:	d8802b17 	ldw	r2,172(sp)
 4000d10:	10000c26 	beq	r2,zero,4000d44 <___vfprintf_internal_r+0x8c0>
 4000d14:	d8801f17 	ldw	r2,124(sp)
 4000d18:	d9002704 	addi	r4,sp,156
 4000d1c:	18c00084 	addi	r3,r3,2
 4000d20:	10800044 	addi	r2,r2,1
 4000d24:	41000015 	stw	r4,0(r8)
 4000d28:	01000084 	movi	r4,2
 4000d2c:	41000115 	stw	r4,4(r8)
 4000d30:	d8c02015 	stw	r3,128(sp)
 4000d34:	d8801f15 	stw	r2,124(sp)
 4000d38:	010001c4 	movi	r4,7
 4000d3c:	20823616 	blt	r4,r2,4001618 <___vfprintf_internal_r+0x1194>
 4000d40:	42000204 	addi	r8,r8,8
 4000d44:	d9003017 	ldw	r4,192(sp)
 4000d48:	00802004 	movi	r2,128
 4000d4c:	20819926 	beq	r4,r2,40013b4 <___vfprintf_internal_r+0xf30>
 4000d50:	d9402917 	ldw	r5,164(sp)
 4000d54:	d8802e17 	ldw	r2,184(sp)
 4000d58:	28adc83a 	sub	r22,r5,r2
 4000d5c:	0580310e 	bge	zero,r22,4000e24 <___vfprintf_internal_r+0x9a0>
 4000d60:	07000404 	movi	fp,16
 4000d64:	d8801f17 	ldw	r2,124(sp)
 4000d68:	e584140e 	bge	fp,r22,4001dbc <___vfprintf_internal_r+0x1938>
 4000d6c:	01410074 	movhi	r5,1025
 4000d70:	29407d84 	addi	r5,r5,502
 4000d74:	dc402915 	stw	r17,164(sp)
 4000d78:	d9402b15 	stw	r5,172(sp)
 4000d7c:	b023883a 	mov	r17,r22
 4000d80:	04c001c4 	movi	r19,7
 4000d84:	a82d883a 	mov	r22,r21
 4000d88:	902b883a 	mov	r21,r18
 4000d8c:	8025883a 	mov	r18,r16
 4000d90:	dc002c17 	ldw	r16,176(sp)
 4000d94:	00000306 	br	4000da4 <___vfprintf_internal_r+0x920>
 4000d98:	8c7ffc04 	addi	r17,r17,-16
 4000d9c:	42000204 	addi	r8,r8,8
 4000da0:	e440110e 	bge	fp,r17,4000de8 <___vfprintf_internal_r+0x964>
 4000da4:	18c00404 	addi	r3,r3,16
 4000da8:	10800044 	addi	r2,r2,1
 4000dac:	45000015 	stw	r20,0(r8)
 4000db0:	47000115 	stw	fp,4(r8)
 4000db4:	d8c02015 	stw	r3,128(sp)
 4000db8:	d8801f15 	stw	r2,124(sp)
 4000dbc:	98bff60e 	bge	r19,r2,4000d98 <__alt_data_end+0xfc000d98>
 4000dc0:	d9801e04 	addi	r6,sp,120
 4000dc4:	b80b883a 	mov	r5,r23
 4000dc8:	8009883a 	mov	r4,r16
 4000dcc:	4006f9c0 	call	4006f9c <__sprint_r>
 4000dd0:	103eae1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4000dd4:	8c7ffc04 	addi	r17,r17,-16
 4000dd8:	d8c02017 	ldw	r3,128(sp)
 4000ddc:	d8801f17 	ldw	r2,124(sp)
 4000de0:	da000404 	addi	r8,sp,16
 4000de4:	e47fef16 	blt	fp,r17,4000da4 <__alt_data_end+0xfc000da4>
 4000de8:	9021883a 	mov	r16,r18
 4000dec:	a825883a 	mov	r18,r21
 4000df0:	b02b883a 	mov	r21,r22
 4000df4:	882d883a 	mov	r22,r17
 4000df8:	dc402917 	ldw	r17,164(sp)
 4000dfc:	d9002b17 	ldw	r4,172(sp)
 4000e00:	1d87883a 	add	r3,r3,r22
 4000e04:	10800044 	addi	r2,r2,1
 4000e08:	41000015 	stw	r4,0(r8)
 4000e0c:	45800115 	stw	r22,4(r8)
 4000e10:	d8c02015 	stw	r3,128(sp)
 4000e14:	d8801f15 	stw	r2,124(sp)
 4000e18:	010001c4 	movi	r4,7
 4000e1c:	2081ee16 	blt	r4,r2,40015d8 <___vfprintf_internal_r+0x1154>
 4000e20:	42000204 	addi	r8,r8,8
 4000e24:	9080400c 	andi	r2,r18,256
 4000e28:	1001181e 	bne	r2,zero,400128c <___vfprintf_internal_r+0xe08>
 4000e2c:	d9402e17 	ldw	r5,184(sp)
 4000e30:	d8801f17 	ldw	r2,124(sp)
 4000e34:	44000015 	stw	r16,0(r8)
 4000e38:	1947883a 	add	r3,r3,r5
 4000e3c:	10800044 	addi	r2,r2,1
 4000e40:	41400115 	stw	r5,4(r8)
 4000e44:	d8c02015 	stw	r3,128(sp)
 4000e48:	d8801f15 	stw	r2,124(sp)
 4000e4c:	010001c4 	movi	r4,7
 4000e50:	2081d316 	blt	r4,r2,40015a0 <___vfprintf_internal_r+0x111c>
 4000e54:	42000204 	addi	r8,r8,8
 4000e58:	9480010c 	andi	r18,r18,4
 4000e5c:	90003226 	beq	r18,zero,4000f28 <___vfprintf_internal_r+0xaa4>
 4000e60:	d9403117 	ldw	r5,196(sp)
 4000e64:	d8802a17 	ldw	r2,168(sp)
 4000e68:	28a1c83a 	sub	r16,r5,r2
 4000e6c:	04002e0e 	bge	zero,r16,4000f28 <___vfprintf_internal_r+0xaa4>
 4000e70:	04400404 	movi	r17,16
 4000e74:	d8801f17 	ldw	r2,124(sp)
 4000e78:	8c04a20e 	bge	r17,r16,4002104 <___vfprintf_internal_r+0x1c80>
 4000e7c:	01410074 	movhi	r5,1025
 4000e80:	29408184 	addi	r5,r5,518
 4000e84:	d9403515 	stw	r5,212(sp)
 4000e88:	048001c4 	movi	r18,7
 4000e8c:	dcc02c17 	ldw	r19,176(sp)
 4000e90:	00000306 	br	4000ea0 <___vfprintf_internal_r+0xa1c>
 4000e94:	843ffc04 	addi	r16,r16,-16
 4000e98:	42000204 	addi	r8,r8,8
 4000e9c:	8c00130e 	bge	r17,r16,4000eec <___vfprintf_internal_r+0xa68>
 4000ea0:	01010074 	movhi	r4,1025
 4000ea4:	18c00404 	addi	r3,r3,16
 4000ea8:	10800044 	addi	r2,r2,1
 4000eac:	21008184 	addi	r4,r4,518
 4000eb0:	41000015 	stw	r4,0(r8)
 4000eb4:	44400115 	stw	r17,4(r8)
 4000eb8:	d8c02015 	stw	r3,128(sp)
 4000ebc:	d8801f15 	stw	r2,124(sp)
 4000ec0:	90bff40e 	bge	r18,r2,4000e94 <__alt_data_end+0xfc000e94>
 4000ec4:	d9801e04 	addi	r6,sp,120
 4000ec8:	b80b883a 	mov	r5,r23
 4000ecc:	9809883a 	mov	r4,r19
 4000ed0:	4006f9c0 	call	4006f9c <__sprint_r>
 4000ed4:	103e6d1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4000ed8:	843ffc04 	addi	r16,r16,-16
 4000edc:	d8c02017 	ldw	r3,128(sp)
 4000ee0:	d8801f17 	ldw	r2,124(sp)
 4000ee4:	da000404 	addi	r8,sp,16
 4000ee8:	8c3fed16 	blt	r17,r16,4000ea0 <__alt_data_end+0xfc000ea0>
 4000eec:	d9403517 	ldw	r5,212(sp)
 4000ef0:	1c07883a 	add	r3,r3,r16
 4000ef4:	10800044 	addi	r2,r2,1
 4000ef8:	41400015 	stw	r5,0(r8)
 4000efc:	44000115 	stw	r16,4(r8)
 4000f00:	d8c02015 	stw	r3,128(sp)
 4000f04:	d8801f15 	stw	r2,124(sp)
 4000f08:	010001c4 	movi	r4,7
 4000f0c:	2080060e 	bge	r4,r2,4000f28 <___vfprintf_internal_r+0xaa4>
 4000f10:	d9002c17 	ldw	r4,176(sp)
 4000f14:	d9801e04 	addi	r6,sp,120
 4000f18:	b80b883a 	mov	r5,r23
 4000f1c:	4006f9c0 	call	4006f9c <__sprint_r>
 4000f20:	103e5a1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4000f24:	d8c02017 	ldw	r3,128(sp)
 4000f28:	d8803117 	ldw	r2,196(sp)
 4000f2c:	d9002a17 	ldw	r4,168(sp)
 4000f30:	1100010e 	bge	r2,r4,4000f38 <___vfprintf_internal_r+0xab4>
 4000f34:	2005883a 	mov	r2,r4
 4000f38:	d9402f17 	ldw	r5,188(sp)
 4000f3c:	288b883a 	add	r5,r5,r2
 4000f40:	d9402f15 	stw	r5,188(sp)
 4000f44:	18019e1e 	bne	r3,zero,40015c0 <___vfprintf_internal_r+0x113c>
 4000f48:	a8800007 	ldb	r2,0(r21)
 4000f4c:	d8001f15 	stw	zero,124(sp)
 4000f50:	da000404 	addi	r8,sp,16
 4000f54:	103d851e 	bne	r2,zero,400056c <__alt_data_end+0xfc00056c>
 4000f58:	a821883a 	mov	r16,r21
 4000f5c:	003d9b06 	br	40005cc <__alt_data_end+0xfc0005cc>
 4000f60:	18c03fcc 	andi	r3,r3,255
 4000f64:	1805c11e 	bne	r3,zero,400266c <___vfprintf_internal_r+0x21e8>
 4000f68:	94800414 	ori	r18,r18,16
 4000f6c:	9080080c 	andi	r2,r18,32
 4000f70:	10020c26 	beq	r2,zero,40017a4 <___vfprintf_internal_r+0x1320>
 4000f74:	d8802d17 	ldw	r2,180(sp)
 4000f78:	d9002917 	ldw	r4,164(sp)
 4000f7c:	d8002785 	stb	zero,158(sp)
 4000f80:	10c00204 	addi	r3,r2,8
 4000f84:	14c00017 	ldw	r19,0(r2)
 4000f88:	15800117 	ldw	r22,4(r2)
 4000f8c:	20040f16 	blt	r4,zero,4001fcc <___vfprintf_internal_r+0x1b48>
 4000f90:	013fdfc4 	movi	r4,-129
 4000f94:	9d84b03a 	or	r2,r19,r22
 4000f98:	d8c02d15 	stw	r3,180(sp)
 4000f9c:	9124703a 	and	r18,r18,r4
 4000fa0:	0039883a 	mov	fp,zero
 4000fa4:	103e891e 	bne	r2,zero,40009cc <__alt_data_end+0xfc0009cc>
 4000fa8:	d9002917 	ldw	r4,164(sp)
 4000fac:	2002c11e 	bne	r4,zero,4001ab4 <___vfprintf_internal_r+0x1630>
 4000fb0:	d8002915 	stw	zero,164(sp)
 4000fb4:	d8002e15 	stw	zero,184(sp)
 4000fb8:	dc001e04 	addi	r16,sp,120
 4000fbc:	003ef806 	br	4000ba0 <__alt_data_end+0xfc000ba0>
 4000fc0:	18c03fcc 	andi	r3,r3,255
 4000fc4:	18059d1e 	bne	r3,zero,400263c <___vfprintf_internal_r+0x21b8>
 4000fc8:	01410074 	movhi	r5,1025
 4000fcc:	29407104 	addi	r5,r5,452
 4000fd0:	d9403915 	stw	r5,228(sp)
 4000fd4:	9080080c 	andi	r2,r18,32
 4000fd8:	10005226 	beq	r2,zero,4001124 <___vfprintf_internal_r+0xca0>
 4000fdc:	d8802d17 	ldw	r2,180(sp)
 4000fe0:	14c00017 	ldw	r19,0(r2)
 4000fe4:	15800117 	ldw	r22,4(r2)
 4000fe8:	10800204 	addi	r2,r2,8
 4000fec:	d8802d15 	stw	r2,180(sp)
 4000ff0:	9080004c 	andi	r2,r18,1
 4000ff4:	10019026 	beq	r2,zero,4001638 <___vfprintf_internal_r+0x11b4>
 4000ff8:	9d84b03a 	or	r2,r19,r22
 4000ffc:	10036926 	beq	r2,zero,4001da4 <___vfprintf_internal_r+0x1920>
 4001000:	d8c02917 	ldw	r3,164(sp)
 4001004:	00800c04 	movi	r2,48
 4001008:	d8802705 	stb	r2,156(sp)
 400100c:	dc402745 	stb	r17,157(sp)
 4001010:	d8002785 	stb	zero,158(sp)
 4001014:	90800094 	ori	r2,r18,2
 4001018:	18045d16 	blt	r3,zero,4002190 <___vfprintf_internal_r+0x1d0c>
 400101c:	00bfdfc4 	movi	r2,-129
 4001020:	90a4703a 	and	r18,r18,r2
 4001024:	94800094 	ori	r18,r18,2
 4001028:	0039883a 	mov	fp,zero
 400102c:	d9003917 	ldw	r4,228(sp)
 4001030:	dc001e04 	addi	r16,sp,120
 4001034:	988003cc 	andi	r2,r19,15
 4001038:	b006973a 	slli	r3,r22,28
 400103c:	2085883a 	add	r2,r4,r2
 4001040:	9826d13a 	srli	r19,r19,4
 4001044:	10800003 	ldbu	r2,0(r2)
 4001048:	b02cd13a 	srli	r22,r22,4
 400104c:	843fffc4 	addi	r16,r16,-1
 4001050:	1ce6b03a 	or	r19,r3,r19
 4001054:	80800005 	stb	r2,0(r16)
 4001058:	9d84b03a 	or	r2,r19,r22
 400105c:	103ff51e 	bne	r2,zero,4001034 <__alt_data_end+0xfc001034>
 4001060:	d8c02817 	ldw	r3,160(sp)
 4001064:	1c07c83a 	sub	r3,r3,r16
 4001068:	d8c02e15 	stw	r3,184(sp)
 400106c:	003ecc06 	br	4000ba0 <__alt_data_end+0xfc000ba0>
 4001070:	18c03fcc 	andi	r3,r3,255
 4001074:	183e9f26 	beq	r3,zero,4000af4 <__alt_data_end+0xfc000af4>
 4001078:	d9c02785 	stb	r7,158(sp)
 400107c:	003e9d06 	br	4000af4 <__alt_data_end+0xfc000af4>
 4001080:	00c00044 	movi	r3,1
 4001084:	01c00ac4 	movi	r7,43
 4001088:	ac400007 	ldb	r17,0(r21)
 400108c:	003d5e06 	br	4000608 <__alt_data_end+0xfc000608>
 4001090:	94800814 	ori	r18,r18,32
 4001094:	ac400007 	ldb	r17,0(r21)
 4001098:	003d5b06 	br	4000608 <__alt_data_end+0xfc000608>
 400109c:	d8c02d17 	ldw	r3,180(sp)
 40010a0:	d8002785 	stb	zero,158(sp)
 40010a4:	1c000017 	ldw	r16,0(r3)
 40010a8:	1cc00104 	addi	r19,r3,4
 40010ac:	80041926 	beq	r16,zero,4002114 <___vfprintf_internal_r+0x1c90>
 40010b0:	d9002917 	ldw	r4,164(sp)
 40010b4:	2003d016 	blt	r4,zero,4001ff8 <___vfprintf_internal_r+0x1b74>
 40010b8:	200d883a 	mov	r6,r4
 40010bc:	000b883a 	mov	r5,zero
 40010c0:	8009883a 	mov	r4,r16
 40010c4:	da003d15 	stw	r8,244(sp)
 40010c8:	40057d80 	call	40057d8 <memchr>
 40010cc:	da003d17 	ldw	r8,244(sp)
 40010d0:	10045426 	beq	r2,zero,4002224 <___vfprintf_internal_r+0x1da0>
 40010d4:	1405c83a 	sub	r2,r2,r16
 40010d8:	d8802e15 	stw	r2,184(sp)
 40010dc:	1003cc16 	blt	r2,zero,4002010 <___vfprintf_internal_r+0x1b8c>
 40010e0:	df002783 	ldbu	fp,158(sp)
 40010e4:	d8802a15 	stw	r2,168(sp)
 40010e8:	dcc02d15 	stw	r19,180(sp)
 40010ec:	d8002915 	stw	zero,164(sp)
 40010f0:	d8003215 	stw	zero,200(sp)
 40010f4:	003eb006 	br	4000bb8 <__alt_data_end+0xfc000bb8>
 40010f8:	18c03fcc 	andi	r3,r3,255
 40010fc:	183f9b26 	beq	r3,zero,4000f6c <__alt_data_end+0xfc000f6c>
 4001100:	d9c02785 	stb	r7,158(sp)
 4001104:	003f9906 	br	4000f6c <__alt_data_end+0xfc000f6c>
 4001108:	18c03fcc 	andi	r3,r3,255
 400110c:	1805551e 	bne	r3,zero,4002664 <___vfprintf_internal_r+0x21e0>
 4001110:	01410074 	movhi	r5,1025
 4001114:	29407604 	addi	r5,r5,472
 4001118:	d9403915 	stw	r5,228(sp)
 400111c:	9080080c 	andi	r2,r18,32
 4001120:	103fae1e 	bne	r2,zero,4000fdc <__alt_data_end+0xfc000fdc>
 4001124:	9080040c 	andi	r2,r18,16
 4001128:	1002de26 	beq	r2,zero,4001ca4 <___vfprintf_internal_r+0x1820>
 400112c:	d8c02d17 	ldw	r3,180(sp)
 4001130:	002d883a 	mov	r22,zero
 4001134:	1cc00017 	ldw	r19,0(r3)
 4001138:	18c00104 	addi	r3,r3,4
 400113c:	d8c02d15 	stw	r3,180(sp)
 4001140:	003fab06 	br	4000ff0 <__alt_data_end+0xfc000ff0>
 4001144:	38803fcc 	andi	r2,r7,255
 4001148:	1080201c 	xori	r2,r2,128
 400114c:	10bfe004 	addi	r2,r2,-128
 4001150:	1002d21e 	bne	r2,zero,4001c9c <___vfprintf_internal_r+0x1818>
 4001154:	00c00044 	movi	r3,1
 4001158:	01c00804 	movi	r7,32
 400115c:	ac400007 	ldb	r17,0(r21)
 4001160:	003d2906 	br	4000608 <__alt_data_end+0xfc000608>
 4001164:	94800054 	ori	r18,r18,1
 4001168:	ac400007 	ldb	r17,0(r21)
 400116c:	003d2606 	br	4000608 <__alt_data_end+0xfc000608>
 4001170:	18c03fcc 	andi	r3,r3,255
 4001174:	183e0526 	beq	r3,zero,400098c <__alt_data_end+0xfc00098c>
 4001178:	d9c02785 	stb	r7,158(sp)
 400117c:	003e0306 	br	400098c <__alt_data_end+0xfc00098c>
 4001180:	94801014 	ori	r18,r18,64
 4001184:	ac400007 	ldb	r17,0(r21)
 4001188:	003d1f06 	br	4000608 <__alt_data_end+0xfc000608>
 400118c:	ac400007 	ldb	r17,0(r21)
 4001190:	8a438726 	beq	r17,r9,4001fb0 <___vfprintf_internal_r+0x1b2c>
 4001194:	94800414 	ori	r18,r18,16
 4001198:	003d1b06 	br	4000608 <__alt_data_end+0xfc000608>
 400119c:	18c03fcc 	andi	r3,r3,255
 40011a0:	1805341e 	bne	r3,zero,4002674 <___vfprintf_internal_r+0x21f0>
 40011a4:	9080080c 	andi	r2,r18,32
 40011a8:	1002cd26 	beq	r2,zero,4001ce0 <___vfprintf_internal_r+0x185c>
 40011ac:	d9402d17 	ldw	r5,180(sp)
 40011b0:	d9002f17 	ldw	r4,188(sp)
 40011b4:	28800017 	ldw	r2,0(r5)
 40011b8:	2007d7fa 	srai	r3,r4,31
 40011bc:	29400104 	addi	r5,r5,4
 40011c0:	d9402d15 	stw	r5,180(sp)
 40011c4:	11000015 	stw	r4,0(r2)
 40011c8:	10c00115 	stw	r3,4(r2)
 40011cc:	003ce506 	br	4000564 <__alt_data_end+0xfc000564>
 40011d0:	d8c02d17 	ldw	r3,180(sp)
 40011d4:	d9002d17 	ldw	r4,180(sp)
 40011d8:	d8002785 	stb	zero,158(sp)
 40011dc:	18800017 	ldw	r2,0(r3)
 40011e0:	21000104 	addi	r4,r4,4
 40011e4:	00c00044 	movi	r3,1
 40011e8:	d8c02a15 	stw	r3,168(sp)
 40011ec:	d8801405 	stb	r2,80(sp)
 40011f0:	d9002d15 	stw	r4,180(sp)
 40011f4:	d8c02e15 	stw	r3,184(sp)
 40011f8:	d8002915 	stw	zero,164(sp)
 40011fc:	d8003215 	stw	zero,200(sp)
 4001200:	dc001404 	addi	r16,sp,80
 4001204:	0039883a 	mov	fp,zero
 4001208:	003e7206 	br	4000bd4 <__alt_data_end+0xfc000bd4>
 400120c:	01010074 	movhi	r4,1025
 4001210:	21007604 	addi	r4,r4,472
 4001214:	0039883a 	mov	fp,zero
 4001218:	d9003915 	stw	r4,228(sp)
 400121c:	04401e04 	movi	r17,120
 4001220:	003f8206 	br	400102c <__alt_data_end+0xfc00102c>
 4001224:	18c03fcc 	andi	r3,r3,255
 4001228:	1805061e 	bne	r3,zero,4002644 <___vfprintf_internal_r+0x21c0>
 400122c:	883d9126 	beq	r17,zero,4000874 <__alt_data_end+0xfc000874>
 4001230:	00c00044 	movi	r3,1
 4001234:	d8c02a15 	stw	r3,168(sp)
 4001238:	dc401405 	stb	r17,80(sp)
 400123c:	d8002785 	stb	zero,158(sp)
 4001240:	003fec06 	br	40011f4 <__alt_data_end+0xfc0011f4>
 4001244:	01410074 	movhi	r5,1025
 4001248:	29407604 	addi	r5,r5,472
 400124c:	d9403915 	stw	r5,228(sp)
 4001250:	d8c02d15 	stw	r3,180(sp)
 4001254:	1025883a 	mov	r18,r2
 4001258:	04401e04 	movi	r17,120
 400125c:	9d84b03a 	or	r2,r19,r22
 4001260:	1000fc1e 	bne	r2,zero,4001654 <___vfprintf_internal_r+0x11d0>
 4001264:	0039883a 	mov	fp,zero
 4001268:	00800084 	movi	r2,2
 400126c:	10803fcc 	andi	r2,r2,255
 4001270:	00c00044 	movi	r3,1
 4001274:	10c20f26 	beq	r2,r3,4001ab4 <___vfprintf_internal_r+0x1630>
 4001278:	00c00084 	movi	r3,2
 400127c:	10fd6326 	beq	r2,r3,400080c <__alt_data_end+0xfc00080c>
 4001280:	003e2d06 	br	4000b38 <__alt_data_end+0xfc000b38>
 4001284:	d8c02017 	ldw	r3,128(sp)
 4001288:	003e9306 	br	4000cd8 <__alt_data_end+0xfc000cd8>
 400128c:	00801944 	movi	r2,101
 4001290:	14407e0e 	bge	r2,r17,400148c <___vfprintf_internal_r+0x1008>
 4001294:	d9003617 	ldw	r4,216(sp)
 4001298:	d9403817 	ldw	r5,224(sp)
 400129c:	000d883a 	mov	r6,zero
 40012a0:	000f883a 	mov	r7,zero
 40012a4:	d8c03c15 	stw	r3,240(sp)
 40012a8:	da003d15 	stw	r8,244(sp)
 40012ac:	400b7900 	call	400b790 <__eqdf2>
 40012b0:	d8c03c17 	ldw	r3,240(sp)
 40012b4:	da003d17 	ldw	r8,244(sp)
 40012b8:	1000f71e 	bne	r2,zero,4001698 <___vfprintf_internal_r+0x1214>
 40012bc:	d8801f17 	ldw	r2,124(sp)
 40012c0:	01010074 	movhi	r4,1025
 40012c4:	21007d04 	addi	r4,r4,500
 40012c8:	18c00044 	addi	r3,r3,1
 40012cc:	10800044 	addi	r2,r2,1
 40012d0:	41000015 	stw	r4,0(r8)
 40012d4:	01000044 	movi	r4,1
 40012d8:	41000115 	stw	r4,4(r8)
 40012dc:	d8c02015 	stw	r3,128(sp)
 40012e0:	d8801f15 	stw	r2,124(sp)
 40012e4:	010001c4 	movi	r4,7
 40012e8:	2082b816 	blt	r4,r2,4001dcc <___vfprintf_internal_r+0x1948>
 40012ec:	42000204 	addi	r8,r8,8
 40012f0:	d8802617 	ldw	r2,152(sp)
 40012f4:	d9403317 	ldw	r5,204(sp)
 40012f8:	11400216 	blt	r2,r5,4001304 <___vfprintf_internal_r+0xe80>
 40012fc:	9080004c 	andi	r2,r18,1
 4001300:	103ed526 	beq	r2,zero,4000e58 <__alt_data_end+0xfc000e58>
 4001304:	d8803717 	ldw	r2,220(sp)
 4001308:	d9003417 	ldw	r4,208(sp)
 400130c:	d9403717 	ldw	r5,220(sp)
 4001310:	1887883a 	add	r3,r3,r2
 4001314:	d8801f17 	ldw	r2,124(sp)
 4001318:	41000015 	stw	r4,0(r8)
 400131c:	41400115 	stw	r5,4(r8)
 4001320:	10800044 	addi	r2,r2,1
 4001324:	d8c02015 	stw	r3,128(sp)
 4001328:	d8801f15 	stw	r2,124(sp)
 400132c:	010001c4 	movi	r4,7
 4001330:	20832916 	blt	r4,r2,4001fd8 <___vfprintf_internal_r+0x1b54>
 4001334:	42000204 	addi	r8,r8,8
 4001338:	d8803317 	ldw	r2,204(sp)
 400133c:	143fffc4 	addi	r16,r2,-1
 4001340:	043ec50e 	bge	zero,r16,4000e58 <__alt_data_end+0xfc000e58>
 4001344:	04400404 	movi	r17,16
 4001348:	d8801f17 	ldw	r2,124(sp)
 400134c:	8c00880e 	bge	r17,r16,4001570 <___vfprintf_internal_r+0x10ec>
 4001350:	01410074 	movhi	r5,1025
 4001354:	29407d84 	addi	r5,r5,502
 4001358:	d9402b15 	stw	r5,172(sp)
 400135c:	058001c4 	movi	r22,7
 4001360:	dcc02c17 	ldw	r19,176(sp)
 4001364:	00000306 	br	4001374 <___vfprintf_internal_r+0xef0>
 4001368:	42000204 	addi	r8,r8,8
 400136c:	843ffc04 	addi	r16,r16,-16
 4001370:	8c00820e 	bge	r17,r16,400157c <___vfprintf_internal_r+0x10f8>
 4001374:	18c00404 	addi	r3,r3,16
 4001378:	10800044 	addi	r2,r2,1
 400137c:	45000015 	stw	r20,0(r8)
 4001380:	44400115 	stw	r17,4(r8)
 4001384:	d8c02015 	stw	r3,128(sp)
 4001388:	d8801f15 	stw	r2,124(sp)
 400138c:	b0bff60e 	bge	r22,r2,4001368 <__alt_data_end+0xfc001368>
 4001390:	d9801e04 	addi	r6,sp,120
 4001394:	b80b883a 	mov	r5,r23
 4001398:	9809883a 	mov	r4,r19
 400139c:	4006f9c0 	call	4006f9c <__sprint_r>
 40013a0:	103d3a1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40013a4:	d8c02017 	ldw	r3,128(sp)
 40013a8:	d8801f17 	ldw	r2,124(sp)
 40013ac:	da000404 	addi	r8,sp,16
 40013b0:	003fee06 	br	400136c <__alt_data_end+0xfc00136c>
 40013b4:	d9403117 	ldw	r5,196(sp)
 40013b8:	d8802a17 	ldw	r2,168(sp)
 40013bc:	28adc83a 	sub	r22,r5,r2
 40013c0:	05be630e 	bge	zero,r22,4000d50 <__alt_data_end+0xfc000d50>
 40013c4:	07000404 	movi	fp,16
 40013c8:	d8801f17 	ldw	r2,124(sp)
 40013cc:	e5838f0e 	bge	fp,r22,400220c <___vfprintf_internal_r+0x1d88>
 40013d0:	01410074 	movhi	r5,1025
 40013d4:	29407d84 	addi	r5,r5,502
 40013d8:	dc403015 	stw	r17,192(sp)
 40013dc:	d9402b15 	stw	r5,172(sp)
 40013e0:	b023883a 	mov	r17,r22
 40013e4:	04c001c4 	movi	r19,7
 40013e8:	a82d883a 	mov	r22,r21
 40013ec:	902b883a 	mov	r21,r18
 40013f0:	8025883a 	mov	r18,r16
 40013f4:	dc002c17 	ldw	r16,176(sp)
 40013f8:	00000306 	br	4001408 <___vfprintf_internal_r+0xf84>
 40013fc:	8c7ffc04 	addi	r17,r17,-16
 4001400:	42000204 	addi	r8,r8,8
 4001404:	e440110e 	bge	fp,r17,400144c <___vfprintf_internal_r+0xfc8>
 4001408:	18c00404 	addi	r3,r3,16
 400140c:	10800044 	addi	r2,r2,1
 4001410:	45000015 	stw	r20,0(r8)
 4001414:	47000115 	stw	fp,4(r8)
 4001418:	d8c02015 	stw	r3,128(sp)
 400141c:	d8801f15 	stw	r2,124(sp)
 4001420:	98bff60e 	bge	r19,r2,40013fc <__alt_data_end+0xfc0013fc>
 4001424:	d9801e04 	addi	r6,sp,120
 4001428:	b80b883a 	mov	r5,r23
 400142c:	8009883a 	mov	r4,r16
 4001430:	4006f9c0 	call	4006f9c <__sprint_r>
 4001434:	103d151e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001438:	8c7ffc04 	addi	r17,r17,-16
 400143c:	d8c02017 	ldw	r3,128(sp)
 4001440:	d8801f17 	ldw	r2,124(sp)
 4001444:	da000404 	addi	r8,sp,16
 4001448:	e47fef16 	blt	fp,r17,4001408 <__alt_data_end+0xfc001408>
 400144c:	9021883a 	mov	r16,r18
 4001450:	a825883a 	mov	r18,r21
 4001454:	b02b883a 	mov	r21,r22
 4001458:	882d883a 	mov	r22,r17
 400145c:	dc403017 	ldw	r17,192(sp)
 4001460:	d9002b17 	ldw	r4,172(sp)
 4001464:	1d87883a 	add	r3,r3,r22
 4001468:	10800044 	addi	r2,r2,1
 400146c:	41000015 	stw	r4,0(r8)
 4001470:	45800115 	stw	r22,4(r8)
 4001474:	d8c02015 	stw	r3,128(sp)
 4001478:	d8801f15 	stw	r2,124(sp)
 400147c:	010001c4 	movi	r4,7
 4001480:	20818e16 	blt	r4,r2,4001abc <___vfprintf_internal_r+0x1638>
 4001484:	42000204 	addi	r8,r8,8
 4001488:	003e3106 	br	4000d50 <__alt_data_end+0xfc000d50>
 400148c:	d9403317 	ldw	r5,204(sp)
 4001490:	00800044 	movi	r2,1
 4001494:	18c00044 	addi	r3,r3,1
 4001498:	1141530e 	bge	r2,r5,40019e8 <___vfprintf_internal_r+0x1564>
 400149c:	dc401f17 	ldw	r17,124(sp)
 40014a0:	00800044 	movi	r2,1
 40014a4:	40800115 	stw	r2,4(r8)
 40014a8:	8c400044 	addi	r17,r17,1
 40014ac:	44000015 	stw	r16,0(r8)
 40014b0:	d8c02015 	stw	r3,128(sp)
 40014b4:	dc401f15 	stw	r17,124(sp)
 40014b8:	008001c4 	movi	r2,7
 40014bc:	14416b16 	blt	r2,r17,4001a6c <___vfprintf_internal_r+0x15e8>
 40014c0:	42000204 	addi	r8,r8,8
 40014c4:	d8803717 	ldw	r2,220(sp)
 40014c8:	d9003417 	ldw	r4,208(sp)
 40014cc:	8c400044 	addi	r17,r17,1
 40014d0:	10c7883a 	add	r3,r2,r3
 40014d4:	40800115 	stw	r2,4(r8)
 40014d8:	41000015 	stw	r4,0(r8)
 40014dc:	d8c02015 	stw	r3,128(sp)
 40014e0:	dc401f15 	stw	r17,124(sp)
 40014e4:	008001c4 	movi	r2,7
 40014e8:	14416916 	blt	r2,r17,4001a90 <___vfprintf_internal_r+0x160c>
 40014ec:	45800204 	addi	r22,r8,8
 40014f0:	d9003617 	ldw	r4,216(sp)
 40014f4:	d9403817 	ldw	r5,224(sp)
 40014f8:	000d883a 	mov	r6,zero
 40014fc:	000f883a 	mov	r7,zero
 4001500:	d8c03c15 	stw	r3,240(sp)
 4001504:	400b7900 	call	400b790 <__eqdf2>
 4001508:	d8c03c17 	ldw	r3,240(sp)
 400150c:	1000bc26 	beq	r2,zero,4001800 <___vfprintf_internal_r+0x137c>
 4001510:	d9403317 	ldw	r5,204(sp)
 4001514:	84000044 	addi	r16,r16,1
 4001518:	8c400044 	addi	r17,r17,1
 400151c:	28bfffc4 	addi	r2,r5,-1
 4001520:	1887883a 	add	r3,r3,r2
 4001524:	b0800115 	stw	r2,4(r22)
 4001528:	b4000015 	stw	r16,0(r22)
 400152c:	d8c02015 	stw	r3,128(sp)
 4001530:	dc401f15 	stw	r17,124(sp)
 4001534:	008001c4 	movi	r2,7
 4001538:	14414316 	blt	r2,r17,4001a48 <___vfprintf_internal_r+0x15c4>
 400153c:	b5800204 	addi	r22,r22,8
 4001540:	d9003a17 	ldw	r4,232(sp)
 4001544:	df0022c4 	addi	fp,sp,139
 4001548:	8c400044 	addi	r17,r17,1
 400154c:	20c7883a 	add	r3,r4,r3
 4001550:	b7000015 	stw	fp,0(r22)
 4001554:	b1000115 	stw	r4,4(r22)
 4001558:	d8c02015 	stw	r3,128(sp)
 400155c:	dc401f15 	stw	r17,124(sp)
 4001560:	008001c4 	movi	r2,7
 4001564:	14400e16 	blt	r2,r17,40015a0 <___vfprintf_internal_r+0x111c>
 4001568:	b2000204 	addi	r8,r22,8
 400156c:	003e3a06 	br	4000e58 <__alt_data_end+0xfc000e58>
 4001570:	01010074 	movhi	r4,1025
 4001574:	21007d84 	addi	r4,r4,502
 4001578:	d9002b15 	stw	r4,172(sp)
 400157c:	d9002b17 	ldw	r4,172(sp)
 4001580:	1c07883a 	add	r3,r3,r16
 4001584:	44000115 	stw	r16,4(r8)
 4001588:	41000015 	stw	r4,0(r8)
 400158c:	10800044 	addi	r2,r2,1
 4001590:	d8c02015 	stw	r3,128(sp)
 4001594:	d8801f15 	stw	r2,124(sp)
 4001598:	010001c4 	movi	r4,7
 400159c:	20be2d0e 	bge	r4,r2,4000e54 <__alt_data_end+0xfc000e54>
 40015a0:	d9002c17 	ldw	r4,176(sp)
 40015a4:	d9801e04 	addi	r6,sp,120
 40015a8:	b80b883a 	mov	r5,r23
 40015ac:	4006f9c0 	call	4006f9c <__sprint_r>
 40015b0:	103cb61e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40015b4:	d8c02017 	ldw	r3,128(sp)
 40015b8:	da000404 	addi	r8,sp,16
 40015bc:	003e2606 	br	4000e58 <__alt_data_end+0xfc000e58>
 40015c0:	d9002c17 	ldw	r4,176(sp)
 40015c4:	d9801e04 	addi	r6,sp,120
 40015c8:	b80b883a 	mov	r5,r23
 40015cc:	4006f9c0 	call	4006f9c <__sprint_r>
 40015d0:	103e5d26 	beq	r2,zero,4000f48 <__alt_data_end+0xfc000f48>
 40015d4:	003cad06 	br	400088c <__alt_data_end+0xfc00088c>
 40015d8:	d9002c17 	ldw	r4,176(sp)
 40015dc:	d9801e04 	addi	r6,sp,120
 40015e0:	b80b883a 	mov	r5,r23
 40015e4:	4006f9c0 	call	4006f9c <__sprint_r>
 40015e8:	103ca81e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40015ec:	d8c02017 	ldw	r3,128(sp)
 40015f0:	da000404 	addi	r8,sp,16
 40015f4:	003e0b06 	br	4000e24 <__alt_data_end+0xfc000e24>
 40015f8:	d9002c17 	ldw	r4,176(sp)
 40015fc:	d9801e04 	addi	r6,sp,120
 4001600:	b80b883a 	mov	r5,r23
 4001604:	4006f9c0 	call	4006f9c <__sprint_r>
 4001608:	103ca01e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 400160c:	d8c02017 	ldw	r3,128(sp)
 4001610:	da000404 	addi	r8,sp,16
 4001614:	003dbd06 	br	4000d0c <__alt_data_end+0xfc000d0c>
 4001618:	d9002c17 	ldw	r4,176(sp)
 400161c:	d9801e04 	addi	r6,sp,120
 4001620:	b80b883a 	mov	r5,r23
 4001624:	4006f9c0 	call	4006f9c <__sprint_r>
 4001628:	103c981e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 400162c:	d8c02017 	ldw	r3,128(sp)
 4001630:	da000404 	addi	r8,sp,16
 4001634:	003dc306 	br	4000d44 <__alt_data_end+0xfc000d44>
 4001638:	d8802917 	ldw	r2,164(sp)
 400163c:	d8002785 	stb	zero,158(sp)
 4001640:	103f0616 	blt	r2,zero,400125c <__alt_data_end+0xfc00125c>
 4001644:	00ffdfc4 	movi	r3,-129
 4001648:	9d84b03a 	or	r2,r19,r22
 400164c:	90e4703a 	and	r18,r18,r3
 4001650:	103c6b26 	beq	r2,zero,4000800 <__alt_data_end+0xfc000800>
 4001654:	0039883a 	mov	fp,zero
 4001658:	003e7406 	br	400102c <__alt_data_end+0xfc00102c>
 400165c:	9080040c 	andi	r2,r18,16
 4001660:	1001b326 	beq	r2,zero,4001d30 <___vfprintf_internal_r+0x18ac>
 4001664:	d9002d17 	ldw	r4,180(sp)
 4001668:	d9402917 	ldw	r5,164(sp)
 400166c:	d8002785 	stb	zero,158(sp)
 4001670:	20800104 	addi	r2,r4,4
 4001674:	24c00017 	ldw	r19,0(r4)
 4001678:	002d883a 	mov	r22,zero
 400167c:	2801b516 	blt	r5,zero,4001d54 <___vfprintf_internal_r+0x18d0>
 4001680:	00ffdfc4 	movi	r3,-129
 4001684:	d8802d15 	stw	r2,180(sp)
 4001688:	90e4703a 	and	r18,r18,r3
 400168c:	983d2726 	beq	r19,zero,4000b2c <__alt_data_end+0xfc000b2c>
 4001690:	0039883a 	mov	fp,zero
 4001694:	003d2a06 	br	4000b40 <__alt_data_end+0xfc000b40>
 4001698:	dc402617 	ldw	r17,152(sp)
 400169c:	0441d30e 	bge	zero,r17,4001dec <___vfprintf_internal_r+0x1968>
 40016a0:	dc403217 	ldw	r17,200(sp)
 40016a4:	d8803317 	ldw	r2,204(sp)
 40016a8:	1440010e 	bge	r2,r17,40016b0 <___vfprintf_internal_r+0x122c>
 40016ac:	1023883a 	mov	r17,r2
 40016b0:	04400a0e 	bge	zero,r17,40016dc <___vfprintf_internal_r+0x1258>
 40016b4:	d8801f17 	ldw	r2,124(sp)
 40016b8:	1c47883a 	add	r3,r3,r17
 40016bc:	44000015 	stw	r16,0(r8)
 40016c0:	10800044 	addi	r2,r2,1
 40016c4:	44400115 	stw	r17,4(r8)
 40016c8:	d8c02015 	stw	r3,128(sp)
 40016cc:	d8801f15 	stw	r2,124(sp)
 40016d0:	010001c4 	movi	r4,7
 40016d4:	20826516 	blt	r4,r2,400206c <___vfprintf_internal_r+0x1be8>
 40016d8:	42000204 	addi	r8,r8,8
 40016dc:	88026116 	blt	r17,zero,4002064 <___vfprintf_internal_r+0x1be0>
 40016e0:	d9003217 	ldw	r4,200(sp)
 40016e4:	2463c83a 	sub	r17,r4,r17
 40016e8:	04407b0e 	bge	zero,r17,40018d8 <___vfprintf_internal_r+0x1454>
 40016ec:	05800404 	movi	r22,16
 40016f0:	d8801f17 	ldw	r2,124(sp)
 40016f4:	b4419d0e 	bge	r22,r17,4001d6c <___vfprintf_internal_r+0x18e8>
 40016f8:	01010074 	movhi	r4,1025
 40016fc:	21007d84 	addi	r4,r4,502
 4001700:	d9002b15 	stw	r4,172(sp)
 4001704:	070001c4 	movi	fp,7
 4001708:	dcc02c17 	ldw	r19,176(sp)
 400170c:	00000306 	br	400171c <___vfprintf_internal_r+0x1298>
 4001710:	42000204 	addi	r8,r8,8
 4001714:	8c7ffc04 	addi	r17,r17,-16
 4001718:	b441970e 	bge	r22,r17,4001d78 <___vfprintf_internal_r+0x18f4>
 400171c:	18c00404 	addi	r3,r3,16
 4001720:	10800044 	addi	r2,r2,1
 4001724:	45000015 	stw	r20,0(r8)
 4001728:	45800115 	stw	r22,4(r8)
 400172c:	d8c02015 	stw	r3,128(sp)
 4001730:	d8801f15 	stw	r2,124(sp)
 4001734:	e0bff60e 	bge	fp,r2,4001710 <__alt_data_end+0xfc001710>
 4001738:	d9801e04 	addi	r6,sp,120
 400173c:	b80b883a 	mov	r5,r23
 4001740:	9809883a 	mov	r4,r19
 4001744:	4006f9c0 	call	4006f9c <__sprint_r>
 4001748:	103c501e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 400174c:	d8c02017 	ldw	r3,128(sp)
 4001750:	d8801f17 	ldw	r2,124(sp)
 4001754:	da000404 	addi	r8,sp,16
 4001758:	003fee06 	br	4001714 <__alt_data_end+0xfc001714>
 400175c:	d9002c17 	ldw	r4,176(sp)
 4001760:	d9801e04 	addi	r6,sp,120
 4001764:	b80b883a 	mov	r5,r23
 4001768:	4006f9c0 	call	4006f9c <__sprint_r>
 400176c:	103c471e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001770:	d8c02017 	ldw	r3,128(sp)
 4001774:	df002787 	ldb	fp,158(sp)
 4001778:	da000404 	addi	r8,sp,16
 400177c:	003d5606 	br	4000cd8 <__alt_data_end+0xfc000cd8>
 4001780:	9080040c 	andi	r2,r18,16
 4001784:	10016126 	beq	r2,zero,4001d0c <___vfprintf_internal_r+0x1888>
 4001788:	d8802d17 	ldw	r2,180(sp)
 400178c:	14c00017 	ldw	r19,0(r2)
 4001790:	10800104 	addi	r2,r2,4
 4001794:	d8802d15 	stw	r2,180(sp)
 4001798:	982dd7fa 	srai	r22,r19,31
 400179c:	b005883a 	mov	r2,r22
 40017a0:	003c8206 	br	40009ac <__alt_data_end+0xfc0009ac>
 40017a4:	9080040c 	andi	r2,r18,16
 40017a8:	10003526 	beq	r2,zero,4001880 <___vfprintf_internal_r+0x13fc>
 40017ac:	d9402d17 	ldw	r5,180(sp)
 40017b0:	d8c02917 	ldw	r3,164(sp)
 40017b4:	d8002785 	stb	zero,158(sp)
 40017b8:	28800104 	addi	r2,r5,4
 40017bc:	2cc00017 	ldw	r19,0(r5)
 40017c0:	002d883a 	mov	r22,zero
 40017c4:	18003716 	blt	r3,zero,40018a4 <___vfprintf_internal_r+0x1420>
 40017c8:	00ffdfc4 	movi	r3,-129
 40017cc:	d8802d15 	stw	r2,180(sp)
 40017d0:	90e4703a 	and	r18,r18,r3
 40017d4:	0039883a 	mov	fp,zero
 40017d8:	983df326 	beq	r19,zero,4000fa8 <__alt_data_end+0xfc000fa8>
 40017dc:	00800244 	movi	r2,9
 40017e0:	14fc7b36 	bltu	r2,r19,40009d0 <__alt_data_end+0xfc0009d0>
 40017e4:	d8c02817 	ldw	r3,160(sp)
 40017e8:	dc001dc4 	addi	r16,sp,119
 40017ec:	9cc00c04 	addi	r19,r19,48
 40017f0:	1c07c83a 	sub	r3,r3,r16
 40017f4:	dcc01dc5 	stb	r19,119(sp)
 40017f8:	d8c02e15 	stw	r3,184(sp)
 40017fc:	003ce806 	br	4000ba0 <__alt_data_end+0xfc000ba0>
 4001800:	d8803317 	ldw	r2,204(sp)
 4001804:	143fffc4 	addi	r16,r2,-1
 4001808:	043f4d0e 	bge	zero,r16,4001540 <__alt_data_end+0xfc001540>
 400180c:	07000404 	movi	fp,16
 4001810:	e400810e 	bge	fp,r16,4001a18 <___vfprintf_internal_r+0x1594>
 4001814:	01410074 	movhi	r5,1025
 4001818:	29407d84 	addi	r5,r5,502
 400181c:	d9402b15 	stw	r5,172(sp)
 4001820:	01c001c4 	movi	r7,7
 4001824:	dcc02c17 	ldw	r19,176(sp)
 4001828:	00000306 	br	4001838 <___vfprintf_internal_r+0x13b4>
 400182c:	b5800204 	addi	r22,r22,8
 4001830:	843ffc04 	addi	r16,r16,-16
 4001834:	e4007b0e 	bge	fp,r16,4001a24 <___vfprintf_internal_r+0x15a0>
 4001838:	18c00404 	addi	r3,r3,16
 400183c:	8c400044 	addi	r17,r17,1
 4001840:	b5000015 	stw	r20,0(r22)
 4001844:	b7000115 	stw	fp,4(r22)
 4001848:	d8c02015 	stw	r3,128(sp)
 400184c:	dc401f15 	stw	r17,124(sp)
 4001850:	3c7ff60e 	bge	r7,r17,400182c <__alt_data_end+0xfc00182c>
 4001854:	d9801e04 	addi	r6,sp,120
 4001858:	b80b883a 	mov	r5,r23
 400185c:	9809883a 	mov	r4,r19
 4001860:	d9c03c15 	stw	r7,240(sp)
 4001864:	4006f9c0 	call	4006f9c <__sprint_r>
 4001868:	d9c03c17 	ldw	r7,240(sp)
 400186c:	103c071e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001870:	d8c02017 	ldw	r3,128(sp)
 4001874:	dc401f17 	ldw	r17,124(sp)
 4001878:	dd800404 	addi	r22,sp,16
 400187c:	003fec06 	br	4001830 <__alt_data_end+0xfc001830>
 4001880:	9080100c 	andi	r2,r18,64
 4001884:	d8002785 	stb	zero,158(sp)
 4001888:	10010e26 	beq	r2,zero,4001cc4 <___vfprintf_internal_r+0x1840>
 400188c:	d9002d17 	ldw	r4,180(sp)
 4001890:	d9402917 	ldw	r5,164(sp)
 4001894:	002d883a 	mov	r22,zero
 4001898:	20800104 	addi	r2,r4,4
 400189c:	24c0000b 	ldhu	r19,0(r4)
 40018a0:	283fc90e 	bge	r5,zero,40017c8 <__alt_data_end+0xfc0017c8>
 40018a4:	d8802d15 	stw	r2,180(sp)
 40018a8:	0039883a 	mov	fp,zero
 40018ac:	9d84b03a 	or	r2,r19,r22
 40018b0:	103c461e 	bne	r2,zero,40009cc <__alt_data_end+0xfc0009cc>
 40018b4:	00800044 	movi	r2,1
 40018b8:	003e6c06 	br	400126c <__alt_data_end+0xfc00126c>
 40018bc:	d9002c17 	ldw	r4,176(sp)
 40018c0:	d9801e04 	addi	r6,sp,120
 40018c4:	b80b883a 	mov	r5,r23
 40018c8:	4006f9c0 	call	4006f9c <__sprint_r>
 40018cc:	103bef1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40018d0:	d8c02017 	ldw	r3,128(sp)
 40018d4:	da000404 	addi	r8,sp,16
 40018d8:	d9003217 	ldw	r4,200(sp)
 40018dc:	d8802617 	ldw	r2,152(sp)
 40018e0:	d9403317 	ldw	r5,204(sp)
 40018e4:	8123883a 	add	r17,r16,r4
 40018e8:	11400216 	blt	r2,r5,40018f4 <___vfprintf_internal_r+0x1470>
 40018ec:	9100004c 	andi	r4,r18,1
 40018f0:	20000d26 	beq	r4,zero,4001928 <___vfprintf_internal_r+0x14a4>
 40018f4:	d9003717 	ldw	r4,220(sp)
 40018f8:	d9403417 	ldw	r5,208(sp)
 40018fc:	1907883a 	add	r3,r3,r4
 4001900:	d9001f17 	ldw	r4,124(sp)
 4001904:	41400015 	stw	r5,0(r8)
 4001908:	d9403717 	ldw	r5,220(sp)
 400190c:	21000044 	addi	r4,r4,1
 4001910:	d8c02015 	stw	r3,128(sp)
 4001914:	41400115 	stw	r5,4(r8)
 4001918:	d9001f15 	stw	r4,124(sp)
 400191c:	014001c4 	movi	r5,7
 4001920:	2901e816 	blt	r5,r4,40020c4 <___vfprintf_internal_r+0x1c40>
 4001924:	42000204 	addi	r8,r8,8
 4001928:	d9003317 	ldw	r4,204(sp)
 400192c:	8121883a 	add	r16,r16,r4
 4001930:	2085c83a 	sub	r2,r4,r2
 4001934:	8461c83a 	sub	r16,r16,r17
 4001938:	1400010e 	bge	r2,r16,4001940 <___vfprintf_internal_r+0x14bc>
 400193c:	1021883a 	mov	r16,r2
 4001940:	04000a0e 	bge	zero,r16,400196c <___vfprintf_internal_r+0x14e8>
 4001944:	d9001f17 	ldw	r4,124(sp)
 4001948:	1c07883a 	add	r3,r3,r16
 400194c:	44400015 	stw	r17,0(r8)
 4001950:	21000044 	addi	r4,r4,1
 4001954:	44000115 	stw	r16,4(r8)
 4001958:	d8c02015 	stw	r3,128(sp)
 400195c:	d9001f15 	stw	r4,124(sp)
 4001960:	014001c4 	movi	r5,7
 4001964:	2901fb16 	blt	r5,r4,4002154 <___vfprintf_internal_r+0x1cd0>
 4001968:	42000204 	addi	r8,r8,8
 400196c:	8001f716 	blt	r16,zero,400214c <___vfprintf_internal_r+0x1cc8>
 4001970:	1421c83a 	sub	r16,r2,r16
 4001974:	043d380e 	bge	zero,r16,4000e58 <__alt_data_end+0xfc000e58>
 4001978:	04400404 	movi	r17,16
 400197c:	d8801f17 	ldw	r2,124(sp)
 4001980:	8c3efb0e 	bge	r17,r16,4001570 <__alt_data_end+0xfc001570>
 4001984:	01410074 	movhi	r5,1025
 4001988:	29407d84 	addi	r5,r5,502
 400198c:	d9402b15 	stw	r5,172(sp)
 4001990:	058001c4 	movi	r22,7
 4001994:	dcc02c17 	ldw	r19,176(sp)
 4001998:	00000306 	br	40019a8 <___vfprintf_internal_r+0x1524>
 400199c:	42000204 	addi	r8,r8,8
 40019a0:	843ffc04 	addi	r16,r16,-16
 40019a4:	8c3ef50e 	bge	r17,r16,400157c <__alt_data_end+0xfc00157c>
 40019a8:	18c00404 	addi	r3,r3,16
 40019ac:	10800044 	addi	r2,r2,1
 40019b0:	45000015 	stw	r20,0(r8)
 40019b4:	44400115 	stw	r17,4(r8)
 40019b8:	d8c02015 	stw	r3,128(sp)
 40019bc:	d8801f15 	stw	r2,124(sp)
 40019c0:	b0bff60e 	bge	r22,r2,400199c <__alt_data_end+0xfc00199c>
 40019c4:	d9801e04 	addi	r6,sp,120
 40019c8:	b80b883a 	mov	r5,r23
 40019cc:	9809883a 	mov	r4,r19
 40019d0:	4006f9c0 	call	4006f9c <__sprint_r>
 40019d4:	103bad1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40019d8:	d8c02017 	ldw	r3,128(sp)
 40019dc:	d8801f17 	ldw	r2,124(sp)
 40019e0:	da000404 	addi	r8,sp,16
 40019e4:	003fee06 	br	40019a0 <__alt_data_end+0xfc0019a0>
 40019e8:	9088703a 	and	r4,r18,r2
 40019ec:	203eab1e 	bne	r4,zero,400149c <__alt_data_end+0xfc00149c>
 40019f0:	dc401f17 	ldw	r17,124(sp)
 40019f4:	40800115 	stw	r2,4(r8)
 40019f8:	44000015 	stw	r16,0(r8)
 40019fc:	8c400044 	addi	r17,r17,1
 4001a00:	d8c02015 	stw	r3,128(sp)
 4001a04:	dc401f15 	stw	r17,124(sp)
 4001a08:	008001c4 	movi	r2,7
 4001a0c:	14400e16 	blt	r2,r17,4001a48 <___vfprintf_internal_r+0x15c4>
 4001a10:	45800204 	addi	r22,r8,8
 4001a14:	003eca06 	br	4001540 <__alt_data_end+0xfc001540>
 4001a18:	01010074 	movhi	r4,1025
 4001a1c:	21007d84 	addi	r4,r4,502
 4001a20:	d9002b15 	stw	r4,172(sp)
 4001a24:	d8802b17 	ldw	r2,172(sp)
 4001a28:	1c07883a 	add	r3,r3,r16
 4001a2c:	8c400044 	addi	r17,r17,1
 4001a30:	b0800015 	stw	r2,0(r22)
 4001a34:	b4000115 	stw	r16,4(r22)
 4001a38:	d8c02015 	stw	r3,128(sp)
 4001a3c:	dc401f15 	stw	r17,124(sp)
 4001a40:	008001c4 	movi	r2,7
 4001a44:	147ebd0e 	bge	r2,r17,400153c <__alt_data_end+0xfc00153c>
 4001a48:	d9002c17 	ldw	r4,176(sp)
 4001a4c:	d9801e04 	addi	r6,sp,120
 4001a50:	b80b883a 	mov	r5,r23
 4001a54:	4006f9c0 	call	4006f9c <__sprint_r>
 4001a58:	103b8c1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001a5c:	d8c02017 	ldw	r3,128(sp)
 4001a60:	dc401f17 	ldw	r17,124(sp)
 4001a64:	dd800404 	addi	r22,sp,16
 4001a68:	003eb506 	br	4001540 <__alt_data_end+0xfc001540>
 4001a6c:	d9002c17 	ldw	r4,176(sp)
 4001a70:	d9801e04 	addi	r6,sp,120
 4001a74:	b80b883a 	mov	r5,r23
 4001a78:	4006f9c0 	call	4006f9c <__sprint_r>
 4001a7c:	103b831e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001a80:	d8c02017 	ldw	r3,128(sp)
 4001a84:	dc401f17 	ldw	r17,124(sp)
 4001a88:	da000404 	addi	r8,sp,16
 4001a8c:	003e8d06 	br	40014c4 <__alt_data_end+0xfc0014c4>
 4001a90:	d9002c17 	ldw	r4,176(sp)
 4001a94:	d9801e04 	addi	r6,sp,120
 4001a98:	b80b883a 	mov	r5,r23
 4001a9c:	4006f9c0 	call	4006f9c <__sprint_r>
 4001aa0:	103b7a1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001aa4:	d8c02017 	ldw	r3,128(sp)
 4001aa8:	dc401f17 	ldw	r17,124(sp)
 4001aac:	dd800404 	addi	r22,sp,16
 4001ab0:	003e8f06 	br	40014f0 <__alt_data_end+0xfc0014f0>
 4001ab4:	0027883a 	mov	r19,zero
 4001ab8:	003f4a06 	br	40017e4 <__alt_data_end+0xfc0017e4>
 4001abc:	d9002c17 	ldw	r4,176(sp)
 4001ac0:	d9801e04 	addi	r6,sp,120
 4001ac4:	b80b883a 	mov	r5,r23
 4001ac8:	4006f9c0 	call	4006f9c <__sprint_r>
 4001acc:	103b6f1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001ad0:	d8c02017 	ldw	r3,128(sp)
 4001ad4:	da000404 	addi	r8,sp,16
 4001ad8:	003c9d06 	br	4000d50 <__alt_data_end+0xfc000d50>
 4001adc:	04e7c83a 	sub	r19,zero,r19
 4001ae0:	9804c03a 	cmpne	r2,r19,zero
 4001ae4:	05adc83a 	sub	r22,zero,r22
 4001ae8:	b0adc83a 	sub	r22,r22,r2
 4001aec:	d8802917 	ldw	r2,164(sp)
 4001af0:	07000b44 	movi	fp,45
 4001af4:	df002785 	stb	fp,158(sp)
 4001af8:	10017b16 	blt	r2,zero,40020e8 <___vfprintf_internal_r+0x1c64>
 4001afc:	00bfdfc4 	movi	r2,-129
 4001b00:	90a4703a 	and	r18,r18,r2
 4001b04:	003bb106 	br	40009cc <__alt_data_end+0xfc0009cc>
 4001b08:	d9003617 	ldw	r4,216(sp)
 4001b0c:	d9403817 	ldw	r5,224(sp)
 4001b10:	da003d15 	stw	r8,244(sp)
 4001b14:	4006b280 	call	4006b28 <__fpclassifyd>
 4001b18:	da003d17 	ldw	r8,244(sp)
 4001b1c:	1000f026 	beq	r2,zero,4001ee0 <___vfprintf_internal_r+0x1a5c>
 4001b20:	d9002917 	ldw	r4,164(sp)
 4001b24:	05bff7c4 	movi	r22,-33
 4001b28:	00bfffc4 	movi	r2,-1
 4001b2c:	8dac703a 	and	r22,r17,r22
 4001b30:	20820026 	beq	r4,r2,4002334 <___vfprintf_internal_r+0x1eb0>
 4001b34:	008011c4 	movi	r2,71
 4001b38:	b081f726 	beq	r22,r2,4002318 <___vfprintf_internal_r+0x1e94>
 4001b3c:	d9003817 	ldw	r4,224(sp)
 4001b40:	90c04014 	ori	r3,r18,256
 4001b44:	d8c02b15 	stw	r3,172(sp)
 4001b48:	20021516 	blt	r4,zero,40023a0 <___vfprintf_internal_r+0x1f1c>
 4001b4c:	dcc03817 	ldw	r19,224(sp)
 4001b50:	d8002a05 	stb	zero,168(sp)
 4001b54:	00801984 	movi	r2,102
 4001b58:	8881f926 	beq	r17,r2,4002340 <___vfprintf_internal_r+0x1ebc>
 4001b5c:	00801184 	movi	r2,70
 4001b60:	88821c26 	beq	r17,r2,40023d4 <___vfprintf_internal_r+0x1f50>
 4001b64:	00801144 	movi	r2,69
 4001b68:	b081ef26 	beq	r22,r2,4002328 <___vfprintf_internal_r+0x1ea4>
 4001b6c:	d8c02917 	ldw	r3,164(sp)
 4001b70:	d8802104 	addi	r2,sp,132
 4001b74:	d8800315 	stw	r2,12(sp)
 4001b78:	d9403617 	ldw	r5,216(sp)
 4001b7c:	d8802504 	addi	r2,sp,148
 4001b80:	d9002c17 	ldw	r4,176(sp)
 4001b84:	d8800215 	stw	r2,8(sp)
 4001b88:	d8802604 	addi	r2,sp,152
 4001b8c:	d8c00015 	stw	r3,0(sp)
 4001b90:	d8800115 	stw	r2,4(sp)
 4001b94:	01c00084 	movi	r7,2
 4001b98:	980d883a 	mov	r6,r19
 4001b9c:	d8c03c15 	stw	r3,240(sp)
 4001ba0:	da003d15 	stw	r8,244(sp)
 4001ba4:	4002aa80 	call	4002aa8 <_dtoa_r>
 4001ba8:	1021883a 	mov	r16,r2
 4001bac:	008019c4 	movi	r2,103
 4001bb0:	d8c03c17 	ldw	r3,240(sp)
 4001bb4:	da003d17 	ldw	r8,244(sp)
 4001bb8:	88817126 	beq	r17,r2,4002180 <___vfprintf_internal_r+0x1cfc>
 4001bbc:	008011c4 	movi	r2,71
 4001bc0:	88829226 	beq	r17,r2,400260c <___vfprintf_internal_r+0x2188>
 4001bc4:	80f9883a 	add	fp,r16,r3
 4001bc8:	d9003617 	ldw	r4,216(sp)
 4001bcc:	000d883a 	mov	r6,zero
 4001bd0:	000f883a 	mov	r7,zero
 4001bd4:	980b883a 	mov	r5,r19
 4001bd8:	da003d15 	stw	r8,244(sp)
 4001bdc:	400b7900 	call	400b790 <__eqdf2>
 4001be0:	da003d17 	ldw	r8,244(sp)
 4001be4:	10018d26 	beq	r2,zero,400221c <___vfprintf_internal_r+0x1d98>
 4001be8:	d8802117 	ldw	r2,132(sp)
 4001bec:	1700062e 	bgeu	r2,fp,4001c08 <___vfprintf_internal_r+0x1784>
 4001bf0:	01000c04 	movi	r4,48
 4001bf4:	10c00044 	addi	r3,r2,1
 4001bf8:	d8c02115 	stw	r3,132(sp)
 4001bfc:	11000005 	stb	r4,0(r2)
 4001c00:	d8802117 	ldw	r2,132(sp)
 4001c04:	173ffb36 	bltu	r2,fp,4001bf4 <__alt_data_end+0xfc001bf4>
 4001c08:	1405c83a 	sub	r2,r2,r16
 4001c0c:	d8803315 	stw	r2,204(sp)
 4001c10:	008011c4 	movi	r2,71
 4001c14:	b0817626 	beq	r22,r2,40021f0 <___vfprintf_internal_r+0x1d6c>
 4001c18:	00801944 	movi	r2,101
 4001c1c:	1442810e 	bge	r2,r17,4002624 <___vfprintf_internal_r+0x21a0>
 4001c20:	d8c02617 	ldw	r3,152(sp)
 4001c24:	00801984 	movi	r2,102
 4001c28:	d8c03215 	stw	r3,200(sp)
 4001c2c:	8881fe26 	beq	r17,r2,4002428 <___vfprintf_internal_r+0x1fa4>
 4001c30:	d8c03217 	ldw	r3,200(sp)
 4001c34:	d9003317 	ldw	r4,204(sp)
 4001c38:	1901dd16 	blt	r3,r4,40023b0 <___vfprintf_internal_r+0x1f2c>
 4001c3c:	9480004c 	andi	r18,r18,1
 4001c40:	90022b1e 	bne	r18,zero,40024f0 <___vfprintf_internal_r+0x206c>
 4001c44:	1805883a 	mov	r2,r3
 4001c48:	18028016 	blt	r3,zero,400264c <___vfprintf_internal_r+0x21c8>
 4001c4c:	d8c03217 	ldw	r3,200(sp)
 4001c50:	044019c4 	movi	r17,103
 4001c54:	d8c02e15 	stw	r3,184(sp)
 4001c58:	df002a07 	ldb	fp,168(sp)
 4001c5c:	e001531e 	bne	fp,zero,40021ac <___vfprintf_internal_r+0x1d28>
 4001c60:	df002783 	ldbu	fp,158(sp)
 4001c64:	d8802a15 	stw	r2,168(sp)
 4001c68:	dc802b17 	ldw	r18,172(sp)
 4001c6c:	d8002915 	stw	zero,164(sp)
 4001c70:	003bd106 	br	4000bb8 <__alt_data_end+0xfc000bb8>
 4001c74:	d8802d17 	ldw	r2,180(sp)
 4001c78:	d8c02d17 	ldw	r3,180(sp)
 4001c7c:	d9002d17 	ldw	r4,180(sp)
 4001c80:	10800017 	ldw	r2,0(r2)
 4001c84:	18c00117 	ldw	r3,4(r3)
 4001c88:	21000204 	addi	r4,r4,8
 4001c8c:	d8803615 	stw	r2,216(sp)
 4001c90:	d8c03815 	stw	r3,224(sp)
 4001c94:	d9002d15 	stw	r4,180(sp)
 4001c98:	003b7506 	br	4000a70 <__alt_data_end+0xfc000a70>
 4001c9c:	ac400007 	ldb	r17,0(r21)
 4001ca0:	003a5906 	br	4000608 <__alt_data_end+0xfc000608>
 4001ca4:	9080100c 	andi	r2,r18,64
 4001ca8:	1000a826 	beq	r2,zero,4001f4c <___vfprintf_internal_r+0x1ac8>
 4001cac:	d9002d17 	ldw	r4,180(sp)
 4001cb0:	002d883a 	mov	r22,zero
 4001cb4:	24c0000b 	ldhu	r19,0(r4)
 4001cb8:	21000104 	addi	r4,r4,4
 4001cbc:	d9002d15 	stw	r4,180(sp)
 4001cc0:	003ccb06 	br	4000ff0 <__alt_data_end+0xfc000ff0>
 4001cc4:	d8c02d17 	ldw	r3,180(sp)
 4001cc8:	d9002917 	ldw	r4,164(sp)
 4001ccc:	002d883a 	mov	r22,zero
 4001cd0:	18800104 	addi	r2,r3,4
 4001cd4:	1cc00017 	ldw	r19,0(r3)
 4001cd8:	203ebb0e 	bge	r4,zero,40017c8 <__alt_data_end+0xfc0017c8>
 4001cdc:	003ef106 	br	40018a4 <__alt_data_end+0xfc0018a4>
 4001ce0:	9080040c 	andi	r2,r18,16
 4001ce4:	1000921e 	bne	r2,zero,4001f30 <___vfprintf_internal_r+0x1aac>
 4001ce8:	9480100c 	andi	r18,r18,64
 4001cec:	90013926 	beq	r18,zero,40021d4 <___vfprintf_internal_r+0x1d50>
 4001cf0:	d9002d17 	ldw	r4,180(sp)
 4001cf4:	d9402f17 	ldw	r5,188(sp)
 4001cf8:	20800017 	ldw	r2,0(r4)
 4001cfc:	21000104 	addi	r4,r4,4
 4001d00:	d9002d15 	stw	r4,180(sp)
 4001d04:	1140000d 	sth	r5,0(r2)
 4001d08:	003a1606 	br	4000564 <__alt_data_end+0xfc000564>
 4001d0c:	9080100c 	andi	r2,r18,64
 4001d10:	10008026 	beq	r2,zero,4001f14 <___vfprintf_internal_r+0x1a90>
 4001d14:	d8c02d17 	ldw	r3,180(sp)
 4001d18:	1cc0000f 	ldh	r19,0(r3)
 4001d1c:	18c00104 	addi	r3,r3,4
 4001d20:	d8c02d15 	stw	r3,180(sp)
 4001d24:	982dd7fa 	srai	r22,r19,31
 4001d28:	b005883a 	mov	r2,r22
 4001d2c:	003b1f06 	br	40009ac <__alt_data_end+0xfc0009ac>
 4001d30:	9080100c 	andi	r2,r18,64
 4001d34:	d8002785 	stb	zero,158(sp)
 4001d38:	10008a1e 	bne	r2,zero,4001f64 <___vfprintf_internal_r+0x1ae0>
 4001d3c:	d9402d17 	ldw	r5,180(sp)
 4001d40:	d8c02917 	ldw	r3,164(sp)
 4001d44:	002d883a 	mov	r22,zero
 4001d48:	28800104 	addi	r2,r5,4
 4001d4c:	2cc00017 	ldw	r19,0(r5)
 4001d50:	183e4b0e 	bge	r3,zero,4001680 <__alt_data_end+0xfc001680>
 4001d54:	9d86b03a 	or	r3,r19,r22
 4001d58:	d8802d15 	stw	r2,180(sp)
 4001d5c:	183e4c1e 	bne	r3,zero,4001690 <__alt_data_end+0xfc001690>
 4001d60:	0039883a 	mov	fp,zero
 4001d64:	0005883a 	mov	r2,zero
 4001d68:	003d4006 	br	400126c <__alt_data_end+0xfc00126c>
 4001d6c:	01410074 	movhi	r5,1025
 4001d70:	29407d84 	addi	r5,r5,502
 4001d74:	d9402b15 	stw	r5,172(sp)
 4001d78:	d9402b17 	ldw	r5,172(sp)
 4001d7c:	1c47883a 	add	r3,r3,r17
 4001d80:	10800044 	addi	r2,r2,1
 4001d84:	41400015 	stw	r5,0(r8)
 4001d88:	44400115 	stw	r17,4(r8)
 4001d8c:	d8c02015 	stw	r3,128(sp)
 4001d90:	d8801f15 	stw	r2,124(sp)
 4001d94:	010001c4 	movi	r4,7
 4001d98:	20bec816 	blt	r4,r2,40018bc <__alt_data_end+0xfc0018bc>
 4001d9c:	42000204 	addi	r8,r8,8
 4001da0:	003ecd06 	br	40018d8 <__alt_data_end+0xfc0018d8>
 4001da4:	d9002917 	ldw	r4,164(sp)
 4001da8:	d8002785 	stb	zero,158(sp)
 4001dac:	203d2d16 	blt	r4,zero,4001264 <__alt_data_end+0xfc001264>
 4001db0:	00bfdfc4 	movi	r2,-129
 4001db4:	90a4703a 	and	r18,r18,r2
 4001db8:	003a9106 	br	4000800 <__alt_data_end+0xfc000800>
 4001dbc:	01010074 	movhi	r4,1025
 4001dc0:	21007d84 	addi	r4,r4,502
 4001dc4:	d9002b15 	stw	r4,172(sp)
 4001dc8:	003c0c06 	br	4000dfc <__alt_data_end+0xfc000dfc>
 4001dcc:	d9002c17 	ldw	r4,176(sp)
 4001dd0:	d9801e04 	addi	r6,sp,120
 4001dd4:	b80b883a 	mov	r5,r23
 4001dd8:	4006f9c0 	call	4006f9c <__sprint_r>
 4001ddc:	103aab1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001de0:	d8c02017 	ldw	r3,128(sp)
 4001de4:	da000404 	addi	r8,sp,16
 4001de8:	003d4106 	br	40012f0 <__alt_data_end+0xfc0012f0>
 4001dec:	d8801f17 	ldw	r2,124(sp)
 4001df0:	01410074 	movhi	r5,1025
 4001df4:	01000044 	movi	r4,1
 4001df8:	18c00044 	addi	r3,r3,1
 4001dfc:	10800044 	addi	r2,r2,1
 4001e00:	29407d04 	addi	r5,r5,500
 4001e04:	41000115 	stw	r4,4(r8)
 4001e08:	41400015 	stw	r5,0(r8)
 4001e0c:	d8c02015 	stw	r3,128(sp)
 4001e10:	d8801f15 	stw	r2,124(sp)
 4001e14:	010001c4 	movi	r4,7
 4001e18:	20805c16 	blt	r4,r2,4001f8c <___vfprintf_internal_r+0x1b08>
 4001e1c:	42000204 	addi	r8,r8,8
 4001e20:	8800041e 	bne	r17,zero,4001e34 <___vfprintf_internal_r+0x19b0>
 4001e24:	d8803317 	ldw	r2,204(sp)
 4001e28:	1000021e 	bne	r2,zero,4001e34 <___vfprintf_internal_r+0x19b0>
 4001e2c:	9080004c 	andi	r2,r18,1
 4001e30:	103c0926 	beq	r2,zero,4000e58 <__alt_data_end+0xfc000e58>
 4001e34:	d9003717 	ldw	r4,220(sp)
 4001e38:	d8801f17 	ldw	r2,124(sp)
 4001e3c:	d9403417 	ldw	r5,208(sp)
 4001e40:	20c7883a 	add	r3,r4,r3
 4001e44:	10800044 	addi	r2,r2,1
 4001e48:	41000115 	stw	r4,4(r8)
 4001e4c:	41400015 	stw	r5,0(r8)
 4001e50:	d8c02015 	stw	r3,128(sp)
 4001e54:	d8801f15 	stw	r2,124(sp)
 4001e58:	010001c4 	movi	r4,7
 4001e5c:	20812116 	blt	r4,r2,40022e4 <___vfprintf_internal_r+0x1e60>
 4001e60:	42000204 	addi	r8,r8,8
 4001e64:	0463c83a 	sub	r17,zero,r17
 4001e68:	0440730e 	bge	zero,r17,4002038 <___vfprintf_internal_r+0x1bb4>
 4001e6c:	05800404 	movi	r22,16
 4001e70:	b440860e 	bge	r22,r17,400208c <___vfprintf_internal_r+0x1c08>
 4001e74:	01410074 	movhi	r5,1025
 4001e78:	29407d84 	addi	r5,r5,502
 4001e7c:	d9402b15 	stw	r5,172(sp)
 4001e80:	070001c4 	movi	fp,7
 4001e84:	dcc02c17 	ldw	r19,176(sp)
 4001e88:	00000306 	br	4001e98 <___vfprintf_internal_r+0x1a14>
 4001e8c:	42000204 	addi	r8,r8,8
 4001e90:	8c7ffc04 	addi	r17,r17,-16
 4001e94:	b440800e 	bge	r22,r17,4002098 <___vfprintf_internal_r+0x1c14>
 4001e98:	18c00404 	addi	r3,r3,16
 4001e9c:	10800044 	addi	r2,r2,1
 4001ea0:	45000015 	stw	r20,0(r8)
 4001ea4:	45800115 	stw	r22,4(r8)
 4001ea8:	d8c02015 	stw	r3,128(sp)
 4001eac:	d8801f15 	stw	r2,124(sp)
 4001eb0:	e0bff60e 	bge	fp,r2,4001e8c <__alt_data_end+0xfc001e8c>
 4001eb4:	d9801e04 	addi	r6,sp,120
 4001eb8:	b80b883a 	mov	r5,r23
 4001ebc:	9809883a 	mov	r4,r19
 4001ec0:	4006f9c0 	call	4006f9c <__sprint_r>
 4001ec4:	103a711e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001ec8:	d8c02017 	ldw	r3,128(sp)
 4001ecc:	d8801f17 	ldw	r2,124(sp)
 4001ed0:	da000404 	addi	r8,sp,16
 4001ed4:	003fee06 	br	4001e90 <__alt_data_end+0xfc001e90>
 4001ed8:	00bfffc4 	movi	r2,-1
 4001edc:	003a6f06 	br	400089c <__alt_data_end+0xfc00089c>
 4001ee0:	008011c4 	movi	r2,71
 4001ee4:	1440b816 	blt	r2,r17,40021c8 <___vfprintf_internal_r+0x1d44>
 4001ee8:	04010074 	movhi	r16,1025
 4001eec:	84006f04 	addi	r16,r16,444
 4001ef0:	00c000c4 	movi	r3,3
 4001ef4:	00bfdfc4 	movi	r2,-129
 4001ef8:	d8c02a15 	stw	r3,168(sp)
 4001efc:	90a4703a 	and	r18,r18,r2
 4001f00:	df002783 	ldbu	fp,158(sp)
 4001f04:	d8c02e15 	stw	r3,184(sp)
 4001f08:	d8002915 	stw	zero,164(sp)
 4001f0c:	d8003215 	stw	zero,200(sp)
 4001f10:	003b2906 	br	4000bb8 <__alt_data_end+0xfc000bb8>
 4001f14:	d9002d17 	ldw	r4,180(sp)
 4001f18:	24c00017 	ldw	r19,0(r4)
 4001f1c:	21000104 	addi	r4,r4,4
 4001f20:	d9002d15 	stw	r4,180(sp)
 4001f24:	982dd7fa 	srai	r22,r19,31
 4001f28:	b005883a 	mov	r2,r22
 4001f2c:	003a9f06 	br	40009ac <__alt_data_end+0xfc0009ac>
 4001f30:	d9402d17 	ldw	r5,180(sp)
 4001f34:	d8c02f17 	ldw	r3,188(sp)
 4001f38:	28800017 	ldw	r2,0(r5)
 4001f3c:	29400104 	addi	r5,r5,4
 4001f40:	d9402d15 	stw	r5,180(sp)
 4001f44:	10c00015 	stw	r3,0(r2)
 4001f48:	00398606 	br	4000564 <__alt_data_end+0xfc000564>
 4001f4c:	d9402d17 	ldw	r5,180(sp)
 4001f50:	002d883a 	mov	r22,zero
 4001f54:	2cc00017 	ldw	r19,0(r5)
 4001f58:	29400104 	addi	r5,r5,4
 4001f5c:	d9402d15 	stw	r5,180(sp)
 4001f60:	003c2306 	br	4000ff0 <__alt_data_end+0xfc000ff0>
 4001f64:	d8c02d17 	ldw	r3,180(sp)
 4001f68:	d9002917 	ldw	r4,164(sp)
 4001f6c:	002d883a 	mov	r22,zero
 4001f70:	18800104 	addi	r2,r3,4
 4001f74:	1cc0000b 	ldhu	r19,0(r3)
 4001f78:	203dc10e 	bge	r4,zero,4001680 <__alt_data_end+0xfc001680>
 4001f7c:	003f7506 	br	4001d54 <__alt_data_end+0xfc001d54>
 4001f80:	04010074 	movhi	r16,1025
 4001f84:	84006d04 	addi	r16,r16,436
 4001f88:	003acc06 	br	4000abc <__alt_data_end+0xfc000abc>
 4001f8c:	d9002c17 	ldw	r4,176(sp)
 4001f90:	d9801e04 	addi	r6,sp,120
 4001f94:	b80b883a 	mov	r5,r23
 4001f98:	4006f9c0 	call	4006f9c <__sprint_r>
 4001f9c:	103a3b1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001fa0:	dc402617 	ldw	r17,152(sp)
 4001fa4:	d8c02017 	ldw	r3,128(sp)
 4001fa8:	da000404 	addi	r8,sp,16
 4001fac:	003f9c06 	br	4001e20 <__alt_data_end+0xfc001e20>
 4001fb0:	ac400043 	ldbu	r17,1(r21)
 4001fb4:	94800814 	ori	r18,r18,32
 4001fb8:	ad400044 	addi	r21,r21,1
 4001fbc:	8c403fcc 	andi	r17,r17,255
 4001fc0:	8c40201c 	xori	r17,r17,128
 4001fc4:	8c7fe004 	addi	r17,r17,-128
 4001fc8:	00398f06 	br	4000608 <__alt_data_end+0xfc000608>
 4001fcc:	d8c02d15 	stw	r3,180(sp)
 4001fd0:	0039883a 	mov	fp,zero
 4001fd4:	003e3506 	br	40018ac <__alt_data_end+0xfc0018ac>
 4001fd8:	d9002c17 	ldw	r4,176(sp)
 4001fdc:	d9801e04 	addi	r6,sp,120
 4001fe0:	b80b883a 	mov	r5,r23
 4001fe4:	4006f9c0 	call	4006f9c <__sprint_r>
 4001fe8:	103a281e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4001fec:	d8c02017 	ldw	r3,128(sp)
 4001ff0:	da000404 	addi	r8,sp,16
 4001ff4:	003cd006 	br	4001338 <__alt_data_end+0xfc001338>
 4001ff8:	8009883a 	mov	r4,r16
 4001ffc:	da003d15 	stw	r8,244(sp)
 4002000:	4006e080 	call	4006e08 <strlen>
 4002004:	d8802e15 	stw	r2,184(sp)
 4002008:	da003d17 	ldw	r8,244(sp)
 400200c:	103c340e 	bge	r2,zero,40010e0 <__alt_data_end+0xfc0010e0>
 4002010:	0005883a 	mov	r2,zero
 4002014:	003c3206 	br	40010e0 <__alt_data_end+0xfc0010e0>
 4002018:	d9002c17 	ldw	r4,176(sp)
 400201c:	d9801e04 	addi	r6,sp,120
 4002020:	b80b883a 	mov	r5,r23
 4002024:	4006f9c0 	call	4006f9c <__sprint_r>
 4002028:	103a181e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 400202c:	d8c02017 	ldw	r3,128(sp)
 4002030:	d8801f17 	ldw	r2,124(sp)
 4002034:	da000404 	addi	r8,sp,16
 4002038:	d9403317 	ldw	r5,204(sp)
 400203c:	10800044 	addi	r2,r2,1
 4002040:	44000015 	stw	r16,0(r8)
 4002044:	28c7883a 	add	r3,r5,r3
 4002048:	003b7d06 	br	4000e40 <__alt_data_end+0xfc000e40>
 400204c:	01010074 	movhi	r4,1025
 4002050:	21008184 	addi	r4,r4,518
 4002054:	d9003515 	stw	r4,212(sp)
 4002058:	003b1406 	br	4000cac <__alt_data_end+0xfc000cac>
 400205c:	013fffc4 	movi	r4,-1
 4002060:	003a3506 	br	4000938 <__alt_data_end+0xfc000938>
 4002064:	0023883a 	mov	r17,zero
 4002068:	003d9d06 	br	40016e0 <__alt_data_end+0xfc0016e0>
 400206c:	d9002c17 	ldw	r4,176(sp)
 4002070:	d9801e04 	addi	r6,sp,120
 4002074:	b80b883a 	mov	r5,r23
 4002078:	4006f9c0 	call	4006f9c <__sprint_r>
 400207c:	103a031e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4002080:	d8c02017 	ldw	r3,128(sp)
 4002084:	da000404 	addi	r8,sp,16
 4002088:	003d9406 	br	40016dc <__alt_data_end+0xfc0016dc>
 400208c:	01010074 	movhi	r4,1025
 4002090:	21007d84 	addi	r4,r4,502
 4002094:	d9002b15 	stw	r4,172(sp)
 4002098:	d9002b17 	ldw	r4,172(sp)
 400209c:	1c47883a 	add	r3,r3,r17
 40020a0:	10800044 	addi	r2,r2,1
 40020a4:	41000015 	stw	r4,0(r8)
 40020a8:	44400115 	stw	r17,4(r8)
 40020ac:	d8c02015 	stw	r3,128(sp)
 40020b0:	d8801f15 	stw	r2,124(sp)
 40020b4:	010001c4 	movi	r4,7
 40020b8:	20bfd716 	blt	r4,r2,4002018 <__alt_data_end+0xfc002018>
 40020bc:	42000204 	addi	r8,r8,8
 40020c0:	003fdd06 	br	4002038 <__alt_data_end+0xfc002038>
 40020c4:	d9002c17 	ldw	r4,176(sp)
 40020c8:	d9801e04 	addi	r6,sp,120
 40020cc:	b80b883a 	mov	r5,r23
 40020d0:	4006f9c0 	call	4006f9c <__sprint_r>
 40020d4:	1039ed1e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40020d8:	d8802617 	ldw	r2,152(sp)
 40020dc:	d8c02017 	ldw	r3,128(sp)
 40020e0:	da000404 	addi	r8,sp,16
 40020e4:	003e1006 	br	4001928 <__alt_data_end+0xfc001928>
 40020e8:	00800044 	movi	r2,1
 40020ec:	10803fcc 	andi	r2,r2,255
 40020f0:	00c00044 	movi	r3,1
 40020f4:	10fa3526 	beq	r2,r3,40009cc <__alt_data_end+0xfc0009cc>
 40020f8:	00c00084 	movi	r3,2
 40020fc:	10fbcb26 	beq	r2,r3,400102c <__alt_data_end+0xfc00102c>
 4002100:	003a8f06 	br	4000b40 <__alt_data_end+0xfc000b40>
 4002104:	01010074 	movhi	r4,1025
 4002108:	21008184 	addi	r4,r4,518
 400210c:	d9003515 	stw	r4,212(sp)
 4002110:	003b7606 	br	4000eec <__alt_data_end+0xfc000eec>
 4002114:	d8802917 	ldw	r2,164(sp)
 4002118:	00c00184 	movi	r3,6
 400211c:	1880012e 	bgeu	r3,r2,4002124 <___vfprintf_internal_r+0x1ca0>
 4002120:	1805883a 	mov	r2,r3
 4002124:	d8802e15 	stw	r2,184(sp)
 4002128:	1000ef16 	blt	r2,zero,40024e8 <___vfprintf_internal_r+0x2064>
 400212c:	04010074 	movhi	r16,1025
 4002130:	d8802a15 	stw	r2,168(sp)
 4002134:	dcc02d15 	stw	r19,180(sp)
 4002138:	d8002915 	stw	zero,164(sp)
 400213c:	d8003215 	stw	zero,200(sp)
 4002140:	84007b04 	addi	r16,r16,492
 4002144:	0039883a 	mov	fp,zero
 4002148:	003aa206 	br	4000bd4 <__alt_data_end+0xfc000bd4>
 400214c:	0021883a 	mov	r16,zero
 4002150:	003e0706 	br	4001970 <__alt_data_end+0xfc001970>
 4002154:	d9002c17 	ldw	r4,176(sp)
 4002158:	d9801e04 	addi	r6,sp,120
 400215c:	b80b883a 	mov	r5,r23
 4002160:	4006f9c0 	call	4006f9c <__sprint_r>
 4002164:	1039c91e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 4002168:	d8802617 	ldw	r2,152(sp)
 400216c:	d9403317 	ldw	r5,204(sp)
 4002170:	d8c02017 	ldw	r3,128(sp)
 4002174:	da000404 	addi	r8,sp,16
 4002178:	2885c83a 	sub	r2,r5,r2
 400217c:	003dfb06 	br	400196c <__alt_data_end+0xfc00196c>
 4002180:	9080004c 	andi	r2,r18,1
 4002184:	103e8f1e 	bne	r2,zero,4001bc4 <__alt_data_end+0xfc001bc4>
 4002188:	d8802117 	ldw	r2,132(sp)
 400218c:	003e9e06 	br	4001c08 <__alt_data_end+0xfc001c08>
 4002190:	1025883a 	mov	r18,r2
 4002194:	0039883a 	mov	fp,zero
 4002198:	00800084 	movi	r2,2
 400219c:	003fd306 	br	40020ec <__alt_data_end+0xfc0020ec>
 40021a0:	07000b44 	movi	fp,45
 40021a4:	df002785 	stb	fp,158(sp)
 40021a8:	003a4006 	br	4000aac <__alt_data_end+0xfc000aac>
 40021ac:	00c00b44 	movi	r3,45
 40021b0:	d8c02785 	stb	r3,158(sp)
 40021b4:	d8802a15 	stw	r2,168(sp)
 40021b8:	dc802b17 	ldw	r18,172(sp)
 40021bc:	d8002915 	stw	zero,164(sp)
 40021c0:	07000b44 	movi	fp,45
 40021c4:	003a8006 	br	4000bc8 <__alt_data_end+0xfc000bc8>
 40021c8:	04010074 	movhi	r16,1025
 40021cc:	84007004 	addi	r16,r16,448
 40021d0:	003f4706 	br	4001ef0 <__alt_data_end+0xfc001ef0>
 40021d4:	d8c02d17 	ldw	r3,180(sp)
 40021d8:	d9002f17 	ldw	r4,188(sp)
 40021dc:	18800017 	ldw	r2,0(r3)
 40021e0:	18c00104 	addi	r3,r3,4
 40021e4:	d8c02d15 	stw	r3,180(sp)
 40021e8:	11000015 	stw	r4,0(r2)
 40021ec:	0038dd06 	br	4000564 <__alt_data_end+0xfc000564>
 40021f0:	dd802617 	ldw	r22,152(sp)
 40021f4:	00bfff44 	movi	r2,-3
 40021f8:	b0801c16 	blt	r22,r2,400226c <___vfprintf_internal_r+0x1de8>
 40021fc:	d9402917 	ldw	r5,164(sp)
 4002200:	2d801a16 	blt	r5,r22,400226c <___vfprintf_internal_r+0x1de8>
 4002204:	dd803215 	stw	r22,200(sp)
 4002208:	003e8906 	br	4001c30 <__alt_data_end+0xfc001c30>
 400220c:	01010074 	movhi	r4,1025
 4002210:	21007d84 	addi	r4,r4,502
 4002214:	d9002b15 	stw	r4,172(sp)
 4002218:	003c9106 	br	4001460 <__alt_data_end+0xfc001460>
 400221c:	e005883a 	mov	r2,fp
 4002220:	003e7906 	br	4001c08 <__alt_data_end+0xfc001c08>
 4002224:	d9402917 	ldw	r5,164(sp)
 4002228:	df002783 	ldbu	fp,158(sp)
 400222c:	dcc02d15 	stw	r19,180(sp)
 4002230:	d9402a15 	stw	r5,168(sp)
 4002234:	d9402e15 	stw	r5,184(sp)
 4002238:	d8002915 	stw	zero,164(sp)
 400223c:	d8003215 	stw	zero,200(sp)
 4002240:	003a5d06 	br	4000bb8 <__alt_data_end+0xfc000bb8>
 4002244:	9080004c 	andi	r2,r18,1
 4002248:	0039883a 	mov	fp,zero
 400224c:	10000426 	beq	r2,zero,4002260 <___vfprintf_internal_r+0x1ddc>
 4002250:	00800c04 	movi	r2,48
 4002254:	dc001dc4 	addi	r16,sp,119
 4002258:	d8801dc5 	stb	r2,119(sp)
 400225c:	003b8006 	br	4001060 <__alt_data_end+0xfc001060>
 4002260:	d8002e15 	stw	zero,184(sp)
 4002264:	dc001e04 	addi	r16,sp,120
 4002268:	003a4d06 	br	4000ba0 <__alt_data_end+0xfc000ba0>
 400226c:	8c7fff84 	addi	r17,r17,-2
 4002270:	b5bfffc4 	addi	r22,r22,-1
 4002274:	dd802615 	stw	r22,152(sp)
 4002278:	dc4022c5 	stb	r17,139(sp)
 400227c:	b000bf16 	blt	r22,zero,400257c <___vfprintf_internal_r+0x20f8>
 4002280:	00800ac4 	movi	r2,43
 4002284:	d8802305 	stb	r2,140(sp)
 4002288:	00800244 	movi	r2,9
 400228c:	15807016 	blt	r2,r22,4002450 <___vfprintf_internal_r+0x1fcc>
 4002290:	00800c04 	movi	r2,48
 4002294:	b5800c04 	addi	r22,r22,48
 4002298:	d8802345 	stb	r2,141(sp)
 400229c:	dd802385 	stb	r22,142(sp)
 40022a0:	d88023c4 	addi	r2,sp,143
 40022a4:	df0022c4 	addi	fp,sp,139
 40022a8:	d8c03317 	ldw	r3,204(sp)
 40022ac:	1739c83a 	sub	fp,r2,fp
 40022b0:	d9003317 	ldw	r4,204(sp)
 40022b4:	e0c7883a 	add	r3,fp,r3
 40022b8:	df003a15 	stw	fp,232(sp)
 40022bc:	d8c02e15 	stw	r3,184(sp)
 40022c0:	00800044 	movi	r2,1
 40022c4:	1100b30e 	bge	r2,r4,4002594 <___vfprintf_internal_r+0x2110>
 40022c8:	d8c02e17 	ldw	r3,184(sp)
 40022cc:	18c00044 	addi	r3,r3,1
 40022d0:	d8c02e15 	stw	r3,184(sp)
 40022d4:	1805883a 	mov	r2,r3
 40022d8:	1800ac16 	blt	r3,zero,400258c <___vfprintf_internal_r+0x2108>
 40022dc:	d8003215 	stw	zero,200(sp)
 40022e0:	003e5d06 	br	4001c58 <__alt_data_end+0xfc001c58>
 40022e4:	d9002c17 	ldw	r4,176(sp)
 40022e8:	d9801e04 	addi	r6,sp,120
 40022ec:	b80b883a 	mov	r5,r23
 40022f0:	4006f9c0 	call	4006f9c <__sprint_r>
 40022f4:	1039651e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>
 40022f8:	dc402617 	ldw	r17,152(sp)
 40022fc:	d8c02017 	ldw	r3,128(sp)
 4002300:	d8801f17 	ldw	r2,124(sp)
 4002304:	da000404 	addi	r8,sp,16
 4002308:	003ed606 	br	4001e64 <__alt_data_end+0xfc001e64>
 400230c:	582b883a 	mov	r21,r11
 4002310:	d8002915 	stw	zero,164(sp)
 4002314:	0038bd06 	br	400060c <__alt_data_end+0xfc00060c>
 4002318:	d8802917 	ldw	r2,164(sp)
 400231c:	103e071e 	bne	r2,zero,4001b3c <__alt_data_end+0xfc001b3c>
 4002320:	dc002915 	stw	r16,164(sp)
 4002324:	003e0506 	br	4001b3c <__alt_data_end+0xfc001b3c>
 4002328:	d9002917 	ldw	r4,164(sp)
 400232c:	20c00044 	addi	r3,r4,1
 4002330:	003e0f06 	br	4001b70 <__alt_data_end+0xfc001b70>
 4002334:	01400184 	movi	r5,6
 4002338:	d9402915 	stw	r5,164(sp)
 400233c:	003dff06 	br	4001b3c <__alt_data_end+0xfc001b3c>
 4002340:	d8802104 	addi	r2,sp,132
 4002344:	d8800315 	stw	r2,12(sp)
 4002348:	d8802504 	addi	r2,sp,148
 400234c:	d8800215 	stw	r2,8(sp)
 4002350:	d8802604 	addi	r2,sp,152
 4002354:	d8800115 	stw	r2,4(sp)
 4002358:	d8802917 	ldw	r2,164(sp)
 400235c:	d9403617 	ldw	r5,216(sp)
 4002360:	d9002c17 	ldw	r4,176(sp)
 4002364:	d8800015 	stw	r2,0(sp)
 4002368:	01c000c4 	movi	r7,3
 400236c:	980d883a 	mov	r6,r19
 4002370:	da003d15 	stw	r8,244(sp)
 4002374:	4002aa80 	call	4002aa8 <_dtoa_r>
 4002378:	d8c02917 	ldw	r3,164(sp)
 400237c:	da003d17 	ldw	r8,244(sp)
 4002380:	1021883a 	mov	r16,r2
 4002384:	10f9883a 	add	fp,r2,r3
 4002388:	81000007 	ldb	r4,0(r16)
 400238c:	00800c04 	movi	r2,48
 4002390:	20805e26 	beq	r4,r2,400250c <___vfprintf_internal_r+0x2088>
 4002394:	d8c02617 	ldw	r3,152(sp)
 4002398:	e0f9883a 	add	fp,fp,r3
 400239c:	003e0a06 	br	4001bc8 <__alt_data_end+0xfc001bc8>
 40023a0:	00c00b44 	movi	r3,45
 40023a4:	24e0003c 	xorhi	r19,r4,32768
 40023a8:	d8c02a05 	stb	r3,168(sp)
 40023ac:	003de906 	br	4001b54 <__alt_data_end+0xfc001b54>
 40023b0:	d8c03217 	ldw	r3,200(sp)
 40023b4:	00c07a0e 	bge	zero,r3,40025a0 <___vfprintf_internal_r+0x211c>
 40023b8:	00800044 	movi	r2,1
 40023bc:	d9003317 	ldw	r4,204(sp)
 40023c0:	1105883a 	add	r2,r2,r4
 40023c4:	d8802e15 	stw	r2,184(sp)
 40023c8:	10004e16 	blt	r2,zero,4002504 <___vfprintf_internal_r+0x2080>
 40023cc:	044019c4 	movi	r17,103
 40023d0:	003e2106 	br	4001c58 <__alt_data_end+0xfc001c58>
 40023d4:	d9002917 	ldw	r4,164(sp)
 40023d8:	d8802104 	addi	r2,sp,132
 40023dc:	d8800315 	stw	r2,12(sp)
 40023e0:	d9000015 	stw	r4,0(sp)
 40023e4:	d8802504 	addi	r2,sp,148
 40023e8:	d9403617 	ldw	r5,216(sp)
 40023ec:	d9002c17 	ldw	r4,176(sp)
 40023f0:	d8800215 	stw	r2,8(sp)
 40023f4:	d8802604 	addi	r2,sp,152
 40023f8:	d8800115 	stw	r2,4(sp)
 40023fc:	01c000c4 	movi	r7,3
 4002400:	980d883a 	mov	r6,r19
 4002404:	da003d15 	stw	r8,244(sp)
 4002408:	4002aa80 	call	4002aa8 <_dtoa_r>
 400240c:	d8c02917 	ldw	r3,164(sp)
 4002410:	da003d17 	ldw	r8,244(sp)
 4002414:	1021883a 	mov	r16,r2
 4002418:	00801184 	movi	r2,70
 400241c:	80f9883a 	add	fp,r16,r3
 4002420:	88bfd926 	beq	r17,r2,4002388 <__alt_data_end+0xfc002388>
 4002424:	003de806 	br	4001bc8 <__alt_data_end+0xfc001bc8>
 4002428:	d9002917 	ldw	r4,164(sp)
 400242c:	00c04d0e 	bge	zero,r3,4002564 <___vfprintf_internal_r+0x20e0>
 4002430:	2000441e 	bne	r4,zero,4002544 <___vfprintf_internal_r+0x20c0>
 4002434:	9480004c 	andi	r18,r18,1
 4002438:	9000421e 	bne	r18,zero,4002544 <___vfprintf_internal_r+0x20c0>
 400243c:	1805883a 	mov	r2,r3
 4002440:	18007016 	blt	r3,zero,4002604 <___vfprintf_internal_r+0x2180>
 4002444:	d8c03217 	ldw	r3,200(sp)
 4002448:	d8c02e15 	stw	r3,184(sp)
 400244c:	003e0206 	br	4001c58 <__alt_data_end+0xfc001c58>
 4002450:	df0022c4 	addi	fp,sp,139
 4002454:	dc002915 	stw	r16,164(sp)
 4002458:	4027883a 	mov	r19,r8
 400245c:	e021883a 	mov	r16,fp
 4002460:	b009883a 	mov	r4,r22
 4002464:	01400284 	movi	r5,10
 4002468:	400a4cc0 	call	400a4cc <__modsi3>
 400246c:	10800c04 	addi	r2,r2,48
 4002470:	843fffc4 	addi	r16,r16,-1
 4002474:	b009883a 	mov	r4,r22
 4002478:	01400284 	movi	r5,10
 400247c:	80800005 	stb	r2,0(r16)
 4002480:	400a4480 	call	400a448 <__divsi3>
 4002484:	102d883a 	mov	r22,r2
 4002488:	00800244 	movi	r2,9
 400248c:	15bff416 	blt	r2,r22,4002460 <__alt_data_end+0xfc002460>
 4002490:	9811883a 	mov	r8,r19
 4002494:	b0800c04 	addi	r2,r22,48
 4002498:	8027883a 	mov	r19,r16
 400249c:	997fffc4 	addi	r5,r19,-1
 40024a0:	98bfffc5 	stb	r2,-1(r19)
 40024a4:	dc002917 	ldw	r16,164(sp)
 40024a8:	2f006a2e 	bgeu	r5,fp,4002654 <___vfprintf_internal_r+0x21d0>
 40024ac:	d9c02384 	addi	r7,sp,142
 40024b0:	3ccfc83a 	sub	r7,r7,r19
 40024b4:	d9002344 	addi	r4,sp,141
 40024b8:	e1cf883a 	add	r7,fp,r7
 40024bc:	00000106 	br	40024c4 <___vfprintf_internal_r+0x2040>
 40024c0:	28800003 	ldbu	r2,0(r5)
 40024c4:	20800005 	stb	r2,0(r4)
 40024c8:	21000044 	addi	r4,r4,1
 40024cc:	29400044 	addi	r5,r5,1
 40024d0:	393ffb1e 	bne	r7,r4,40024c0 <__alt_data_end+0xfc0024c0>
 40024d4:	d8802304 	addi	r2,sp,140
 40024d8:	14c5c83a 	sub	r2,r2,r19
 40024dc:	d8c02344 	addi	r3,sp,141
 40024e0:	1885883a 	add	r2,r3,r2
 40024e4:	003f7006 	br	40022a8 <__alt_data_end+0xfc0022a8>
 40024e8:	0005883a 	mov	r2,zero
 40024ec:	003f0f06 	br	400212c <__alt_data_end+0xfc00212c>
 40024f0:	d8c03217 	ldw	r3,200(sp)
 40024f4:	18c00044 	addi	r3,r3,1
 40024f8:	d8c02e15 	stw	r3,184(sp)
 40024fc:	1805883a 	mov	r2,r3
 4002500:	183fb20e 	bge	r3,zero,40023cc <__alt_data_end+0xfc0023cc>
 4002504:	0005883a 	mov	r2,zero
 4002508:	003fb006 	br	40023cc <__alt_data_end+0xfc0023cc>
 400250c:	d9003617 	ldw	r4,216(sp)
 4002510:	000d883a 	mov	r6,zero
 4002514:	000f883a 	mov	r7,zero
 4002518:	980b883a 	mov	r5,r19
 400251c:	d8c03c15 	stw	r3,240(sp)
 4002520:	da003d15 	stw	r8,244(sp)
 4002524:	400b7900 	call	400b790 <__eqdf2>
 4002528:	d8c03c17 	ldw	r3,240(sp)
 400252c:	da003d17 	ldw	r8,244(sp)
 4002530:	103f9826 	beq	r2,zero,4002394 <__alt_data_end+0xfc002394>
 4002534:	00800044 	movi	r2,1
 4002538:	10c7c83a 	sub	r3,r2,r3
 400253c:	d8c02615 	stw	r3,152(sp)
 4002540:	003f9506 	br	4002398 <__alt_data_end+0xfc002398>
 4002544:	d9002917 	ldw	r4,164(sp)
 4002548:	d8c03217 	ldw	r3,200(sp)
 400254c:	20800044 	addi	r2,r4,1
 4002550:	1885883a 	add	r2,r3,r2
 4002554:	d8802e15 	stw	r2,184(sp)
 4002558:	103dbf0e 	bge	r2,zero,4001c58 <__alt_data_end+0xfc001c58>
 400255c:	0005883a 	mov	r2,zero
 4002560:	003dbd06 	br	4001c58 <__alt_data_end+0xfc001c58>
 4002564:	2000211e 	bne	r4,zero,40025ec <___vfprintf_internal_r+0x2168>
 4002568:	9480004c 	andi	r18,r18,1
 400256c:	90001f1e 	bne	r18,zero,40025ec <___vfprintf_internal_r+0x2168>
 4002570:	00800044 	movi	r2,1
 4002574:	d8802e15 	stw	r2,184(sp)
 4002578:	003db706 	br	4001c58 <__alt_data_end+0xfc001c58>
 400257c:	00800b44 	movi	r2,45
 4002580:	05adc83a 	sub	r22,zero,r22
 4002584:	d8802305 	stb	r2,140(sp)
 4002588:	003f3f06 	br	4002288 <__alt_data_end+0xfc002288>
 400258c:	0005883a 	mov	r2,zero
 4002590:	003f5206 	br	40022dc <__alt_data_end+0xfc0022dc>
 4002594:	90a4703a 	and	r18,r18,r2
 4002598:	903f4e26 	beq	r18,zero,40022d4 <__alt_data_end+0xfc0022d4>
 400259c:	003f4a06 	br	40022c8 <__alt_data_end+0xfc0022c8>
 40025a0:	00800084 	movi	r2,2
 40025a4:	10c5c83a 	sub	r2,r2,r3
 40025a8:	003f8406 	br	40023bc <__alt_data_end+0xfc0023bc>
 40025ac:	d8802d17 	ldw	r2,180(sp)
 40025b0:	d9002d17 	ldw	r4,180(sp)
 40025b4:	ac400043 	ldbu	r17,1(r21)
 40025b8:	10800017 	ldw	r2,0(r2)
 40025bc:	582b883a 	mov	r21,r11
 40025c0:	d8802915 	stw	r2,164(sp)
 40025c4:	20800104 	addi	r2,r4,4
 40025c8:	d9002917 	ldw	r4,164(sp)
 40025cc:	d8802d15 	stw	r2,180(sp)
 40025d0:	203e7a0e 	bge	r4,zero,4001fbc <__alt_data_end+0xfc001fbc>
 40025d4:	8c403fcc 	andi	r17,r17,255
 40025d8:	00bfffc4 	movi	r2,-1
 40025dc:	8c40201c 	xori	r17,r17,128
 40025e0:	d8802915 	stw	r2,164(sp)
 40025e4:	8c7fe004 	addi	r17,r17,-128
 40025e8:	00380706 	br	4000608 <__alt_data_end+0xfc000608>
 40025ec:	d8c02917 	ldw	r3,164(sp)
 40025f0:	18c00084 	addi	r3,r3,2
 40025f4:	d8c02e15 	stw	r3,184(sp)
 40025f8:	1805883a 	mov	r2,r3
 40025fc:	183d960e 	bge	r3,zero,4001c58 <__alt_data_end+0xfc001c58>
 4002600:	003fd606 	br	400255c <__alt_data_end+0xfc00255c>
 4002604:	0005883a 	mov	r2,zero
 4002608:	003f8e06 	br	4002444 <__alt_data_end+0xfc002444>
 400260c:	9080004c 	andi	r2,r18,1
 4002610:	103f811e 	bne	r2,zero,4002418 <__alt_data_end+0xfc002418>
 4002614:	d8802117 	ldw	r2,132(sp)
 4002618:	1405c83a 	sub	r2,r2,r16
 400261c:	d8803315 	stw	r2,204(sp)
 4002620:	b47ef326 	beq	r22,r17,40021f0 <__alt_data_end+0xfc0021f0>
 4002624:	dd802617 	ldw	r22,152(sp)
 4002628:	003f1106 	br	4002270 <__alt_data_end+0xfc002270>
 400262c:	d9c02785 	stb	r7,158(sp)
 4002630:	00390406 	br	4000a44 <__alt_data_end+0xfc000a44>
 4002634:	d9c02785 	stb	r7,158(sp)
 4002638:	0038d306 	br	4000988 <__alt_data_end+0xfc000988>
 400263c:	d9c02785 	stb	r7,158(sp)
 4002640:	003a6106 	br	4000fc8 <__alt_data_end+0xfc000fc8>
 4002644:	d9c02785 	stb	r7,158(sp)
 4002648:	003af806 	br	400122c <__alt_data_end+0xfc00122c>
 400264c:	0005883a 	mov	r2,zero
 4002650:	003d7e06 	br	4001c4c <__alt_data_end+0xfc001c4c>
 4002654:	d8802344 	addi	r2,sp,141
 4002658:	003f1306 	br	40022a8 <__alt_data_end+0xfc0022a8>
 400265c:	d9c02785 	stb	r7,158(sp)
 4002660:	00392306 	br	4000af0 <__alt_data_end+0xfc000af0>
 4002664:	d9c02785 	stb	r7,158(sp)
 4002668:	003aa906 	br	4001110 <__alt_data_end+0xfc001110>
 400266c:	d9c02785 	stb	r7,158(sp)
 4002670:	003a3d06 	br	4000f68 <__alt_data_end+0xfc000f68>
 4002674:	d9c02785 	stb	r7,158(sp)
 4002678:	003aca06 	br	40011a4 <__alt_data_end+0xfc0011a4>

0400267c <__vfprintf_internal>:
 400267c:	00810074 	movhi	r2,1025
 4002680:	10880304 	addi	r2,r2,8204
 4002684:	300f883a 	mov	r7,r6
 4002688:	280d883a 	mov	r6,r5
 400268c:	200b883a 	mov	r5,r4
 4002690:	11000017 	ldw	r4,0(r2)
 4002694:	40004841 	jmpi	4000484 <___vfprintf_internal_r>

04002698 <__sbprintf>:
 4002698:	2880030b 	ldhu	r2,12(r5)
 400269c:	2ac01917 	ldw	r11,100(r5)
 40026a0:	2a80038b 	ldhu	r10,14(r5)
 40026a4:	2a400717 	ldw	r9,28(r5)
 40026a8:	2a000917 	ldw	r8,36(r5)
 40026ac:	defee204 	addi	sp,sp,-1144
 40026b0:	00c10004 	movi	r3,1024
 40026b4:	dc011a15 	stw	r16,1128(sp)
 40026b8:	10bfff4c 	andi	r2,r2,65533
 40026bc:	2821883a 	mov	r16,r5
 40026c0:	d8cb883a 	add	r5,sp,r3
 40026c4:	dc811c15 	stw	r18,1136(sp)
 40026c8:	dc411b15 	stw	r17,1132(sp)
 40026cc:	dfc11d15 	stw	ra,1140(sp)
 40026d0:	2025883a 	mov	r18,r4
 40026d4:	d881030d 	sth	r2,1036(sp)
 40026d8:	dac11915 	stw	r11,1124(sp)
 40026dc:	da81038d 	sth	r10,1038(sp)
 40026e0:	da410715 	stw	r9,1052(sp)
 40026e4:	da010915 	stw	r8,1060(sp)
 40026e8:	dec10015 	stw	sp,1024(sp)
 40026ec:	dec10415 	stw	sp,1040(sp)
 40026f0:	d8c10215 	stw	r3,1032(sp)
 40026f4:	d8c10515 	stw	r3,1044(sp)
 40026f8:	d8010615 	stw	zero,1048(sp)
 40026fc:	40004840 	call	4000484 <___vfprintf_internal_r>
 4002700:	1023883a 	mov	r17,r2
 4002704:	10000416 	blt	r2,zero,4002718 <__sbprintf+0x80>
 4002708:	d9410004 	addi	r5,sp,1024
 400270c:	9009883a 	mov	r4,r18
 4002710:	400434c0 	call	400434c <_fflush_r>
 4002714:	10000d1e 	bne	r2,zero,400274c <__sbprintf+0xb4>
 4002718:	d881030b 	ldhu	r2,1036(sp)
 400271c:	1080100c 	andi	r2,r2,64
 4002720:	10000326 	beq	r2,zero,4002730 <__sbprintf+0x98>
 4002724:	8080030b 	ldhu	r2,12(r16)
 4002728:	10801014 	ori	r2,r2,64
 400272c:	8080030d 	sth	r2,12(r16)
 4002730:	8805883a 	mov	r2,r17
 4002734:	dfc11d17 	ldw	ra,1140(sp)
 4002738:	dc811c17 	ldw	r18,1136(sp)
 400273c:	dc411b17 	ldw	r17,1132(sp)
 4002740:	dc011a17 	ldw	r16,1128(sp)
 4002744:	dec11e04 	addi	sp,sp,1144
 4002748:	f800283a 	ret
 400274c:	047fffc4 	movi	r17,-1
 4002750:	003ff106 	br	4002718 <__alt_data_end+0xfc002718>

04002754 <__swsetup_r>:
 4002754:	00810074 	movhi	r2,1025
 4002758:	defffd04 	addi	sp,sp,-12
 400275c:	10880304 	addi	r2,r2,8204
 4002760:	dc400115 	stw	r17,4(sp)
 4002764:	2023883a 	mov	r17,r4
 4002768:	11000017 	ldw	r4,0(r2)
 400276c:	dc000015 	stw	r16,0(sp)
 4002770:	dfc00215 	stw	ra,8(sp)
 4002774:	2821883a 	mov	r16,r5
 4002778:	20000226 	beq	r4,zero,4002784 <__swsetup_r+0x30>
 400277c:	20800e17 	ldw	r2,56(r4)
 4002780:	10003126 	beq	r2,zero,4002848 <__swsetup_r+0xf4>
 4002784:	8080030b 	ldhu	r2,12(r16)
 4002788:	10c0020c 	andi	r3,r2,8
 400278c:	1009883a 	mov	r4,r2
 4002790:	18000f26 	beq	r3,zero,40027d0 <__swsetup_r+0x7c>
 4002794:	80c00417 	ldw	r3,16(r16)
 4002798:	18001526 	beq	r3,zero,40027f0 <__swsetup_r+0x9c>
 400279c:	1100004c 	andi	r4,r2,1
 40027a0:	20001c1e 	bne	r4,zero,4002814 <__swsetup_r+0xc0>
 40027a4:	1080008c 	andi	r2,r2,2
 40027a8:	1000291e 	bne	r2,zero,4002850 <__swsetup_r+0xfc>
 40027ac:	80800517 	ldw	r2,20(r16)
 40027b0:	80800215 	stw	r2,8(r16)
 40027b4:	18001c26 	beq	r3,zero,4002828 <__swsetup_r+0xd4>
 40027b8:	0005883a 	mov	r2,zero
 40027bc:	dfc00217 	ldw	ra,8(sp)
 40027c0:	dc400117 	ldw	r17,4(sp)
 40027c4:	dc000017 	ldw	r16,0(sp)
 40027c8:	dec00304 	addi	sp,sp,12
 40027cc:	f800283a 	ret
 40027d0:	2080040c 	andi	r2,r4,16
 40027d4:	10002e26 	beq	r2,zero,4002890 <__swsetup_r+0x13c>
 40027d8:	2080010c 	andi	r2,r4,4
 40027dc:	10001e1e 	bne	r2,zero,4002858 <__swsetup_r+0x104>
 40027e0:	80c00417 	ldw	r3,16(r16)
 40027e4:	20800214 	ori	r2,r4,8
 40027e8:	8080030d 	sth	r2,12(r16)
 40027ec:	183feb1e 	bne	r3,zero,400279c <__alt_data_end+0xfc00279c>
 40027f0:	1100a00c 	andi	r4,r2,640
 40027f4:	01408004 	movi	r5,512
 40027f8:	217fe826 	beq	r4,r5,400279c <__alt_data_end+0xfc00279c>
 40027fc:	800b883a 	mov	r5,r16
 4002800:	8809883a 	mov	r4,r17
 4002804:	4004e100 	call	4004e10 <__smakebuf_r>
 4002808:	8080030b 	ldhu	r2,12(r16)
 400280c:	80c00417 	ldw	r3,16(r16)
 4002810:	003fe206 	br	400279c <__alt_data_end+0xfc00279c>
 4002814:	80800517 	ldw	r2,20(r16)
 4002818:	80000215 	stw	zero,8(r16)
 400281c:	0085c83a 	sub	r2,zero,r2
 4002820:	80800615 	stw	r2,24(r16)
 4002824:	183fe41e 	bne	r3,zero,40027b8 <__alt_data_end+0xfc0027b8>
 4002828:	80c0030b 	ldhu	r3,12(r16)
 400282c:	0005883a 	mov	r2,zero
 4002830:	1900200c 	andi	r4,r3,128
 4002834:	203fe126 	beq	r4,zero,40027bc <__alt_data_end+0xfc0027bc>
 4002838:	18c01014 	ori	r3,r3,64
 400283c:	80c0030d 	sth	r3,12(r16)
 4002840:	00bfffc4 	movi	r2,-1
 4002844:	003fdd06 	br	40027bc <__alt_data_end+0xfc0027bc>
 4002848:	40047280 	call	4004728 <__sinit>
 400284c:	003fcd06 	br	4002784 <__alt_data_end+0xfc002784>
 4002850:	0005883a 	mov	r2,zero
 4002854:	003fd606 	br	40027b0 <__alt_data_end+0xfc0027b0>
 4002858:	81400c17 	ldw	r5,48(r16)
 400285c:	28000626 	beq	r5,zero,4002878 <__swsetup_r+0x124>
 4002860:	80801004 	addi	r2,r16,64
 4002864:	28800326 	beq	r5,r2,4002874 <__swsetup_r+0x120>
 4002868:	8809883a 	mov	r4,r17
 400286c:	400489c0 	call	400489c <_free_r>
 4002870:	8100030b 	ldhu	r4,12(r16)
 4002874:	80000c15 	stw	zero,48(r16)
 4002878:	80c00417 	ldw	r3,16(r16)
 400287c:	00bff6c4 	movi	r2,-37
 4002880:	1108703a 	and	r4,r2,r4
 4002884:	80000115 	stw	zero,4(r16)
 4002888:	80c00015 	stw	r3,0(r16)
 400288c:	003fd506 	br	40027e4 <__alt_data_end+0xfc0027e4>
 4002890:	00800244 	movi	r2,9
 4002894:	88800015 	stw	r2,0(r17)
 4002898:	20801014 	ori	r2,r4,64
 400289c:	8080030d 	sth	r2,12(r16)
 40028a0:	00bfffc4 	movi	r2,-1
 40028a4:	003fc506 	br	40027bc <__alt_data_end+0xfc0027bc>

040028a8 <quorem>:
 40028a8:	defff704 	addi	sp,sp,-36
 40028ac:	dc800215 	stw	r18,8(sp)
 40028b0:	20800417 	ldw	r2,16(r4)
 40028b4:	2c800417 	ldw	r18,16(r5)
 40028b8:	dfc00815 	stw	ra,32(sp)
 40028bc:	ddc00715 	stw	r23,28(sp)
 40028c0:	dd800615 	stw	r22,24(sp)
 40028c4:	dd400515 	stw	r21,20(sp)
 40028c8:	dd000415 	stw	r20,16(sp)
 40028cc:	dcc00315 	stw	r19,12(sp)
 40028d0:	dc400115 	stw	r17,4(sp)
 40028d4:	dc000015 	stw	r16,0(sp)
 40028d8:	14807116 	blt	r2,r18,4002aa0 <quorem+0x1f8>
 40028dc:	94bfffc4 	addi	r18,r18,-1
 40028e0:	94ad883a 	add	r22,r18,r18
 40028e4:	b5ad883a 	add	r22,r22,r22
 40028e8:	2c400504 	addi	r17,r5,20
 40028ec:	8da9883a 	add	r20,r17,r22
 40028f0:	25400504 	addi	r21,r4,20
 40028f4:	282f883a 	mov	r23,r5
 40028f8:	adad883a 	add	r22,r21,r22
 40028fc:	a1400017 	ldw	r5,0(r20)
 4002900:	2021883a 	mov	r16,r4
 4002904:	b1000017 	ldw	r4,0(r22)
 4002908:	29400044 	addi	r5,r5,1
 400290c:	400a5400 	call	400a540 <__udivsi3>
 4002910:	1027883a 	mov	r19,r2
 4002914:	10002c26 	beq	r2,zero,40029c8 <quorem+0x120>
 4002918:	a813883a 	mov	r9,r21
 400291c:	880b883a 	mov	r5,r17
 4002920:	0009883a 	mov	r4,zero
 4002924:	000d883a 	mov	r6,zero
 4002928:	2a000017 	ldw	r8,0(r5)
 400292c:	49c00017 	ldw	r7,0(r9)
 4002930:	29400104 	addi	r5,r5,4
 4002934:	40bfffcc 	andi	r2,r8,65535
 4002938:	14c5383a 	mul	r2,r2,r19
 400293c:	4010d43a 	srli	r8,r8,16
 4002940:	38ffffcc 	andi	r3,r7,65535
 4002944:	1105883a 	add	r2,r2,r4
 4002948:	1008d43a 	srli	r4,r2,16
 400294c:	44d1383a 	mul	r8,r8,r19
 4002950:	198d883a 	add	r6,r3,r6
 4002954:	10ffffcc 	andi	r3,r2,65535
 4002958:	30c7c83a 	sub	r3,r6,r3
 400295c:	380ed43a 	srli	r7,r7,16
 4002960:	4105883a 	add	r2,r8,r4
 4002964:	180dd43a 	srai	r6,r3,16
 4002968:	113fffcc 	andi	r4,r2,65535
 400296c:	390fc83a 	sub	r7,r7,r4
 4002970:	398d883a 	add	r6,r7,r6
 4002974:	300e943a 	slli	r7,r6,16
 4002978:	18ffffcc 	andi	r3,r3,65535
 400297c:	1008d43a 	srli	r4,r2,16
 4002980:	38ceb03a 	or	r7,r7,r3
 4002984:	49c00015 	stw	r7,0(r9)
 4002988:	300dd43a 	srai	r6,r6,16
 400298c:	4a400104 	addi	r9,r9,4
 4002990:	a17fe52e 	bgeu	r20,r5,4002928 <__alt_data_end+0xfc002928>
 4002994:	b0800017 	ldw	r2,0(r22)
 4002998:	10000b1e 	bne	r2,zero,40029c8 <quorem+0x120>
 400299c:	b0bfff04 	addi	r2,r22,-4
 40029a0:	a880082e 	bgeu	r21,r2,40029c4 <quorem+0x11c>
 40029a4:	b0ffff17 	ldw	r3,-4(r22)
 40029a8:	18000326 	beq	r3,zero,40029b8 <quorem+0x110>
 40029ac:	00000506 	br	40029c4 <quorem+0x11c>
 40029b0:	10c00017 	ldw	r3,0(r2)
 40029b4:	1800031e 	bne	r3,zero,40029c4 <quorem+0x11c>
 40029b8:	10bfff04 	addi	r2,r2,-4
 40029bc:	94bfffc4 	addi	r18,r18,-1
 40029c0:	a8bffb36 	bltu	r21,r2,40029b0 <__alt_data_end+0xfc0029b0>
 40029c4:	84800415 	stw	r18,16(r16)
 40029c8:	b80b883a 	mov	r5,r23
 40029cc:	8009883a 	mov	r4,r16
 40029d0:	40063f40 	call	40063f4 <__mcmp>
 40029d4:	10002616 	blt	r2,zero,4002a70 <quorem+0x1c8>
 40029d8:	9cc00044 	addi	r19,r19,1
 40029dc:	a805883a 	mov	r2,r21
 40029e0:	000b883a 	mov	r5,zero
 40029e4:	11000017 	ldw	r4,0(r2)
 40029e8:	89800017 	ldw	r6,0(r17)
 40029ec:	10800104 	addi	r2,r2,4
 40029f0:	20ffffcc 	andi	r3,r4,65535
 40029f4:	194b883a 	add	r5,r3,r5
 40029f8:	30ffffcc 	andi	r3,r6,65535
 40029fc:	28c7c83a 	sub	r3,r5,r3
 4002a00:	300cd43a 	srli	r6,r6,16
 4002a04:	2008d43a 	srli	r4,r4,16
 4002a08:	180bd43a 	srai	r5,r3,16
 4002a0c:	18ffffcc 	andi	r3,r3,65535
 4002a10:	2189c83a 	sub	r4,r4,r6
 4002a14:	2149883a 	add	r4,r4,r5
 4002a18:	200c943a 	slli	r6,r4,16
 4002a1c:	8c400104 	addi	r17,r17,4
 4002a20:	200bd43a 	srai	r5,r4,16
 4002a24:	30c6b03a 	or	r3,r6,r3
 4002a28:	10ffff15 	stw	r3,-4(r2)
 4002a2c:	a47fed2e 	bgeu	r20,r17,40029e4 <__alt_data_end+0xfc0029e4>
 4002a30:	9485883a 	add	r2,r18,r18
 4002a34:	1085883a 	add	r2,r2,r2
 4002a38:	a887883a 	add	r3,r21,r2
 4002a3c:	18800017 	ldw	r2,0(r3)
 4002a40:	10000b1e 	bne	r2,zero,4002a70 <quorem+0x1c8>
 4002a44:	18bfff04 	addi	r2,r3,-4
 4002a48:	a880082e 	bgeu	r21,r2,4002a6c <quorem+0x1c4>
 4002a4c:	18ffff17 	ldw	r3,-4(r3)
 4002a50:	18000326 	beq	r3,zero,4002a60 <quorem+0x1b8>
 4002a54:	00000506 	br	4002a6c <quorem+0x1c4>
 4002a58:	10c00017 	ldw	r3,0(r2)
 4002a5c:	1800031e 	bne	r3,zero,4002a6c <quorem+0x1c4>
 4002a60:	10bfff04 	addi	r2,r2,-4
 4002a64:	94bfffc4 	addi	r18,r18,-1
 4002a68:	a8bffb36 	bltu	r21,r2,4002a58 <__alt_data_end+0xfc002a58>
 4002a6c:	84800415 	stw	r18,16(r16)
 4002a70:	9805883a 	mov	r2,r19
 4002a74:	dfc00817 	ldw	ra,32(sp)
 4002a78:	ddc00717 	ldw	r23,28(sp)
 4002a7c:	dd800617 	ldw	r22,24(sp)
 4002a80:	dd400517 	ldw	r21,20(sp)
 4002a84:	dd000417 	ldw	r20,16(sp)
 4002a88:	dcc00317 	ldw	r19,12(sp)
 4002a8c:	dc800217 	ldw	r18,8(sp)
 4002a90:	dc400117 	ldw	r17,4(sp)
 4002a94:	dc000017 	ldw	r16,0(sp)
 4002a98:	dec00904 	addi	sp,sp,36
 4002a9c:	f800283a 	ret
 4002aa0:	0005883a 	mov	r2,zero
 4002aa4:	003ff306 	br	4002a74 <__alt_data_end+0xfc002a74>

04002aa8 <_dtoa_r>:
 4002aa8:	20801017 	ldw	r2,64(r4)
 4002aac:	deffde04 	addi	sp,sp,-136
 4002ab0:	df002015 	stw	fp,128(sp)
 4002ab4:	dcc01b15 	stw	r19,108(sp)
 4002ab8:	dc801a15 	stw	r18,104(sp)
 4002abc:	dc401915 	stw	r17,100(sp)
 4002ac0:	dc001815 	stw	r16,96(sp)
 4002ac4:	dfc02115 	stw	ra,132(sp)
 4002ac8:	ddc01f15 	stw	r23,124(sp)
 4002acc:	dd801e15 	stw	r22,120(sp)
 4002ad0:	dd401d15 	stw	r21,116(sp)
 4002ad4:	dd001c15 	stw	r20,112(sp)
 4002ad8:	d9c00315 	stw	r7,12(sp)
 4002adc:	2039883a 	mov	fp,r4
 4002ae0:	3023883a 	mov	r17,r6
 4002ae4:	2825883a 	mov	r18,r5
 4002ae8:	dc002417 	ldw	r16,144(sp)
 4002aec:	3027883a 	mov	r19,r6
 4002af0:	10000826 	beq	r2,zero,4002b14 <_dtoa_r+0x6c>
 4002af4:	21801117 	ldw	r6,68(r4)
 4002af8:	00c00044 	movi	r3,1
 4002afc:	100b883a 	mov	r5,r2
 4002b00:	1986983a 	sll	r3,r3,r6
 4002b04:	11800115 	stw	r6,4(r2)
 4002b08:	10c00215 	stw	r3,8(r2)
 4002b0c:	4005bd40 	call	4005bd4 <_Bfree>
 4002b10:	e0001015 	stw	zero,64(fp)
 4002b14:	88002e16 	blt	r17,zero,4002bd0 <_dtoa_r+0x128>
 4002b18:	80000015 	stw	zero,0(r16)
 4002b1c:	889ffc2c 	andhi	r2,r17,32752
 4002b20:	00dffc34 	movhi	r3,32752
 4002b24:	10c01c26 	beq	r2,r3,4002b98 <_dtoa_r+0xf0>
 4002b28:	000d883a 	mov	r6,zero
 4002b2c:	000f883a 	mov	r7,zero
 4002b30:	9009883a 	mov	r4,r18
 4002b34:	980b883a 	mov	r5,r19
 4002b38:	400b7900 	call	400b790 <__eqdf2>
 4002b3c:	10002b1e 	bne	r2,zero,4002bec <_dtoa_r+0x144>
 4002b40:	d9c02317 	ldw	r7,140(sp)
 4002b44:	00800044 	movi	r2,1
 4002b48:	38800015 	stw	r2,0(r7)
 4002b4c:	d8802517 	ldw	r2,148(sp)
 4002b50:	10019e26 	beq	r2,zero,40031cc <_dtoa_r+0x724>
 4002b54:	d8c02517 	ldw	r3,148(sp)
 4002b58:	00810074 	movhi	r2,1025
 4002b5c:	10807d44 	addi	r2,r2,501
 4002b60:	18800015 	stw	r2,0(r3)
 4002b64:	10bfffc4 	addi	r2,r2,-1
 4002b68:	dfc02117 	ldw	ra,132(sp)
 4002b6c:	df002017 	ldw	fp,128(sp)
 4002b70:	ddc01f17 	ldw	r23,124(sp)
 4002b74:	dd801e17 	ldw	r22,120(sp)
 4002b78:	dd401d17 	ldw	r21,116(sp)
 4002b7c:	dd001c17 	ldw	r20,112(sp)
 4002b80:	dcc01b17 	ldw	r19,108(sp)
 4002b84:	dc801a17 	ldw	r18,104(sp)
 4002b88:	dc401917 	ldw	r17,100(sp)
 4002b8c:	dc001817 	ldw	r16,96(sp)
 4002b90:	dec02204 	addi	sp,sp,136
 4002b94:	f800283a 	ret
 4002b98:	d8c02317 	ldw	r3,140(sp)
 4002b9c:	0089c3c4 	movi	r2,9999
 4002ba0:	18800015 	stw	r2,0(r3)
 4002ba4:	90017726 	beq	r18,zero,4003184 <_dtoa_r+0x6dc>
 4002ba8:	00810074 	movhi	r2,1025
 4002bac:	10808904 	addi	r2,r2,548
 4002bb0:	d9002517 	ldw	r4,148(sp)
 4002bb4:	203fec26 	beq	r4,zero,4002b68 <__alt_data_end+0xfc002b68>
 4002bb8:	10c000c7 	ldb	r3,3(r2)
 4002bbc:	1801781e 	bne	r3,zero,40031a0 <_dtoa_r+0x6f8>
 4002bc0:	10c000c4 	addi	r3,r2,3
 4002bc4:	d9802517 	ldw	r6,148(sp)
 4002bc8:	30c00015 	stw	r3,0(r6)
 4002bcc:	003fe606 	br	4002b68 <__alt_data_end+0xfc002b68>
 4002bd0:	04e00034 	movhi	r19,32768
 4002bd4:	9cffffc4 	addi	r19,r19,-1
 4002bd8:	00800044 	movi	r2,1
 4002bdc:	8ce6703a 	and	r19,r17,r19
 4002be0:	80800015 	stw	r2,0(r16)
 4002be4:	9823883a 	mov	r17,r19
 4002be8:	003fcc06 	br	4002b1c <__alt_data_end+0xfc002b1c>
 4002bec:	d8800204 	addi	r2,sp,8
 4002bf0:	d8800015 	stw	r2,0(sp)
 4002bf4:	d9c00104 	addi	r7,sp,4
 4002bf8:	900b883a 	mov	r5,r18
 4002bfc:	980d883a 	mov	r6,r19
 4002c00:	e009883a 	mov	r4,fp
 4002c04:	8820d53a 	srli	r16,r17,20
 4002c08:	40067c00 	call	40067c0 <__d2b>
 4002c0c:	d8800915 	stw	r2,36(sp)
 4002c10:	8001651e 	bne	r16,zero,40031a8 <_dtoa_r+0x700>
 4002c14:	dd800217 	ldw	r22,8(sp)
 4002c18:	dc000117 	ldw	r16,4(sp)
 4002c1c:	00800804 	movi	r2,32
 4002c20:	b421883a 	add	r16,r22,r16
 4002c24:	80c10c84 	addi	r3,r16,1074
 4002c28:	10c2d10e 	bge	r2,r3,4003770 <_dtoa_r+0xcc8>
 4002c2c:	00801004 	movi	r2,64
 4002c30:	81010484 	addi	r4,r16,1042
 4002c34:	10c7c83a 	sub	r3,r2,r3
 4002c38:	9108d83a 	srl	r4,r18,r4
 4002c3c:	88e2983a 	sll	r17,r17,r3
 4002c40:	2448b03a 	or	r4,r4,r17
 4002c44:	400cb580 	call	400cb58 <__floatunsidf>
 4002c48:	017f8434 	movhi	r5,65040
 4002c4c:	01800044 	movi	r6,1
 4002c50:	1009883a 	mov	r4,r2
 4002c54:	194b883a 	add	r5,r3,r5
 4002c58:	843fffc4 	addi	r16,r16,-1
 4002c5c:	d9801115 	stw	r6,68(sp)
 4002c60:	000d883a 	mov	r6,zero
 4002c64:	01cffe34 	movhi	r7,16376
 4002c68:	400c1000 	call	400c100 <__subdf3>
 4002c6c:	0198dbf4 	movhi	r6,25455
 4002c70:	01cff4f4 	movhi	r7,16339
 4002c74:	3190d844 	addi	r6,r6,17249
 4002c78:	39e1e9c4 	addi	r7,r7,-30809
 4002c7c:	1009883a 	mov	r4,r2
 4002c80:	180b883a 	mov	r5,r3
 4002c84:	400b9e80 	call	400b9e8 <__muldf3>
 4002c88:	01a2d874 	movhi	r6,35681
 4002c8c:	01cff1f4 	movhi	r7,16327
 4002c90:	31b22cc4 	addi	r6,r6,-14157
 4002c94:	39e28a04 	addi	r7,r7,-30168
 4002c98:	180b883a 	mov	r5,r3
 4002c9c:	1009883a 	mov	r4,r2
 4002ca0:	400a5fc0 	call	400a5fc <__adddf3>
 4002ca4:	8009883a 	mov	r4,r16
 4002ca8:	1029883a 	mov	r20,r2
 4002cac:	1823883a 	mov	r17,r3
 4002cb0:	400ca7c0 	call	400ca7c <__floatsidf>
 4002cb4:	019427f4 	movhi	r6,20639
 4002cb8:	01cff4f4 	movhi	r7,16339
 4002cbc:	319e7ec4 	addi	r6,r6,31227
 4002cc0:	39d104c4 	addi	r7,r7,17427
 4002cc4:	1009883a 	mov	r4,r2
 4002cc8:	180b883a 	mov	r5,r3
 4002ccc:	400b9e80 	call	400b9e8 <__muldf3>
 4002cd0:	100d883a 	mov	r6,r2
 4002cd4:	180f883a 	mov	r7,r3
 4002cd8:	a009883a 	mov	r4,r20
 4002cdc:	880b883a 	mov	r5,r17
 4002ce0:	400a5fc0 	call	400a5fc <__adddf3>
 4002ce4:	1009883a 	mov	r4,r2
 4002ce8:	180b883a 	mov	r5,r3
 4002cec:	1029883a 	mov	r20,r2
 4002cf0:	1823883a 	mov	r17,r3
 4002cf4:	400c9fc0 	call	400c9fc <__fixdfsi>
 4002cf8:	000d883a 	mov	r6,zero
 4002cfc:	000f883a 	mov	r7,zero
 4002d00:	a009883a 	mov	r4,r20
 4002d04:	880b883a 	mov	r5,r17
 4002d08:	d8800515 	stw	r2,20(sp)
 4002d0c:	400b8f40 	call	400b8f4 <__ledf2>
 4002d10:	10028716 	blt	r2,zero,4003730 <_dtoa_r+0xc88>
 4002d14:	d8c00517 	ldw	r3,20(sp)
 4002d18:	00800584 	movi	r2,22
 4002d1c:	10c27536 	bltu	r2,r3,40036f4 <_dtoa_r+0xc4c>
 4002d20:	180490fa 	slli	r2,r3,3
 4002d24:	00c10074 	movhi	r3,1025
 4002d28:	18c0a504 	addi	r3,r3,660
 4002d2c:	1885883a 	add	r2,r3,r2
 4002d30:	11000017 	ldw	r4,0(r2)
 4002d34:	11400117 	ldw	r5,4(r2)
 4002d38:	900d883a 	mov	r6,r18
 4002d3c:	980f883a 	mov	r7,r19
 4002d40:	400b8180 	call	400b818 <__gedf2>
 4002d44:	00828d0e 	bge	zero,r2,400377c <_dtoa_r+0xcd4>
 4002d48:	d9000517 	ldw	r4,20(sp)
 4002d4c:	d8000e15 	stw	zero,56(sp)
 4002d50:	213fffc4 	addi	r4,r4,-1
 4002d54:	d9000515 	stw	r4,20(sp)
 4002d58:	b42dc83a 	sub	r22,r22,r16
 4002d5c:	b5bfffc4 	addi	r22,r22,-1
 4002d60:	b0026f16 	blt	r22,zero,4003720 <_dtoa_r+0xc78>
 4002d64:	d8000815 	stw	zero,32(sp)
 4002d68:	d9c00517 	ldw	r7,20(sp)
 4002d6c:	38026416 	blt	r7,zero,4003700 <_dtoa_r+0xc58>
 4002d70:	b1ed883a 	add	r22,r22,r7
 4002d74:	d9c00d15 	stw	r7,52(sp)
 4002d78:	d8000a15 	stw	zero,40(sp)
 4002d7c:	d9800317 	ldw	r6,12(sp)
 4002d80:	00800244 	movi	r2,9
 4002d84:	11811436 	bltu	r2,r6,40031d8 <_dtoa_r+0x730>
 4002d88:	00800144 	movi	r2,5
 4002d8c:	1184e10e 	bge	r2,r6,4004114 <_dtoa_r+0x166c>
 4002d90:	31bfff04 	addi	r6,r6,-4
 4002d94:	d9800315 	stw	r6,12(sp)
 4002d98:	0023883a 	mov	r17,zero
 4002d9c:	d9800317 	ldw	r6,12(sp)
 4002da0:	008000c4 	movi	r2,3
 4002da4:	30836726 	beq	r6,r2,4003b44 <_dtoa_r+0x109c>
 4002da8:	1183410e 	bge	r2,r6,4003ab0 <_dtoa_r+0x1008>
 4002dac:	d9c00317 	ldw	r7,12(sp)
 4002db0:	00800104 	movi	r2,4
 4002db4:	38827c26 	beq	r7,r2,40037a8 <_dtoa_r+0xd00>
 4002db8:	00800144 	movi	r2,5
 4002dbc:	3884c41e 	bne	r7,r2,40040d0 <_dtoa_r+0x1628>
 4002dc0:	00800044 	movi	r2,1
 4002dc4:	d8800b15 	stw	r2,44(sp)
 4002dc8:	d8c00517 	ldw	r3,20(sp)
 4002dcc:	d9002217 	ldw	r4,136(sp)
 4002dd0:	1907883a 	add	r3,r3,r4
 4002dd4:	19800044 	addi	r6,r3,1
 4002dd8:	d8c00c15 	stw	r3,48(sp)
 4002ddc:	d9800615 	stw	r6,24(sp)
 4002de0:	0183a40e 	bge	zero,r6,4003c74 <_dtoa_r+0x11cc>
 4002de4:	d9800617 	ldw	r6,24(sp)
 4002de8:	3021883a 	mov	r16,r6
 4002dec:	e0001115 	stw	zero,68(fp)
 4002df0:	008005c4 	movi	r2,23
 4002df4:	1184c92e 	bgeu	r2,r6,400411c <_dtoa_r+0x1674>
 4002df8:	00c00044 	movi	r3,1
 4002dfc:	00800104 	movi	r2,4
 4002e00:	1085883a 	add	r2,r2,r2
 4002e04:	11000504 	addi	r4,r2,20
 4002e08:	180b883a 	mov	r5,r3
 4002e0c:	18c00044 	addi	r3,r3,1
 4002e10:	313ffb2e 	bgeu	r6,r4,4002e00 <__alt_data_end+0xfc002e00>
 4002e14:	e1401115 	stw	r5,68(fp)
 4002e18:	e009883a 	mov	r4,fp
 4002e1c:	4005b2c0 	call	4005b2c <_Balloc>
 4002e20:	d8800715 	stw	r2,28(sp)
 4002e24:	e0801015 	stw	r2,64(fp)
 4002e28:	00800384 	movi	r2,14
 4002e2c:	1400f736 	bltu	r2,r16,400320c <_dtoa_r+0x764>
 4002e30:	8800f626 	beq	r17,zero,400320c <_dtoa_r+0x764>
 4002e34:	d9c00517 	ldw	r7,20(sp)
 4002e38:	01c39a0e 	bge	zero,r7,4003ca4 <_dtoa_r+0x11fc>
 4002e3c:	388003cc 	andi	r2,r7,15
 4002e40:	100490fa 	slli	r2,r2,3
 4002e44:	382bd13a 	srai	r21,r7,4
 4002e48:	00c10074 	movhi	r3,1025
 4002e4c:	18c0a504 	addi	r3,r3,660
 4002e50:	1885883a 	add	r2,r3,r2
 4002e54:	a8c0040c 	andi	r3,r21,16
 4002e58:	12400017 	ldw	r9,0(r2)
 4002e5c:	12000117 	ldw	r8,4(r2)
 4002e60:	18037926 	beq	r3,zero,4003c48 <_dtoa_r+0x11a0>
 4002e64:	00810074 	movhi	r2,1025
 4002e68:	10809b04 	addi	r2,r2,620
 4002e6c:	11800817 	ldw	r6,32(r2)
 4002e70:	11c00917 	ldw	r7,36(r2)
 4002e74:	9009883a 	mov	r4,r18
 4002e78:	980b883a 	mov	r5,r19
 4002e7c:	da001715 	stw	r8,92(sp)
 4002e80:	da401615 	stw	r9,88(sp)
 4002e84:	400aea80 	call	400aea8 <__divdf3>
 4002e88:	da001717 	ldw	r8,92(sp)
 4002e8c:	da401617 	ldw	r9,88(sp)
 4002e90:	ad4003cc 	andi	r21,r21,15
 4002e94:	040000c4 	movi	r16,3
 4002e98:	1023883a 	mov	r17,r2
 4002e9c:	1829883a 	mov	r20,r3
 4002ea0:	a8001126 	beq	r21,zero,4002ee8 <_dtoa_r+0x440>
 4002ea4:	05c10074 	movhi	r23,1025
 4002ea8:	bdc09b04 	addi	r23,r23,620
 4002eac:	4805883a 	mov	r2,r9
 4002eb0:	4007883a 	mov	r3,r8
 4002eb4:	a980004c 	andi	r6,r21,1
 4002eb8:	1009883a 	mov	r4,r2
 4002ebc:	a82bd07a 	srai	r21,r21,1
 4002ec0:	180b883a 	mov	r5,r3
 4002ec4:	30000426 	beq	r6,zero,4002ed8 <_dtoa_r+0x430>
 4002ec8:	b9800017 	ldw	r6,0(r23)
 4002ecc:	b9c00117 	ldw	r7,4(r23)
 4002ed0:	84000044 	addi	r16,r16,1
 4002ed4:	400b9e80 	call	400b9e8 <__muldf3>
 4002ed8:	bdc00204 	addi	r23,r23,8
 4002edc:	a83ff51e 	bne	r21,zero,4002eb4 <__alt_data_end+0xfc002eb4>
 4002ee0:	1013883a 	mov	r9,r2
 4002ee4:	1811883a 	mov	r8,r3
 4002ee8:	480d883a 	mov	r6,r9
 4002eec:	400f883a 	mov	r7,r8
 4002ef0:	8809883a 	mov	r4,r17
 4002ef4:	a00b883a 	mov	r5,r20
 4002ef8:	400aea80 	call	400aea8 <__divdf3>
 4002efc:	d8800f15 	stw	r2,60(sp)
 4002f00:	d8c01015 	stw	r3,64(sp)
 4002f04:	d8c00e17 	ldw	r3,56(sp)
 4002f08:	18000626 	beq	r3,zero,4002f24 <_dtoa_r+0x47c>
 4002f0c:	d9000f17 	ldw	r4,60(sp)
 4002f10:	d9401017 	ldw	r5,64(sp)
 4002f14:	000d883a 	mov	r6,zero
 4002f18:	01cffc34 	movhi	r7,16368
 4002f1c:	400b8f40 	call	400b8f4 <__ledf2>
 4002f20:	10040b16 	blt	r2,zero,4003f50 <_dtoa_r+0x14a8>
 4002f24:	8009883a 	mov	r4,r16
 4002f28:	400ca7c0 	call	400ca7c <__floatsidf>
 4002f2c:	d9800f17 	ldw	r6,60(sp)
 4002f30:	d9c01017 	ldw	r7,64(sp)
 4002f34:	1009883a 	mov	r4,r2
 4002f38:	180b883a 	mov	r5,r3
 4002f3c:	400b9e80 	call	400b9e8 <__muldf3>
 4002f40:	000d883a 	mov	r6,zero
 4002f44:	01d00734 	movhi	r7,16412
 4002f48:	1009883a 	mov	r4,r2
 4002f4c:	180b883a 	mov	r5,r3
 4002f50:	400a5fc0 	call	400a5fc <__adddf3>
 4002f54:	1021883a 	mov	r16,r2
 4002f58:	d8800617 	ldw	r2,24(sp)
 4002f5c:	047f3034 	movhi	r17,64704
 4002f60:	1c63883a 	add	r17,r3,r17
 4002f64:	10031826 	beq	r2,zero,4003bc8 <_dtoa_r+0x1120>
 4002f68:	d8c00517 	ldw	r3,20(sp)
 4002f6c:	db000617 	ldw	r12,24(sp)
 4002f70:	d8c01315 	stw	r3,76(sp)
 4002f74:	d9000b17 	ldw	r4,44(sp)
 4002f78:	20038f26 	beq	r4,zero,4003db8 <_dtoa_r+0x1310>
 4002f7c:	60bfffc4 	addi	r2,r12,-1
 4002f80:	100490fa 	slli	r2,r2,3
 4002f84:	00c10074 	movhi	r3,1025
 4002f88:	18c0a504 	addi	r3,r3,660
 4002f8c:	1885883a 	add	r2,r3,r2
 4002f90:	11800017 	ldw	r6,0(r2)
 4002f94:	11c00117 	ldw	r7,4(r2)
 4002f98:	d8800717 	ldw	r2,28(sp)
 4002f9c:	0009883a 	mov	r4,zero
 4002fa0:	014ff834 	movhi	r5,16352
 4002fa4:	db001615 	stw	r12,88(sp)
 4002fa8:	15c00044 	addi	r23,r2,1
 4002fac:	400aea80 	call	400aea8 <__divdf3>
 4002fb0:	800d883a 	mov	r6,r16
 4002fb4:	880f883a 	mov	r7,r17
 4002fb8:	1009883a 	mov	r4,r2
 4002fbc:	180b883a 	mov	r5,r3
 4002fc0:	400c1000 	call	400c100 <__subdf3>
 4002fc4:	d9401017 	ldw	r5,64(sp)
 4002fc8:	d9000f17 	ldw	r4,60(sp)
 4002fcc:	102b883a 	mov	r21,r2
 4002fd0:	d8c01215 	stw	r3,72(sp)
 4002fd4:	400c9fc0 	call	400c9fc <__fixdfsi>
 4002fd8:	1009883a 	mov	r4,r2
 4002fdc:	1029883a 	mov	r20,r2
 4002fe0:	400ca7c0 	call	400ca7c <__floatsidf>
 4002fe4:	d9000f17 	ldw	r4,60(sp)
 4002fe8:	d9401017 	ldw	r5,64(sp)
 4002fec:	100d883a 	mov	r6,r2
 4002ff0:	180f883a 	mov	r7,r3
 4002ff4:	400c1000 	call	400c100 <__subdf3>
 4002ff8:	1823883a 	mov	r17,r3
 4002ffc:	d8c00717 	ldw	r3,28(sp)
 4003000:	d9401217 	ldw	r5,72(sp)
 4003004:	a2000c04 	addi	r8,r20,48
 4003008:	1021883a 	mov	r16,r2
 400300c:	1a000005 	stb	r8,0(r3)
 4003010:	800d883a 	mov	r6,r16
 4003014:	880f883a 	mov	r7,r17
 4003018:	a809883a 	mov	r4,r21
 400301c:	4029883a 	mov	r20,r8
 4003020:	400b8180 	call	400b818 <__gedf2>
 4003024:	00841d16 	blt	zero,r2,400409c <_dtoa_r+0x15f4>
 4003028:	800d883a 	mov	r6,r16
 400302c:	880f883a 	mov	r7,r17
 4003030:	0009883a 	mov	r4,zero
 4003034:	014ffc34 	movhi	r5,16368
 4003038:	400c1000 	call	400c100 <__subdf3>
 400303c:	d9401217 	ldw	r5,72(sp)
 4003040:	100d883a 	mov	r6,r2
 4003044:	180f883a 	mov	r7,r3
 4003048:	a809883a 	mov	r4,r21
 400304c:	400b8180 	call	400b818 <__gedf2>
 4003050:	db001617 	ldw	r12,88(sp)
 4003054:	00840e16 	blt	zero,r2,4004090 <_dtoa_r+0x15e8>
 4003058:	00800044 	movi	r2,1
 400305c:	13006b0e 	bge	r2,r12,400320c <_dtoa_r+0x764>
 4003060:	d9000717 	ldw	r4,28(sp)
 4003064:	dd800f15 	stw	r22,60(sp)
 4003068:	dcc01015 	stw	r19,64(sp)
 400306c:	2319883a 	add	r12,r4,r12
 4003070:	dcc01217 	ldw	r19,72(sp)
 4003074:	602d883a 	mov	r22,r12
 4003078:	dc801215 	stw	r18,72(sp)
 400307c:	b825883a 	mov	r18,r23
 4003080:	00000906 	br	40030a8 <_dtoa_r+0x600>
 4003084:	400c1000 	call	400c100 <__subdf3>
 4003088:	a80d883a 	mov	r6,r21
 400308c:	980f883a 	mov	r7,r19
 4003090:	1009883a 	mov	r4,r2
 4003094:	180b883a 	mov	r5,r3
 4003098:	400b8f40 	call	400b8f4 <__ledf2>
 400309c:	1003e816 	blt	r2,zero,4004040 <_dtoa_r+0x1598>
 40030a0:	b825883a 	mov	r18,r23
 40030a4:	bd83e926 	beq	r23,r22,400404c <_dtoa_r+0x15a4>
 40030a8:	a809883a 	mov	r4,r21
 40030ac:	980b883a 	mov	r5,r19
 40030b0:	000d883a 	mov	r6,zero
 40030b4:	01d00934 	movhi	r7,16420
 40030b8:	400b9e80 	call	400b9e8 <__muldf3>
 40030bc:	000d883a 	mov	r6,zero
 40030c0:	01d00934 	movhi	r7,16420
 40030c4:	8009883a 	mov	r4,r16
 40030c8:	880b883a 	mov	r5,r17
 40030cc:	102b883a 	mov	r21,r2
 40030d0:	1827883a 	mov	r19,r3
 40030d4:	400b9e80 	call	400b9e8 <__muldf3>
 40030d8:	180b883a 	mov	r5,r3
 40030dc:	1009883a 	mov	r4,r2
 40030e0:	1821883a 	mov	r16,r3
 40030e4:	1023883a 	mov	r17,r2
 40030e8:	400c9fc0 	call	400c9fc <__fixdfsi>
 40030ec:	1009883a 	mov	r4,r2
 40030f0:	1029883a 	mov	r20,r2
 40030f4:	400ca7c0 	call	400ca7c <__floatsidf>
 40030f8:	8809883a 	mov	r4,r17
 40030fc:	800b883a 	mov	r5,r16
 4003100:	100d883a 	mov	r6,r2
 4003104:	180f883a 	mov	r7,r3
 4003108:	400c1000 	call	400c100 <__subdf3>
 400310c:	a5000c04 	addi	r20,r20,48
 4003110:	a80d883a 	mov	r6,r21
 4003114:	980f883a 	mov	r7,r19
 4003118:	1009883a 	mov	r4,r2
 400311c:	180b883a 	mov	r5,r3
 4003120:	95000005 	stb	r20,0(r18)
 4003124:	1021883a 	mov	r16,r2
 4003128:	1823883a 	mov	r17,r3
 400312c:	400b8f40 	call	400b8f4 <__ledf2>
 4003130:	bdc00044 	addi	r23,r23,1
 4003134:	800d883a 	mov	r6,r16
 4003138:	880f883a 	mov	r7,r17
 400313c:	0009883a 	mov	r4,zero
 4003140:	014ffc34 	movhi	r5,16368
 4003144:	103fcf0e 	bge	r2,zero,4003084 <__alt_data_end+0xfc003084>
 4003148:	d8c01317 	ldw	r3,76(sp)
 400314c:	d8c00515 	stw	r3,20(sp)
 4003150:	d9400917 	ldw	r5,36(sp)
 4003154:	e009883a 	mov	r4,fp
 4003158:	4005bd40 	call	4005bd4 <_Bfree>
 400315c:	d9000517 	ldw	r4,20(sp)
 4003160:	d9802317 	ldw	r6,140(sp)
 4003164:	d9c02517 	ldw	r7,148(sp)
 4003168:	b8000005 	stb	zero,0(r23)
 400316c:	20800044 	addi	r2,r4,1
 4003170:	30800015 	stw	r2,0(r6)
 4003174:	3802aa26 	beq	r7,zero,4003c20 <_dtoa_r+0x1178>
 4003178:	3dc00015 	stw	r23,0(r7)
 400317c:	d8800717 	ldw	r2,28(sp)
 4003180:	003e7906 	br	4002b68 <__alt_data_end+0xfc002b68>
 4003184:	00800434 	movhi	r2,16
 4003188:	10bfffc4 	addi	r2,r2,-1
 400318c:	88a2703a 	and	r17,r17,r2
 4003190:	883e851e 	bne	r17,zero,4002ba8 <__alt_data_end+0xfc002ba8>
 4003194:	00810074 	movhi	r2,1025
 4003198:	10808604 	addi	r2,r2,536
 400319c:	003e8406 	br	4002bb0 <__alt_data_end+0xfc002bb0>
 40031a0:	10c00204 	addi	r3,r2,8
 40031a4:	003e8706 	br	4002bc4 <__alt_data_end+0xfc002bc4>
 40031a8:	01400434 	movhi	r5,16
 40031ac:	297fffc4 	addi	r5,r5,-1
 40031b0:	994a703a 	and	r5,r19,r5
 40031b4:	9009883a 	mov	r4,r18
 40031b8:	843f0044 	addi	r16,r16,-1023
 40031bc:	294ffc34 	orhi	r5,r5,16368
 40031c0:	dd800217 	ldw	r22,8(sp)
 40031c4:	d8001115 	stw	zero,68(sp)
 40031c8:	003ea506 	br	4002c60 <__alt_data_end+0xfc002c60>
 40031cc:	00810074 	movhi	r2,1025
 40031d0:	10807d04 	addi	r2,r2,500
 40031d4:	003e6406 	br	4002b68 <__alt_data_end+0xfc002b68>
 40031d8:	e0001115 	stw	zero,68(fp)
 40031dc:	000b883a 	mov	r5,zero
 40031e0:	e009883a 	mov	r4,fp
 40031e4:	4005b2c0 	call	4005b2c <_Balloc>
 40031e8:	01bfffc4 	movi	r6,-1
 40031ec:	01c00044 	movi	r7,1
 40031f0:	d8800715 	stw	r2,28(sp)
 40031f4:	d9800c15 	stw	r6,48(sp)
 40031f8:	e0801015 	stw	r2,64(fp)
 40031fc:	d8000315 	stw	zero,12(sp)
 4003200:	d9c00b15 	stw	r7,44(sp)
 4003204:	d9800615 	stw	r6,24(sp)
 4003208:	d8002215 	stw	zero,136(sp)
 400320c:	d8800117 	ldw	r2,4(sp)
 4003210:	10008916 	blt	r2,zero,4003438 <_dtoa_r+0x990>
 4003214:	d9000517 	ldw	r4,20(sp)
 4003218:	00c00384 	movi	r3,14
 400321c:	19008616 	blt	r3,r4,4003438 <_dtoa_r+0x990>
 4003220:	200490fa 	slli	r2,r4,3
 4003224:	00c10074 	movhi	r3,1025
 4003228:	d9802217 	ldw	r6,136(sp)
 400322c:	18c0a504 	addi	r3,r3,660
 4003230:	1885883a 	add	r2,r3,r2
 4003234:	14000017 	ldw	r16,0(r2)
 4003238:	14400117 	ldw	r17,4(r2)
 400323c:	30016316 	blt	r6,zero,40037cc <_dtoa_r+0xd24>
 4003240:	800d883a 	mov	r6,r16
 4003244:	880f883a 	mov	r7,r17
 4003248:	9009883a 	mov	r4,r18
 400324c:	980b883a 	mov	r5,r19
 4003250:	400aea80 	call	400aea8 <__divdf3>
 4003254:	180b883a 	mov	r5,r3
 4003258:	1009883a 	mov	r4,r2
 400325c:	400c9fc0 	call	400c9fc <__fixdfsi>
 4003260:	1009883a 	mov	r4,r2
 4003264:	102b883a 	mov	r21,r2
 4003268:	400ca7c0 	call	400ca7c <__floatsidf>
 400326c:	800d883a 	mov	r6,r16
 4003270:	880f883a 	mov	r7,r17
 4003274:	1009883a 	mov	r4,r2
 4003278:	180b883a 	mov	r5,r3
 400327c:	400b9e80 	call	400b9e8 <__muldf3>
 4003280:	100d883a 	mov	r6,r2
 4003284:	180f883a 	mov	r7,r3
 4003288:	9009883a 	mov	r4,r18
 400328c:	980b883a 	mov	r5,r19
 4003290:	400c1000 	call	400c100 <__subdf3>
 4003294:	d9c00717 	ldw	r7,28(sp)
 4003298:	1009883a 	mov	r4,r2
 400329c:	a8800c04 	addi	r2,r21,48
 40032a0:	38800005 	stb	r2,0(r7)
 40032a4:	3dc00044 	addi	r23,r7,1
 40032a8:	d9c00617 	ldw	r7,24(sp)
 40032ac:	01800044 	movi	r6,1
 40032b0:	180b883a 	mov	r5,r3
 40032b4:	2005883a 	mov	r2,r4
 40032b8:	39803826 	beq	r7,r6,400339c <_dtoa_r+0x8f4>
 40032bc:	000d883a 	mov	r6,zero
 40032c0:	01d00934 	movhi	r7,16420
 40032c4:	400b9e80 	call	400b9e8 <__muldf3>
 40032c8:	000d883a 	mov	r6,zero
 40032cc:	000f883a 	mov	r7,zero
 40032d0:	1009883a 	mov	r4,r2
 40032d4:	180b883a 	mov	r5,r3
 40032d8:	1025883a 	mov	r18,r2
 40032dc:	1827883a 	mov	r19,r3
 40032e0:	400b7900 	call	400b790 <__eqdf2>
 40032e4:	103f9a26 	beq	r2,zero,4003150 <__alt_data_end+0xfc003150>
 40032e8:	d9c00617 	ldw	r7,24(sp)
 40032ec:	d8c00717 	ldw	r3,28(sp)
 40032f0:	b829883a 	mov	r20,r23
 40032f4:	38bfffc4 	addi	r2,r7,-1
 40032f8:	18ad883a 	add	r22,r3,r2
 40032fc:	00000a06 	br	4003328 <_dtoa_r+0x880>
 4003300:	400b9e80 	call	400b9e8 <__muldf3>
 4003304:	000d883a 	mov	r6,zero
 4003308:	000f883a 	mov	r7,zero
 400330c:	1009883a 	mov	r4,r2
 4003310:	180b883a 	mov	r5,r3
 4003314:	1025883a 	mov	r18,r2
 4003318:	1827883a 	mov	r19,r3
 400331c:	b829883a 	mov	r20,r23
 4003320:	400b7900 	call	400b790 <__eqdf2>
 4003324:	103f8a26 	beq	r2,zero,4003150 <__alt_data_end+0xfc003150>
 4003328:	800d883a 	mov	r6,r16
 400332c:	880f883a 	mov	r7,r17
 4003330:	9009883a 	mov	r4,r18
 4003334:	980b883a 	mov	r5,r19
 4003338:	400aea80 	call	400aea8 <__divdf3>
 400333c:	180b883a 	mov	r5,r3
 4003340:	1009883a 	mov	r4,r2
 4003344:	400c9fc0 	call	400c9fc <__fixdfsi>
 4003348:	1009883a 	mov	r4,r2
 400334c:	102b883a 	mov	r21,r2
 4003350:	400ca7c0 	call	400ca7c <__floatsidf>
 4003354:	800d883a 	mov	r6,r16
 4003358:	880f883a 	mov	r7,r17
 400335c:	1009883a 	mov	r4,r2
 4003360:	180b883a 	mov	r5,r3
 4003364:	400b9e80 	call	400b9e8 <__muldf3>
 4003368:	100d883a 	mov	r6,r2
 400336c:	180f883a 	mov	r7,r3
 4003370:	9009883a 	mov	r4,r18
 4003374:	980b883a 	mov	r5,r19
 4003378:	400c1000 	call	400c100 <__subdf3>
 400337c:	aa000c04 	addi	r8,r21,48
 4003380:	a2000005 	stb	r8,0(r20)
 4003384:	000d883a 	mov	r6,zero
 4003388:	01d00934 	movhi	r7,16420
 400338c:	1009883a 	mov	r4,r2
 4003390:	180b883a 	mov	r5,r3
 4003394:	a5c00044 	addi	r23,r20,1
 4003398:	b53fd91e 	bne	r22,r20,4003300 <__alt_data_end+0xfc003300>
 400339c:	100d883a 	mov	r6,r2
 40033a0:	180f883a 	mov	r7,r3
 40033a4:	1009883a 	mov	r4,r2
 40033a8:	180b883a 	mov	r5,r3
 40033ac:	400a5fc0 	call	400a5fc <__adddf3>
 40033b0:	100d883a 	mov	r6,r2
 40033b4:	180f883a 	mov	r7,r3
 40033b8:	8009883a 	mov	r4,r16
 40033bc:	880b883a 	mov	r5,r17
 40033c0:	1027883a 	mov	r19,r2
 40033c4:	1825883a 	mov	r18,r3
 40033c8:	400b8f40 	call	400b8f4 <__ledf2>
 40033cc:	10000816 	blt	r2,zero,40033f0 <_dtoa_r+0x948>
 40033d0:	980d883a 	mov	r6,r19
 40033d4:	900f883a 	mov	r7,r18
 40033d8:	8009883a 	mov	r4,r16
 40033dc:	880b883a 	mov	r5,r17
 40033e0:	400b7900 	call	400b790 <__eqdf2>
 40033e4:	103f5a1e 	bne	r2,zero,4003150 <__alt_data_end+0xfc003150>
 40033e8:	ad40004c 	andi	r21,r21,1
 40033ec:	a83f5826 	beq	r21,zero,4003150 <__alt_data_end+0xfc003150>
 40033f0:	bd3fffc3 	ldbu	r20,-1(r23)
 40033f4:	b8bfffc4 	addi	r2,r23,-1
 40033f8:	1007883a 	mov	r3,r2
 40033fc:	01400e44 	movi	r5,57
 4003400:	d9800717 	ldw	r6,28(sp)
 4003404:	00000506 	br	400341c <_dtoa_r+0x974>
 4003408:	18ffffc4 	addi	r3,r3,-1
 400340c:	11824726 	beq	r2,r6,4003d2c <_dtoa_r+0x1284>
 4003410:	1d000003 	ldbu	r20,0(r3)
 4003414:	102f883a 	mov	r23,r2
 4003418:	10bfffc4 	addi	r2,r2,-1
 400341c:	a1003fcc 	andi	r4,r20,255
 4003420:	2100201c 	xori	r4,r4,128
 4003424:	213fe004 	addi	r4,r4,-128
 4003428:	217ff726 	beq	r4,r5,4003408 <__alt_data_end+0xfc003408>
 400342c:	a2000044 	addi	r8,r20,1
 4003430:	12000005 	stb	r8,0(r2)
 4003434:	003f4606 	br	4003150 <__alt_data_end+0xfc003150>
 4003438:	d9000b17 	ldw	r4,44(sp)
 400343c:	2000c826 	beq	r4,zero,4003760 <_dtoa_r+0xcb8>
 4003440:	d9800317 	ldw	r6,12(sp)
 4003444:	00c00044 	movi	r3,1
 4003448:	1980f90e 	bge	r3,r6,4003830 <_dtoa_r+0xd88>
 400344c:	d8800617 	ldw	r2,24(sp)
 4003450:	d8c00a17 	ldw	r3,40(sp)
 4003454:	157fffc4 	addi	r21,r2,-1
 4003458:	1d41f316 	blt	r3,r21,4003c28 <_dtoa_r+0x1180>
 400345c:	1d6bc83a 	sub	r21,r3,r21
 4003460:	d9c00617 	ldw	r7,24(sp)
 4003464:	3802aa16 	blt	r7,zero,4003f10 <_dtoa_r+0x1468>
 4003468:	dd000817 	ldw	r20,32(sp)
 400346c:	d8800617 	ldw	r2,24(sp)
 4003470:	d8c00817 	ldw	r3,32(sp)
 4003474:	01400044 	movi	r5,1
 4003478:	e009883a 	mov	r4,fp
 400347c:	1887883a 	add	r3,r3,r2
 4003480:	d8c00815 	stw	r3,32(sp)
 4003484:	b0ad883a 	add	r22,r22,r2
 4003488:	4005f380 	call	4005f38 <__i2b>
 400348c:	1023883a 	mov	r17,r2
 4003490:	a0000826 	beq	r20,zero,40034b4 <_dtoa_r+0xa0c>
 4003494:	0580070e 	bge	zero,r22,40034b4 <_dtoa_r+0xa0c>
 4003498:	a005883a 	mov	r2,r20
 400349c:	b500b916 	blt	r22,r20,4003784 <_dtoa_r+0xcdc>
 40034a0:	d9000817 	ldw	r4,32(sp)
 40034a4:	a0a9c83a 	sub	r20,r20,r2
 40034a8:	b0adc83a 	sub	r22,r22,r2
 40034ac:	2089c83a 	sub	r4,r4,r2
 40034b0:	d9000815 	stw	r4,32(sp)
 40034b4:	d9800a17 	ldw	r6,40(sp)
 40034b8:	0181810e 	bge	zero,r6,4003ac0 <_dtoa_r+0x1018>
 40034bc:	d9c00b17 	ldw	r7,44(sp)
 40034c0:	3800b326 	beq	r7,zero,4003790 <_dtoa_r+0xce8>
 40034c4:	a800b226 	beq	r21,zero,4003790 <_dtoa_r+0xce8>
 40034c8:	880b883a 	mov	r5,r17
 40034cc:	a80d883a 	mov	r6,r21
 40034d0:	e009883a 	mov	r4,fp
 40034d4:	400616c0 	call	400616c <__pow5mult>
 40034d8:	d9800917 	ldw	r6,36(sp)
 40034dc:	100b883a 	mov	r5,r2
 40034e0:	e009883a 	mov	r4,fp
 40034e4:	1023883a 	mov	r17,r2
 40034e8:	4005f740 	call	4005f74 <__multiply>
 40034ec:	1021883a 	mov	r16,r2
 40034f0:	d8800a17 	ldw	r2,40(sp)
 40034f4:	d9400917 	ldw	r5,36(sp)
 40034f8:	e009883a 	mov	r4,fp
 40034fc:	1545c83a 	sub	r2,r2,r21
 4003500:	d8800a15 	stw	r2,40(sp)
 4003504:	4005bd40 	call	4005bd4 <_Bfree>
 4003508:	d8c00a17 	ldw	r3,40(sp)
 400350c:	18009f1e 	bne	r3,zero,400378c <_dtoa_r+0xce4>
 4003510:	05c00044 	movi	r23,1
 4003514:	e009883a 	mov	r4,fp
 4003518:	b80b883a 	mov	r5,r23
 400351c:	4005f380 	call	4005f38 <__i2b>
 4003520:	d9000d17 	ldw	r4,52(sp)
 4003524:	102b883a 	mov	r21,r2
 4003528:	2000ce26 	beq	r4,zero,4003864 <_dtoa_r+0xdbc>
 400352c:	200d883a 	mov	r6,r4
 4003530:	100b883a 	mov	r5,r2
 4003534:	e009883a 	mov	r4,fp
 4003538:	400616c0 	call	400616c <__pow5mult>
 400353c:	d9800317 	ldw	r6,12(sp)
 4003540:	102b883a 	mov	r21,r2
 4003544:	b981810e 	bge	r23,r6,4003b4c <_dtoa_r+0x10a4>
 4003548:	0027883a 	mov	r19,zero
 400354c:	a8800417 	ldw	r2,16(r21)
 4003550:	05c00804 	movi	r23,32
 4003554:	10800104 	addi	r2,r2,4
 4003558:	1085883a 	add	r2,r2,r2
 400355c:	1085883a 	add	r2,r2,r2
 4003560:	a885883a 	add	r2,r21,r2
 4003564:	11000017 	ldw	r4,0(r2)
 4003568:	4005e200 	call	4005e20 <__hi0bits>
 400356c:	b885c83a 	sub	r2,r23,r2
 4003570:	1585883a 	add	r2,r2,r22
 4003574:	108007cc 	andi	r2,r2,31
 4003578:	1000b326 	beq	r2,zero,4003848 <_dtoa_r+0xda0>
 400357c:	00c00804 	movi	r3,32
 4003580:	1887c83a 	sub	r3,r3,r2
 4003584:	01000104 	movi	r4,4
 4003588:	20c2cd0e 	bge	r4,r3,40040c0 <_dtoa_r+0x1618>
 400358c:	00c00704 	movi	r3,28
 4003590:	1885c83a 	sub	r2,r3,r2
 4003594:	d8c00817 	ldw	r3,32(sp)
 4003598:	a0a9883a 	add	r20,r20,r2
 400359c:	b0ad883a 	add	r22,r22,r2
 40035a0:	1887883a 	add	r3,r3,r2
 40035a4:	d8c00815 	stw	r3,32(sp)
 40035a8:	d9800817 	ldw	r6,32(sp)
 40035ac:	0180040e 	bge	zero,r6,40035c0 <_dtoa_r+0xb18>
 40035b0:	800b883a 	mov	r5,r16
 40035b4:	e009883a 	mov	r4,fp
 40035b8:	40062ac0 	call	40062ac <__lshift>
 40035bc:	1021883a 	mov	r16,r2
 40035c0:	0580050e 	bge	zero,r22,40035d8 <_dtoa_r+0xb30>
 40035c4:	a80b883a 	mov	r5,r21
 40035c8:	b00d883a 	mov	r6,r22
 40035cc:	e009883a 	mov	r4,fp
 40035d0:	40062ac0 	call	40062ac <__lshift>
 40035d4:	102b883a 	mov	r21,r2
 40035d8:	d9c00e17 	ldw	r7,56(sp)
 40035dc:	3801211e 	bne	r7,zero,4003a64 <_dtoa_r+0xfbc>
 40035e0:	d9800617 	ldw	r6,24(sp)
 40035e4:	0181380e 	bge	zero,r6,4003ac8 <_dtoa_r+0x1020>
 40035e8:	d8c00b17 	ldw	r3,44(sp)
 40035ec:	1800ab1e 	bne	r3,zero,400389c <_dtoa_r+0xdf4>
 40035f0:	dc800717 	ldw	r18,28(sp)
 40035f4:	dcc00617 	ldw	r19,24(sp)
 40035f8:	9029883a 	mov	r20,r18
 40035fc:	00000206 	br	4003608 <_dtoa_r+0xb60>
 4003600:	4005bfc0 	call	4005bfc <__multadd>
 4003604:	1021883a 	mov	r16,r2
 4003608:	a80b883a 	mov	r5,r21
 400360c:	8009883a 	mov	r4,r16
 4003610:	40028a80 	call	40028a8 <quorem>
 4003614:	10800c04 	addi	r2,r2,48
 4003618:	90800005 	stb	r2,0(r18)
 400361c:	94800044 	addi	r18,r18,1
 4003620:	9507c83a 	sub	r3,r18,r20
 4003624:	000f883a 	mov	r7,zero
 4003628:	01800284 	movi	r6,10
 400362c:	800b883a 	mov	r5,r16
 4003630:	e009883a 	mov	r4,fp
 4003634:	1cfff216 	blt	r3,r19,4003600 <__alt_data_end+0xfc003600>
 4003638:	1011883a 	mov	r8,r2
 400363c:	d8800617 	ldw	r2,24(sp)
 4003640:	0082370e 	bge	zero,r2,4003f20 <_dtoa_r+0x1478>
 4003644:	d9000717 	ldw	r4,28(sp)
 4003648:	0025883a 	mov	r18,zero
 400364c:	20af883a 	add	r23,r4,r2
 4003650:	01800044 	movi	r6,1
 4003654:	800b883a 	mov	r5,r16
 4003658:	e009883a 	mov	r4,fp
 400365c:	da001715 	stw	r8,92(sp)
 4003660:	40062ac0 	call	40062ac <__lshift>
 4003664:	a80b883a 	mov	r5,r21
 4003668:	1009883a 	mov	r4,r2
 400366c:	d8800915 	stw	r2,36(sp)
 4003670:	40063f40 	call	40063f4 <__mcmp>
 4003674:	da001717 	ldw	r8,92(sp)
 4003678:	0081800e 	bge	zero,r2,4003c7c <_dtoa_r+0x11d4>
 400367c:	b93fffc3 	ldbu	r4,-1(r23)
 4003680:	b8bfffc4 	addi	r2,r23,-1
 4003684:	1007883a 	mov	r3,r2
 4003688:	01800e44 	movi	r6,57
 400368c:	d9c00717 	ldw	r7,28(sp)
 4003690:	00000506 	br	40036a8 <_dtoa_r+0xc00>
 4003694:	18ffffc4 	addi	r3,r3,-1
 4003698:	11c12326 	beq	r2,r7,4003b28 <_dtoa_r+0x1080>
 400369c:	19000003 	ldbu	r4,0(r3)
 40036a0:	102f883a 	mov	r23,r2
 40036a4:	10bfffc4 	addi	r2,r2,-1
 40036a8:	21403fcc 	andi	r5,r4,255
 40036ac:	2940201c 	xori	r5,r5,128
 40036b0:	297fe004 	addi	r5,r5,-128
 40036b4:	29bff726 	beq	r5,r6,4003694 <__alt_data_end+0xfc003694>
 40036b8:	21000044 	addi	r4,r4,1
 40036bc:	11000005 	stb	r4,0(r2)
 40036c0:	a80b883a 	mov	r5,r21
 40036c4:	e009883a 	mov	r4,fp
 40036c8:	4005bd40 	call	4005bd4 <_Bfree>
 40036cc:	883ea026 	beq	r17,zero,4003150 <__alt_data_end+0xfc003150>
 40036d0:	90000426 	beq	r18,zero,40036e4 <_dtoa_r+0xc3c>
 40036d4:	94400326 	beq	r18,r17,40036e4 <_dtoa_r+0xc3c>
 40036d8:	900b883a 	mov	r5,r18
 40036dc:	e009883a 	mov	r4,fp
 40036e0:	4005bd40 	call	4005bd4 <_Bfree>
 40036e4:	880b883a 	mov	r5,r17
 40036e8:	e009883a 	mov	r4,fp
 40036ec:	4005bd40 	call	4005bd4 <_Bfree>
 40036f0:	003e9706 	br	4003150 <__alt_data_end+0xfc003150>
 40036f4:	01800044 	movi	r6,1
 40036f8:	d9800e15 	stw	r6,56(sp)
 40036fc:	003d9606 	br	4002d58 <__alt_data_end+0xfc002d58>
 4003700:	d8800817 	ldw	r2,32(sp)
 4003704:	d8c00517 	ldw	r3,20(sp)
 4003708:	d8000d15 	stw	zero,52(sp)
 400370c:	10c5c83a 	sub	r2,r2,r3
 4003710:	00c9c83a 	sub	r4,zero,r3
 4003714:	d8800815 	stw	r2,32(sp)
 4003718:	d9000a15 	stw	r4,40(sp)
 400371c:	003d9706 	br	4002d7c <__alt_data_end+0xfc002d7c>
 4003720:	05adc83a 	sub	r22,zero,r22
 4003724:	dd800815 	stw	r22,32(sp)
 4003728:	002d883a 	mov	r22,zero
 400372c:	003d8e06 	br	4002d68 <__alt_data_end+0xfc002d68>
 4003730:	d9000517 	ldw	r4,20(sp)
 4003734:	400ca7c0 	call	400ca7c <__floatsidf>
 4003738:	100d883a 	mov	r6,r2
 400373c:	180f883a 	mov	r7,r3
 4003740:	a009883a 	mov	r4,r20
 4003744:	880b883a 	mov	r5,r17
 4003748:	400b7900 	call	400b790 <__eqdf2>
 400374c:	103d7126 	beq	r2,zero,4002d14 <__alt_data_end+0xfc002d14>
 4003750:	d9c00517 	ldw	r7,20(sp)
 4003754:	39ffffc4 	addi	r7,r7,-1
 4003758:	d9c00515 	stw	r7,20(sp)
 400375c:	003d6d06 	br	4002d14 <__alt_data_end+0xfc002d14>
 4003760:	dd400a17 	ldw	r21,40(sp)
 4003764:	dd000817 	ldw	r20,32(sp)
 4003768:	0023883a 	mov	r17,zero
 400376c:	003f4806 	br	4003490 <__alt_data_end+0xfc003490>
 4003770:	10e3c83a 	sub	r17,r2,r3
 4003774:	9448983a 	sll	r4,r18,r17
 4003778:	003d3206 	br	4002c44 <__alt_data_end+0xfc002c44>
 400377c:	d8000e15 	stw	zero,56(sp)
 4003780:	003d7506 	br	4002d58 <__alt_data_end+0xfc002d58>
 4003784:	b005883a 	mov	r2,r22
 4003788:	003f4506 	br	40034a0 <__alt_data_end+0xfc0034a0>
 400378c:	dc000915 	stw	r16,36(sp)
 4003790:	d9800a17 	ldw	r6,40(sp)
 4003794:	d9400917 	ldw	r5,36(sp)
 4003798:	e009883a 	mov	r4,fp
 400379c:	400616c0 	call	400616c <__pow5mult>
 40037a0:	1021883a 	mov	r16,r2
 40037a4:	003f5a06 	br	4003510 <__alt_data_end+0xfc003510>
 40037a8:	01c00044 	movi	r7,1
 40037ac:	d9c00b15 	stw	r7,44(sp)
 40037b0:	d8802217 	ldw	r2,136(sp)
 40037b4:	0081280e 	bge	zero,r2,4003c58 <_dtoa_r+0x11b0>
 40037b8:	100d883a 	mov	r6,r2
 40037bc:	1021883a 	mov	r16,r2
 40037c0:	d8800c15 	stw	r2,48(sp)
 40037c4:	d8800615 	stw	r2,24(sp)
 40037c8:	003d8806 	br	4002dec <__alt_data_end+0xfc002dec>
 40037cc:	d8800617 	ldw	r2,24(sp)
 40037d0:	00be9b16 	blt	zero,r2,4003240 <__alt_data_end+0xfc003240>
 40037d4:	10010f1e 	bne	r2,zero,4003c14 <_dtoa_r+0x116c>
 40037d8:	880b883a 	mov	r5,r17
 40037dc:	000d883a 	mov	r6,zero
 40037e0:	01d00534 	movhi	r7,16404
 40037e4:	8009883a 	mov	r4,r16
 40037e8:	400b9e80 	call	400b9e8 <__muldf3>
 40037ec:	900d883a 	mov	r6,r18
 40037f0:	980f883a 	mov	r7,r19
 40037f4:	1009883a 	mov	r4,r2
 40037f8:	180b883a 	mov	r5,r3
 40037fc:	400b8180 	call	400b818 <__gedf2>
 4003800:	002b883a 	mov	r21,zero
 4003804:	0023883a 	mov	r17,zero
 4003808:	1000bf16 	blt	r2,zero,4003b08 <_dtoa_r+0x1060>
 400380c:	d9802217 	ldw	r6,136(sp)
 4003810:	ddc00717 	ldw	r23,28(sp)
 4003814:	018c303a 	nor	r6,zero,r6
 4003818:	d9800515 	stw	r6,20(sp)
 400381c:	a80b883a 	mov	r5,r21
 4003820:	e009883a 	mov	r4,fp
 4003824:	4005bd40 	call	4005bd4 <_Bfree>
 4003828:	883e4926 	beq	r17,zero,4003150 <__alt_data_end+0xfc003150>
 400382c:	003fad06 	br	40036e4 <__alt_data_end+0xfc0036e4>
 4003830:	d9c01117 	ldw	r7,68(sp)
 4003834:	3801bc26 	beq	r7,zero,4003f28 <_dtoa_r+0x1480>
 4003838:	10810cc4 	addi	r2,r2,1075
 400383c:	dd400a17 	ldw	r21,40(sp)
 4003840:	dd000817 	ldw	r20,32(sp)
 4003844:	003f0a06 	br	4003470 <__alt_data_end+0xfc003470>
 4003848:	00800704 	movi	r2,28
 400384c:	d9000817 	ldw	r4,32(sp)
 4003850:	a0a9883a 	add	r20,r20,r2
 4003854:	b0ad883a 	add	r22,r22,r2
 4003858:	2089883a 	add	r4,r4,r2
 400385c:	d9000815 	stw	r4,32(sp)
 4003860:	003f5106 	br	40035a8 <__alt_data_end+0xfc0035a8>
 4003864:	d8c00317 	ldw	r3,12(sp)
 4003868:	b8c1fc0e 	bge	r23,r3,400405c <_dtoa_r+0x15b4>
 400386c:	0027883a 	mov	r19,zero
 4003870:	b805883a 	mov	r2,r23
 4003874:	003f3e06 	br	4003570 <__alt_data_end+0xfc003570>
 4003878:	880b883a 	mov	r5,r17
 400387c:	e009883a 	mov	r4,fp
 4003880:	000f883a 	mov	r7,zero
 4003884:	01800284 	movi	r6,10
 4003888:	4005bfc0 	call	4005bfc <__multadd>
 400388c:	d9000c17 	ldw	r4,48(sp)
 4003890:	1023883a 	mov	r17,r2
 4003894:	0102040e 	bge	zero,r4,40040a8 <_dtoa_r+0x1600>
 4003898:	d9000615 	stw	r4,24(sp)
 400389c:	0500050e 	bge	zero,r20,40038b4 <_dtoa_r+0xe0c>
 40038a0:	880b883a 	mov	r5,r17
 40038a4:	a00d883a 	mov	r6,r20
 40038a8:	e009883a 	mov	r4,fp
 40038ac:	40062ac0 	call	40062ac <__lshift>
 40038b0:	1023883a 	mov	r17,r2
 40038b4:	9801241e 	bne	r19,zero,4003d48 <_dtoa_r+0x12a0>
 40038b8:	8829883a 	mov	r20,r17
 40038bc:	d9000617 	ldw	r4,24(sp)
 40038c0:	dcc00717 	ldw	r19,28(sp)
 40038c4:	9480004c 	andi	r18,r18,1
 40038c8:	20bfffc4 	addi	r2,r4,-1
 40038cc:	9885883a 	add	r2,r19,r2
 40038d0:	d8800415 	stw	r2,16(sp)
 40038d4:	dc800615 	stw	r18,24(sp)
 40038d8:	a80b883a 	mov	r5,r21
 40038dc:	8009883a 	mov	r4,r16
 40038e0:	40028a80 	call	40028a8 <quorem>
 40038e4:	880b883a 	mov	r5,r17
 40038e8:	8009883a 	mov	r4,r16
 40038ec:	102f883a 	mov	r23,r2
 40038f0:	40063f40 	call	40063f4 <__mcmp>
 40038f4:	a80b883a 	mov	r5,r21
 40038f8:	a00d883a 	mov	r6,r20
 40038fc:	e009883a 	mov	r4,fp
 4003900:	102d883a 	mov	r22,r2
 4003904:	40064540 	call	4006454 <__mdiff>
 4003908:	1007883a 	mov	r3,r2
 400390c:	10800317 	ldw	r2,12(r2)
 4003910:	bc800c04 	addi	r18,r23,48
 4003914:	180b883a 	mov	r5,r3
 4003918:	10004e1e 	bne	r2,zero,4003a54 <_dtoa_r+0xfac>
 400391c:	8009883a 	mov	r4,r16
 4003920:	d8c01615 	stw	r3,88(sp)
 4003924:	40063f40 	call	40063f4 <__mcmp>
 4003928:	d8c01617 	ldw	r3,88(sp)
 400392c:	e009883a 	mov	r4,fp
 4003930:	d8801615 	stw	r2,88(sp)
 4003934:	180b883a 	mov	r5,r3
 4003938:	4005bd40 	call	4005bd4 <_Bfree>
 400393c:	d8801617 	ldw	r2,88(sp)
 4003940:	1000041e 	bne	r2,zero,4003954 <_dtoa_r+0xeac>
 4003944:	d9800317 	ldw	r6,12(sp)
 4003948:	3000021e 	bne	r6,zero,4003954 <_dtoa_r+0xeac>
 400394c:	d8c00617 	ldw	r3,24(sp)
 4003950:	18003726 	beq	r3,zero,4003a30 <_dtoa_r+0xf88>
 4003954:	b0002016 	blt	r22,zero,40039d8 <_dtoa_r+0xf30>
 4003958:	b000041e 	bne	r22,zero,400396c <_dtoa_r+0xec4>
 400395c:	d9000317 	ldw	r4,12(sp)
 4003960:	2000021e 	bne	r4,zero,400396c <_dtoa_r+0xec4>
 4003964:	d8c00617 	ldw	r3,24(sp)
 4003968:	18001b26 	beq	r3,zero,40039d8 <_dtoa_r+0xf30>
 400396c:	00810716 	blt	zero,r2,4003d8c <_dtoa_r+0x12e4>
 4003970:	d8c00417 	ldw	r3,16(sp)
 4003974:	9d800044 	addi	r22,r19,1
 4003978:	9c800005 	stb	r18,0(r19)
 400397c:	b02f883a 	mov	r23,r22
 4003980:	98c10626 	beq	r19,r3,4003d9c <_dtoa_r+0x12f4>
 4003984:	800b883a 	mov	r5,r16
 4003988:	000f883a 	mov	r7,zero
 400398c:	01800284 	movi	r6,10
 4003990:	e009883a 	mov	r4,fp
 4003994:	4005bfc0 	call	4005bfc <__multadd>
 4003998:	1021883a 	mov	r16,r2
 400399c:	000f883a 	mov	r7,zero
 40039a0:	01800284 	movi	r6,10
 40039a4:	880b883a 	mov	r5,r17
 40039a8:	e009883a 	mov	r4,fp
 40039ac:	8d002526 	beq	r17,r20,4003a44 <_dtoa_r+0xf9c>
 40039b0:	4005bfc0 	call	4005bfc <__multadd>
 40039b4:	a00b883a 	mov	r5,r20
 40039b8:	000f883a 	mov	r7,zero
 40039bc:	01800284 	movi	r6,10
 40039c0:	e009883a 	mov	r4,fp
 40039c4:	1023883a 	mov	r17,r2
 40039c8:	4005bfc0 	call	4005bfc <__multadd>
 40039cc:	1029883a 	mov	r20,r2
 40039d0:	b027883a 	mov	r19,r22
 40039d4:	003fc006 	br	40038d8 <__alt_data_end+0xfc0038d8>
 40039d8:	9011883a 	mov	r8,r18
 40039dc:	00800e0e 	bge	zero,r2,4003a18 <_dtoa_r+0xf70>
 40039e0:	800b883a 	mov	r5,r16
 40039e4:	01800044 	movi	r6,1
 40039e8:	e009883a 	mov	r4,fp
 40039ec:	da001715 	stw	r8,92(sp)
 40039f0:	40062ac0 	call	40062ac <__lshift>
 40039f4:	a80b883a 	mov	r5,r21
 40039f8:	1009883a 	mov	r4,r2
 40039fc:	1021883a 	mov	r16,r2
 4003a00:	40063f40 	call	40063f4 <__mcmp>
 4003a04:	da001717 	ldw	r8,92(sp)
 4003a08:	0081960e 	bge	zero,r2,4004064 <_dtoa_r+0x15bc>
 4003a0c:	00800e44 	movi	r2,57
 4003a10:	40817026 	beq	r8,r2,4003fd4 <_dtoa_r+0x152c>
 4003a14:	ba000c44 	addi	r8,r23,49
 4003a18:	8825883a 	mov	r18,r17
 4003a1c:	9dc00044 	addi	r23,r19,1
 4003a20:	9a000005 	stb	r8,0(r19)
 4003a24:	a023883a 	mov	r17,r20
 4003a28:	dc000915 	stw	r16,36(sp)
 4003a2c:	003f2406 	br	40036c0 <__alt_data_end+0xfc0036c0>
 4003a30:	00800e44 	movi	r2,57
 4003a34:	9011883a 	mov	r8,r18
 4003a38:	90816626 	beq	r18,r2,4003fd4 <_dtoa_r+0x152c>
 4003a3c:	05bff516 	blt	zero,r22,4003a14 <__alt_data_end+0xfc003a14>
 4003a40:	003ff506 	br	4003a18 <__alt_data_end+0xfc003a18>
 4003a44:	4005bfc0 	call	4005bfc <__multadd>
 4003a48:	1023883a 	mov	r17,r2
 4003a4c:	1029883a 	mov	r20,r2
 4003a50:	003fdf06 	br	40039d0 <__alt_data_end+0xfc0039d0>
 4003a54:	e009883a 	mov	r4,fp
 4003a58:	4005bd40 	call	4005bd4 <_Bfree>
 4003a5c:	00800044 	movi	r2,1
 4003a60:	003fbc06 	br	4003954 <__alt_data_end+0xfc003954>
 4003a64:	a80b883a 	mov	r5,r21
 4003a68:	8009883a 	mov	r4,r16
 4003a6c:	40063f40 	call	40063f4 <__mcmp>
 4003a70:	103edb0e 	bge	r2,zero,40035e0 <__alt_data_end+0xfc0035e0>
 4003a74:	800b883a 	mov	r5,r16
 4003a78:	000f883a 	mov	r7,zero
 4003a7c:	01800284 	movi	r6,10
 4003a80:	e009883a 	mov	r4,fp
 4003a84:	4005bfc0 	call	4005bfc <__multadd>
 4003a88:	1021883a 	mov	r16,r2
 4003a8c:	d8800517 	ldw	r2,20(sp)
 4003a90:	d8c00b17 	ldw	r3,44(sp)
 4003a94:	10bfffc4 	addi	r2,r2,-1
 4003a98:	d8800515 	stw	r2,20(sp)
 4003a9c:	183f761e 	bne	r3,zero,4003878 <__alt_data_end+0xfc003878>
 4003aa0:	d9000c17 	ldw	r4,48(sp)
 4003aa4:	0101730e 	bge	zero,r4,4004074 <_dtoa_r+0x15cc>
 4003aa8:	d9000615 	stw	r4,24(sp)
 4003aac:	003ed006 	br	40035f0 <__alt_data_end+0xfc0035f0>
 4003ab0:	00800084 	movi	r2,2
 4003ab4:	3081861e 	bne	r6,r2,40040d0 <_dtoa_r+0x1628>
 4003ab8:	d8000b15 	stw	zero,44(sp)
 4003abc:	003f3c06 	br	40037b0 <__alt_data_end+0xfc0037b0>
 4003ac0:	dc000917 	ldw	r16,36(sp)
 4003ac4:	003e9206 	br	4003510 <__alt_data_end+0xfc003510>
 4003ac8:	d9c00317 	ldw	r7,12(sp)
 4003acc:	00800084 	movi	r2,2
 4003ad0:	11fec50e 	bge	r2,r7,40035e8 <__alt_data_end+0xfc0035e8>
 4003ad4:	d9000617 	ldw	r4,24(sp)
 4003ad8:	20013c1e 	bne	r4,zero,4003fcc <_dtoa_r+0x1524>
 4003adc:	a80b883a 	mov	r5,r21
 4003ae0:	000f883a 	mov	r7,zero
 4003ae4:	01800144 	movi	r6,5
 4003ae8:	e009883a 	mov	r4,fp
 4003aec:	4005bfc0 	call	4005bfc <__multadd>
 4003af0:	100b883a 	mov	r5,r2
 4003af4:	8009883a 	mov	r4,r16
 4003af8:	102b883a 	mov	r21,r2
 4003afc:	40063f40 	call	40063f4 <__mcmp>
 4003b00:	dc000915 	stw	r16,36(sp)
 4003b04:	00bf410e 	bge	zero,r2,400380c <__alt_data_end+0xfc00380c>
 4003b08:	d9c00717 	ldw	r7,28(sp)
 4003b0c:	00800c44 	movi	r2,49
 4003b10:	38800005 	stb	r2,0(r7)
 4003b14:	d8800517 	ldw	r2,20(sp)
 4003b18:	3dc00044 	addi	r23,r7,1
 4003b1c:	10800044 	addi	r2,r2,1
 4003b20:	d8800515 	stw	r2,20(sp)
 4003b24:	003f3d06 	br	400381c <__alt_data_end+0xfc00381c>
 4003b28:	d9800517 	ldw	r6,20(sp)
 4003b2c:	d9c00717 	ldw	r7,28(sp)
 4003b30:	00800c44 	movi	r2,49
 4003b34:	31800044 	addi	r6,r6,1
 4003b38:	d9800515 	stw	r6,20(sp)
 4003b3c:	38800005 	stb	r2,0(r7)
 4003b40:	003edf06 	br	40036c0 <__alt_data_end+0xfc0036c0>
 4003b44:	d8000b15 	stw	zero,44(sp)
 4003b48:	003c9f06 	br	4002dc8 <__alt_data_end+0xfc002dc8>
 4003b4c:	903e7e1e 	bne	r18,zero,4003548 <__alt_data_end+0xfc003548>
 4003b50:	00800434 	movhi	r2,16
 4003b54:	10bfffc4 	addi	r2,r2,-1
 4003b58:	9884703a 	and	r2,r19,r2
 4003b5c:	1000ea1e 	bne	r2,zero,4003f08 <_dtoa_r+0x1460>
 4003b60:	9cdffc2c 	andhi	r19,r19,32752
 4003b64:	9800e826 	beq	r19,zero,4003f08 <_dtoa_r+0x1460>
 4003b68:	d9c00817 	ldw	r7,32(sp)
 4003b6c:	b5800044 	addi	r22,r22,1
 4003b70:	04c00044 	movi	r19,1
 4003b74:	39c00044 	addi	r7,r7,1
 4003b78:	d9c00815 	stw	r7,32(sp)
 4003b7c:	d8800d17 	ldw	r2,52(sp)
 4003b80:	103e721e 	bne	r2,zero,400354c <__alt_data_end+0xfc00354c>
 4003b84:	00800044 	movi	r2,1
 4003b88:	003e7906 	br	4003570 <__alt_data_end+0xfc003570>
 4003b8c:	8009883a 	mov	r4,r16
 4003b90:	400ca7c0 	call	400ca7c <__floatsidf>
 4003b94:	d9800f17 	ldw	r6,60(sp)
 4003b98:	d9c01017 	ldw	r7,64(sp)
 4003b9c:	1009883a 	mov	r4,r2
 4003ba0:	180b883a 	mov	r5,r3
 4003ba4:	400b9e80 	call	400b9e8 <__muldf3>
 4003ba8:	000d883a 	mov	r6,zero
 4003bac:	01d00734 	movhi	r7,16412
 4003bb0:	1009883a 	mov	r4,r2
 4003bb4:	180b883a 	mov	r5,r3
 4003bb8:	400a5fc0 	call	400a5fc <__adddf3>
 4003bbc:	047f3034 	movhi	r17,64704
 4003bc0:	1021883a 	mov	r16,r2
 4003bc4:	1c63883a 	add	r17,r3,r17
 4003bc8:	d9000f17 	ldw	r4,60(sp)
 4003bcc:	d9401017 	ldw	r5,64(sp)
 4003bd0:	000d883a 	mov	r6,zero
 4003bd4:	01d00534 	movhi	r7,16404
 4003bd8:	400c1000 	call	400c100 <__subdf3>
 4003bdc:	800d883a 	mov	r6,r16
 4003be0:	880f883a 	mov	r7,r17
 4003be4:	1009883a 	mov	r4,r2
 4003be8:	180b883a 	mov	r5,r3
 4003bec:	102b883a 	mov	r21,r2
 4003bf0:	1829883a 	mov	r20,r3
 4003bf4:	400b8180 	call	400b818 <__gedf2>
 4003bf8:	00806c16 	blt	zero,r2,4003dac <_dtoa_r+0x1304>
 4003bfc:	89e0003c 	xorhi	r7,r17,32768
 4003c00:	800d883a 	mov	r6,r16
 4003c04:	a809883a 	mov	r4,r21
 4003c08:	a00b883a 	mov	r5,r20
 4003c0c:	400b8f40 	call	400b8f4 <__ledf2>
 4003c10:	103d7e0e 	bge	r2,zero,400320c <__alt_data_end+0xfc00320c>
 4003c14:	002b883a 	mov	r21,zero
 4003c18:	0023883a 	mov	r17,zero
 4003c1c:	003efb06 	br	400380c <__alt_data_end+0xfc00380c>
 4003c20:	d8800717 	ldw	r2,28(sp)
 4003c24:	003bd006 	br	4002b68 <__alt_data_end+0xfc002b68>
 4003c28:	d9000a17 	ldw	r4,40(sp)
 4003c2c:	d9800d17 	ldw	r6,52(sp)
 4003c30:	dd400a15 	stw	r21,40(sp)
 4003c34:	a905c83a 	sub	r2,r21,r4
 4003c38:	308d883a 	add	r6,r6,r2
 4003c3c:	d9800d15 	stw	r6,52(sp)
 4003c40:	002b883a 	mov	r21,zero
 4003c44:	003e0606 	br	4003460 <__alt_data_end+0xfc003460>
 4003c48:	9023883a 	mov	r17,r18
 4003c4c:	9829883a 	mov	r20,r19
 4003c50:	04000084 	movi	r16,2
 4003c54:	003c9206 	br	4002ea0 <__alt_data_end+0xfc002ea0>
 4003c58:	04000044 	movi	r16,1
 4003c5c:	dc000c15 	stw	r16,48(sp)
 4003c60:	dc000615 	stw	r16,24(sp)
 4003c64:	dc002215 	stw	r16,136(sp)
 4003c68:	e0001115 	stw	zero,68(fp)
 4003c6c:	000b883a 	mov	r5,zero
 4003c70:	003c6906 	br	4002e18 <__alt_data_end+0xfc002e18>
 4003c74:	3021883a 	mov	r16,r6
 4003c78:	003ffb06 	br	4003c68 <__alt_data_end+0xfc003c68>
 4003c7c:	1000021e 	bne	r2,zero,4003c88 <_dtoa_r+0x11e0>
 4003c80:	4200004c 	andi	r8,r8,1
 4003c84:	403e7d1e 	bne	r8,zero,400367c <__alt_data_end+0xfc00367c>
 4003c88:	01000c04 	movi	r4,48
 4003c8c:	00000106 	br	4003c94 <_dtoa_r+0x11ec>
 4003c90:	102f883a 	mov	r23,r2
 4003c94:	b8bfffc4 	addi	r2,r23,-1
 4003c98:	10c00007 	ldb	r3,0(r2)
 4003c9c:	193ffc26 	beq	r3,r4,4003c90 <__alt_data_end+0xfc003c90>
 4003ca0:	003e8706 	br	40036c0 <__alt_data_end+0xfc0036c0>
 4003ca4:	d8800517 	ldw	r2,20(sp)
 4003ca8:	00a3c83a 	sub	r17,zero,r2
 4003cac:	8800a426 	beq	r17,zero,4003f40 <_dtoa_r+0x1498>
 4003cb0:	888003cc 	andi	r2,r17,15
 4003cb4:	100490fa 	slli	r2,r2,3
 4003cb8:	00c10074 	movhi	r3,1025
 4003cbc:	18c0a504 	addi	r3,r3,660
 4003cc0:	1885883a 	add	r2,r3,r2
 4003cc4:	11800017 	ldw	r6,0(r2)
 4003cc8:	11c00117 	ldw	r7,4(r2)
 4003ccc:	9009883a 	mov	r4,r18
 4003cd0:	980b883a 	mov	r5,r19
 4003cd4:	8823d13a 	srai	r17,r17,4
 4003cd8:	400b9e80 	call	400b9e8 <__muldf3>
 4003cdc:	d8800f15 	stw	r2,60(sp)
 4003ce0:	d8c01015 	stw	r3,64(sp)
 4003ce4:	8800e826 	beq	r17,zero,4004088 <_dtoa_r+0x15e0>
 4003ce8:	05010074 	movhi	r20,1025
 4003cec:	a5009b04 	addi	r20,r20,620
 4003cf0:	04000084 	movi	r16,2
 4003cf4:	8980004c 	andi	r6,r17,1
 4003cf8:	1009883a 	mov	r4,r2
 4003cfc:	8823d07a 	srai	r17,r17,1
 4003d00:	180b883a 	mov	r5,r3
 4003d04:	30000426 	beq	r6,zero,4003d18 <_dtoa_r+0x1270>
 4003d08:	a1800017 	ldw	r6,0(r20)
 4003d0c:	a1c00117 	ldw	r7,4(r20)
 4003d10:	84000044 	addi	r16,r16,1
 4003d14:	400b9e80 	call	400b9e8 <__muldf3>
 4003d18:	a5000204 	addi	r20,r20,8
 4003d1c:	883ff51e 	bne	r17,zero,4003cf4 <__alt_data_end+0xfc003cf4>
 4003d20:	d8800f15 	stw	r2,60(sp)
 4003d24:	d8c01015 	stw	r3,64(sp)
 4003d28:	003c7606 	br	4002f04 <__alt_data_end+0xfc002f04>
 4003d2c:	00c00c04 	movi	r3,48
 4003d30:	10c00005 	stb	r3,0(r2)
 4003d34:	d8c00517 	ldw	r3,20(sp)
 4003d38:	bd3fffc3 	ldbu	r20,-1(r23)
 4003d3c:	18c00044 	addi	r3,r3,1
 4003d40:	d8c00515 	stw	r3,20(sp)
 4003d44:	003db906 	br	400342c <__alt_data_end+0xfc00342c>
 4003d48:	89400117 	ldw	r5,4(r17)
 4003d4c:	e009883a 	mov	r4,fp
 4003d50:	4005b2c0 	call	4005b2c <_Balloc>
 4003d54:	89800417 	ldw	r6,16(r17)
 4003d58:	89400304 	addi	r5,r17,12
 4003d5c:	11000304 	addi	r4,r2,12
 4003d60:	31800084 	addi	r6,r6,2
 4003d64:	318d883a 	add	r6,r6,r6
 4003d68:	318d883a 	add	r6,r6,r6
 4003d6c:	1027883a 	mov	r19,r2
 4003d70:	40058bc0 	call	40058bc <memcpy>
 4003d74:	01800044 	movi	r6,1
 4003d78:	980b883a 	mov	r5,r19
 4003d7c:	e009883a 	mov	r4,fp
 4003d80:	40062ac0 	call	40062ac <__lshift>
 4003d84:	1029883a 	mov	r20,r2
 4003d88:	003ecc06 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003d8c:	00800e44 	movi	r2,57
 4003d90:	90809026 	beq	r18,r2,4003fd4 <_dtoa_r+0x152c>
 4003d94:	92000044 	addi	r8,r18,1
 4003d98:	003f1f06 	br	4003a18 <__alt_data_end+0xfc003a18>
 4003d9c:	9011883a 	mov	r8,r18
 4003da0:	8825883a 	mov	r18,r17
 4003da4:	a023883a 	mov	r17,r20
 4003da8:	003e2906 	br	4003650 <__alt_data_end+0xfc003650>
 4003dac:	002b883a 	mov	r21,zero
 4003db0:	0023883a 	mov	r17,zero
 4003db4:	003f5406 	br	4003b08 <__alt_data_end+0xfc003b08>
 4003db8:	61bfffc4 	addi	r6,r12,-1
 4003dbc:	300490fa 	slli	r2,r6,3
 4003dc0:	00c10074 	movhi	r3,1025
 4003dc4:	18c0a504 	addi	r3,r3,660
 4003dc8:	1885883a 	add	r2,r3,r2
 4003dcc:	11000017 	ldw	r4,0(r2)
 4003dd0:	11400117 	ldw	r5,4(r2)
 4003dd4:	d8800717 	ldw	r2,28(sp)
 4003dd8:	880f883a 	mov	r7,r17
 4003ddc:	d9801215 	stw	r6,72(sp)
 4003de0:	800d883a 	mov	r6,r16
 4003de4:	db001615 	stw	r12,88(sp)
 4003de8:	15c00044 	addi	r23,r2,1
 4003dec:	400b9e80 	call	400b9e8 <__muldf3>
 4003df0:	d9401017 	ldw	r5,64(sp)
 4003df4:	d9000f17 	ldw	r4,60(sp)
 4003df8:	d8c01515 	stw	r3,84(sp)
 4003dfc:	d8801415 	stw	r2,80(sp)
 4003e00:	400c9fc0 	call	400c9fc <__fixdfsi>
 4003e04:	1009883a 	mov	r4,r2
 4003e08:	1021883a 	mov	r16,r2
 4003e0c:	400ca7c0 	call	400ca7c <__floatsidf>
 4003e10:	d9000f17 	ldw	r4,60(sp)
 4003e14:	d9401017 	ldw	r5,64(sp)
 4003e18:	100d883a 	mov	r6,r2
 4003e1c:	180f883a 	mov	r7,r3
 4003e20:	400c1000 	call	400c100 <__subdf3>
 4003e24:	1829883a 	mov	r20,r3
 4003e28:	d8c00717 	ldw	r3,28(sp)
 4003e2c:	84000c04 	addi	r16,r16,48
 4003e30:	1023883a 	mov	r17,r2
 4003e34:	1c000005 	stb	r16,0(r3)
 4003e38:	db001617 	ldw	r12,88(sp)
 4003e3c:	00800044 	movi	r2,1
 4003e40:	60802226 	beq	r12,r2,4003ecc <_dtoa_r+0x1424>
 4003e44:	d9c00717 	ldw	r7,28(sp)
 4003e48:	8805883a 	mov	r2,r17
 4003e4c:	b82b883a 	mov	r21,r23
 4003e50:	3b19883a 	add	r12,r7,r12
 4003e54:	6023883a 	mov	r17,r12
 4003e58:	a007883a 	mov	r3,r20
 4003e5c:	dc800f15 	stw	r18,60(sp)
 4003e60:	000d883a 	mov	r6,zero
 4003e64:	01d00934 	movhi	r7,16420
 4003e68:	1009883a 	mov	r4,r2
 4003e6c:	180b883a 	mov	r5,r3
 4003e70:	400b9e80 	call	400b9e8 <__muldf3>
 4003e74:	180b883a 	mov	r5,r3
 4003e78:	1009883a 	mov	r4,r2
 4003e7c:	1829883a 	mov	r20,r3
 4003e80:	1025883a 	mov	r18,r2
 4003e84:	400c9fc0 	call	400c9fc <__fixdfsi>
 4003e88:	1009883a 	mov	r4,r2
 4003e8c:	1021883a 	mov	r16,r2
 4003e90:	400ca7c0 	call	400ca7c <__floatsidf>
 4003e94:	100d883a 	mov	r6,r2
 4003e98:	180f883a 	mov	r7,r3
 4003e9c:	9009883a 	mov	r4,r18
 4003ea0:	a00b883a 	mov	r5,r20
 4003ea4:	84000c04 	addi	r16,r16,48
 4003ea8:	400c1000 	call	400c100 <__subdf3>
 4003eac:	ad400044 	addi	r21,r21,1
 4003eb0:	ac3fffc5 	stb	r16,-1(r21)
 4003eb4:	ac7fea1e 	bne	r21,r17,4003e60 <__alt_data_end+0xfc003e60>
 4003eb8:	1023883a 	mov	r17,r2
 4003ebc:	d8801217 	ldw	r2,72(sp)
 4003ec0:	dc800f17 	ldw	r18,60(sp)
 4003ec4:	1829883a 	mov	r20,r3
 4003ec8:	b8af883a 	add	r23,r23,r2
 4003ecc:	d9001417 	ldw	r4,80(sp)
 4003ed0:	d9401517 	ldw	r5,84(sp)
 4003ed4:	000d883a 	mov	r6,zero
 4003ed8:	01cff834 	movhi	r7,16352
 4003edc:	400a5fc0 	call	400a5fc <__adddf3>
 4003ee0:	880d883a 	mov	r6,r17
 4003ee4:	a00f883a 	mov	r7,r20
 4003ee8:	1009883a 	mov	r4,r2
 4003eec:	180b883a 	mov	r5,r3
 4003ef0:	400b8f40 	call	400b8f4 <__ledf2>
 4003ef4:	10003e0e 	bge	r2,zero,4003ff0 <_dtoa_r+0x1548>
 4003ef8:	d9001317 	ldw	r4,76(sp)
 4003efc:	bd3fffc3 	ldbu	r20,-1(r23)
 4003f00:	d9000515 	stw	r4,20(sp)
 4003f04:	003d3b06 	br	40033f4 <__alt_data_end+0xfc0033f4>
 4003f08:	0027883a 	mov	r19,zero
 4003f0c:	003f1b06 	br	4003b7c <__alt_data_end+0xfc003b7c>
 4003f10:	d8800817 	ldw	r2,32(sp)
 4003f14:	11e9c83a 	sub	r20,r2,r7
 4003f18:	0005883a 	mov	r2,zero
 4003f1c:	003d5406 	br	4003470 <__alt_data_end+0xfc003470>
 4003f20:	00800044 	movi	r2,1
 4003f24:	003dc706 	br	4003644 <__alt_data_end+0xfc003644>
 4003f28:	d8c00217 	ldw	r3,8(sp)
 4003f2c:	00800d84 	movi	r2,54
 4003f30:	dd400a17 	ldw	r21,40(sp)
 4003f34:	10c5c83a 	sub	r2,r2,r3
 4003f38:	dd000817 	ldw	r20,32(sp)
 4003f3c:	003d4c06 	br	4003470 <__alt_data_end+0xfc003470>
 4003f40:	dc800f15 	stw	r18,60(sp)
 4003f44:	dcc01015 	stw	r19,64(sp)
 4003f48:	04000084 	movi	r16,2
 4003f4c:	003bed06 	br	4002f04 <__alt_data_end+0xfc002f04>
 4003f50:	d9000617 	ldw	r4,24(sp)
 4003f54:	203f0d26 	beq	r4,zero,4003b8c <__alt_data_end+0xfc003b8c>
 4003f58:	d9800c17 	ldw	r6,48(sp)
 4003f5c:	01bcab0e 	bge	zero,r6,400320c <__alt_data_end+0xfc00320c>
 4003f60:	d9401017 	ldw	r5,64(sp)
 4003f64:	d9000f17 	ldw	r4,60(sp)
 4003f68:	000d883a 	mov	r6,zero
 4003f6c:	01d00934 	movhi	r7,16420
 4003f70:	400b9e80 	call	400b9e8 <__muldf3>
 4003f74:	81000044 	addi	r4,r16,1
 4003f78:	d8800f15 	stw	r2,60(sp)
 4003f7c:	d8c01015 	stw	r3,64(sp)
 4003f80:	400ca7c0 	call	400ca7c <__floatsidf>
 4003f84:	d9800f17 	ldw	r6,60(sp)
 4003f88:	d9c01017 	ldw	r7,64(sp)
 4003f8c:	1009883a 	mov	r4,r2
 4003f90:	180b883a 	mov	r5,r3
 4003f94:	400b9e80 	call	400b9e8 <__muldf3>
 4003f98:	01d00734 	movhi	r7,16412
 4003f9c:	000d883a 	mov	r6,zero
 4003fa0:	1009883a 	mov	r4,r2
 4003fa4:	180b883a 	mov	r5,r3
 4003fa8:	400a5fc0 	call	400a5fc <__adddf3>
 4003fac:	d9c00517 	ldw	r7,20(sp)
 4003fb0:	047f3034 	movhi	r17,64704
 4003fb4:	1021883a 	mov	r16,r2
 4003fb8:	39ffffc4 	addi	r7,r7,-1
 4003fbc:	d9c01315 	stw	r7,76(sp)
 4003fc0:	1c63883a 	add	r17,r3,r17
 4003fc4:	db000c17 	ldw	r12,48(sp)
 4003fc8:	003bea06 	br	4002f74 <__alt_data_end+0xfc002f74>
 4003fcc:	dc000915 	stw	r16,36(sp)
 4003fd0:	003e0e06 	br	400380c <__alt_data_end+0xfc00380c>
 4003fd4:	01000e44 	movi	r4,57
 4003fd8:	8825883a 	mov	r18,r17
 4003fdc:	9dc00044 	addi	r23,r19,1
 4003fe0:	99000005 	stb	r4,0(r19)
 4003fe4:	a023883a 	mov	r17,r20
 4003fe8:	dc000915 	stw	r16,36(sp)
 4003fec:	003da406 	br	4003680 <__alt_data_end+0xfc003680>
 4003ff0:	d9801417 	ldw	r6,80(sp)
 4003ff4:	d9c01517 	ldw	r7,84(sp)
 4003ff8:	0009883a 	mov	r4,zero
 4003ffc:	014ff834 	movhi	r5,16352
 4004000:	400c1000 	call	400c100 <__subdf3>
 4004004:	880d883a 	mov	r6,r17
 4004008:	a00f883a 	mov	r7,r20
 400400c:	1009883a 	mov	r4,r2
 4004010:	180b883a 	mov	r5,r3
 4004014:	400b8180 	call	400b818 <__gedf2>
 4004018:	00bc7c0e 	bge	zero,r2,400320c <__alt_data_end+0xfc00320c>
 400401c:	01000c04 	movi	r4,48
 4004020:	00000106 	br	4004028 <_dtoa_r+0x1580>
 4004024:	102f883a 	mov	r23,r2
 4004028:	b8bfffc4 	addi	r2,r23,-1
 400402c:	10c00007 	ldb	r3,0(r2)
 4004030:	193ffc26 	beq	r3,r4,4004024 <__alt_data_end+0xfc004024>
 4004034:	d9801317 	ldw	r6,76(sp)
 4004038:	d9800515 	stw	r6,20(sp)
 400403c:	003c4406 	br	4003150 <__alt_data_end+0xfc003150>
 4004040:	d9801317 	ldw	r6,76(sp)
 4004044:	d9800515 	stw	r6,20(sp)
 4004048:	003cea06 	br	40033f4 <__alt_data_end+0xfc0033f4>
 400404c:	dd800f17 	ldw	r22,60(sp)
 4004050:	dcc01017 	ldw	r19,64(sp)
 4004054:	dc801217 	ldw	r18,72(sp)
 4004058:	003c6c06 	br	400320c <__alt_data_end+0xfc00320c>
 400405c:	903e031e 	bne	r18,zero,400386c <__alt_data_end+0xfc00386c>
 4004060:	003ebb06 	br	4003b50 <__alt_data_end+0xfc003b50>
 4004064:	103e6c1e 	bne	r2,zero,4003a18 <__alt_data_end+0xfc003a18>
 4004068:	4080004c 	andi	r2,r8,1
 400406c:	103e6a26 	beq	r2,zero,4003a18 <__alt_data_end+0xfc003a18>
 4004070:	003e6606 	br	4003a0c <__alt_data_end+0xfc003a0c>
 4004074:	d8c00317 	ldw	r3,12(sp)
 4004078:	00800084 	movi	r2,2
 400407c:	10c02916 	blt	r2,r3,4004124 <_dtoa_r+0x167c>
 4004080:	d9000c17 	ldw	r4,48(sp)
 4004084:	003e8806 	br	4003aa8 <__alt_data_end+0xfc003aa8>
 4004088:	04000084 	movi	r16,2
 400408c:	003b9d06 	br	4002f04 <__alt_data_end+0xfc002f04>
 4004090:	d9001317 	ldw	r4,76(sp)
 4004094:	d9000515 	stw	r4,20(sp)
 4004098:	003cd606 	br	40033f4 <__alt_data_end+0xfc0033f4>
 400409c:	d8801317 	ldw	r2,76(sp)
 40040a0:	d8800515 	stw	r2,20(sp)
 40040a4:	003c2a06 	br	4003150 <__alt_data_end+0xfc003150>
 40040a8:	d9800317 	ldw	r6,12(sp)
 40040ac:	00800084 	movi	r2,2
 40040b0:	11801516 	blt	r2,r6,4004108 <_dtoa_r+0x1660>
 40040b4:	d9c00c17 	ldw	r7,48(sp)
 40040b8:	d9c00615 	stw	r7,24(sp)
 40040bc:	003df706 	br	400389c <__alt_data_end+0xfc00389c>
 40040c0:	193d3926 	beq	r3,r4,40035a8 <__alt_data_end+0xfc0035a8>
 40040c4:	00c00f04 	movi	r3,60
 40040c8:	1885c83a 	sub	r2,r3,r2
 40040cc:	003ddf06 	br	400384c <__alt_data_end+0xfc00384c>
 40040d0:	e009883a 	mov	r4,fp
 40040d4:	e0001115 	stw	zero,68(fp)
 40040d8:	000b883a 	mov	r5,zero
 40040dc:	4005b2c0 	call	4005b2c <_Balloc>
 40040e0:	d8800715 	stw	r2,28(sp)
 40040e4:	d8c00717 	ldw	r3,28(sp)
 40040e8:	00bfffc4 	movi	r2,-1
 40040ec:	01000044 	movi	r4,1
 40040f0:	d8800c15 	stw	r2,48(sp)
 40040f4:	e0c01015 	stw	r3,64(fp)
 40040f8:	d9000b15 	stw	r4,44(sp)
 40040fc:	d8800615 	stw	r2,24(sp)
 4004100:	d8002215 	stw	zero,136(sp)
 4004104:	003c4106 	br	400320c <__alt_data_end+0xfc00320c>
 4004108:	d8c00c17 	ldw	r3,48(sp)
 400410c:	d8c00615 	stw	r3,24(sp)
 4004110:	003e7006 	br	4003ad4 <__alt_data_end+0xfc003ad4>
 4004114:	04400044 	movi	r17,1
 4004118:	003b2006 	br	4002d9c <__alt_data_end+0xfc002d9c>
 400411c:	000b883a 	mov	r5,zero
 4004120:	003b3d06 	br	4002e18 <__alt_data_end+0xfc002e18>
 4004124:	d8800c17 	ldw	r2,48(sp)
 4004128:	d8800615 	stw	r2,24(sp)
 400412c:	003e6906 	br	4003ad4 <__alt_data_end+0xfc003ad4>

04004130 <__sflush_r>:
 4004130:	2880030b 	ldhu	r2,12(r5)
 4004134:	defffb04 	addi	sp,sp,-20
 4004138:	dcc00315 	stw	r19,12(sp)
 400413c:	dc400115 	stw	r17,4(sp)
 4004140:	dfc00415 	stw	ra,16(sp)
 4004144:	dc800215 	stw	r18,8(sp)
 4004148:	dc000015 	stw	r16,0(sp)
 400414c:	10c0020c 	andi	r3,r2,8
 4004150:	2823883a 	mov	r17,r5
 4004154:	2027883a 	mov	r19,r4
 4004158:	1800311e 	bne	r3,zero,4004220 <__sflush_r+0xf0>
 400415c:	28c00117 	ldw	r3,4(r5)
 4004160:	10820014 	ori	r2,r2,2048
 4004164:	2880030d 	sth	r2,12(r5)
 4004168:	00c04b0e 	bge	zero,r3,4004298 <__sflush_r+0x168>
 400416c:	8a000a17 	ldw	r8,40(r17)
 4004170:	40002326 	beq	r8,zero,4004200 <__sflush_r+0xd0>
 4004174:	9c000017 	ldw	r16,0(r19)
 4004178:	10c4000c 	andi	r3,r2,4096
 400417c:	98000015 	stw	zero,0(r19)
 4004180:	18004826 	beq	r3,zero,40042a4 <__sflush_r+0x174>
 4004184:	89801417 	ldw	r6,80(r17)
 4004188:	10c0010c 	andi	r3,r2,4
 400418c:	18000626 	beq	r3,zero,40041a8 <__sflush_r+0x78>
 4004190:	88c00117 	ldw	r3,4(r17)
 4004194:	88800c17 	ldw	r2,48(r17)
 4004198:	30cdc83a 	sub	r6,r6,r3
 400419c:	10000226 	beq	r2,zero,40041a8 <__sflush_r+0x78>
 40041a0:	88800f17 	ldw	r2,60(r17)
 40041a4:	308dc83a 	sub	r6,r6,r2
 40041a8:	89400717 	ldw	r5,28(r17)
 40041ac:	000f883a 	mov	r7,zero
 40041b0:	9809883a 	mov	r4,r19
 40041b4:	403ee83a 	callr	r8
 40041b8:	00ffffc4 	movi	r3,-1
 40041bc:	10c04426 	beq	r2,r3,40042d0 <__sflush_r+0x1a0>
 40041c0:	88c0030b 	ldhu	r3,12(r17)
 40041c4:	89000417 	ldw	r4,16(r17)
 40041c8:	88000115 	stw	zero,4(r17)
 40041cc:	197dffcc 	andi	r5,r3,63487
 40041d0:	8940030d 	sth	r5,12(r17)
 40041d4:	89000015 	stw	r4,0(r17)
 40041d8:	18c4000c 	andi	r3,r3,4096
 40041dc:	18002c1e 	bne	r3,zero,4004290 <__sflush_r+0x160>
 40041e0:	89400c17 	ldw	r5,48(r17)
 40041e4:	9c000015 	stw	r16,0(r19)
 40041e8:	28000526 	beq	r5,zero,4004200 <__sflush_r+0xd0>
 40041ec:	88801004 	addi	r2,r17,64
 40041f0:	28800226 	beq	r5,r2,40041fc <__sflush_r+0xcc>
 40041f4:	9809883a 	mov	r4,r19
 40041f8:	400489c0 	call	400489c <_free_r>
 40041fc:	88000c15 	stw	zero,48(r17)
 4004200:	0005883a 	mov	r2,zero
 4004204:	dfc00417 	ldw	ra,16(sp)
 4004208:	dcc00317 	ldw	r19,12(sp)
 400420c:	dc800217 	ldw	r18,8(sp)
 4004210:	dc400117 	ldw	r17,4(sp)
 4004214:	dc000017 	ldw	r16,0(sp)
 4004218:	dec00504 	addi	sp,sp,20
 400421c:	f800283a 	ret
 4004220:	2c800417 	ldw	r18,16(r5)
 4004224:	903ff626 	beq	r18,zero,4004200 <__alt_data_end+0xfc004200>
 4004228:	2c000017 	ldw	r16,0(r5)
 400422c:	108000cc 	andi	r2,r2,3
 4004230:	2c800015 	stw	r18,0(r5)
 4004234:	84a1c83a 	sub	r16,r16,r18
 4004238:	1000131e 	bne	r2,zero,4004288 <__sflush_r+0x158>
 400423c:	28800517 	ldw	r2,20(r5)
 4004240:	88800215 	stw	r2,8(r17)
 4004244:	04000316 	blt	zero,r16,4004254 <__sflush_r+0x124>
 4004248:	003fed06 	br	4004200 <__alt_data_end+0xfc004200>
 400424c:	90a5883a 	add	r18,r18,r2
 4004250:	043feb0e 	bge	zero,r16,4004200 <__alt_data_end+0xfc004200>
 4004254:	88800917 	ldw	r2,36(r17)
 4004258:	89400717 	ldw	r5,28(r17)
 400425c:	800f883a 	mov	r7,r16
 4004260:	900d883a 	mov	r6,r18
 4004264:	9809883a 	mov	r4,r19
 4004268:	103ee83a 	callr	r2
 400426c:	80a1c83a 	sub	r16,r16,r2
 4004270:	00bff616 	blt	zero,r2,400424c <__alt_data_end+0xfc00424c>
 4004274:	88c0030b 	ldhu	r3,12(r17)
 4004278:	00bfffc4 	movi	r2,-1
 400427c:	18c01014 	ori	r3,r3,64
 4004280:	88c0030d 	sth	r3,12(r17)
 4004284:	003fdf06 	br	4004204 <__alt_data_end+0xfc004204>
 4004288:	0005883a 	mov	r2,zero
 400428c:	003fec06 	br	4004240 <__alt_data_end+0xfc004240>
 4004290:	88801415 	stw	r2,80(r17)
 4004294:	003fd206 	br	40041e0 <__alt_data_end+0xfc0041e0>
 4004298:	28c00f17 	ldw	r3,60(r5)
 400429c:	00ffb316 	blt	zero,r3,400416c <__alt_data_end+0xfc00416c>
 40042a0:	003fd706 	br	4004200 <__alt_data_end+0xfc004200>
 40042a4:	89400717 	ldw	r5,28(r17)
 40042a8:	000d883a 	mov	r6,zero
 40042ac:	01c00044 	movi	r7,1
 40042b0:	9809883a 	mov	r4,r19
 40042b4:	403ee83a 	callr	r8
 40042b8:	100d883a 	mov	r6,r2
 40042bc:	00bfffc4 	movi	r2,-1
 40042c0:	30801426 	beq	r6,r2,4004314 <__sflush_r+0x1e4>
 40042c4:	8880030b 	ldhu	r2,12(r17)
 40042c8:	8a000a17 	ldw	r8,40(r17)
 40042cc:	003fae06 	br	4004188 <__alt_data_end+0xfc004188>
 40042d0:	98c00017 	ldw	r3,0(r19)
 40042d4:	183fba26 	beq	r3,zero,40041c0 <__alt_data_end+0xfc0041c0>
 40042d8:	01000744 	movi	r4,29
 40042dc:	19000626 	beq	r3,r4,40042f8 <__sflush_r+0x1c8>
 40042e0:	01000584 	movi	r4,22
 40042e4:	19000426 	beq	r3,r4,40042f8 <__sflush_r+0x1c8>
 40042e8:	88c0030b 	ldhu	r3,12(r17)
 40042ec:	18c01014 	ori	r3,r3,64
 40042f0:	88c0030d 	sth	r3,12(r17)
 40042f4:	003fc306 	br	4004204 <__alt_data_end+0xfc004204>
 40042f8:	8880030b 	ldhu	r2,12(r17)
 40042fc:	88c00417 	ldw	r3,16(r17)
 4004300:	88000115 	stw	zero,4(r17)
 4004304:	10bdffcc 	andi	r2,r2,63487
 4004308:	8880030d 	sth	r2,12(r17)
 400430c:	88c00015 	stw	r3,0(r17)
 4004310:	003fb306 	br	40041e0 <__alt_data_end+0xfc0041e0>
 4004314:	98800017 	ldw	r2,0(r19)
 4004318:	103fea26 	beq	r2,zero,40042c4 <__alt_data_end+0xfc0042c4>
 400431c:	00c00744 	movi	r3,29
 4004320:	10c00226 	beq	r2,r3,400432c <__sflush_r+0x1fc>
 4004324:	00c00584 	movi	r3,22
 4004328:	10c0031e 	bne	r2,r3,4004338 <__sflush_r+0x208>
 400432c:	9c000015 	stw	r16,0(r19)
 4004330:	0005883a 	mov	r2,zero
 4004334:	003fb306 	br	4004204 <__alt_data_end+0xfc004204>
 4004338:	88c0030b 	ldhu	r3,12(r17)
 400433c:	3005883a 	mov	r2,r6
 4004340:	18c01014 	ori	r3,r3,64
 4004344:	88c0030d 	sth	r3,12(r17)
 4004348:	003fae06 	br	4004204 <__alt_data_end+0xfc004204>

0400434c <_fflush_r>:
 400434c:	defffd04 	addi	sp,sp,-12
 4004350:	dc000115 	stw	r16,4(sp)
 4004354:	dfc00215 	stw	ra,8(sp)
 4004358:	2021883a 	mov	r16,r4
 400435c:	20000226 	beq	r4,zero,4004368 <_fflush_r+0x1c>
 4004360:	20800e17 	ldw	r2,56(r4)
 4004364:	10000c26 	beq	r2,zero,4004398 <_fflush_r+0x4c>
 4004368:	2880030f 	ldh	r2,12(r5)
 400436c:	1000051e 	bne	r2,zero,4004384 <_fflush_r+0x38>
 4004370:	0005883a 	mov	r2,zero
 4004374:	dfc00217 	ldw	ra,8(sp)
 4004378:	dc000117 	ldw	r16,4(sp)
 400437c:	dec00304 	addi	sp,sp,12
 4004380:	f800283a 	ret
 4004384:	8009883a 	mov	r4,r16
 4004388:	dfc00217 	ldw	ra,8(sp)
 400438c:	dc000117 	ldw	r16,4(sp)
 4004390:	dec00304 	addi	sp,sp,12
 4004394:	40041301 	jmpi	4004130 <__sflush_r>
 4004398:	d9400015 	stw	r5,0(sp)
 400439c:	40047280 	call	4004728 <__sinit>
 40043a0:	d9400017 	ldw	r5,0(sp)
 40043a4:	003ff006 	br	4004368 <__alt_data_end+0xfc004368>

040043a8 <fflush>:
 40043a8:	20000526 	beq	r4,zero,40043c0 <fflush+0x18>
 40043ac:	00810074 	movhi	r2,1025
 40043b0:	10880304 	addi	r2,r2,8204
 40043b4:	200b883a 	mov	r5,r4
 40043b8:	11000017 	ldw	r4,0(r2)
 40043bc:	400434c1 	jmpi	400434c <_fflush_r>
 40043c0:	00810074 	movhi	r2,1025
 40043c4:	10880204 	addi	r2,r2,8200
 40043c8:	11000017 	ldw	r4,0(r2)
 40043cc:	01410034 	movhi	r5,1024
 40043d0:	2950d304 	addi	r5,r5,17228
 40043d4:	4004c701 	jmpi	4004c70 <_fwalk_reent>

040043d8 <__fp_unlock>:
 40043d8:	0005883a 	mov	r2,zero
 40043dc:	f800283a 	ret

040043e0 <_cleanup_r>:
 40043e0:	01410074 	movhi	r5,1025
 40043e4:	29619804 	addi	r5,r5,-31136
 40043e8:	4004c701 	jmpi	4004c70 <_fwalk_reent>

040043ec <__sinit.part.1>:
 40043ec:	defff704 	addi	sp,sp,-36
 40043f0:	00c10034 	movhi	r3,1024
 40043f4:	dfc00815 	stw	ra,32(sp)
 40043f8:	ddc00715 	stw	r23,28(sp)
 40043fc:	dd800615 	stw	r22,24(sp)
 4004400:	dd400515 	stw	r21,20(sp)
 4004404:	dd000415 	stw	r20,16(sp)
 4004408:	dcc00315 	stw	r19,12(sp)
 400440c:	dc800215 	stw	r18,8(sp)
 4004410:	dc400115 	stw	r17,4(sp)
 4004414:	dc000015 	stw	r16,0(sp)
 4004418:	18d0f804 	addi	r3,r3,17376
 400441c:	24000117 	ldw	r16,4(r4)
 4004420:	20c00f15 	stw	r3,60(r4)
 4004424:	2080bb04 	addi	r2,r4,748
 4004428:	00c000c4 	movi	r3,3
 400442c:	20c0b915 	stw	r3,740(r4)
 4004430:	2080ba15 	stw	r2,744(r4)
 4004434:	2000b815 	stw	zero,736(r4)
 4004438:	05c00204 	movi	r23,8
 400443c:	00800104 	movi	r2,4
 4004440:	2025883a 	mov	r18,r4
 4004444:	b80d883a 	mov	r6,r23
 4004448:	81001704 	addi	r4,r16,92
 400444c:	000b883a 	mov	r5,zero
 4004450:	80000015 	stw	zero,0(r16)
 4004454:	80000115 	stw	zero,4(r16)
 4004458:	80000215 	stw	zero,8(r16)
 400445c:	8080030d 	sth	r2,12(r16)
 4004460:	80001915 	stw	zero,100(r16)
 4004464:	8000038d 	sth	zero,14(r16)
 4004468:	80000415 	stw	zero,16(r16)
 400446c:	80000515 	stw	zero,20(r16)
 4004470:	80000615 	stw	zero,24(r16)
 4004474:	4005a040 	call	4005a04 <memset>
 4004478:	05810034 	movhi	r22,1024
 400447c:	94400217 	ldw	r17,8(r18)
 4004480:	05410034 	movhi	r21,1024
 4004484:	05010034 	movhi	r20,1024
 4004488:	04c10034 	movhi	r19,1024
 400448c:	b59afc04 	addi	r22,r22,27632
 4004490:	ad5b1304 	addi	r21,r21,27724
 4004494:	a51b3204 	addi	r20,r20,27848
 4004498:	9cdb4904 	addi	r19,r19,27940
 400449c:	85800815 	stw	r22,32(r16)
 40044a0:	85400915 	stw	r21,36(r16)
 40044a4:	85000a15 	stw	r20,40(r16)
 40044a8:	84c00b15 	stw	r19,44(r16)
 40044ac:	84000715 	stw	r16,28(r16)
 40044b0:	00800284 	movi	r2,10
 40044b4:	8880030d 	sth	r2,12(r17)
 40044b8:	00800044 	movi	r2,1
 40044bc:	b80d883a 	mov	r6,r23
 40044c0:	89001704 	addi	r4,r17,92
 40044c4:	000b883a 	mov	r5,zero
 40044c8:	88000015 	stw	zero,0(r17)
 40044cc:	88000115 	stw	zero,4(r17)
 40044d0:	88000215 	stw	zero,8(r17)
 40044d4:	88001915 	stw	zero,100(r17)
 40044d8:	8880038d 	sth	r2,14(r17)
 40044dc:	88000415 	stw	zero,16(r17)
 40044e0:	88000515 	stw	zero,20(r17)
 40044e4:	88000615 	stw	zero,24(r17)
 40044e8:	4005a040 	call	4005a04 <memset>
 40044ec:	94000317 	ldw	r16,12(r18)
 40044f0:	00800484 	movi	r2,18
 40044f4:	8c400715 	stw	r17,28(r17)
 40044f8:	8d800815 	stw	r22,32(r17)
 40044fc:	8d400915 	stw	r21,36(r17)
 4004500:	8d000a15 	stw	r20,40(r17)
 4004504:	8cc00b15 	stw	r19,44(r17)
 4004508:	8080030d 	sth	r2,12(r16)
 400450c:	00800084 	movi	r2,2
 4004510:	80000015 	stw	zero,0(r16)
 4004514:	80000115 	stw	zero,4(r16)
 4004518:	80000215 	stw	zero,8(r16)
 400451c:	80001915 	stw	zero,100(r16)
 4004520:	8080038d 	sth	r2,14(r16)
 4004524:	80000415 	stw	zero,16(r16)
 4004528:	80000515 	stw	zero,20(r16)
 400452c:	80000615 	stw	zero,24(r16)
 4004530:	b80d883a 	mov	r6,r23
 4004534:	000b883a 	mov	r5,zero
 4004538:	81001704 	addi	r4,r16,92
 400453c:	4005a040 	call	4005a04 <memset>
 4004540:	00800044 	movi	r2,1
 4004544:	84000715 	stw	r16,28(r16)
 4004548:	85800815 	stw	r22,32(r16)
 400454c:	85400915 	stw	r21,36(r16)
 4004550:	85000a15 	stw	r20,40(r16)
 4004554:	84c00b15 	stw	r19,44(r16)
 4004558:	90800e15 	stw	r2,56(r18)
 400455c:	dfc00817 	ldw	ra,32(sp)
 4004560:	ddc00717 	ldw	r23,28(sp)
 4004564:	dd800617 	ldw	r22,24(sp)
 4004568:	dd400517 	ldw	r21,20(sp)
 400456c:	dd000417 	ldw	r20,16(sp)
 4004570:	dcc00317 	ldw	r19,12(sp)
 4004574:	dc800217 	ldw	r18,8(sp)
 4004578:	dc400117 	ldw	r17,4(sp)
 400457c:	dc000017 	ldw	r16,0(sp)
 4004580:	dec00904 	addi	sp,sp,36
 4004584:	f800283a 	ret

04004588 <__fp_lock>:
 4004588:	0005883a 	mov	r2,zero
 400458c:	f800283a 	ret

04004590 <__sfmoreglue>:
 4004590:	defffc04 	addi	sp,sp,-16
 4004594:	dc400115 	stw	r17,4(sp)
 4004598:	2c7fffc4 	addi	r17,r5,-1
 400459c:	8c401a24 	muli	r17,r17,104
 40045a0:	dc800215 	stw	r18,8(sp)
 40045a4:	2825883a 	mov	r18,r5
 40045a8:	89401d04 	addi	r5,r17,116
 40045ac:	dc000015 	stw	r16,0(sp)
 40045b0:	dfc00315 	stw	ra,12(sp)
 40045b4:	4004fcc0 	call	4004fcc <_malloc_r>
 40045b8:	1021883a 	mov	r16,r2
 40045bc:	10000726 	beq	r2,zero,40045dc <__sfmoreglue+0x4c>
 40045c0:	11000304 	addi	r4,r2,12
 40045c4:	10000015 	stw	zero,0(r2)
 40045c8:	14800115 	stw	r18,4(r2)
 40045cc:	11000215 	stw	r4,8(r2)
 40045d0:	89801a04 	addi	r6,r17,104
 40045d4:	000b883a 	mov	r5,zero
 40045d8:	4005a040 	call	4005a04 <memset>
 40045dc:	8005883a 	mov	r2,r16
 40045e0:	dfc00317 	ldw	ra,12(sp)
 40045e4:	dc800217 	ldw	r18,8(sp)
 40045e8:	dc400117 	ldw	r17,4(sp)
 40045ec:	dc000017 	ldw	r16,0(sp)
 40045f0:	dec00404 	addi	sp,sp,16
 40045f4:	f800283a 	ret

040045f8 <__sfp>:
 40045f8:	defffb04 	addi	sp,sp,-20
 40045fc:	dc000015 	stw	r16,0(sp)
 4004600:	04010074 	movhi	r16,1025
 4004604:	84080204 	addi	r16,r16,8200
 4004608:	dcc00315 	stw	r19,12(sp)
 400460c:	2027883a 	mov	r19,r4
 4004610:	81000017 	ldw	r4,0(r16)
 4004614:	dfc00415 	stw	ra,16(sp)
 4004618:	dc800215 	stw	r18,8(sp)
 400461c:	20800e17 	ldw	r2,56(r4)
 4004620:	dc400115 	stw	r17,4(sp)
 4004624:	1000021e 	bne	r2,zero,4004630 <__sfp+0x38>
 4004628:	40043ec0 	call	40043ec <__sinit.part.1>
 400462c:	81000017 	ldw	r4,0(r16)
 4004630:	2480b804 	addi	r18,r4,736
 4004634:	047fffc4 	movi	r17,-1
 4004638:	91000117 	ldw	r4,4(r18)
 400463c:	94000217 	ldw	r16,8(r18)
 4004640:	213fffc4 	addi	r4,r4,-1
 4004644:	20000a16 	blt	r4,zero,4004670 <__sfp+0x78>
 4004648:	8080030f 	ldh	r2,12(r16)
 400464c:	10000c26 	beq	r2,zero,4004680 <__sfp+0x88>
 4004650:	80c01d04 	addi	r3,r16,116
 4004654:	00000206 	br	4004660 <__sfp+0x68>
 4004658:	18bfe60f 	ldh	r2,-104(r3)
 400465c:	10000826 	beq	r2,zero,4004680 <__sfp+0x88>
 4004660:	213fffc4 	addi	r4,r4,-1
 4004664:	1c3ffd04 	addi	r16,r3,-12
 4004668:	18c01a04 	addi	r3,r3,104
 400466c:	247ffa1e 	bne	r4,r17,4004658 <__alt_data_end+0xfc004658>
 4004670:	90800017 	ldw	r2,0(r18)
 4004674:	10001d26 	beq	r2,zero,40046ec <__sfp+0xf4>
 4004678:	1025883a 	mov	r18,r2
 400467c:	003fee06 	br	4004638 <__alt_data_end+0xfc004638>
 4004680:	00bfffc4 	movi	r2,-1
 4004684:	8080038d 	sth	r2,14(r16)
 4004688:	00800044 	movi	r2,1
 400468c:	8080030d 	sth	r2,12(r16)
 4004690:	80001915 	stw	zero,100(r16)
 4004694:	80000015 	stw	zero,0(r16)
 4004698:	80000215 	stw	zero,8(r16)
 400469c:	80000115 	stw	zero,4(r16)
 40046a0:	80000415 	stw	zero,16(r16)
 40046a4:	80000515 	stw	zero,20(r16)
 40046a8:	80000615 	stw	zero,24(r16)
 40046ac:	01800204 	movi	r6,8
 40046b0:	000b883a 	mov	r5,zero
 40046b4:	81001704 	addi	r4,r16,92
 40046b8:	4005a040 	call	4005a04 <memset>
 40046bc:	8005883a 	mov	r2,r16
 40046c0:	80000c15 	stw	zero,48(r16)
 40046c4:	80000d15 	stw	zero,52(r16)
 40046c8:	80001115 	stw	zero,68(r16)
 40046cc:	80001215 	stw	zero,72(r16)
 40046d0:	dfc00417 	ldw	ra,16(sp)
 40046d4:	dcc00317 	ldw	r19,12(sp)
 40046d8:	dc800217 	ldw	r18,8(sp)
 40046dc:	dc400117 	ldw	r17,4(sp)
 40046e0:	dc000017 	ldw	r16,0(sp)
 40046e4:	dec00504 	addi	sp,sp,20
 40046e8:	f800283a 	ret
 40046ec:	01400104 	movi	r5,4
 40046f0:	9809883a 	mov	r4,r19
 40046f4:	40045900 	call	4004590 <__sfmoreglue>
 40046f8:	90800015 	stw	r2,0(r18)
 40046fc:	103fde1e 	bne	r2,zero,4004678 <__alt_data_end+0xfc004678>
 4004700:	00800304 	movi	r2,12
 4004704:	98800015 	stw	r2,0(r19)
 4004708:	0005883a 	mov	r2,zero
 400470c:	003ff006 	br	40046d0 <__alt_data_end+0xfc0046d0>

04004710 <_cleanup>:
 4004710:	00810074 	movhi	r2,1025
 4004714:	10880204 	addi	r2,r2,8200
 4004718:	11000017 	ldw	r4,0(r2)
 400471c:	01410074 	movhi	r5,1025
 4004720:	29619804 	addi	r5,r5,-31136
 4004724:	4004c701 	jmpi	4004c70 <_fwalk_reent>

04004728 <__sinit>:
 4004728:	20800e17 	ldw	r2,56(r4)
 400472c:	10000126 	beq	r2,zero,4004734 <__sinit+0xc>
 4004730:	f800283a 	ret
 4004734:	40043ec1 	jmpi	40043ec <__sinit.part.1>

04004738 <__sfp_lock_acquire>:
 4004738:	f800283a 	ret

0400473c <__sfp_lock_release>:
 400473c:	f800283a 	ret

04004740 <__sinit_lock_acquire>:
 4004740:	f800283a 	ret

04004744 <__sinit_lock_release>:
 4004744:	f800283a 	ret

04004748 <__fp_lock_all>:
 4004748:	00810074 	movhi	r2,1025
 400474c:	10880304 	addi	r2,r2,8204
 4004750:	11000017 	ldw	r4,0(r2)
 4004754:	01410034 	movhi	r5,1024
 4004758:	29516204 	addi	r5,r5,17800
 400475c:	4004bac1 	jmpi	4004bac <_fwalk>

04004760 <__fp_unlock_all>:
 4004760:	00810074 	movhi	r2,1025
 4004764:	10880304 	addi	r2,r2,8204
 4004768:	11000017 	ldw	r4,0(r2)
 400476c:	01410034 	movhi	r5,1024
 4004770:	2950f604 	addi	r5,r5,17368
 4004774:	4004bac1 	jmpi	4004bac <_fwalk>

04004778 <_malloc_trim_r>:
 4004778:	defffb04 	addi	sp,sp,-20
 400477c:	dcc00315 	stw	r19,12(sp)
 4004780:	04c10074 	movhi	r19,1025
 4004784:	dc800215 	stw	r18,8(sp)
 4004788:	dc400115 	stw	r17,4(sp)
 400478c:	dc000015 	stw	r16,0(sp)
 4004790:	dfc00415 	stw	ra,16(sp)
 4004794:	2821883a 	mov	r16,r5
 4004798:	9cc26404 	addi	r19,r19,2448
 400479c:	2025883a 	mov	r18,r4
 40047a0:	400d2300 	call	400d230 <__malloc_lock>
 40047a4:	98800217 	ldw	r2,8(r19)
 40047a8:	14400117 	ldw	r17,4(r2)
 40047ac:	00bfff04 	movi	r2,-4
 40047b0:	88a2703a 	and	r17,r17,r2
 40047b4:	8c21c83a 	sub	r16,r17,r16
 40047b8:	8403fbc4 	addi	r16,r16,4079
 40047bc:	8020d33a 	srli	r16,r16,12
 40047c0:	0083ffc4 	movi	r2,4095
 40047c4:	843fffc4 	addi	r16,r16,-1
 40047c8:	8020933a 	slli	r16,r16,12
 40047cc:	1400060e 	bge	r2,r16,40047e8 <_malloc_trim_r+0x70>
 40047d0:	000b883a 	mov	r5,zero
 40047d4:	9009883a 	mov	r4,r18
 40047d8:	4006b9c0 	call	4006b9c <_sbrk_r>
 40047dc:	98c00217 	ldw	r3,8(r19)
 40047e0:	1c47883a 	add	r3,r3,r17
 40047e4:	10c00a26 	beq	r2,r3,4004810 <_malloc_trim_r+0x98>
 40047e8:	9009883a 	mov	r4,r18
 40047ec:	400d2540 	call	400d254 <__malloc_unlock>
 40047f0:	0005883a 	mov	r2,zero
 40047f4:	dfc00417 	ldw	ra,16(sp)
 40047f8:	dcc00317 	ldw	r19,12(sp)
 40047fc:	dc800217 	ldw	r18,8(sp)
 4004800:	dc400117 	ldw	r17,4(sp)
 4004804:	dc000017 	ldw	r16,0(sp)
 4004808:	dec00504 	addi	sp,sp,20
 400480c:	f800283a 	ret
 4004810:	040bc83a 	sub	r5,zero,r16
 4004814:	9009883a 	mov	r4,r18
 4004818:	4006b9c0 	call	4006b9c <_sbrk_r>
 400481c:	00ffffc4 	movi	r3,-1
 4004820:	10c00d26 	beq	r2,r3,4004858 <_malloc_trim_r+0xe0>
 4004824:	00c10074 	movhi	r3,1025
 4004828:	18cf0004 	addi	r3,r3,15360
 400482c:	18800017 	ldw	r2,0(r3)
 4004830:	99000217 	ldw	r4,8(r19)
 4004834:	8c23c83a 	sub	r17,r17,r16
 4004838:	8c400054 	ori	r17,r17,1
 400483c:	1421c83a 	sub	r16,r2,r16
 4004840:	24400115 	stw	r17,4(r4)
 4004844:	9009883a 	mov	r4,r18
 4004848:	1c000015 	stw	r16,0(r3)
 400484c:	400d2540 	call	400d254 <__malloc_unlock>
 4004850:	00800044 	movi	r2,1
 4004854:	003fe706 	br	40047f4 <__alt_data_end+0xfc0047f4>
 4004858:	000b883a 	mov	r5,zero
 400485c:	9009883a 	mov	r4,r18
 4004860:	4006b9c0 	call	4006b9c <_sbrk_r>
 4004864:	99000217 	ldw	r4,8(r19)
 4004868:	014003c4 	movi	r5,15
 400486c:	1107c83a 	sub	r3,r2,r4
 4004870:	28ffdd0e 	bge	r5,r3,40047e8 <__alt_data_end+0xfc0047e8>
 4004874:	01410074 	movhi	r5,1025
 4004878:	29480504 	addi	r5,r5,8212
 400487c:	29400017 	ldw	r5,0(r5)
 4004880:	18c00054 	ori	r3,r3,1
 4004884:	20c00115 	stw	r3,4(r4)
 4004888:	00c10074 	movhi	r3,1025
 400488c:	1145c83a 	sub	r2,r2,r5
 4004890:	18cf0004 	addi	r3,r3,15360
 4004894:	18800015 	stw	r2,0(r3)
 4004898:	003fd306 	br	40047e8 <__alt_data_end+0xfc0047e8>

0400489c <_free_r>:
 400489c:	28004126 	beq	r5,zero,40049a4 <_free_r+0x108>
 40048a0:	defffd04 	addi	sp,sp,-12
 40048a4:	dc400115 	stw	r17,4(sp)
 40048a8:	dc000015 	stw	r16,0(sp)
 40048ac:	2023883a 	mov	r17,r4
 40048b0:	2821883a 	mov	r16,r5
 40048b4:	dfc00215 	stw	ra,8(sp)
 40048b8:	400d2300 	call	400d230 <__malloc_lock>
 40048bc:	81ffff17 	ldw	r7,-4(r16)
 40048c0:	00bfff84 	movi	r2,-2
 40048c4:	01010074 	movhi	r4,1025
 40048c8:	81bffe04 	addi	r6,r16,-8
 40048cc:	3884703a 	and	r2,r7,r2
 40048d0:	21026404 	addi	r4,r4,2448
 40048d4:	308b883a 	add	r5,r6,r2
 40048d8:	2a400117 	ldw	r9,4(r5)
 40048dc:	22000217 	ldw	r8,8(r4)
 40048e0:	00ffff04 	movi	r3,-4
 40048e4:	48c6703a 	and	r3,r9,r3
 40048e8:	2a005726 	beq	r5,r8,4004a48 <_free_r+0x1ac>
 40048ec:	28c00115 	stw	r3,4(r5)
 40048f0:	39c0004c 	andi	r7,r7,1
 40048f4:	3800091e 	bne	r7,zero,400491c <_free_r+0x80>
 40048f8:	823ffe17 	ldw	r8,-8(r16)
 40048fc:	22400204 	addi	r9,r4,8
 4004900:	320dc83a 	sub	r6,r6,r8
 4004904:	31c00217 	ldw	r7,8(r6)
 4004908:	1205883a 	add	r2,r2,r8
 400490c:	3a406526 	beq	r7,r9,4004aa4 <_free_r+0x208>
 4004910:	32000317 	ldw	r8,12(r6)
 4004914:	3a000315 	stw	r8,12(r7)
 4004918:	41c00215 	stw	r7,8(r8)
 400491c:	28cf883a 	add	r7,r5,r3
 4004920:	39c00117 	ldw	r7,4(r7)
 4004924:	39c0004c 	andi	r7,r7,1
 4004928:	38003a26 	beq	r7,zero,4004a14 <_free_r+0x178>
 400492c:	10c00054 	ori	r3,r2,1
 4004930:	30c00115 	stw	r3,4(r6)
 4004934:	3087883a 	add	r3,r6,r2
 4004938:	18800015 	stw	r2,0(r3)
 400493c:	00c07fc4 	movi	r3,511
 4004940:	18801936 	bltu	r3,r2,40049a8 <_free_r+0x10c>
 4004944:	1004d0fa 	srli	r2,r2,3
 4004948:	01c00044 	movi	r7,1
 400494c:	21400117 	ldw	r5,4(r4)
 4004950:	10c00044 	addi	r3,r2,1
 4004954:	18c7883a 	add	r3,r3,r3
 4004958:	1005d0ba 	srai	r2,r2,2
 400495c:	18c7883a 	add	r3,r3,r3
 4004960:	18c7883a 	add	r3,r3,r3
 4004964:	1907883a 	add	r3,r3,r4
 4004968:	3884983a 	sll	r2,r7,r2
 400496c:	19c00017 	ldw	r7,0(r3)
 4004970:	1a3ffe04 	addi	r8,r3,-8
 4004974:	1144b03a 	or	r2,r2,r5
 4004978:	32000315 	stw	r8,12(r6)
 400497c:	31c00215 	stw	r7,8(r6)
 4004980:	20800115 	stw	r2,4(r4)
 4004984:	19800015 	stw	r6,0(r3)
 4004988:	39800315 	stw	r6,12(r7)
 400498c:	8809883a 	mov	r4,r17
 4004990:	dfc00217 	ldw	ra,8(sp)
 4004994:	dc400117 	ldw	r17,4(sp)
 4004998:	dc000017 	ldw	r16,0(sp)
 400499c:	dec00304 	addi	sp,sp,12
 40049a0:	400d2541 	jmpi	400d254 <__malloc_unlock>
 40049a4:	f800283a 	ret
 40049a8:	100ad27a 	srli	r5,r2,9
 40049ac:	00c00104 	movi	r3,4
 40049b0:	19404a36 	bltu	r3,r5,4004adc <_free_r+0x240>
 40049b4:	100ad1ba 	srli	r5,r2,6
 40049b8:	28c00e44 	addi	r3,r5,57
 40049bc:	18c7883a 	add	r3,r3,r3
 40049c0:	29400e04 	addi	r5,r5,56
 40049c4:	18c7883a 	add	r3,r3,r3
 40049c8:	18c7883a 	add	r3,r3,r3
 40049cc:	1909883a 	add	r4,r3,r4
 40049d0:	20c00017 	ldw	r3,0(r4)
 40049d4:	01c10074 	movhi	r7,1025
 40049d8:	213ffe04 	addi	r4,r4,-8
 40049dc:	39c26404 	addi	r7,r7,2448
 40049e0:	20c04426 	beq	r4,r3,4004af4 <_free_r+0x258>
 40049e4:	01ffff04 	movi	r7,-4
 40049e8:	19400117 	ldw	r5,4(r3)
 40049ec:	29ca703a 	and	r5,r5,r7
 40049f0:	1140022e 	bgeu	r2,r5,40049fc <_free_r+0x160>
 40049f4:	18c00217 	ldw	r3,8(r3)
 40049f8:	20fffb1e 	bne	r4,r3,40049e8 <__alt_data_end+0xfc0049e8>
 40049fc:	19000317 	ldw	r4,12(r3)
 4004a00:	31000315 	stw	r4,12(r6)
 4004a04:	30c00215 	stw	r3,8(r6)
 4004a08:	21800215 	stw	r6,8(r4)
 4004a0c:	19800315 	stw	r6,12(r3)
 4004a10:	003fde06 	br	400498c <__alt_data_end+0xfc00498c>
 4004a14:	29c00217 	ldw	r7,8(r5)
 4004a18:	10c5883a 	add	r2,r2,r3
 4004a1c:	00c10074 	movhi	r3,1025
 4004a20:	18c26604 	addi	r3,r3,2456
 4004a24:	38c03b26 	beq	r7,r3,4004b14 <_free_r+0x278>
 4004a28:	2a000317 	ldw	r8,12(r5)
 4004a2c:	11400054 	ori	r5,r2,1
 4004a30:	3087883a 	add	r3,r6,r2
 4004a34:	3a000315 	stw	r8,12(r7)
 4004a38:	41c00215 	stw	r7,8(r8)
 4004a3c:	31400115 	stw	r5,4(r6)
 4004a40:	18800015 	stw	r2,0(r3)
 4004a44:	003fbd06 	br	400493c <__alt_data_end+0xfc00493c>
 4004a48:	39c0004c 	andi	r7,r7,1
 4004a4c:	10c5883a 	add	r2,r2,r3
 4004a50:	3800071e 	bne	r7,zero,4004a70 <_free_r+0x1d4>
 4004a54:	81fffe17 	ldw	r7,-8(r16)
 4004a58:	31cdc83a 	sub	r6,r6,r7
 4004a5c:	30c00317 	ldw	r3,12(r6)
 4004a60:	31400217 	ldw	r5,8(r6)
 4004a64:	11c5883a 	add	r2,r2,r7
 4004a68:	28c00315 	stw	r3,12(r5)
 4004a6c:	19400215 	stw	r5,8(r3)
 4004a70:	10c00054 	ori	r3,r2,1
 4004a74:	30c00115 	stw	r3,4(r6)
 4004a78:	00c10074 	movhi	r3,1025
 4004a7c:	18c80604 	addi	r3,r3,8216
 4004a80:	18c00017 	ldw	r3,0(r3)
 4004a84:	21800215 	stw	r6,8(r4)
 4004a88:	10ffc036 	bltu	r2,r3,400498c <__alt_data_end+0xfc00498c>
 4004a8c:	00810074 	movhi	r2,1025
 4004a90:	108ef704 	addi	r2,r2,15324
 4004a94:	11400017 	ldw	r5,0(r2)
 4004a98:	8809883a 	mov	r4,r17
 4004a9c:	40047780 	call	4004778 <_malloc_trim_r>
 4004aa0:	003fba06 	br	400498c <__alt_data_end+0xfc00498c>
 4004aa4:	28c9883a 	add	r4,r5,r3
 4004aa8:	21000117 	ldw	r4,4(r4)
 4004aac:	2100004c 	andi	r4,r4,1
 4004ab0:	2000391e 	bne	r4,zero,4004b98 <_free_r+0x2fc>
 4004ab4:	29c00217 	ldw	r7,8(r5)
 4004ab8:	29000317 	ldw	r4,12(r5)
 4004abc:	1885883a 	add	r2,r3,r2
 4004ac0:	10c00054 	ori	r3,r2,1
 4004ac4:	39000315 	stw	r4,12(r7)
 4004ac8:	21c00215 	stw	r7,8(r4)
 4004acc:	30c00115 	stw	r3,4(r6)
 4004ad0:	308d883a 	add	r6,r6,r2
 4004ad4:	30800015 	stw	r2,0(r6)
 4004ad8:	003fac06 	br	400498c <__alt_data_end+0xfc00498c>
 4004adc:	00c00504 	movi	r3,20
 4004ae0:	19401536 	bltu	r3,r5,4004b38 <_free_r+0x29c>
 4004ae4:	28c01704 	addi	r3,r5,92
 4004ae8:	18c7883a 	add	r3,r3,r3
 4004aec:	294016c4 	addi	r5,r5,91
 4004af0:	003fb406 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004af4:	280bd0ba 	srai	r5,r5,2
 4004af8:	00c00044 	movi	r3,1
 4004afc:	38800117 	ldw	r2,4(r7)
 4004b00:	194a983a 	sll	r5,r3,r5
 4004b04:	2007883a 	mov	r3,r4
 4004b08:	2884b03a 	or	r2,r5,r2
 4004b0c:	38800115 	stw	r2,4(r7)
 4004b10:	003fbb06 	br	4004a00 <__alt_data_end+0xfc004a00>
 4004b14:	21800515 	stw	r6,20(r4)
 4004b18:	21800415 	stw	r6,16(r4)
 4004b1c:	10c00054 	ori	r3,r2,1
 4004b20:	31c00315 	stw	r7,12(r6)
 4004b24:	31c00215 	stw	r7,8(r6)
 4004b28:	30c00115 	stw	r3,4(r6)
 4004b2c:	308d883a 	add	r6,r6,r2
 4004b30:	30800015 	stw	r2,0(r6)
 4004b34:	003f9506 	br	400498c <__alt_data_end+0xfc00498c>
 4004b38:	00c01504 	movi	r3,84
 4004b3c:	19400536 	bltu	r3,r5,4004b54 <_free_r+0x2b8>
 4004b40:	100ad33a 	srli	r5,r2,12
 4004b44:	28c01bc4 	addi	r3,r5,111
 4004b48:	18c7883a 	add	r3,r3,r3
 4004b4c:	29401b84 	addi	r5,r5,110
 4004b50:	003f9c06 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004b54:	00c05504 	movi	r3,340
 4004b58:	19400536 	bltu	r3,r5,4004b70 <_free_r+0x2d4>
 4004b5c:	100ad3fa 	srli	r5,r2,15
 4004b60:	28c01e04 	addi	r3,r5,120
 4004b64:	18c7883a 	add	r3,r3,r3
 4004b68:	29401dc4 	addi	r5,r5,119
 4004b6c:	003f9506 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004b70:	00c15504 	movi	r3,1364
 4004b74:	19400536 	bltu	r3,r5,4004b8c <_free_r+0x2f0>
 4004b78:	100ad4ba 	srli	r5,r2,18
 4004b7c:	28c01f44 	addi	r3,r5,125
 4004b80:	18c7883a 	add	r3,r3,r3
 4004b84:	29401f04 	addi	r5,r5,124
 4004b88:	003f8e06 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004b8c:	00c03f84 	movi	r3,254
 4004b90:	01401f84 	movi	r5,126
 4004b94:	003f8b06 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004b98:	10c00054 	ori	r3,r2,1
 4004b9c:	30c00115 	stw	r3,4(r6)
 4004ba0:	308d883a 	add	r6,r6,r2
 4004ba4:	30800015 	stw	r2,0(r6)
 4004ba8:	003f7806 	br	400498c <__alt_data_end+0xfc00498c>

04004bac <_fwalk>:
 4004bac:	defff704 	addi	sp,sp,-36
 4004bb0:	dd000415 	stw	r20,16(sp)
 4004bb4:	dfc00815 	stw	ra,32(sp)
 4004bb8:	ddc00715 	stw	r23,28(sp)
 4004bbc:	dd800615 	stw	r22,24(sp)
 4004bc0:	dd400515 	stw	r21,20(sp)
 4004bc4:	dcc00315 	stw	r19,12(sp)
 4004bc8:	dc800215 	stw	r18,8(sp)
 4004bcc:	dc400115 	stw	r17,4(sp)
 4004bd0:	dc000015 	stw	r16,0(sp)
 4004bd4:	2500b804 	addi	r20,r4,736
 4004bd8:	a0002326 	beq	r20,zero,4004c68 <_fwalk+0xbc>
 4004bdc:	282b883a 	mov	r21,r5
 4004be0:	002f883a 	mov	r23,zero
 4004be4:	05800044 	movi	r22,1
 4004be8:	04ffffc4 	movi	r19,-1
 4004bec:	a4400117 	ldw	r17,4(r20)
 4004bf0:	a4800217 	ldw	r18,8(r20)
 4004bf4:	8c7fffc4 	addi	r17,r17,-1
 4004bf8:	88000d16 	blt	r17,zero,4004c30 <_fwalk+0x84>
 4004bfc:	94000304 	addi	r16,r18,12
 4004c00:	94800384 	addi	r18,r18,14
 4004c04:	8080000b 	ldhu	r2,0(r16)
 4004c08:	8c7fffc4 	addi	r17,r17,-1
 4004c0c:	813ffd04 	addi	r4,r16,-12
 4004c10:	b080042e 	bgeu	r22,r2,4004c24 <_fwalk+0x78>
 4004c14:	9080000f 	ldh	r2,0(r18)
 4004c18:	14c00226 	beq	r2,r19,4004c24 <_fwalk+0x78>
 4004c1c:	a83ee83a 	callr	r21
 4004c20:	b8aeb03a 	or	r23,r23,r2
 4004c24:	84001a04 	addi	r16,r16,104
 4004c28:	94801a04 	addi	r18,r18,104
 4004c2c:	8cfff51e 	bne	r17,r19,4004c04 <__alt_data_end+0xfc004c04>
 4004c30:	a5000017 	ldw	r20,0(r20)
 4004c34:	a03fed1e 	bne	r20,zero,4004bec <__alt_data_end+0xfc004bec>
 4004c38:	b805883a 	mov	r2,r23
 4004c3c:	dfc00817 	ldw	ra,32(sp)
 4004c40:	ddc00717 	ldw	r23,28(sp)
 4004c44:	dd800617 	ldw	r22,24(sp)
 4004c48:	dd400517 	ldw	r21,20(sp)
 4004c4c:	dd000417 	ldw	r20,16(sp)
 4004c50:	dcc00317 	ldw	r19,12(sp)
 4004c54:	dc800217 	ldw	r18,8(sp)
 4004c58:	dc400117 	ldw	r17,4(sp)
 4004c5c:	dc000017 	ldw	r16,0(sp)
 4004c60:	dec00904 	addi	sp,sp,36
 4004c64:	f800283a 	ret
 4004c68:	002f883a 	mov	r23,zero
 4004c6c:	003ff206 	br	4004c38 <__alt_data_end+0xfc004c38>

04004c70 <_fwalk_reent>:
 4004c70:	defff704 	addi	sp,sp,-36
 4004c74:	dd000415 	stw	r20,16(sp)
 4004c78:	dfc00815 	stw	ra,32(sp)
 4004c7c:	ddc00715 	stw	r23,28(sp)
 4004c80:	dd800615 	stw	r22,24(sp)
 4004c84:	dd400515 	stw	r21,20(sp)
 4004c88:	dcc00315 	stw	r19,12(sp)
 4004c8c:	dc800215 	stw	r18,8(sp)
 4004c90:	dc400115 	stw	r17,4(sp)
 4004c94:	dc000015 	stw	r16,0(sp)
 4004c98:	2500b804 	addi	r20,r4,736
 4004c9c:	a0002326 	beq	r20,zero,4004d2c <_fwalk_reent+0xbc>
 4004ca0:	282b883a 	mov	r21,r5
 4004ca4:	2027883a 	mov	r19,r4
 4004ca8:	002f883a 	mov	r23,zero
 4004cac:	05800044 	movi	r22,1
 4004cb0:	04bfffc4 	movi	r18,-1
 4004cb4:	a4400117 	ldw	r17,4(r20)
 4004cb8:	a4000217 	ldw	r16,8(r20)
 4004cbc:	8c7fffc4 	addi	r17,r17,-1
 4004cc0:	88000c16 	blt	r17,zero,4004cf4 <_fwalk_reent+0x84>
 4004cc4:	84000304 	addi	r16,r16,12
 4004cc8:	8080000b 	ldhu	r2,0(r16)
 4004ccc:	8c7fffc4 	addi	r17,r17,-1
 4004cd0:	817ffd04 	addi	r5,r16,-12
 4004cd4:	b080052e 	bgeu	r22,r2,4004cec <_fwalk_reent+0x7c>
 4004cd8:	8080008f 	ldh	r2,2(r16)
 4004cdc:	9809883a 	mov	r4,r19
 4004ce0:	14800226 	beq	r2,r18,4004cec <_fwalk_reent+0x7c>
 4004ce4:	a83ee83a 	callr	r21
 4004ce8:	b8aeb03a 	or	r23,r23,r2
 4004cec:	84001a04 	addi	r16,r16,104
 4004cf0:	8cbff51e 	bne	r17,r18,4004cc8 <__alt_data_end+0xfc004cc8>
 4004cf4:	a5000017 	ldw	r20,0(r20)
 4004cf8:	a03fee1e 	bne	r20,zero,4004cb4 <__alt_data_end+0xfc004cb4>
 4004cfc:	b805883a 	mov	r2,r23
 4004d00:	dfc00817 	ldw	ra,32(sp)
 4004d04:	ddc00717 	ldw	r23,28(sp)
 4004d08:	dd800617 	ldw	r22,24(sp)
 4004d0c:	dd400517 	ldw	r21,20(sp)
 4004d10:	dd000417 	ldw	r20,16(sp)
 4004d14:	dcc00317 	ldw	r19,12(sp)
 4004d18:	dc800217 	ldw	r18,8(sp)
 4004d1c:	dc400117 	ldw	r17,4(sp)
 4004d20:	dc000017 	ldw	r16,0(sp)
 4004d24:	dec00904 	addi	sp,sp,36
 4004d28:	f800283a 	ret
 4004d2c:	002f883a 	mov	r23,zero
 4004d30:	003ff206 	br	4004cfc <__alt_data_end+0xfc004cfc>

04004d34 <_setlocale_r>:
 4004d34:	30001b26 	beq	r6,zero,4004da4 <_setlocale_r+0x70>
 4004d38:	01410074 	movhi	r5,1025
 4004d3c:	defffe04 	addi	sp,sp,-8
 4004d40:	29408b04 	addi	r5,r5,556
 4004d44:	3009883a 	mov	r4,r6
 4004d48:	dc000015 	stw	r16,0(sp)
 4004d4c:	dfc00115 	stw	ra,4(sp)
 4004d50:	3021883a 	mov	r16,r6
 4004d54:	4006d2c0 	call	4006d2c <strcmp>
 4004d58:	1000061e 	bne	r2,zero,4004d74 <_setlocale_r+0x40>
 4004d5c:	00810074 	movhi	r2,1025
 4004d60:	10808a04 	addi	r2,r2,552
 4004d64:	dfc00117 	ldw	ra,4(sp)
 4004d68:	dc000017 	ldw	r16,0(sp)
 4004d6c:	dec00204 	addi	sp,sp,8
 4004d70:	f800283a 	ret
 4004d74:	01410074 	movhi	r5,1025
 4004d78:	29408a04 	addi	r5,r5,552
 4004d7c:	8009883a 	mov	r4,r16
 4004d80:	4006d2c0 	call	4006d2c <strcmp>
 4004d84:	103ff526 	beq	r2,zero,4004d5c <__alt_data_end+0xfc004d5c>
 4004d88:	01410074 	movhi	r5,1025
 4004d8c:	29407504 	addi	r5,r5,468
 4004d90:	8009883a 	mov	r4,r16
 4004d94:	4006d2c0 	call	4006d2c <strcmp>
 4004d98:	103ff026 	beq	r2,zero,4004d5c <__alt_data_end+0xfc004d5c>
 4004d9c:	0005883a 	mov	r2,zero
 4004da0:	003ff006 	br	4004d64 <__alt_data_end+0xfc004d64>
 4004da4:	00810074 	movhi	r2,1025
 4004da8:	10808a04 	addi	r2,r2,552
 4004dac:	f800283a 	ret

04004db0 <__locale_charset>:
 4004db0:	00810074 	movhi	r2,1025
 4004db4:	10824e04 	addi	r2,r2,2360
 4004db8:	f800283a 	ret

04004dbc <__locale_mb_cur_max>:
 4004dbc:	00810074 	movhi	r2,1025
 4004dc0:	10880404 	addi	r2,r2,8208
 4004dc4:	10800017 	ldw	r2,0(r2)
 4004dc8:	f800283a 	ret

04004dcc <__locale_msgcharset>:
 4004dcc:	00810074 	movhi	r2,1025
 4004dd0:	10824604 	addi	r2,r2,2328
 4004dd4:	f800283a 	ret

04004dd8 <__locale_cjk_lang>:
 4004dd8:	0005883a 	mov	r2,zero
 4004ddc:	f800283a 	ret

04004de0 <_localeconv_r>:
 4004de0:	00810074 	movhi	r2,1025
 4004de4:	10825604 	addi	r2,r2,2392
 4004de8:	f800283a 	ret

04004dec <setlocale>:
 4004dec:	00810074 	movhi	r2,1025
 4004df0:	10880304 	addi	r2,r2,8204
 4004df4:	280d883a 	mov	r6,r5
 4004df8:	200b883a 	mov	r5,r4
 4004dfc:	11000017 	ldw	r4,0(r2)
 4004e00:	4004d341 	jmpi	4004d34 <_setlocale_r>

04004e04 <localeconv>:
 4004e04:	00810074 	movhi	r2,1025
 4004e08:	10825604 	addi	r2,r2,2392
 4004e0c:	f800283a 	ret

04004e10 <__smakebuf_r>:
 4004e10:	2880030b 	ldhu	r2,12(r5)
 4004e14:	10c0008c 	andi	r3,r2,2
 4004e18:	1800411e 	bne	r3,zero,4004f20 <__smakebuf_r+0x110>
 4004e1c:	deffec04 	addi	sp,sp,-80
 4004e20:	dc000f15 	stw	r16,60(sp)
 4004e24:	2821883a 	mov	r16,r5
 4004e28:	2940038f 	ldh	r5,14(r5)
 4004e2c:	dc401015 	stw	r17,64(sp)
 4004e30:	dfc01315 	stw	ra,76(sp)
 4004e34:	dcc01215 	stw	r19,72(sp)
 4004e38:	dc801115 	stw	r18,68(sp)
 4004e3c:	2023883a 	mov	r17,r4
 4004e40:	28001c16 	blt	r5,zero,4004eb4 <__smakebuf_r+0xa4>
 4004e44:	d80d883a 	mov	r6,sp
 4004e48:	400896c0 	call	400896c <_fstat_r>
 4004e4c:	10001816 	blt	r2,zero,4004eb0 <__smakebuf_r+0xa0>
 4004e50:	d8800117 	ldw	r2,4(sp)
 4004e54:	00e00014 	movui	r3,32768
 4004e58:	10bc000c 	andi	r2,r2,61440
 4004e5c:	14c80020 	cmpeqi	r19,r2,8192
 4004e60:	10c03726 	beq	r2,r3,4004f40 <__smakebuf_r+0x130>
 4004e64:	80c0030b 	ldhu	r3,12(r16)
 4004e68:	18c20014 	ori	r3,r3,2048
 4004e6c:	80c0030d 	sth	r3,12(r16)
 4004e70:	00c80004 	movi	r3,8192
 4004e74:	10c0521e 	bne	r2,r3,4004fc0 <__smakebuf_r+0x1b0>
 4004e78:	8140038f 	ldh	r5,14(r16)
 4004e7c:	8809883a 	mov	r4,r17
 4004e80:	4008e840 	call	4008e84 <_isatty_r>
 4004e84:	10004c26 	beq	r2,zero,4004fb8 <__smakebuf_r+0x1a8>
 4004e88:	8080030b 	ldhu	r2,12(r16)
 4004e8c:	80c010c4 	addi	r3,r16,67
 4004e90:	80c00015 	stw	r3,0(r16)
 4004e94:	10800054 	ori	r2,r2,1
 4004e98:	8080030d 	sth	r2,12(r16)
 4004e9c:	00800044 	movi	r2,1
 4004ea0:	80c00415 	stw	r3,16(r16)
 4004ea4:	80800515 	stw	r2,20(r16)
 4004ea8:	04810004 	movi	r18,1024
 4004eac:	00000706 	br	4004ecc <__smakebuf_r+0xbc>
 4004eb0:	8080030b 	ldhu	r2,12(r16)
 4004eb4:	10c0200c 	andi	r3,r2,128
 4004eb8:	18001f1e 	bne	r3,zero,4004f38 <__smakebuf_r+0x128>
 4004ebc:	04810004 	movi	r18,1024
 4004ec0:	10820014 	ori	r2,r2,2048
 4004ec4:	8080030d 	sth	r2,12(r16)
 4004ec8:	0027883a 	mov	r19,zero
 4004ecc:	900b883a 	mov	r5,r18
 4004ed0:	8809883a 	mov	r4,r17
 4004ed4:	4004fcc0 	call	4004fcc <_malloc_r>
 4004ed8:	10002c26 	beq	r2,zero,4004f8c <__smakebuf_r+0x17c>
 4004edc:	80c0030b 	ldhu	r3,12(r16)
 4004ee0:	01010034 	movhi	r4,1024
 4004ee4:	2110f804 	addi	r4,r4,17376
 4004ee8:	89000f15 	stw	r4,60(r17)
 4004eec:	18c02014 	ori	r3,r3,128
 4004ef0:	80c0030d 	sth	r3,12(r16)
 4004ef4:	80800015 	stw	r2,0(r16)
 4004ef8:	80800415 	stw	r2,16(r16)
 4004efc:	84800515 	stw	r18,20(r16)
 4004f00:	98001a1e 	bne	r19,zero,4004f6c <__smakebuf_r+0x15c>
 4004f04:	dfc01317 	ldw	ra,76(sp)
 4004f08:	dcc01217 	ldw	r19,72(sp)
 4004f0c:	dc801117 	ldw	r18,68(sp)
 4004f10:	dc401017 	ldw	r17,64(sp)
 4004f14:	dc000f17 	ldw	r16,60(sp)
 4004f18:	dec01404 	addi	sp,sp,80
 4004f1c:	f800283a 	ret
 4004f20:	288010c4 	addi	r2,r5,67
 4004f24:	28800015 	stw	r2,0(r5)
 4004f28:	28800415 	stw	r2,16(r5)
 4004f2c:	00800044 	movi	r2,1
 4004f30:	28800515 	stw	r2,20(r5)
 4004f34:	f800283a 	ret
 4004f38:	04801004 	movi	r18,64
 4004f3c:	003fe006 	br	4004ec0 <__alt_data_end+0xfc004ec0>
 4004f40:	81000a17 	ldw	r4,40(r16)
 4004f44:	00c10034 	movhi	r3,1024
 4004f48:	18db3204 	addi	r3,r3,27848
 4004f4c:	20ffc51e 	bne	r4,r3,4004e64 <__alt_data_end+0xfc004e64>
 4004f50:	8080030b 	ldhu	r2,12(r16)
 4004f54:	04810004 	movi	r18,1024
 4004f58:	84801315 	stw	r18,76(r16)
 4004f5c:	1484b03a 	or	r2,r2,r18
 4004f60:	8080030d 	sth	r2,12(r16)
 4004f64:	0027883a 	mov	r19,zero
 4004f68:	003fd806 	br	4004ecc <__alt_data_end+0xfc004ecc>
 4004f6c:	8140038f 	ldh	r5,14(r16)
 4004f70:	8809883a 	mov	r4,r17
 4004f74:	4008e840 	call	4008e84 <_isatty_r>
 4004f78:	103fe226 	beq	r2,zero,4004f04 <__alt_data_end+0xfc004f04>
 4004f7c:	8080030b 	ldhu	r2,12(r16)
 4004f80:	10800054 	ori	r2,r2,1
 4004f84:	8080030d 	sth	r2,12(r16)
 4004f88:	003fde06 	br	4004f04 <__alt_data_end+0xfc004f04>
 4004f8c:	8080030b 	ldhu	r2,12(r16)
 4004f90:	10c0800c 	andi	r3,r2,512
 4004f94:	183fdb1e 	bne	r3,zero,4004f04 <__alt_data_end+0xfc004f04>
 4004f98:	10800094 	ori	r2,r2,2
 4004f9c:	80c010c4 	addi	r3,r16,67
 4004fa0:	8080030d 	sth	r2,12(r16)
 4004fa4:	00800044 	movi	r2,1
 4004fa8:	80c00015 	stw	r3,0(r16)
 4004fac:	80c00415 	stw	r3,16(r16)
 4004fb0:	80800515 	stw	r2,20(r16)
 4004fb4:	003fd306 	br	4004f04 <__alt_data_end+0xfc004f04>
 4004fb8:	04810004 	movi	r18,1024
 4004fbc:	003fc306 	br	4004ecc <__alt_data_end+0xfc004ecc>
 4004fc0:	0027883a 	mov	r19,zero
 4004fc4:	04810004 	movi	r18,1024
 4004fc8:	003fc006 	br	4004ecc <__alt_data_end+0xfc004ecc>

04004fcc <_malloc_r>:
 4004fcc:	defff504 	addi	sp,sp,-44
 4004fd0:	dc800315 	stw	r18,12(sp)
 4004fd4:	dfc00a15 	stw	ra,40(sp)
 4004fd8:	df000915 	stw	fp,36(sp)
 4004fdc:	ddc00815 	stw	r23,32(sp)
 4004fe0:	dd800715 	stw	r22,28(sp)
 4004fe4:	dd400615 	stw	r21,24(sp)
 4004fe8:	dd000515 	stw	r20,20(sp)
 4004fec:	dcc00415 	stw	r19,16(sp)
 4004ff0:	dc400215 	stw	r17,8(sp)
 4004ff4:	dc000115 	stw	r16,4(sp)
 4004ff8:	288002c4 	addi	r2,r5,11
 4004ffc:	00c00584 	movi	r3,22
 4005000:	2025883a 	mov	r18,r4
 4005004:	18807f2e 	bgeu	r3,r2,4005204 <_malloc_r+0x238>
 4005008:	047ffe04 	movi	r17,-8
 400500c:	1462703a 	and	r17,r2,r17
 4005010:	8800a316 	blt	r17,zero,40052a0 <_malloc_r+0x2d4>
 4005014:	8940a236 	bltu	r17,r5,40052a0 <_malloc_r+0x2d4>
 4005018:	400d2300 	call	400d230 <__malloc_lock>
 400501c:	00807dc4 	movi	r2,503
 4005020:	1441e92e 	bgeu	r2,r17,40057c8 <_malloc_r+0x7fc>
 4005024:	8804d27a 	srli	r2,r17,9
 4005028:	1000a126 	beq	r2,zero,40052b0 <_malloc_r+0x2e4>
 400502c:	00c00104 	movi	r3,4
 4005030:	18811e36 	bltu	r3,r2,40054ac <_malloc_r+0x4e0>
 4005034:	8804d1ba 	srli	r2,r17,6
 4005038:	12000e44 	addi	r8,r2,57
 400503c:	11c00e04 	addi	r7,r2,56
 4005040:	4209883a 	add	r4,r8,r8
 4005044:	04c10074 	movhi	r19,1025
 4005048:	2109883a 	add	r4,r4,r4
 400504c:	9cc26404 	addi	r19,r19,2448
 4005050:	2109883a 	add	r4,r4,r4
 4005054:	9909883a 	add	r4,r19,r4
 4005058:	24000117 	ldw	r16,4(r4)
 400505c:	213ffe04 	addi	r4,r4,-8
 4005060:	24009726 	beq	r4,r16,40052c0 <_malloc_r+0x2f4>
 4005064:	80800117 	ldw	r2,4(r16)
 4005068:	01bfff04 	movi	r6,-4
 400506c:	014003c4 	movi	r5,15
 4005070:	1184703a 	and	r2,r2,r6
 4005074:	1447c83a 	sub	r3,r2,r17
 4005078:	28c00716 	blt	r5,r3,4005098 <_malloc_r+0xcc>
 400507c:	1800920e 	bge	r3,zero,40052c8 <_malloc_r+0x2fc>
 4005080:	84000317 	ldw	r16,12(r16)
 4005084:	24008e26 	beq	r4,r16,40052c0 <_malloc_r+0x2f4>
 4005088:	80800117 	ldw	r2,4(r16)
 400508c:	1184703a 	and	r2,r2,r6
 4005090:	1447c83a 	sub	r3,r2,r17
 4005094:	28fff90e 	bge	r5,r3,400507c <__alt_data_end+0xfc00507c>
 4005098:	3809883a 	mov	r4,r7
 400509c:	01810074 	movhi	r6,1025
 40050a0:	9c000417 	ldw	r16,16(r19)
 40050a4:	31826404 	addi	r6,r6,2448
 40050a8:	32000204 	addi	r8,r6,8
 40050ac:	82013426 	beq	r16,r8,4005580 <_malloc_r+0x5b4>
 40050b0:	80c00117 	ldw	r3,4(r16)
 40050b4:	00bfff04 	movi	r2,-4
 40050b8:	188e703a 	and	r7,r3,r2
 40050bc:	3c45c83a 	sub	r2,r7,r17
 40050c0:	00c003c4 	movi	r3,15
 40050c4:	18811f16 	blt	r3,r2,4005544 <_malloc_r+0x578>
 40050c8:	32000515 	stw	r8,20(r6)
 40050cc:	32000415 	stw	r8,16(r6)
 40050d0:	10007f0e 	bge	r2,zero,40052d0 <_malloc_r+0x304>
 40050d4:	00807fc4 	movi	r2,511
 40050d8:	11c0fd36 	bltu	r2,r7,40054d0 <_malloc_r+0x504>
 40050dc:	3806d0fa 	srli	r3,r7,3
 40050e0:	01c00044 	movi	r7,1
 40050e4:	30800117 	ldw	r2,4(r6)
 40050e8:	19400044 	addi	r5,r3,1
 40050ec:	294b883a 	add	r5,r5,r5
 40050f0:	1807d0ba 	srai	r3,r3,2
 40050f4:	294b883a 	add	r5,r5,r5
 40050f8:	294b883a 	add	r5,r5,r5
 40050fc:	298b883a 	add	r5,r5,r6
 4005100:	38c6983a 	sll	r3,r7,r3
 4005104:	29c00017 	ldw	r7,0(r5)
 4005108:	2a7ffe04 	addi	r9,r5,-8
 400510c:	1886b03a 	or	r3,r3,r2
 4005110:	82400315 	stw	r9,12(r16)
 4005114:	81c00215 	stw	r7,8(r16)
 4005118:	30c00115 	stw	r3,4(r6)
 400511c:	2c000015 	stw	r16,0(r5)
 4005120:	3c000315 	stw	r16,12(r7)
 4005124:	2005d0ba 	srai	r2,r4,2
 4005128:	01400044 	movi	r5,1
 400512c:	288a983a 	sll	r5,r5,r2
 4005130:	19406f36 	bltu	r3,r5,40052f0 <_malloc_r+0x324>
 4005134:	28c4703a 	and	r2,r5,r3
 4005138:	10000a1e 	bne	r2,zero,4005164 <_malloc_r+0x198>
 400513c:	00bfff04 	movi	r2,-4
 4005140:	294b883a 	add	r5,r5,r5
 4005144:	2088703a 	and	r4,r4,r2
 4005148:	28c4703a 	and	r2,r5,r3
 400514c:	21000104 	addi	r4,r4,4
 4005150:	1000041e 	bne	r2,zero,4005164 <_malloc_r+0x198>
 4005154:	294b883a 	add	r5,r5,r5
 4005158:	28c4703a 	and	r2,r5,r3
 400515c:	21000104 	addi	r4,r4,4
 4005160:	103ffc26 	beq	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005164:	02bfff04 	movi	r10,-4
 4005168:	024003c4 	movi	r9,15
 400516c:	21800044 	addi	r6,r4,1
 4005170:	318d883a 	add	r6,r6,r6
 4005174:	318d883a 	add	r6,r6,r6
 4005178:	318d883a 	add	r6,r6,r6
 400517c:	998d883a 	add	r6,r19,r6
 4005180:	333ffe04 	addi	r12,r6,-8
 4005184:	2017883a 	mov	r11,r4
 4005188:	31800104 	addi	r6,r6,4
 400518c:	34000017 	ldw	r16,0(r6)
 4005190:	31fffd04 	addi	r7,r6,-12
 4005194:	81c0041e 	bne	r16,r7,40051a8 <_malloc_r+0x1dc>
 4005198:	0000fb06 	br	4005588 <_malloc_r+0x5bc>
 400519c:	1801030e 	bge	r3,zero,40055ac <_malloc_r+0x5e0>
 40051a0:	84000317 	ldw	r16,12(r16)
 40051a4:	81c0f826 	beq	r16,r7,4005588 <_malloc_r+0x5bc>
 40051a8:	80800117 	ldw	r2,4(r16)
 40051ac:	1284703a 	and	r2,r2,r10
 40051b0:	1447c83a 	sub	r3,r2,r17
 40051b4:	48fff90e 	bge	r9,r3,400519c <__alt_data_end+0xfc00519c>
 40051b8:	80800317 	ldw	r2,12(r16)
 40051bc:	81000217 	ldw	r4,8(r16)
 40051c0:	89400054 	ori	r5,r17,1
 40051c4:	81400115 	stw	r5,4(r16)
 40051c8:	20800315 	stw	r2,12(r4)
 40051cc:	11000215 	stw	r4,8(r2)
 40051d0:	8463883a 	add	r17,r16,r17
 40051d4:	9c400515 	stw	r17,20(r19)
 40051d8:	9c400415 	stw	r17,16(r19)
 40051dc:	18800054 	ori	r2,r3,1
 40051e0:	88800115 	stw	r2,4(r17)
 40051e4:	8a000315 	stw	r8,12(r17)
 40051e8:	8a000215 	stw	r8,8(r17)
 40051ec:	88e3883a 	add	r17,r17,r3
 40051f0:	88c00015 	stw	r3,0(r17)
 40051f4:	9009883a 	mov	r4,r18
 40051f8:	400d2540 	call	400d254 <__malloc_unlock>
 40051fc:	80800204 	addi	r2,r16,8
 4005200:	00001b06 	br	4005270 <_malloc_r+0x2a4>
 4005204:	04400404 	movi	r17,16
 4005208:	89402536 	bltu	r17,r5,40052a0 <_malloc_r+0x2d4>
 400520c:	400d2300 	call	400d230 <__malloc_lock>
 4005210:	00800184 	movi	r2,6
 4005214:	01000084 	movi	r4,2
 4005218:	04c10074 	movhi	r19,1025
 400521c:	1085883a 	add	r2,r2,r2
 4005220:	9cc26404 	addi	r19,r19,2448
 4005224:	1085883a 	add	r2,r2,r2
 4005228:	9885883a 	add	r2,r19,r2
 400522c:	14000117 	ldw	r16,4(r2)
 4005230:	10fffe04 	addi	r3,r2,-8
 4005234:	80c0d926 	beq	r16,r3,400559c <_malloc_r+0x5d0>
 4005238:	80c00117 	ldw	r3,4(r16)
 400523c:	81000317 	ldw	r4,12(r16)
 4005240:	00bfff04 	movi	r2,-4
 4005244:	1884703a 	and	r2,r3,r2
 4005248:	81400217 	ldw	r5,8(r16)
 400524c:	8085883a 	add	r2,r16,r2
 4005250:	10c00117 	ldw	r3,4(r2)
 4005254:	29000315 	stw	r4,12(r5)
 4005258:	21400215 	stw	r5,8(r4)
 400525c:	18c00054 	ori	r3,r3,1
 4005260:	10c00115 	stw	r3,4(r2)
 4005264:	9009883a 	mov	r4,r18
 4005268:	400d2540 	call	400d254 <__malloc_unlock>
 400526c:	80800204 	addi	r2,r16,8
 4005270:	dfc00a17 	ldw	ra,40(sp)
 4005274:	df000917 	ldw	fp,36(sp)
 4005278:	ddc00817 	ldw	r23,32(sp)
 400527c:	dd800717 	ldw	r22,28(sp)
 4005280:	dd400617 	ldw	r21,24(sp)
 4005284:	dd000517 	ldw	r20,20(sp)
 4005288:	dcc00417 	ldw	r19,16(sp)
 400528c:	dc800317 	ldw	r18,12(sp)
 4005290:	dc400217 	ldw	r17,8(sp)
 4005294:	dc000117 	ldw	r16,4(sp)
 4005298:	dec00b04 	addi	sp,sp,44
 400529c:	f800283a 	ret
 40052a0:	00800304 	movi	r2,12
 40052a4:	90800015 	stw	r2,0(r18)
 40052a8:	0005883a 	mov	r2,zero
 40052ac:	003ff006 	br	4005270 <__alt_data_end+0xfc005270>
 40052b0:	01002004 	movi	r4,128
 40052b4:	02001004 	movi	r8,64
 40052b8:	01c00fc4 	movi	r7,63
 40052bc:	003f6106 	br	4005044 <__alt_data_end+0xfc005044>
 40052c0:	4009883a 	mov	r4,r8
 40052c4:	003f7506 	br	400509c <__alt_data_end+0xfc00509c>
 40052c8:	81000317 	ldw	r4,12(r16)
 40052cc:	003fde06 	br	4005248 <__alt_data_end+0xfc005248>
 40052d0:	81c5883a 	add	r2,r16,r7
 40052d4:	11400117 	ldw	r5,4(r2)
 40052d8:	9009883a 	mov	r4,r18
 40052dc:	29400054 	ori	r5,r5,1
 40052e0:	11400115 	stw	r5,4(r2)
 40052e4:	400d2540 	call	400d254 <__malloc_unlock>
 40052e8:	80800204 	addi	r2,r16,8
 40052ec:	003fe006 	br	4005270 <__alt_data_end+0xfc005270>
 40052f0:	9c000217 	ldw	r16,8(r19)
 40052f4:	00bfff04 	movi	r2,-4
 40052f8:	85800117 	ldw	r22,4(r16)
 40052fc:	b0ac703a 	and	r22,r22,r2
 4005300:	b4400336 	bltu	r22,r17,4005310 <_malloc_r+0x344>
 4005304:	b445c83a 	sub	r2,r22,r17
 4005308:	00c003c4 	movi	r3,15
 400530c:	18805d16 	blt	r3,r2,4005484 <_malloc_r+0x4b8>
 4005310:	05c10074 	movhi	r23,1025
 4005314:	00810074 	movhi	r2,1025
 4005318:	108ef704 	addi	r2,r2,15324
 400531c:	bdc80504 	addi	r23,r23,8212
 4005320:	15400017 	ldw	r21,0(r2)
 4005324:	b8c00017 	ldw	r3,0(r23)
 4005328:	00bfffc4 	movi	r2,-1
 400532c:	858d883a 	add	r6,r16,r22
 4005330:	8d6b883a 	add	r21,r17,r21
 4005334:	1880ea26 	beq	r3,r2,40056e0 <_malloc_r+0x714>
 4005338:	ad4403c4 	addi	r21,r21,4111
 400533c:	00bc0004 	movi	r2,-4096
 4005340:	a8aa703a 	and	r21,r21,r2
 4005344:	a80b883a 	mov	r5,r21
 4005348:	9009883a 	mov	r4,r18
 400534c:	d9800015 	stw	r6,0(sp)
 4005350:	4006b9c0 	call	4006b9c <_sbrk_r>
 4005354:	1029883a 	mov	r20,r2
 4005358:	00bfffc4 	movi	r2,-1
 400535c:	d9800017 	ldw	r6,0(sp)
 4005360:	a080e826 	beq	r20,r2,4005704 <_malloc_r+0x738>
 4005364:	a180a636 	bltu	r20,r6,4005600 <_malloc_r+0x634>
 4005368:	07010074 	movhi	fp,1025
 400536c:	e70f0004 	addi	fp,fp,15360
 4005370:	e0800017 	ldw	r2,0(fp)
 4005374:	a887883a 	add	r3,r21,r2
 4005378:	e0c00015 	stw	r3,0(fp)
 400537c:	3500e626 	beq	r6,r20,4005718 <_malloc_r+0x74c>
 4005380:	b9000017 	ldw	r4,0(r23)
 4005384:	00bfffc4 	movi	r2,-1
 4005388:	2080ee26 	beq	r4,r2,4005744 <_malloc_r+0x778>
 400538c:	a185c83a 	sub	r2,r20,r6
 4005390:	10c5883a 	add	r2,r2,r3
 4005394:	e0800015 	stw	r2,0(fp)
 4005398:	a0c001cc 	andi	r3,r20,7
 400539c:	1800bc26 	beq	r3,zero,4005690 <_malloc_r+0x6c4>
 40053a0:	a0e9c83a 	sub	r20,r20,r3
 40053a4:	00840204 	movi	r2,4104
 40053a8:	a5000204 	addi	r20,r20,8
 40053ac:	10c7c83a 	sub	r3,r2,r3
 40053b0:	a545883a 	add	r2,r20,r21
 40053b4:	1083ffcc 	andi	r2,r2,4095
 40053b8:	18abc83a 	sub	r21,r3,r2
 40053bc:	a80b883a 	mov	r5,r21
 40053c0:	9009883a 	mov	r4,r18
 40053c4:	4006b9c0 	call	4006b9c <_sbrk_r>
 40053c8:	00ffffc4 	movi	r3,-1
 40053cc:	10c0e126 	beq	r2,r3,4005754 <_malloc_r+0x788>
 40053d0:	1505c83a 	sub	r2,r2,r20
 40053d4:	1545883a 	add	r2,r2,r21
 40053d8:	10800054 	ori	r2,r2,1
 40053dc:	e0c00017 	ldw	r3,0(fp)
 40053e0:	9d000215 	stw	r20,8(r19)
 40053e4:	a0800115 	stw	r2,4(r20)
 40053e8:	a8c7883a 	add	r3,r21,r3
 40053ec:	e0c00015 	stw	r3,0(fp)
 40053f0:	84c00e26 	beq	r16,r19,400542c <_malloc_r+0x460>
 40053f4:	018003c4 	movi	r6,15
 40053f8:	3580a72e 	bgeu	r6,r22,4005698 <_malloc_r+0x6cc>
 40053fc:	81400117 	ldw	r5,4(r16)
 4005400:	013ffe04 	movi	r4,-8
 4005404:	b0bffd04 	addi	r2,r22,-12
 4005408:	1104703a 	and	r2,r2,r4
 400540c:	2900004c 	andi	r4,r5,1
 4005410:	2088b03a 	or	r4,r4,r2
 4005414:	81000115 	stw	r4,4(r16)
 4005418:	01400144 	movi	r5,5
 400541c:	8089883a 	add	r4,r16,r2
 4005420:	21400115 	stw	r5,4(r4)
 4005424:	21400215 	stw	r5,8(r4)
 4005428:	3080cd36 	bltu	r6,r2,4005760 <_malloc_r+0x794>
 400542c:	00810074 	movhi	r2,1025
 4005430:	108ef604 	addi	r2,r2,15320
 4005434:	11000017 	ldw	r4,0(r2)
 4005438:	20c0012e 	bgeu	r4,r3,4005440 <_malloc_r+0x474>
 400543c:	10c00015 	stw	r3,0(r2)
 4005440:	00810074 	movhi	r2,1025
 4005444:	108ef504 	addi	r2,r2,15316
 4005448:	11000017 	ldw	r4,0(r2)
 400544c:	9c000217 	ldw	r16,8(r19)
 4005450:	20c0012e 	bgeu	r4,r3,4005458 <_malloc_r+0x48c>
 4005454:	10c00015 	stw	r3,0(r2)
 4005458:	80c00117 	ldw	r3,4(r16)
 400545c:	00bfff04 	movi	r2,-4
 4005460:	1886703a 	and	r3,r3,r2
 4005464:	1c45c83a 	sub	r2,r3,r17
 4005468:	1c400236 	bltu	r3,r17,4005474 <_malloc_r+0x4a8>
 400546c:	00c003c4 	movi	r3,15
 4005470:	18800416 	blt	r3,r2,4005484 <_malloc_r+0x4b8>
 4005474:	9009883a 	mov	r4,r18
 4005478:	400d2540 	call	400d254 <__malloc_unlock>
 400547c:	0005883a 	mov	r2,zero
 4005480:	003f7b06 	br	4005270 <__alt_data_end+0xfc005270>
 4005484:	88c00054 	ori	r3,r17,1
 4005488:	80c00115 	stw	r3,4(r16)
 400548c:	8463883a 	add	r17,r16,r17
 4005490:	10800054 	ori	r2,r2,1
 4005494:	9c400215 	stw	r17,8(r19)
 4005498:	88800115 	stw	r2,4(r17)
 400549c:	9009883a 	mov	r4,r18
 40054a0:	400d2540 	call	400d254 <__malloc_unlock>
 40054a4:	80800204 	addi	r2,r16,8
 40054a8:	003f7106 	br	4005270 <__alt_data_end+0xfc005270>
 40054ac:	00c00504 	movi	r3,20
 40054b0:	18804a2e 	bgeu	r3,r2,40055dc <_malloc_r+0x610>
 40054b4:	00c01504 	movi	r3,84
 40054b8:	18806e36 	bltu	r3,r2,4005674 <_malloc_r+0x6a8>
 40054bc:	8804d33a 	srli	r2,r17,12
 40054c0:	12001bc4 	addi	r8,r2,111
 40054c4:	11c01b84 	addi	r7,r2,110
 40054c8:	4209883a 	add	r4,r8,r8
 40054cc:	003edd06 	br	4005044 <__alt_data_end+0xfc005044>
 40054d0:	3804d27a 	srli	r2,r7,9
 40054d4:	00c00104 	movi	r3,4
 40054d8:	1880442e 	bgeu	r3,r2,40055ec <_malloc_r+0x620>
 40054dc:	00c00504 	movi	r3,20
 40054e0:	18808136 	bltu	r3,r2,40056e8 <_malloc_r+0x71c>
 40054e4:	11401704 	addi	r5,r2,92
 40054e8:	10c016c4 	addi	r3,r2,91
 40054ec:	294b883a 	add	r5,r5,r5
 40054f0:	294b883a 	add	r5,r5,r5
 40054f4:	294b883a 	add	r5,r5,r5
 40054f8:	994b883a 	add	r5,r19,r5
 40054fc:	28800017 	ldw	r2,0(r5)
 4005500:	01810074 	movhi	r6,1025
 4005504:	297ffe04 	addi	r5,r5,-8
 4005508:	31826404 	addi	r6,r6,2448
 400550c:	28806526 	beq	r5,r2,40056a4 <_malloc_r+0x6d8>
 4005510:	01bfff04 	movi	r6,-4
 4005514:	10c00117 	ldw	r3,4(r2)
 4005518:	1986703a 	and	r3,r3,r6
 400551c:	38c0022e 	bgeu	r7,r3,4005528 <_malloc_r+0x55c>
 4005520:	10800217 	ldw	r2,8(r2)
 4005524:	28bffb1e 	bne	r5,r2,4005514 <__alt_data_end+0xfc005514>
 4005528:	11400317 	ldw	r5,12(r2)
 400552c:	98c00117 	ldw	r3,4(r19)
 4005530:	81400315 	stw	r5,12(r16)
 4005534:	80800215 	stw	r2,8(r16)
 4005538:	2c000215 	stw	r16,8(r5)
 400553c:	14000315 	stw	r16,12(r2)
 4005540:	003ef806 	br	4005124 <__alt_data_end+0xfc005124>
 4005544:	88c00054 	ori	r3,r17,1
 4005548:	80c00115 	stw	r3,4(r16)
 400554c:	8463883a 	add	r17,r16,r17
 4005550:	34400515 	stw	r17,20(r6)
 4005554:	34400415 	stw	r17,16(r6)
 4005558:	10c00054 	ori	r3,r2,1
 400555c:	8a000315 	stw	r8,12(r17)
 4005560:	8a000215 	stw	r8,8(r17)
 4005564:	88c00115 	stw	r3,4(r17)
 4005568:	88a3883a 	add	r17,r17,r2
 400556c:	88800015 	stw	r2,0(r17)
 4005570:	9009883a 	mov	r4,r18
 4005574:	400d2540 	call	400d254 <__malloc_unlock>
 4005578:	80800204 	addi	r2,r16,8
 400557c:	003f3c06 	br	4005270 <__alt_data_end+0xfc005270>
 4005580:	30c00117 	ldw	r3,4(r6)
 4005584:	003ee706 	br	4005124 <__alt_data_end+0xfc005124>
 4005588:	5ac00044 	addi	r11,r11,1
 400558c:	588000cc 	andi	r2,r11,3
 4005590:	31800204 	addi	r6,r6,8
 4005594:	103efd1e 	bne	r2,zero,400518c <__alt_data_end+0xfc00518c>
 4005598:	00002406 	br	400562c <_malloc_r+0x660>
 400559c:	14000317 	ldw	r16,12(r2)
 40055a0:	143f251e 	bne	r2,r16,4005238 <__alt_data_end+0xfc005238>
 40055a4:	21000084 	addi	r4,r4,2
 40055a8:	003ebc06 	br	400509c <__alt_data_end+0xfc00509c>
 40055ac:	8085883a 	add	r2,r16,r2
 40055b0:	10c00117 	ldw	r3,4(r2)
 40055b4:	81000317 	ldw	r4,12(r16)
 40055b8:	81400217 	ldw	r5,8(r16)
 40055bc:	18c00054 	ori	r3,r3,1
 40055c0:	10c00115 	stw	r3,4(r2)
 40055c4:	29000315 	stw	r4,12(r5)
 40055c8:	21400215 	stw	r5,8(r4)
 40055cc:	9009883a 	mov	r4,r18
 40055d0:	400d2540 	call	400d254 <__malloc_unlock>
 40055d4:	80800204 	addi	r2,r16,8
 40055d8:	003f2506 	br	4005270 <__alt_data_end+0xfc005270>
 40055dc:	12001704 	addi	r8,r2,92
 40055e0:	11c016c4 	addi	r7,r2,91
 40055e4:	4209883a 	add	r4,r8,r8
 40055e8:	003e9606 	br	4005044 <__alt_data_end+0xfc005044>
 40055ec:	3804d1ba 	srli	r2,r7,6
 40055f0:	11400e44 	addi	r5,r2,57
 40055f4:	10c00e04 	addi	r3,r2,56
 40055f8:	294b883a 	add	r5,r5,r5
 40055fc:	003fbc06 	br	40054f0 <__alt_data_end+0xfc0054f0>
 4005600:	84ff5926 	beq	r16,r19,4005368 <__alt_data_end+0xfc005368>
 4005604:	00810074 	movhi	r2,1025
 4005608:	10826404 	addi	r2,r2,2448
 400560c:	14000217 	ldw	r16,8(r2)
 4005610:	00bfff04 	movi	r2,-4
 4005614:	80c00117 	ldw	r3,4(r16)
 4005618:	1886703a 	and	r3,r3,r2
 400561c:	003f9106 	br	4005464 <__alt_data_end+0xfc005464>
 4005620:	60800217 	ldw	r2,8(r12)
 4005624:	213fffc4 	addi	r4,r4,-1
 4005628:	1300651e 	bne	r2,r12,40057c0 <_malloc_r+0x7f4>
 400562c:	208000cc 	andi	r2,r4,3
 4005630:	633ffe04 	addi	r12,r12,-8
 4005634:	103ffa1e 	bne	r2,zero,4005620 <__alt_data_end+0xfc005620>
 4005638:	98800117 	ldw	r2,4(r19)
 400563c:	0146303a 	nor	r3,zero,r5
 4005640:	1884703a 	and	r2,r3,r2
 4005644:	98800115 	stw	r2,4(r19)
 4005648:	294b883a 	add	r5,r5,r5
 400564c:	117f2836 	bltu	r2,r5,40052f0 <__alt_data_end+0xfc0052f0>
 4005650:	283f2726 	beq	r5,zero,40052f0 <__alt_data_end+0xfc0052f0>
 4005654:	2886703a 	and	r3,r5,r2
 4005658:	5809883a 	mov	r4,r11
 400565c:	183ec31e 	bne	r3,zero,400516c <__alt_data_end+0xfc00516c>
 4005660:	294b883a 	add	r5,r5,r5
 4005664:	2886703a 	and	r3,r5,r2
 4005668:	21000104 	addi	r4,r4,4
 400566c:	183ffc26 	beq	r3,zero,4005660 <__alt_data_end+0xfc005660>
 4005670:	003ebe06 	br	400516c <__alt_data_end+0xfc00516c>
 4005674:	00c05504 	movi	r3,340
 4005678:	18801236 	bltu	r3,r2,40056c4 <_malloc_r+0x6f8>
 400567c:	8804d3fa 	srli	r2,r17,15
 4005680:	12001e04 	addi	r8,r2,120
 4005684:	11c01dc4 	addi	r7,r2,119
 4005688:	4209883a 	add	r4,r8,r8
 400568c:	003e6d06 	br	4005044 <__alt_data_end+0xfc005044>
 4005690:	00c40004 	movi	r3,4096
 4005694:	003f4606 	br	40053b0 <__alt_data_end+0xfc0053b0>
 4005698:	00800044 	movi	r2,1
 400569c:	a0800115 	stw	r2,4(r20)
 40056a0:	003f7406 	br	4005474 <__alt_data_end+0xfc005474>
 40056a4:	1805d0ba 	srai	r2,r3,2
 40056a8:	01c00044 	movi	r7,1
 40056ac:	30c00117 	ldw	r3,4(r6)
 40056b0:	388e983a 	sll	r7,r7,r2
 40056b4:	2805883a 	mov	r2,r5
 40056b8:	38c6b03a 	or	r3,r7,r3
 40056bc:	30c00115 	stw	r3,4(r6)
 40056c0:	003f9b06 	br	4005530 <__alt_data_end+0xfc005530>
 40056c4:	00c15504 	movi	r3,1364
 40056c8:	18801a36 	bltu	r3,r2,4005734 <_malloc_r+0x768>
 40056cc:	8804d4ba 	srli	r2,r17,18
 40056d0:	12001f44 	addi	r8,r2,125
 40056d4:	11c01f04 	addi	r7,r2,124
 40056d8:	4209883a 	add	r4,r8,r8
 40056dc:	003e5906 	br	4005044 <__alt_data_end+0xfc005044>
 40056e0:	ad400404 	addi	r21,r21,16
 40056e4:	003f1706 	br	4005344 <__alt_data_end+0xfc005344>
 40056e8:	00c01504 	movi	r3,84
 40056ec:	18802336 	bltu	r3,r2,400577c <_malloc_r+0x7b0>
 40056f0:	3804d33a 	srli	r2,r7,12
 40056f4:	11401bc4 	addi	r5,r2,111
 40056f8:	10c01b84 	addi	r3,r2,110
 40056fc:	294b883a 	add	r5,r5,r5
 4005700:	003f7b06 	br	40054f0 <__alt_data_end+0xfc0054f0>
 4005704:	9c000217 	ldw	r16,8(r19)
 4005708:	00bfff04 	movi	r2,-4
 400570c:	80c00117 	ldw	r3,4(r16)
 4005710:	1886703a 	and	r3,r3,r2
 4005714:	003f5306 	br	4005464 <__alt_data_end+0xfc005464>
 4005718:	3083ffcc 	andi	r2,r6,4095
 400571c:	103f181e 	bne	r2,zero,4005380 <__alt_data_end+0xfc005380>
 4005720:	99000217 	ldw	r4,8(r19)
 4005724:	b545883a 	add	r2,r22,r21
 4005728:	10800054 	ori	r2,r2,1
 400572c:	20800115 	stw	r2,4(r4)
 4005730:	003f3e06 	br	400542c <__alt_data_end+0xfc00542c>
 4005734:	01003f84 	movi	r4,254
 4005738:	02001fc4 	movi	r8,127
 400573c:	01c01f84 	movi	r7,126
 4005740:	003e4006 	br	4005044 <__alt_data_end+0xfc005044>
 4005744:	00810074 	movhi	r2,1025
 4005748:	10880504 	addi	r2,r2,8212
 400574c:	15000015 	stw	r20,0(r2)
 4005750:	003f1106 	br	4005398 <__alt_data_end+0xfc005398>
 4005754:	00800044 	movi	r2,1
 4005758:	002b883a 	mov	r21,zero
 400575c:	003f1f06 	br	40053dc <__alt_data_end+0xfc0053dc>
 4005760:	81400204 	addi	r5,r16,8
 4005764:	9009883a 	mov	r4,r18
 4005768:	400489c0 	call	400489c <_free_r>
 400576c:	00810074 	movhi	r2,1025
 4005770:	108f0004 	addi	r2,r2,15360
 4005774:	10c00017 	ldw	r3,0(r2)
 4005778:	003f2c06 	br	400542c <__alt_data_end+0xfc00542c>
 400577c:	00c05504 	movi	r3,340
 4005780:	18800536 	bltu	r3,r2,4005798 <_malloc_r+0x7cc>
 4005784:	3804d3fa 	srli	r2,r7,15
 4005788:	11401e04 	addi	r5,r2,120
 400578c:	10c01dc4 	addi	r3,r2,119
 4005790:	294b883a 	add	r5,r5,r5
 4005794:	003f5606 	br	40054f0 <__alt_data_end+0xfc0054f0>
 4005798:	00c15504 	movi	r3,1364
 400579c:	18800536 	bltu	r3,r2,40057b4 <_malloc_r+0x7e8>
 40057a0:	3804d4ba 	srli	r2,r7,18
 40057a4:	11401f44 	addi	r5,r2,125
 40057a8:	10c01f04 	addi	r3,r2,124
 40057ac:	294b883a 	add	r5,r5,r5
 40057b0:	003f4f06 	br	40054f0 <__alt_data_end+0xfc0054f0>
 40057b4:	01403f84 	movi	r5,254
 40057b8:	00c01f84 	movi	r3,126
 40057bc:	003f4c06 	br	40054f0 <__alt_data_end+0xfc0054f0>
 40057c0:	98800117 	ldw	r2,4(r19)
 40057c4:	003fa006 	br	4005648 <__alt_data_end+0xfc005648>
 40057c8:	8808d0fa 	srli	r4,r17,3
 40057cc:	20800044 	addi	r2,r4,1
 40057d0:	1085883a 	add	r2,r2,r2
 40057d4:	003e9006 	br	4005218 <__alt_data_end+0xfc005218>

040057d8 <memchr>:
 40057d8:	208000cc 	andi	r2,r4,3
 40057dc:	280f883a 	mov	r7,r5
 40057e0:	10003426 	beq	r2,zero,40058b4 <memchr+0xdc>
 40057e4:	30bfffc4 	addi	r2,r6,-1
 40057e8:	30001a26 	beq	r6,zero,4005854 <memchr+0x7c>
 40057ec:	20c00003 	ldbu	r3,0(r4)
 40057f0:	29803fcc 	andi	r6,r5,255
 40057f4:	30c0051e 	bne	r6,r3,400580c <memchr+0x34>
 40057f8:	00001806 	br	400585c <memchr+0x84>
 40057fc:	10001526 	beq	r2,zero,4005854 <memchr+0x7c>
 4005800:	20c00003 	ldbu	r3,0(r4)
 4005804:	10bfffc4 	addi	r2,r2,-1
 4005808:	30c01426 	beq	r6,r3,400585c <memchr+0x84>
 400580c:	21000044 	addi	r4,r4,1
 4005810:	20c000cc 	andi	r3,r4,3
 4005814:	183ff91e 	bne	r3,zero,40057fc <__alt_data_end+0xfc0057fc>
 4005818:	020000c4 	movi	r8,3
 400581c:	40801136 	bltu	r8,r2,4005864 <memchr+0x8c>
 4005820:	10000c26 	beq	r2,zero,4005854 <memchr+0x7c>
 4005824:	20c00003 	ldbu	r3,0(r4)
 4005828:	29403fcc 	andi	r5,r5,255
 400582c:	28c00b26 	beq	r5,r3,400585c <memchr+0x84>
 4005830:	20c00044 	addi	r3,r4,1
 4005834:	39803fcc 	andi	r6,r7,255
 4005838:	2089883a 	add	r4,r4,r2
 400583c:	00000306 	br	400584c <memchr+0x74>
 4005840:	18c00044 	addi	r3,r3,1
 4005844:	197fffc3 	ldbu	r5,-1(r3)
 4005848:	31400526 	beq	r6,r5,4005860 <memchr+0x88>
 400584c:	1805883a 	mov	r2,r3
 4005850:	20fffb1e 	bne	r4,r3,4005840 <__alt_data_end+0xfc005840>
 4005854:	0005883a 	mov	r2,zero
 4005858:	f800283a 	ret
 400585c:	2005883a 	mov	r2,r4
 4005860:	f800283a 	ret
 4005864:	28c03fcc 	andi	r3,r5,255
 4005868:	1812923a 	slli	r9,r3,8
 400586c:	02ffbff4 	movhi	r11,65279
 4005870:	02a02074 	movhi	r10,32897
 4005874:	48d2b03a 	or	r9,r9,r3
 4005878:	4806943a 	slli	r3,r9,16
 400587c:	5affbfc4 	addi	r11,r11,-257
 4005880:	52a02004 	addi	r10,r10,-32640
 4005884:	48d2b03a 	or	r9,r9,r3
 4005888:	20c00017 	ldw	r3,0(r4)
 400588c:	48c6f03a 	xor	r3,r9,r3
 4005890:	1acd883a 	add	r6,r3,r11
 4005894:	00c6303a 	nor	r3,zero,r3
 4005898:	30c6703a 	and	r3,r6,r3
 400589c:	1a86703a 	and	r3,r3,r10
 40058a0:	183fe01e 	bne	r3,zero,4005824 <__alt_data_end+0xfc005824>
 40058a4:	10bfff04 	addi	r2,r2,-4
 40058a8:	21000104 	addi	r4,r4,4
 40058ac:	40bff636 	bltu	r8,r2,4005888 <__alt_data_end+0xfc005888>
 40058b0:	003fdb06 	br	4005820 <__alt_data_end+0xfc005820>
 40058b4:	3005883a 	mov	r2,r6
 40058b8:	003fd706 	br	4005818 <__alt_data_end+0xfc005818>

040058bc <memcpy>:
 40058bc:	defffd04 	addi	sp,sp,-12
 40058c0:	dfc00215 	stw	ra,8(sp)
 40058c4:	dc400115 	stw	r17,4(sp)
 40058c8:	dc000015 	stw	r16,0(sp)
 40058cc:	00c003c4 	movi	r3,15
 40058d0:	2005883a 	mov	r2,r4
 40058d4:	1980452e 	bgeu	r3,r6,40059ec <memcpy+0x130>
 40058d8:	2906b03a 	or	r3,r5,r4
 40058dc:	18c000cc 	andi	r3,r3,3
 40058e0:	1800441e 	bne	r3,zero,40059f4 <memcpy+0x138>
 40058e4:	347ffc04 	addi	r17,r6,-16
 40058e8:	8822d13a 	srli	r17,r17,4
 40058ec:	28c00104 	addi	r3,r5,4
 40058f0:	23400104 	addi	r13,r4,4
 40058f4:	8820913a 	slli	r16,r17,4
 40058f8:	2b000204 	addi	r12,r5,8
 40058fc:	22c00204 	addi	r11,r4,8
 4005900:	84000504 	addi	r16,r16,20
 4005904:	2a800304 	addi	r10,r5,12
 4005908:	22400304 	addi	r9,r4,12
 400590c:	2c21883a 	add	r16,r5,r16
 4005910:	2811883a 	mov	r8,r5
 4005914:	200f883a 	mov	r7,r4
 4005918:	41000017 	ldw	r4,0(r8)
 400591c:	1fc00017 	ldw	ra,0(r3)
 4005920:	63c00017 	ldw	r15,0(r12)
 4005924:	39000015 	stw	r4,0(r7)
 4005928:	53800017 	ldw	r14,0(r10)
 400592c:	6fc00015 	stw	ra,0(r13)
 4005930:	5bc00015 	stw	r15,0(r11)
 4005934:	4b800015 	stw	r14,0(r9)
 4005938:	18c00404 	addi	r3,r3,16
 400593c:	39c00404 	addi	r7,r7,16
 4005940:	42000404 	addi	r8,r8,16
 4005944:	6b400404 	addi	r13,r13,16
 4005948:	63000404 	addi	r12,r12,16
 400594c:	5ac00404 	addi	r11,r11,16
 4005950:	52800404 	addi	r10,r10,16
 4005954:	4a400404 	addi	r9,r9,16
 4005958:	1c3fef1e 	bne	r3,r16,4005918 <__alt_data_end+0xfc005918>
 400595c:	89c00044 	addi	r7,r17,1
 4005960:	380e913a 	slli	r7,r7,4
 4005964:	310003cc 	andi	r4,r6,15
 4005968:	02c000c4 	movi	r11,3
 400596c:	11c7883a 	add	r3,r2,r7
 4005970:	29cb883a 	add	r5,r5,r7
 4005974:	5900212e 	bgeu	r11,r4,40059fc <memcpy+0x140>
 4005978:	1813883a 	mov	r9,r3
 400597c:	2811883a 	mov	r8,r5
 4005980:	200f883a 	mov	r7,r4
 4005984:	42800017 	ldw	r10,0(r8)
 4005988:	4a400104 	addi	r9,r9,4
 400598c:	39ffff04 	addi	r7,r7,-4
 4005990:	4abfff15 	stw	r10,-4(r9)
 4005994:	42000104 	addi	r8,r8,4
 4005998:	59fffa36 	bltu	r11,r7,4005984 <__alt_data_end+0xfc005984>
 400599c:	213fff04 	addi	r4,r4,-4
 40059a0:	2008d0ba 	srli	r4,r4,2
 40059a4:	318000cc 	andi	r6,r6,3
 40059a8:	21000044 	addi	r4,r4,1
 40059ac:	2109883a 	add	r4,r4,r4
 40059b0:	2109883a 	add	r4,r4,r4
 40059b4:	1907883a 	add	r3,r3,r4
 40059b8:	290b883a 	add	r5,r5,r4
 40059bc:	30000626 	beq	r6,zero,40059d8 <memcpy+0x11c>
 40059c0:	198d883a 	add	r6,r3,r6
 40059c4:	29c00003 	ldbu	r7,0(r5)
 40059c8:	18c00044 	addi	r3,r3,1
 40059cc:	29400044 	addi	r5,r5,1
 40059d0:	19ffffc5 	stb	r7,-1(r3)
 40059d4:	19bffb1e 	bne	r3,r6,40059c4 <__alt_data_end+0xfc0059c4>
 40059d8:	dfc00217 	ldw	ra,8(sp)
 40059dc:	dc400117 	ldw	r17,4(sp)
 40059e0:	dc000017 	ldw	r16,0(sp)
 40059e4:	dec00304 	addi	sp,sp,12
 40059e8:	f800283a 	ret
 40059ec:	2007883a 	mov	r3,r4
 40059f0:	003ff206 	br	40059bc <__alt_data_end+0xfc0059bc>
 40059f4:	2007883a 	mov	r3,r4
 40059f8:	003ff106 	br	40059c0 <__alt_data_end+0xfc0059c0>
 40059fc:	200d883a 	mov	r6,r4
 4005a00:	003fee06 	br	40059bc <__alt_data_end+0xfc0059bc>

04005a04 <memset>:
 4005a04:	20c000cc 	andi	r3,r4,3
 4005a08:	2005883a 	mov	r2,r4
 4005a0c:	18004426 	beq	r3,zero,4005b20 <memset+0x11c>
 4005a10:	31ffffc4 	addi	r7,r6,-1
 4005a14:	30004026 	beq	r6,zero,4005b18 <memset+0x114>
 4005a18:	2813883a 	mov	r9,r5
 4005a1c:	200d883a 	mov	r6,r4
 4005a20:	2007883a 	mov	r3,r4
 4005a24:	00000406 	br	4005a38 <memset+0x34>
 4005a28:	3a3fffc4 	addi	r8,r7,-1
 4005a2c:	31800044 	addi	r6,r6,1
 4005a30:	38003926 	beq	r7,zero,4005b18 <memset+0x114>
 4005a34:	400f883a 	mov	r7,r8
 4005a38:	18c00044 	addi	r3,r3,1
 4005a3c:	32400005 	stb	r9,0(r6)
 4005a40:	1a0000cc 	andi	r8,r3,3
 4005a44:	403ff81e 	bne	r8,zero,4005a28 <__alt_data_end+0xfc005a28>
 4005a48:	010000c4 	movi	r4,3
 4005a4c:	21c02d2e 	bgeu	r4,r7,4005b04 <memset+0x100>
 4005a50:	29003fcc 	andi	r4,r5,255
 4005a54:	200c923a 	slli	r6,r4,8
 4005a58:	3108b03a 	or	r4,r6,r4
 4005a5c:	200c943a 	slli	r6,r4,16
 4005a60:	218cb03a 	or	r6,r4,r6
 4005a64:	010003c4 	movi	r4,15
 4005a68:	21c0182e 	bgeu	r4,r7,4005acc <memset+0xc8>
 4005a6c:	3b3ffc04 	addi	r12,r7,-16
 4005a70:	6018d13a 	srli	r12,r12,4
 4005a74:	1a000104 	addi	r8,r3,4
 4005a78:	1ac00204 	addi	r11,r3,8
 4005a7c:	6008913a 	slli	r4,r12,4
 4005a80:	1a800304 	addi	r10,r3,12
 4005a84:	1813883a 	mov	r9,r3
 4005a88:	21000504 	addi	r4,r4,20
 4005a8c:	1909883a 	add	r4,r3,r4
 4005a90:	49800015 	stw	r6,0(r9)
 4005a94:	41800015 	stw	r6,0(r8)
 4005a98:	59800015 	stw	r6,0(r11)
 4005a9c:	51800015 	stw	r6,0(r10)
 4005aa0:	42000404 	addi	r8,r8,16
 4005aa4:	4a400404 	addi	r9,r9,16
 4005aa8:	5ac00404 	addi	r11,r11,16
 4005aac:	52800404 	addi	r10,r10,16
 4005ab0:	413ff71e 	bne	r8,r4,4005a90 <__alt_data_end+0xfc005a90>
 4005ab4:	63000044 	addi	r12,r12,1
 4005ab8:	6018913a 	slli	r12,r12,4
 4005abc:	39c003cc 	andi	r7,r7,15
 4005ac0:	010000c4 	movi	r4,3
 4005ac4:	1b07883a 	add	r3,r3,r12
 4005ac8:	21c00e2e 	bgeu	r4,r7,4005b04 <memset+0x100>
 4005acc:	1813883a 	mov	r9,r3
 4005ad0:	3811883a 	mov	r8,r7
 4005ad4:	010000c4 	movi	r4,3
 4005ad8:	49800015 	stw	r6,0(r9)
 4005adc:	423fff04 	addi	r8,r8,-4
 4005ae0:	4a400104 	addi	r9,r9,4
 4005ae4:	223ffc36 	bltu	r4,r8,4005ad8 <__alt_data_end+0xfc005ad8>
 4005ae8:	393fff04 	addi	r4,r7,-4
 4005aec:	2008d0ba 	srli	r4,r4,2
 4005af0:	39c000cc 	andi	r7,r7,3
 4005af4:	21000044 	addi	r4,r4,1
 4005af8:	2109883a 	add	r4,r4,r4
 4005afc:	2109883a 	add	r4,r4,r4
 4005b00:	1907883a 	add	r3,r3,r4
 4005b04:	38000526 	beq	r7,zero,4005b1c <memset+0x118>
 4005b08:	19cf883a 	add	r7,r3,r7
 4005b0c:	19400005 	stb	r5,0(r3)
 4005b10:	18c00044 	addi	r3,r3,1
 4005b14:	38fffd1e 	bne	r7,r3,4005b0c <__alt_data_end+0xfc005b0c>
 4005b18:	f800283a 	ret
 4005b1c:	f800283a 	ret
 4005b20:	2007883a 	mov	r3,r4
 4005b24:	300f883a 	mov	r7,r6
 4005b28:	003fc706 	br	4005a48 <__alt_data_end+0xfc005a48>

04005b2c <_Balloc>:
 4005b2c:	20801317 	ldw	r2,76(r4)
 4005b30:	defffc04 	addi	sp,sp,-16
 4005b34:	dc400115 	stw	r17,4(sp)
 4005b38:	dc000015 	stw	r16,0(sp)
 4005b3c:	dfc00315 	stw	ra,12(sp)
 4005b40:	dc800215 	stw	r18,8(sp)
 4005b44:	2023883a 	mov	r17,r4
 4005b48:	2821883a 	mov	r16,r5
 4005b4c:	10000f26 	beq	r2,zero,4005b8c <_Balloc+0x60>
 4005b50:	8407883a 	add	r3,r16,r16
 4005b54:	18c7883a 	add	r3,r3,r3
 4005b58:	10c7883a 	add	r3,r2,r3
 4005b5c:	18800017 	ldw	r2,0(r3)
 4005b60:	10001126 	beq	r2,zero,4005ba8 <_Balloc+0x7c>
 4005b64:	11000017 	ldw	r4,0(r2)
 4005b68:	19000015 	stw	r4,0(r3)
 4005b6c:	10000415 	stw	zero,16(r2)
 4005b70:	10000315 	stw	zero,12(r2)
 4005b74:	dfc00317 	ldw	ra,12(sp)
 4005b78:	dc800217 	ldw	r18,8(sp)
 4005b7c:	dc400117 	ldw	r17,4(sp)
 4005b80:	dc000017 	ldw	r16,0(sp)
 4005b84:	dec00404 	addi	sp,sp,16
 4005b88:	f800283a 	ret
 4005b8c:	01800844 	movi	r6,33
 4005b90:	01400104 	movi	r5,4
 4005b94:	400859c0 	call	400859c <_calloc_r>
 4005b98:	88801315 	stw	r2,76(r17)
 4005b9c:	103fec1e 	bne	r2,zero,4005b50 <__alt_data_end+0xfc005b50>
 4005ba0:	0005883a 	mov	r2,zero
 4005ba4:	003ff306 	br	4005b74 <__alt_data_end+0xfc005b74>
 4005ba8:	01400044 	movi	r5,1
 4005bac:	2c24983a 	sll	r18,r5,r16
 4005bb0:	8809883a 	mov	r4,r17
 4005bb4:	91800144 	addi	r6,r18,5
 4005bb8:	318d883a 	add	r6,r6,r6
 4005bbc:	318d883a 	add	r6,r6,r6
 4005bc0:	400859c0 	call	400859c <_calloc_r>
 4005bc4:	103ff626 	beq	r2,zero,4005ba0 <__alt_data_end+0xfc005ba0>
 4005bc8:	14000115 	stw	r16,4(r2)
 4005bcc:	14800215 	stw	r18,8(r2)
 4005bd0:	003fe606 	br	4005b6c <__alt_data_end+0xfc005b6c>

04005bd4 <_Bfree>:
 4005bd4:	28000826 	beq	r5,zero,4005bf8 <_Bfree+0x24>
 4005bd8:	28c00117 	ldw	r3,4(r5)
 4005bdc:	20801317 	ldw	r2,76(r4)
 4005be0:	18c7883a 	add	r3,r3,r3
 4005be4:	18c7883a 	add	r3,r3,r3
 4005be8:	10c5883a 	add	r2,r2,r3
 4005bec:	10c00017 	ldw	r3,0(r2)
 4005bf0:	28c00015 	stw	r3,0(r5)
 4005bf4:	11400015 	stw	r5,0(r2)
 4005bf8:	f800283a 	ret

04005bfc <__multadd>:
 4005bfc:	defffa04 	addi	sp,sp,-24
 4005c00:	dc800315 	stw	r18,12(sp)
 4005c04:	dc400215 	stw	r17,8(sp)
 4005c08:	dc000115 	stw	r16,4(sp)
 4005c0c:	2823883a 	mov	r17,r5
 4005c10:	2c000417 	ldw	r16,16(r5)
 4005c14:	dfc00515 	stw	ra,20(sp)
 4005c18:	dcc00415 	stw	r19,16(sp)
 4005c1c:	2025883a 	mov	r18,r4
 4005c20:	29400504 	addi	r5,r5,20
 4005c24:	0011883a 	mov	r8,zero
 4005c28:	28c00017 	ldw	r3,0(r5)
 4005c2c:	29400104 	addi	r5,r5,4
 4005c30:	42000044 	addi	r8,r8,1
 4005c34:	18bfffcc 	andi	r2,r3,65535
 4005c38:	1185383a 	mul	r2,r2,r6
 4005c3c:	1806d43a 	srli	r3,r3,16
 4005c40:	11cf883a 	add	r7,r2,r7
 4005c44:	3808d43a 	srli	r4,r7,16
 4005c48:	1987383a 	mul	r3,r3,r6
 4005c4c:	38bfffcc 	andi	r2,r7,65535
 4005c50:	1907883a 	add	r3,r3,r4
 4005c54:	1808943a 	slli	r4,r3,16
 4005c58:	180ed43a 	srli	r7,r3,16
 4005c5c:	2085883a 	add	r2,r4,r2
 4005c60:	28bfff15 	stw	r2,-4(r5)
 4005c64:	443ff016 	blt	r8,r16,4005c28 <__alt_data_end+0xfc005c28>
 4005c68:	38000926 	beq	r7,zero,4005c90 <__multadd+0x94>
 4005c6c:	88800217 	ldw	r2,8(r17)
 4005c70:	80800f0e 	bge	r16,r2,4005cb0 <__multadd+0xb4>
 4005c74:	80800144 	addi	r2,r16,5
 4005c78:	1085883a 	add	r2,r2,r2
 4005c7c:	1085883a 	add	r2,r2,r2
 4005c80:	8885883a 	add	r2,r17,r2
 4005c84:	11c00015 	stw	r7,0(r2)
 4005c88:	84000044 	addi	r16,r16,1
 4005c8c:	8c000415 	stw	r16,16(r17)
 4005c90:	8805883a 	mov	r2,r17
 4005c94:	dfc00517 	ldw	ra,20(sp)
 4005c98:	dcc00417 	ldw	r19,16(sp)
 4005c9c:	dc800317 	ldw	r18,12(sp)
 4005ca0:	dc400217 	ldw	r17,8(sp)
 4005ca4:	dc000117 	ldw	r16,4(sp)
 4005ca8:	dec00604 	addi	sp,sp,24
 4005cac:	f800283a 	ret
 4005cb0:	89400117 	ldw	r5,4(r17)
 4005cb4:	9009883a 	mov	r4,r18
 4005cb8:	d9c00015 	stw	r7,0(sp)
 4005cbc:	29400044 	addi	r5,r5,1
 4005cc0:	4005b2c0 	call	4005b2c <_Balloc>
 4005cc4:	89800417 	ldw	r6,16(r17)
 4005cc8:	89400304 	addi	r5,r17,12
 4005ccc:	11000304 	addi	r4,r2,12
 4005cd0:	31800084 	addi	r6,r6,2
 4005cd4:	318d883a 	add	r6,r6,r6
 4005cd8:	318d883a 	add	r6,r6,r6
 4005cdc:	1027883a 	mov	r19,r2
 4005ce0:	40058bc0 	call	40058bc <memcpy>
 4005ce4:	d9c00017 	ldw	r7,0(sp)
 4005ce8:	88000a26 	beq	r17,zero,4005d14 <__multadd+0x118>
 4005cec:	88c00117 	ldw	r3,4(r17)
 4005cf0:	90801317 	ldw	r2,76(r18)
 4005cf4:	18c7883a 	add	r3,r3,r3
 4005cf8:	18c7883a 	add	r3,r3,r3
 4005cfc:	10c5883a 	add	r2,r2,r3
 4005d00:	10c00017 	ldw	r3,0(r2)
 4005d04:	88c00015 	stw	r3,0(r17)
 4005d08:	14400015 	stw	r17,0(r2)
 4005d0c:	9823883a 	mov	r17,r19
 4005d10:	003fd806 	br	4005c74 <__alt_data_end+0xfc005c74>
 4005d14:	9823883a 	mov	r17,r19
 4005d18:	003fd606 	br	4005c74 <__alt_data_end+0xfc005c74>

04005d1c <__s2b>:
 4005d1c:	defff904 	addi	sp,sp,-28
 4005d20:	dc400115 	stw	r17,4(sp)
 4005d24:	dc000015 	stw	r16,0(sp)
 4005d28:	2023883a 	mov	r17,r4
 4005d2c:	2821883a 	mov	r16,r5
 4005d30:	39000204 	addi	r4,r7,8
 4005d34:	01400244 	movi	r5,9
 4005d38:	dcc00315 	stw	r19,12(sp)
 4005d3c:	dc800215 	stw	r18,8(sp)
 4005d40:	dfc00615 	stw	ra,24(sp)
 4005d44:	dd400515 	stw	r21,20(sp)
 4005d48:	dd000415 	stw	r20,16(sp)
 4005d4c:	3825883a 	mov	r18,r7
 4005d50:	3027883a 	mov	r19,r6
 4005d54:	400a4480 	call	400a448 <__divsi3>
 4005d58:	00c00044 	movi	r3,1
 4005d5c:	000b883a 	mov	r5,zero
 4005d60:	1880030e 	bge	r3,r2,4005d70 <__s2b+0x54>
 4005d64:	18c7883a 	add	r3,r3,r3
 4005d68:	29400044 	addi	r5,r5,1
 4005d6c:	18bffd16 	blt	r3,r2,4005d64 <__alt_data_end+0xfc005d64>
 4005d70:	8809883a 	mov	r4,r17
 4005d74:	4005b2c0 	call	4005b2c <_Balloc>
 4005d78:	d8c00717 	ldw	r3,28(sp)
 4005d7c:	10c00515 	stw	r3,20(r2)
 4005d80:	00c00044 	movi	r3,1
 4005d84:	10c00415 	stw	r3,16(r2)
 4005d88:	00c00244 	movi	r3,9
 4005d8c:	1cc0210e 	bge	r3,r19,4005e14 <__s2b+0xf8>
 4005d90:	80eb883a 	add	r21,r16,r3
 4005d94:	a829883a 	mov	r20,r21
 4005d98:	84e1883a 	add	r16,r16,r19
 4005d9c:	a1c00007 	ldb	r7,0(r20)
 4005da0:	01800284 	movi	r6,10
 4005da4:	a5000044 	addi	r20,r20,1
 4005da8:	100b883a 	mov	r5,r2
 4005dac:	39fff404 	addi	r7,r7,-48
 4005db0:	8809883a 	mov	r4,r17
 4005db4:	4005bfc0 	call	4005bfc <__multadd>
 4005db8:	a43ff81e 	bne	r20,r16,4005d9c <__alt_data_end+0xfc005d9c>
 4005dbc:	ace1883a 	add	r16,r21,r19
 4005dc0:	843ffe04 	addi	r16,r16,-8
 4005dc4:	9c800a0e 	bge	r19,r18,4005df0 <__s2b+0xd4>
 4005dc8:	94e5c83a 	sub	r18,r18,r19
 4005dcc:	84a5883a 	add	r18,r16,r18
 4005dd0:	81c00007 	ldb	r7,0(r16)
 4005dd4:	01800284 	movi	r6,10
 4005dd8:	84000044 	addi	r16,r16,1
 4005ddc:	100b883a 	mov	r5,r2
 4005de0:	39fff404 	addi	r7,r7,-48
 4005de4:	8809883a 	mov	r4,r17
 4005de8:	4005bfc0 	call	4005bfc <__multadd>
 4005dec:	84bff81e 	bne	r16,r18,4005dd0 <__alt_data_end+0xfc005dd0>
 4005df0:	dfc00617 	ldw	ra,24(sp)
 4005df4:	dd400517 	ldw	r21,20(sp)
 4005df8:	dd000417 	ldw	r20,16(sp)
 4005dfc:	dcc00317 	ldw	r19,12(sp)
 4005e00:	dc800217 	ldw	r18,8(sp)
 4005e04:	dc400117 	ldw	r17,4(sp)
 4005e08:	dc000017 	ldw	r16,0(sp)
 4005e0c:	dec00704 	addi	sp,sp,28
 4005e10:	f800283a 	ret
 4005e14:	84000284 	addi	r16,r16,10
 4005e18:	1827883a 	mov	r19,r3
 4005e1c:	003fe906 	br	4005dc4 <__alt_data_end+0xfc005dc4>

04005e20 <__hi0bits>:
 4005e20:	20bfffec 	andhi	r2,r4,65535
 4005e24:	1000141e 	bne	r2,zero,4005e78 <__hi0bits+0x58>
 4005e28:	2008943a 	slli	r4,r4,16
 4005e2c:	00800404 	movi	r2,16
 4005e30:	20ffc02c 	andhi	r3,r4,65280
 4005e34:	1800021e 	bne	r3,zero,4005e40 <__hi0bits+0x20>
 4005e38:	2008923a 	slli	r4,r4,8
 4005e3c:	10800204 	addi	r2,r2,8
 4005e40:	20fc002c 	andhi	r3,r4,61440
 4005e44:	1800021e 	bne	r3,zero,4005e50 <__hi0bits+0x30>
 4005e48:	2008913a 	slli	r4,r4,4
 4005e4c:	10800104 	addi	r2,r2,4
 4005e50:	20f0002c 	andhi	r3,r4,49152
 4005e54:	1800031e 	bne	r3,zero,4005e64 <__hi0bits+0x44>
 4005e58:	2109883a 	add	r4,r4,r4
 4005e5c:	10800084 	addi	r2,r2,2
 4005e60:	2109883a 	add	r4,r4,r4
 4005e64:	20000316 	blt	r4,zero,4005e74 <__hi0bits+0x54>
 4005e68:	2110002c 	andhi	r4,r4,16384
 4005e6c:	2000041e 	bne	r4,zero,4005e80 <__hi0bits+0x60>
 4005e70:	00800804 	movi	r2,32
 4005e74:	f800283a 	ret
 4005e78:	0005883a 	mov	r2,zero
 4005e7c:	003fec06 	br	4005e30 <__alt_data_end+0xfc005e30>
 4005e80:	10800044 	addi	r2,r2,1
 4005e84:	f800283a 	ret

04005e88 <__lo0bits>:
 4005e88:	20c00017 	ldw	r3,0(r4)
 4005e8c:	188001cc 	andi	r2,r3,7
 4005e90:	10000826 	beq	r2,zero,4005eb4 <__lo0bits+0x2c>
 4005e94:	1880004c 	andi	r2,r3,1
 4005e98:	1000211e 	bne	r2,zero,4005f20 <__lo0bits+0x98>
 4005e9c:	1880008c 	andi	r2,r3,2
 4005ea0:	1000211e 	bne	r2,zero,4005f28 <__lo0bits+0xa0>
 4005ea4:	1806d0ba 	srli	r3,r3,2
 4005ea8:	00800084 	movi	r2,2
 4005eac:	20c00015 	stw	r3,0(r4)
 4005eb0:	f800283a 	ret
 4005eb4:	18bfffcc 	andi	r2,r3,65535
 4005eb8:	10001326 	beq	r2,zero,4005f08 <__lo0bits+0x80>
 4005ebc:	0005883a 	mov	r2,zero
 4005ec0:	19403fcc 	andi	r5,r3,255
 4005ec4:	2800021e 	bne	r5,zero,4005ed0 <__lo0bits+0x48>
 4005ec8:	1806d23a 	srli	r3,r3,8
 4005ecc:	10800204 	addi	r2,r2,8
 4005ed0:	194003cc 	andi	r5,r3,15
 4005ed4:	2800021e 	bne	r5,zero,4005ee0 <__lo0bits+0x58>
 4005ed8:	1806d13a 	srli	r3,r3,4
 4005edc:	10800104 	addi	r2,r2,4
 4005ee0:	194000cc 	andi	r5,r3,3
 4005ee4:	2800021e 	bne	r5,zero,4005ef0 <__lo0bits+0x68>
 4005ee8:	1806d0ba 	srli	r3,r3,2
 4005eec:	10800084 	addi	r2,r2,2
 4005ef0:	1940004c 	andi	r5,r3,1
 4005ef4:	2800081e 	bne	r5,zero,4005f18 <__lo0bits+0x90>
 4005ef8:	1806d07a 	srli	r3,r3,1
 4005efc:	1800051e 	bne	r3,zero,4005f14 <__lo0bits+0x8c>
 4005f00:	00800804 	movi	r2,32
 4005f04:	f800283a 	ret
 4005f08:	1806d43a 	srli	r3,r3,16
 4005f0c:	00800404 	movi	r2,16
 4005f10:	003feb06 	br	4005ec0 <__alt_data_end+0xfc005ec0>
 4005f14:	10800044 	addi	r2,r2,1
 4005f18:	20c00015 	stw	r3,0(r4)
 4005f1c:	f800283a 	ret
 4005f20:	0005883a 	mov	r2,zero
 4005f24:	f800283a 	ret
 4005f28:	1806d07a 	srli	r3,r3,1
 4005f2c:	00800044 	movi	r2,1
 4005f30:	20c00015 	stw	r3,0(r4)
 4005f34:	f800283a 	ret

04005f38 <__i2b>:
 4005f38:	defffd04 	addi	sp,sp,-12
 4005f3c:	dc000015 	stw	r16,0(sp)
 4005f40:	04000044 	movi	r16,1
 4005f44:	dc400115 	stw	r17,4(sp)
 4005f48:	2823883a 	mov	r17,r5
 4005f4c:	800b883a 	mov	r5,r16
 4005f50:	dfc00215 	stw	ra,8(sp)
 4005f54:	4005b2c0 	call	4005b2c <_Balloc>
 4005f58:	14400515 	stw	r17,20(r2)
 4005f5c:	14000415 	stw	r16,16(r2)
 4005f60:	dfc00217 	ldw	ra,8(sp)
 4005f64:	dc400117 	ldw	r17,4(sp)
 4005f68:	dc000017 	ldw	r16,0(sp)
 4005f6c:	dec00304 	addi	sp,sp,12
 4005f70:	f800283a 	ret

04005f74 <__multiply>:
 4005f74:	defffa04 	addi	sp,sp,-24
 4005f78:	dcc00315 	stw	r19,12(sp)
 4005f7c:	dc800215 	stw	r18,8(sp)
 4005f80:	34c00417 	ldw	r19,16(r6)
 4005f84:	2c800417 	ldw	r18,16(r5)
 4005f88:	dd000415 	stw	r20,16(sp)
 4005f8c:	dc400115 	stw	r17,4(sp)
 4005f90:	dfc00515 	stw	ra,20(sp)
 4005f94:	dc000015 	stw	r16,0(sp)
 4005f98:	2829883a 	mov	r20,r5
 4005f9c:	3023883a 	mov	r17,r6
 4005fa0:	94c0050e 	bge	r18,r19,4005fb8 <__multiply+0x44>
 4005fa4:	9007883a 	mov	r3,r18
 4005fa8:	3029883a 	mov	r20,r6
 4005fac:	9825883a 	mov	r18,r19
 4005fb0:	2823883a 	mov	r17,r5
 4005fb4:	1827883a 	mov	r19,r3
 4005fb8:	a0800217 	ldw	r2,8(r20)
 4005fbc:	94e1883a 	add	r16,r18,r19
 4005fc0:	a1400117 	ldw	r5,4(r20)
 4005fc4:	1400010e 	bge	r2,r16,4005fcc <__multiply+0x58>
 4005fc8:	29400044 	addi	r5,r5,1
 4005fcc:	4005b2c0 	call	4005b2c <_Balloc>
 4005fd0:	8415883a 	add	r10,r16,r16
 4005fd4:	12c00504 	addi	r11,r2,20
 4005fd8:	5295883a 	add	r10,r10,r10
 4005fdc:	5a95883a 	add	r10,r11,r10
 4005fe0:	5807883a 	mov	r3,r11
 4005fe4:	5a80032e 	bgeu	r11,r10,4005ff4 <__multiply+0x80>
 4005fe8:	18000015 	stw	zero,0(r3)
 4005fec:	18c00104 	addi	r3,r3,4
 4005ff0:	1abffd36 	bltu	r3,r10,4005fe8 <__alt_data_end+0xfc005fe8>
 4005ff4:	9ce7883a 	add	r19,r19,r19
 4005ff8:	94a5883a 	add	r18,r18,r18
 4005ffc:	89800504 	addi	r6,r17,20
 4006000:	9ce7883a 	add	r19,r19,r19
 4006004:	a3400504 	addi	r13,r20,20
 4006008:	94a5883a 	add	r18,r18,r18
 400600c:	34d9883a 	add	r12,r6,r19
 4006010:	6c93883a 	add	r9,r13,r18
 4006014:	3300422e 	bgeu	r6,r12,4006120 <__multiply+0x1ac>
 4006018:	37c00017 	ldw	ra,0(r6)
 400601c:	fbffffcc 	andi	r15,ra,65535
 4006020:	78001b26 	beq	r15,zero,4006090 <__multiply+0x11c>
 4006024:	5811883a 	mov	r8,r11
 4006028:	681d883a 	mov	r14,r13
 400602c:	000f883a 	mov	r7,zero
 4006030:	71000017 	ldw	r4,0(r14)
 4006034:	40c00017 	ldw	r3,0(r8)
 4006038:	73800104 	addi	r14,r14,4
 400603c:	217fffcc 	andi	r5,r4,65535
 4006040:	2bcb383a 	mul	r5,r5,r15
 4006044:	2008d43a 	srli	r4,r4,16
 4006048:	1c7fffcc 	andi	r17,r3,65535
 400604c:	2c4b883a 	add	r5,r5,r17
 4006050:	29cb883a 	add	r5,r5,r7
 4006054:	23c9383a 	mul	r4,r4,r15
 4006058:	1806d43a 	srli	r3,r3,16
 400605c:	280ed43a 	srli	r7,r5,16
 4006060:	297fffcc 	andi	r5,r5,65535
 4006064:	20c7883a 	add	r3,r4,r3
 4006068:	19c7883a 	add	r3,r3,r7
 400606c:	1808943a 	slli	r4,r3,16
 4006070:	4023883a 	mov	r17,r8
 4006074:	180ed43a 	srli	r7,r3,16
 4006078:	214ab03a 	or	r5,r4,r5
 400607c:	41400015 	stw	r5,0(r8)
 4006080:	42000104 	addi	r8,r8,4
 4006084:	727fea36 	bltu	r14,r9,4006030 <__alt_data_end+0xfc006030>
 4006088:	89c00115 	stw	r7,4(r17)
 400608c:	37c00017 	ldw	ra,0(r6)
 4006090:	f83ed43a 	srli	ra,ra,16
 4006094:	f8001f26 	beq	ra,zero,4006114 <__multiply+0x1a0>
 4006098:	58c00017 	ldw	r3,0(r11)
 400609c:	681d883a 	mov	r14,r13
 40060a0:	581f883a 	mov	r15,r11
 40060a4:	1811883a 	mov	r8,r3
 40060a8:	5825883a 	mov	r18,r11
 40060ac:	000f883a 	mov	r7,zero
 40060b0:	00000106 	br	40060b8 <__multiply+0x144>
 40060b4:	8825883a 	mov	r18,r17
 40060b8:	7140000b 	ldhu	r5,0(r14)
 40060bc:	4010d43a 	srli	r8,r8,16
 40060c0:	193fffcc 	andi	r4,r3,65535
 40060c4:	2fcb383a 	mul	r5,r5,ra
 40060c8:	7bc00104 	addi	r15,r15,4
 40060cc:	73800104 	addi	r14,r14,4
 40060d0:	2a0b883a 	add	r5,r5,r8
 40060d4:	29cb883a 	add	r5,r5,r7
 40060d8:	2806943a 	slli	r3,r5,16
 40060dc:	94400104 	addi	r17,r18,4
 40060e0:	280ad43a 	srli	r5,r5,16
 40060e4:	1908b03a 	or	r4,r3,r4
 40060e8:	793fff15 	stw	r4,-4(r15)
 40060ec:	70ffff17 	ldw	r3,-4(r14)
 40060f0:	8a000017 	ldw	r8,0(r17)
 40060f4:	1806d43a 	srli	r3,r3,16
 40060f8:	413fffcc 	andi	r4,r8,65535
 40060fc:	1fc7383a 	mul	r3,r3,ra
 4006100:	1907883a 	add	r3,r3,r4
 4006104:	1947883a 	add	r3,r3,r5
 4006108:	180ed43a 	srli	r7,r3,16
 400610c:	727fe936 	bltu	r14,r9,40060b4 <__alt_data_end+0xfc0060b4>
 4006110:	90c00115 	stw	r3,4(r18)
 4006114:	31800104 	addi	r6,r6,4
 4006118:	5ac00104 	addi	r11,r11,4
 400611c:	333fbe36 	bltu	r6,r12,4006018 <__alt_data_end+0xfc006018>
 4006120:	0400090e 	bge	zero,r16,4006148 <__multiply+0x1d4>
 4006124:	50ffff17 	ldw	r3,-4(r10)
 4006128:	52bfff04 	addi	r10,r10,-4
 400612c:	18000326 	beq	r3,zero,400613c <__multiply+0x1c8>
 4006130:	00000506 	br	4006148 <__multiply+0x1d4>
 4006134:	50c00017 	ldw	r3,0(r10)
 4006138:	1800031e 	bne	r3,zero,4006148 <__multiply+0x1d4>
 400613c:	843fffc4 	addi	r16,r16,-1
 4006140:	52bfff04 	addi	r10,r10,-4
 4006144:	803ffb1e 	bne	r16,zero,4006134 <__alt_data_end+0xfc006134>
 4006148:	14000415 	stw	r16,16(r2)
 400614c:	dfc00517 	ldw	ra,20(sp)
 4006150:	dd000417 	ldw	r20,16(sp)
 4006154:	dcc00317 	ldw	r19,12(sp)
 4006158:	dc800217 	ldw	r18,8(sp)
 400615c:	dc400117 	ldw	r17,4(sp)
 4006160:	dc000017 	ldw	r16,0(sp)
 4006164:	dec00604 	addi	sp,sp,24
 4006168:	f800283a 	ret

0400616c <__pow5mult>:
 400616c:	defffa04 	addi	sp,sp,-24
 4006170:	dcc00315 	stw	r19,12(sp)
 4006174:	dc000015 	stw	r16,0(sp)
 4006178:	dfc00515 	stw	ra,20(sp)
 400617c:	dd000415 	stw	r20,16(sp)
 4006180:	dc800215 	stw	r18,8(sp)
 4006184:	dc400115 	stw	r17,4(sp)
 4006188:	308000cc 	andi	r2,r6,3
 400618c:	3021883a 	mov	r16,r6
 4006190:	2027883a 	mov	r19,r4
 4006194:	10002f1e 	bne	r2,zero,4006254 <__pow5mult+0xe8>
 4006198:	2825883a 	mov	r18,r5
 400619c:	8021d0ba 	srai	r16,r16,2
 40061a0:	80001a26 	beq	r16,zero,400620c <__pow5mult+0xa0>
 40061a4:	9c401217 	ldw	r17,72(r19)
 40061a8:	8800061e 	bne	r17,zero,40061c4 <__pow5mult+0x58>
 40061ac:	00003406 	br	4006280 <__pow5mult+0x114>
 40061b0:	8021d07a 	srai	r16,r16,1
 40061b4:	80001526 	beq	r16,zero,400620c <__pow5mult+0xa0>
 40061b8:	88800017 	ldw	r2,0(r17)
 40061bc:	10001c26 	beq	r2,zero,4006230 <__pow5mult+0xc4>
 40061c0:	1023883a 	mov	r17,r2
 40061c4:	8080004c 	andi	r2,r16,1
 40061c8:	103ff926 	beq	r2,zero,40061b0 <__alt_data_end+0xfc0061b0>
 40061cc:	880d883a 	mov	r6,r17
 40061d0:	900b883a 	mov	r5,r18
 40061d4:	9809883a 	mov	r4,r19
 40061d8:	4005f740 	call	4005f74 <__multiply>
 40061dc:	90001b26 	beq	r18,zero,400624c <__pow5mult+0xe0>
 40061e0:	91000117 	ldw	r4,4(r18)
 40061e4:	98c01317 	ldw	r3,76(r19)
 40061e8:	8021d07a 	srai	r16,r16,1
 40061ec:	2109883a 	add	r4,r4,r4
 40061f0:	2109883a 	add	r4,r4,r4
 40061f4:	1907883a 	add	r3,r3,r4
 40061f8:	19000017 	ldw	r4,0(r3)
 40061fc:	91000015 	stw	r4,0(r18)
 4006200:	1c800015 	stw	r18,0(r3)
 4006204:	1025883a 	mov	r18,r2
 4006208:	803feb1e 	bne	r16,zero,40061b8 <__alt_data_end+0xfc0061b8>
 400620c:	9005883a 	mov	r2,r18
 4006210:	dfc00517 	ldw	ra,20(sp)
 4006214:	dd000417 	ldw	r20,16(sp)
 4006218:	dcc00317 	ldw	r19,12(sp)
 400621c:	dc800217 	ldw	r18,8(sp)
 4006220:	dc400117 	ldw	r17,4(sp)
 4006224:	dc000017 	ldw	r16,0(sp)
 4006228:	dec00604 	addi	sp,sp,24
 400622c:	f800283a 	ret
 4006230:	880d883a 	mov	r6,r17
 4006234:	880b883a 	mov	r5,r17
 4006238:	9809883a 	mov	r4,r19
 400623c:	4005f740 	call	4005f74 <__multiply>
 4006240:	88800015 	stw	r2,0(r17)
 4006244:	10000015 	stw	zero,0(r2)
 4006248:	003fdd06 	br	40061c0 <__alt_data_end+0xfc0061c0>
 400624c:	1025883a 	mov	r18,r2
 4006250:	003fd706 	br	40061b0 <__alt_data_end+0xfc0061b0>
 4006254:	10bfffc4 	addi	r2,r2,-1
 4006258:	1085883a 	add	r2,r2,r2
 400625c:	00c10074 	movhi	r3,1025
 4006260:	18c08e04 	addi	r3,r3,568
 4006264:	1085883a 	add	r2,r2,r2
 4006268:	1885883a 	add	r2,r3,r2
 400626c:	11800017 	ldw	r6,0(r2)
 4006270:	000f883a 	mov	r7,zero
 4006274:	4005bfc0 	call	4005bfc <__multadd>
 4006278:	1025883a 	mov	r18,r2
 400627c:	003fc706 	br	400619c <__alt_data_end+0xfc00619c>
 4006280:	05000044 	movi	r20,1
 4006284:	a00b883a 	mov	r5,r20
 4006288:	9809883a 	mov	r4,r19
 400628c:	4005b2c0 	call	4005b2c <_Balloc>
 4006290:	1023883a 	mov	r17,r2
 4006294:	00809c44 	movi	r2,625
 4006298:	88800515 	stw	r2,20(r17)
 400629c:	8d000415 	stw	r20,16(r17)
 40062a0:	9c401215 	stw	r17,72(r19)
 40062a4:	88000015 	stw	zero,0(r17)
 40062a8:	003fc606 	br	40061c4 <__alt_data_end+0xfc0061c4>

040062ac <__lshift>:
 40062ac:	defff904 	addi	sp,sp,-28
 40062b0:	dd400515 	stw	r21,20(sp)
 40062b4:	dcc00315 	stw	r19,12(sp)
 40062b8:	302bd17a 	srai	r21,r6,5
 40062bc:	2cc00417 	ldw	r19,16(r5)
 40062c0:	28800217 	ldw	r2,8(r5)
 40062c4:	dd000415 	stw	r20,16(sp)
 40062c8:	ace7883a 	add	r19,r21,r19
 40062cc:	dc800215 	stw	r18,8(sp)
 40062d0:	dc400115 	stw	r17,4(sp)
 40062d4:	dc000015 	stw	r16,0(sp)
 40062d8:	dfc00615 	stw	ra,24(sp)
 40062dc:	9c000044 	addi	r16,r19,1
 40062e0:	2823883a 	mov	r17,r5
 40062e4:	3029883a 	mov	r20,r6
 40062e8:	2025883a 	mov	r18,r4
 40062ec:	29400117 	ldw	r5,4(r5)
 40062f0:	1400030e 	bge	r2,r16,4006300 <__lshift+0x54>
 40062f4:	1085883a 	add	r2,r2,r2
 40062f8:	29400044 	addi	r5,r5,1
 40062fc:	143ffd16 	blt	r2,r16,40062f4 <__alt_data_end+0xfc0062f4>
 4006300:	9009883a 	mov	r4,r18
 4006304:	4005b2c0 	call	4005b2c <_Balloc>
 4006308:	10c00504 	addi	r3,r2,20
 400630c:	0540070e 	bge	zero,r21,400632c <__lshift+0x80>
 4006310:	ad6b883a 	add	r21,r21,r21
 4006314:	ad6b883a 	add	r21,r21,r21
 4006318:	1809883a 	mov	r4,r3
 400631c:	1d47883a 	add	r3,r3,r21
 4006320:	20000015 	stw	zero,0(r4)
 4006324:	21000104 	addi	r4,r4,4
 4006328:	193ffd1e 	bne	r3,r4,4006320 <__alt_data_end+0xfc006320>
 400632c:	8a000417 	ldw	r8,16(r17)
 4006330:	89000504 	addi	r4,r17,20
 4006334:	a18007cc 	andi	r6,r20,31
 4006338:	4211883a 	add	r8,r8,r8
 400633c:	4211883a 	add	r8,r8,r8
 4006340:	2211883a 	add	r8,r4,r8
 4006344:	30002326 	beq	r6,zero,40063d4 <__lshift+0x128>
 4006348:	02400804 	movi	r9,32
 400634c:	4993c83a 	sub	r9,r9,r6
 4006350:	000b883a 	mov	r5,zero
 4006354:	21c00017 	ldw	r7,0(r4)
 4006358:	1815883a 	mov	r10,r3
 400635c:	18c00104 	addi	r3,r3,4
 4006360:	398e983a 	sll	r7,r7,r6
 4006364:	21000104 	addi	r4,r4,4
 4006368:	394ab03a 	or	r5,r7,r5
 400636c:	197fff15 	stw	r5,-4(r3)
 4006370:	217fff17 	ldw	r5,-4(r4)
 4006374:	2a4ad83a 	srl	r5,r5,r9
 4006378:	223ff636 	bltu	r4,r8,4006354 <__alt_data_end+0xfc006354>
 400637c:	51400115 	stw	r5,4(r10)
 4006380:	28001a1e 	bne	r5,zero,40063ec <__lshift+0x140>
 4006384:	843fffc4 	addi	r16,r16,-1
 4006388:	14000415 	stw	r16,16(r2)
 400638c:	88000826 	beq	r17,zero,40063b0 <__lshift+0x104>
 4006390:	89000117 	ldw	r4,4(r17)
 4006394:	90c01317 	ldw	r3,76(r18)
 4006398:	2109883a 	add	r4,r4,r4
 400639c:	2109883a 	add	r4,r4,r4
 40063a0:	1907883a 	add	r3,r3,r4
 40063a4:	19000017 	ldw	r4,0(r3)
 40063a8:	89000015 	stw	r4,0(r17)
 40063ac:	1c400015 	stw	r17,0(r3)
 40063b0:	dfc00617 	ldw	ra,24(sp)
 40063b4:	dd400517 	ldw	r21,20(sp)
 40063b8:	dd000417 	ldw	r20,16(sp)
 40063bc:	dcc00317 	ldw	r19,12(sp)
 40063c0:	dc800217 	ldw	r18,8(sp)
 40063c4:	dc400117 	ldw	r17,4(sp)
 40063c8:	dc000017 	ldw	r16,0(sp)
 40063cc:	dec00704 	addi	sp,sp,28
 40063d0:	f800283a 	ret
 40063d4:	21400017 	ldw	r5,0(r4)
 40063d8:	18c00104 	addi	r3,r3,4
 40063dc:	21000104 	addi	r4,r4,4
 40063e0:	197fff15 	stw	r5,-4(r3)
 40063e4:	223ffb36 	bltu	r4,r8,40063d4 <__alt_data_end+0xfc0063d4>
 40063e8:	003fe606 	br	4006384 <__alt_data_end+0xfc006384>
 40063ec:	9c000084 	addi	r16,r19,2
 40063f0:	003fe406 	br	4006384 <__alt_data_end+0xfc006384>

040063f4 <__mcmp>:
 40063f4:	20800417 	ldw	r2,16(r4)
 40063f8:	28c00417 	ldw	r3,16(r5)
 40063fc:	10c5c83a 	sub	r2,r2,r3
 4006400:	1000111e 	bne	r2,zero,4006448 <__mcmp+0x54>
 4006404:	18c7883a 	add	r3,r3,r3
 4006408:	18c7883a 	add	r3,r3,r3
 400640c:	21000504 	addi	r4,r4,20
 4006410:	29400504 	addi	r5,r5,20
 4006414:	20c5883a 	add	r2,r4,r3
 4006418:	28cb883a 	add	r5,r5,r3
 400641c:	00000106 	br	4006424 <__mcmp+0x30>
 4006420:	20800a2e 	bgeu	r4,r2,400644c <__mcmp+0x58>
 4006424:	10bfff04 	addi	r2,r2,-4
 4006428:	297fff04 	addi	r5,r5,-4
 400642c:	11800017 	ldw	r6,0(r2)
 4006430:	28c00017 	ldw	r3,0(r5)
 4006434:	30fffa26 	beq	r6,r3,4006420 <__alt_data_end+0xfc006420>
 4006438:	30c00236 	bltu	r6,r3,4006444 <__mcmp+0x50>
 400643c:	00800044 	movi	r2,1
 4006440:	f800283a 	ret
 4006444:	00bfffc4 	movi	r2,-1
 4006448:	f800283a 	ret
 400644c:	0005883a 	mov	r2,zero
 4006450:	f800283a 	ret

04006454 <__mdiff>:
 4006454:	28c00417 	ldw	r3,16(r5)
 4006458:	30800417 	ldw	r2,16(r6)
 400645c:	defffa04 	addi	sp,sp,-24
 4006460:	dcc00315 	stw	r19,12(sp)
 4006464:	dc800215 	stw	r18,8(sp)
 4006468:	dfc00515 	stw	ra,20(sp)
 400646c:	dd000415 	stw	r20,16(sp)
 4006470:	dc400115 	stw	r17,4(sp)
 4006474:	dc000015 	stw	r16,0(sp)
 4006478:	1887c83a 	sub	r3,r3,r2
 400647c:	2825883a 	mov	r18,r5
 4006480:	3027883a 	mov	r19,r6
 4006484:	1800141e 	bne	r3,zero,40064d8 <__mdiff+0x84>
 4006488:	1085883a 	add	r2,r2,r2
 400648c:	1085883a 	add	r2,r2,r2
 4006490:	2a000504 	addi	r8,r5,20
 4006494:	34000504 	addi	r16,r6,20
 4006498:	4087883a 	add	r3,r8,r2
 400649c:	8085883a 	add	r2,r16,r2
 40064a0:	00000106 	br	40064a8 <__mdiff+0x54>
 40064a4:	40c0592e 	bgeu	r8,r3,400660c <__mdiff+0x1b8>
 40064a8:	18ffff04 	addi	r3,r3,-4
 40064ac:	10bfff04 	addi	r2,r2,-4
 40064b0:	19c00017 	ldw	r7,0(r3)
 40064b4:	11400017 	ldw	r5,0(r2)
 40064b8:	397ffa26 	beq	r7,r5,40064a4 <__alt_data_end+0xfc0064a4>
 40064bc:	3940592e 	bgeu	r7,r5,4006624 <__mdiff+0x1d0>
 40064c0:	9005883a 	mov	r2,r18
 40064c4:	4023883a 	mov	r17,r8
 40064c8:	9825883a 	mov	r18,r19
 40064cc:	05000044 	movi	r20,1
 40064d0:	1027883a 	mov	r19,r2
 40064d4:	00000406 	br	40064e8 <__mdiff+0x94>
 40064d8:	18005616 	blt	r3,zero,4006634 <__mdiff+0x1e0>
 40064dc:	34400504 	addi	r17,r6,20
 40064e0:	2c000504 	addi	r16,r5,20
 40064e4:	0029883a 	mov	r20,zero
 40064e8:	91400117 	ldw	r5,4(r18)
 40064ec:	4005b2c0 	call	4005b2c <_Balloc>
 40064f0:	92400417 	ldw	r9,16(r18)
 40064f4:	9b000417 	ldw	r12,16(r19)
 40064f8:	12c00504 	addi	r11,r2,20
 40064fc:	4a51883a 	add	r8,r9,r9
 4006500:	6319883a 	add	r12,r12,r12
 4006504:	4211883a 	add	r8,r8,r8
 4006508:	6319883a 	add	r12,r12,r12
 400650c:	15000315 	stw	r20,12(r2)
 4006510:	8211883a 	add	r8,r16,r8
 4006514:	8b19883a 	add	r12,r17,r12
 4006518:	0007883a 	mov	r3,zero
 400651c:	81400017 	ldw	r5,0(r16)
 4006520:	89c00017 	ldw	r7,0(r17)
 4006524:	59800104 	addi	r6,r11,4
 4006528:	293fffcc 	andi	r4,r5,65535
 400652c:	20c7883a 	add	r3,r4,r3
 4006530:	393fffcc 	andi	r4,r7,65535
 4006534:	1909c83a 	sub	r4,r3,r4
 4006538:	280ad43a 	srli	r5,r5,16
 400653c:	380ed43a 	srli	r7,r7,16
 4006540:	2007d43a 	srai	r3,r4,16
 4006544:	213fffcc 	andi	r4,r4,65535
 4006548:	29cbc83a 	sub	r5,r5,r7
 400654c:	28c7883a 	add	r3,r5,r3
 4006550:	180a943a 	slli	r5,r3,16
 4006554:	8c400104 	addi	r17,r17,4
 4006558:	84000104 	addi	r16,r16,4
 400655c:	2908b03a 	or	r4,r5,r4
 4006560:	59000015 	stw	r4,0(r11)
 4006564:	1807d43a 	srai	r3,r3,16
 4006568:	3015883a 	mov	r10,r6
 400656c:	3017883a 	mov	r11,r6
 4006570:	8b3fea36 	bltu	r17,r12,400651c <__alt_data_end+0xfc00651c>
 4006574:	8200162e 	bgeu	r16,r8,40065d0 <__mdiff+0x17c>
 4006578:	8017883a 	mov	r11,r16
 400657c:	59400017 	ldw	r5,0(r11)
 4006580:	31800104 	addi	r6,r6,4
 4006584:	5ac00104 	addi	r11,r11,4
 4006588:	293fffcc 	andi	r4,r5,65535
 400658c:	20c7883a 	add	r3,r4,r3
 4006590:	280ed43a 	srli	r7,r5,16
 4006594:	180bd43a 	srai	r5,r3,16
 4006598:	193fffcc 	andi	r4,r3,65535
 400659c:	3947883a 	add	r3,r7,r5
 40065a0:	180a943a 	slli	r5,r3,16
 40065a4:	1807d43a 	srai	r3,r3,16
 40065a8:	2908b03a 	or	r4,r5,r4
 40065ac:	313fff15 	stw	r4,-4(r6)
 40065b0:	5a3ff236 	bltu	r11,r8,400657c <__alt_data_end+0xfc00657c>
 40065b4:	0406303a 	nor	r3,zero,r16
 40065b8:	1a07883a 	add	r3,r3,r8
 40065bc:	1806d0ba 	srli	r3,r3,2
 40065c0:	18c00044 	addi	r3,r3,1
 40065c4:	18c7883a 	add	r3,r3,r3
 40065c8:	18c7883a 	add	r3,r3,r3
 40065cc:	50d5883a 	add	r10,r10,r3
 40065d0:	50ffff04 	addi	r3,r10,-4
 40065d4:	2000041e 	bne	r4,zero,40065e8 <__mdiff+0x194>
 40065d8:	18ffff04 	addi	r3,r3,-4
 40065dc:	19000017 	ldw	r4,0(r3)
 40065e0:	4a7fffc4 	addi	r9,r9,-1
 40065e4:	203ffc26 	beq	r4,zero,40065d8 <__alt_data_end+0xfc0065d8>
 40065e8:	12400415 	stw	r9,16(r2)
 40065ec:	dfc00517 	ldw	ra,20(sp)
 40065f0:	dd000417 	ldw	r20,16(sp)
 40065f4:	dcc00317 	ldw	r19,12(sp)
 40065f8:	dc800217 	ldw	r18,8(sp)
 40065fc:	dc400117 	ldw	r17,4(sp)
 4006600:	dc000017 	ldw	r16,0(sp)
 4006604:	dec00604 	addi	sp,sp,24
 4006608:	f800283a 	ret
 400660c:	000b883a 	mov	r5,zero
 4006610:	4005b2c0 	call	4005b2c <_Balloc>
 4006614:	00c00044 	movi	r3,1
 4006618:	10c00415 	stw	r3,16(r2)
 400661c:	10000515 	stw	zero,20(r2)
 4006620:	003ff206 	br	40065ec <__alt_data_end+0xfc0065ec>
 4006624:	8023883a 	mov	r17,r16
 4006628:	0029883a 	mov	r20,zero
 400662c:	4021883a 	mov	r16,r8
 4006630:	003fad06 	br	40064e8 <__alt_data_end+0xfc0064e8>
 4006634:	9005883a 	mov	r2,r18
 4006638:	94400504 	addi	r17,r18,20
 400663c:	9c000504 	addi	r16,r19,20
 4006640:	9825883a 	mov	r18,r19
 4006644:	05000044 	movi	r20,1
 4006648:	1027883a 	mov	r19,r2
 400664c:	003fa606 	br	40064e8 <__alt_data_end+0xfc0064e8>

04006650 <__ulp>:
 4006650:	295ffc2c 	andhi	r5,r5,32752
 4006654:	00bf3034 	movhi	r2,64704
 4006658:	2887883a 	add	r3,r5,r2
 400665c:	00c0020e 	bge	zero,r3,4006668 <__ulp+0x18>
 4006660:	0005883a 	mov	r2,zero
 4006664:	f800283a 	ret
 4006668:	00c7c83a 	sub	r3,zero,r3
 400666c:	1807d53a 	srai	r3,r3,20
 4006670:	008004c4 	movi	r2,19
 4006674:	10c00b0e 	bge	r2,r3,40066a4 <__ulp+0x54>
 4006678:	18bffb04 	addi	r2,r3,-20
 400667c:	01000784 	movi	r4,30
 4006680:	0007883a 	mov	r3,zero
 4006684:	20800516 	blt	r4,r2,400669c <__ulp+0x4c>
 4006688:	010007c4 	movi	r4,31
 400668c:	2089c83a 	sub	r4,r4,r2
 4006690:	00800044 	movi	r2,1
 4006694:	1104983a 	sll	r2,r2,r4
 4006698:	f800283a 	ret
 400669c:	00800044 	movi	r2,1
 40066a0:	f800283a 	ret
 40066a4:	01400234 	movhi	r5,8
 40066a8:	28c7d83a 	sra	r3,r5,r3
 40066ac:	0005883a 	mov	r2,zero
 40066b0:	f800283a 	ret

040066b4 <__b2d>:
 40066b4:	defffa04 	addi	sp,sp,-24
 40066b8:	dc000015 	stw	r16,0(sp)
 40066bc:	24000417 	ldw	r16,16(r4)
 40066c0:	dc400115 	stw	r17,4(sp)
 40066c4:	24400504 	addi	r17,r4,20
 40066c8:	8421883a 	add	r16,r16,r16
 40066cc:	8421883a 	add	r16,r16,r16
 40066d0:	8c21883a 	add	r16,r17,r16
 40066d4:	dc800215 	stw	r18,8(sp)
 40066d8:	84bfff17 	ldw	r18,-4(r16)
 40066dc:	dd000415 	stw	r20,16(sp)
 40066e0:	dcc00315 	stw	r19,12(sp)
 40066e4:	9009883a 	mov	r4,r18
 40066e8:	2829883a 	mov	r20,r5
 40066ec:	dfc00515 	stw	ra,20(sp)
 40066f0:	4005e200 	call	4005e20 <__hi0bits>
 40066f4:	00c00804 	movi	r3,32
 40066f8:	1889c83a 	sub	r4,r3,r2
 40066fc:	a1000015 	stw	r4,0(r20)
 4006700:	01000284 	movi	r4,10
 4006704:	84ffff04 	addi	r19,r16,-4
 4006708:	20801216 	blt	r4,r2,4006754 <__b2d+0xa0>
 400670c:	018002c4 	movi	r6,11
 4006710:	308dc83a 	sub	r6,r6,r2
 4006714:	9186d83a 	srl	r3,r18,r6
 4006718:	18cffc34 	orhi	r3,r3,16368
 400671c:	8cc0212e 	bgeu	r17,r19,40067a4 <__b2d+0xf0>
 4006720:	813ffe17 	ldw	r4,-8(r16)
 4006724:	218cd83a 	srl	r6,r4,r6
 4006728:	10800544 	addi	r2,r2,21
 400672c:	9084983a 	sll	r2,r18,r2
 4006730:	1184b03a 	or	r2,r2,r6
 4006734:	dfc00517 	ldw	ra,20(sp)
 4006738:	dd000417 	ldw	r20,16(sp)
 400673c:	dcc00317 	ldw	r19,12(sp)
 4006740:	dc800217 	ldw	r18,8(sp)
 4006744:	dc400117 	ldw	r17,4(sp)
 4006748:	dc000017 	ldw	r16,0(sp)
 400674c:	dec00604 	addi	sp,sp,24
 4006750:	f800283a 	ret
 4006754:	8cc00f2e 	bgeu	r17,r19,4006794 <__b2d+0xe0>
 4006758:	117ffd44 	addi	r5,r2,-11
 400675c:	80bffe17 	ldw	r2,-8(r16)
 4006760:	28000e26 	beq	r5,zero,400679c <__b2d+0xe8>
 4006764:	1949c83a 	sub	r4,r3,r5
 4006768:	9164983a 	sll	r18,r18,r5
 400676c:	1106d83a 	srl	r3,r2,r4
 4006770:	81bffe04 	addi	r6,r16,-8
 4006774:	948ffc34 	orhi	r18,r18,16368
 4006778:	90c6b03a 	or	r3,r18,r3
 400677c:	89800e2e 	bgeu	r17,r6,40067b8 <__b2d+0x104>
 4006780:	81bffd17 	ldw	r6,-12(r16)
 4006784:	1144983a 	sll	r2,r2,r5
 4006788:	310ad83a 	srl	r5,r6,r4
 400678c:	2884b03a 	or	r2,r5,r2
 4006790:	003fe806 	br	4006734 <__alt_data_end+0xfc006734>
 4006794:	10bffd44 	addi	r2,r2,-11
 4006798:	1000041e 	bne	r2,zero,40067ac <__b2d+0xf8>
 400679c:	90cffc34 	orhi	r3,r18,16368
 40067a0:	003fe406 	br	4006734 <__alt_data_end+0xfc006734>
 40067a4:	000d883a 	mov	r6,zero
 40067a8:	003fdf06 	br	4006728 <__alt_data_end+0xfc006728>
 40067ac:	90a4983a 	sll	r18,r18,r2
 40067b0:	0005883a 	mov	r2,zero
 40067b4:	003ff906 	br	400679c <__alt_data_end+0xfc00679c>
 40067b8:	1144983a 	sll	r2,r2,r5
 40067bc:	003fdd06 	br	4006734 <__alt_data_end+0xfc006734>

040067c0 <__d2b>:
 40067c0:	defff804 	addi	sp,sp,-32
 40067c4:	dc000215 	stw	r16,8(sp)
 40067c8:	3021883a 	mov	r16,r6
 40067cc:	dc400315 	stw	r17,12(sp)
 40067d0:	8022907a 	slli	r17,r16,1
 40067d4:	dd000615 	stw	r20,24(sp)
 40067d8:	2829883a 	mov	r20,r5
 40067dc:	01400044 	movi	r5,1
 40067e0:	dcc00515 	stw	r19,20(sp)
 40067e4:	dc800415 	stw	r18,16(sp)
 40067e8:	dfc00715 	stw	ra,28(sp)
 40067ec:	3825883a 	mov	r18,r7
 40067f0:	8822d57a 	srli	r17,r17,21
 40067f4:	4005b2c0 	call	4005b2c <_Balloc>
 40067f8:	1027883a 	mov	r19,r2
 40067fc:	00800434 	movhi	r2,16
 4006800:	10bfffc4 	addi	r2,r2,-1
 4006804:	808c703a 	and	r6,r16,r2
 4006808:	88000126 	beq	r17,zero,4006810 <__d2b+0x50>
 400680c:	31800434 	orhi	r6,r6,16
 4006810:	d9800015 	stw	r6,0(sp)
 4006814:	a0002426 	beq	r20,zero,40068a8 <__d2b+0xe8>
 4006818:	d9000104 	addi	r4,sp,4
 400681c:	dd000115 	stw	r20,4(sp)
 4006820:	4005e880 	call	4005e88 <__lo0bits>
 4006824:	d8c00017 	ldw	r3,0(sp)
 4006828:	10002f1e 	bne	r2,zero,40068e8 <__d2b+0x128>
 400682c:	d9000117 	ldw	r4,4(sp)
 4006830:	99000515 	stw	r4,20(r19)
 4006834:	1821003a 	cmpeq	r16,r3,zero
 4006838:	01000084 	movi	r4,2
 400683c:	2421c83a 	sub	r16,r4,r16
 4006840:	98c00615 	stw	r3,24(r19)
 4006844:	9c000415 	stw	r16,16(r19)
 4006848:	88001f1e 	bne	r17,zero,40068c8 <__d2b+0x108>
 400684c:	10bef384 	addi	r2,r2,-1074
 4006850:	90800015 	stw	r2,0(r18)
 4006854:	00900034 	movhi	r2,16384
 4006858:	10bfffc4 	addi	r2,r2,-1
 400685c:	8085883a 	add	r2,r16,r2
 4006860:	1085883a 	add	r2,r2,r2
 4006864:	1085883a 	add	r2,r2,r2
 4006868:	9885883a 	add	r2,r19,r2
 400686c:	11000517 	ldw	r4,20(r2)
 4006870:	8020917a 	slli	r16,r16,5
 4006874:	4005e200 	call	4005e20 <__hi0bits>
 4006878:	d8c00817 	ldw	r3,32(sp)
 400687c:	8085c83a 	sub	r2,r16,r2
 4006880:	18800015 	stw	r2,0(r3)
 4006884:	9805883a 	mov	r2,r19
 4006888:	dfc00717 	ldw	ra,28(sp)
 400688c:	dd000617 	ldw	r20,24(sp)
 4006890:	dcc00517 	ldw	r19,20(sp)
 4006894:	dc800417 	ldw	r18,16(sp)
 4006898:	dc400317 	ldw	r17,12(sp)
 400689c:	dc000217 	ldw	r16,8(sp)
 40068a0:	dec00804 	addi	sp,sp,32
 40068a4:	f800283a 	ret
 40068a8:	d809883a 	mov	r4,sp
 40068ac:	4005e880 	call	4005e88 <__lo0bits>
 40068b0:	d8c00017 	ldw	r3,0(sp)
 40068b4:	04000044 	movi	r16,1
 40068b8:	9c000415 	stw	r16,16(r19)
 40068bc:	98c00515 	stw	r3,20(r19)
 40068c0:	10800804 	addi	r2,r2,32
 40068c4:	883fe126 	beq	r17,zero,400684c <__alt_data_end+0xfc00684c>
 40068c8:	00c00d44 	movi	r3,53
 40068cc:	8c7ef344 	addi	r17,r17,-1075
 40068d0:	88a3883a 	add	r17,r17,r2
 40068d4:	1885c83a 	sub	r2,r3,r2
 40068d8:	d8c00817 	ldw	r3,32(sp)
 40068dc:	94400015 	stw	r17,0(r18)
 40068e0:	18800015 	stw	r2,0(r3)
 40068e4:	003fe706 	br	4006884 <__alt_data_end+0xfc006884>
 40068e8:	01000804 	movi	r4,32
 40068ec:	2089c83a 	sub	r4,r4,r2
 40068f0:	1908983a 	sll	r4,r3,r4
 40068f4:	d9400117 	ldw	r5,4(sp)
 40068f8:	1886d83a 	srl	r3,r3,r2
 40068fc:	2148b03a 	or	r4,r4,r5
 4006900:	99000515 	stw	r4,20(r19)
 4006904:	d8c00015 	stw	r3,0(sp)
 4006908:	003fca06 	br	4006834 <__alt_data_end+0xfc006834>

0400690c <__ratio>:
 400690c:	defff904 	addi	sp,sp,-28
 4006910:	dc400315 	stw	r17,12(sp)
 4006914:	2823883a 	mov	r17,r5
 4006918:	d9400104 	addi	r5,sp,4
 400691c:	dfc00615 	stw	ra,24(sp)
 4006920:	dcc00515 	stw	r19,20(sp)
 4006924:	dc800415 	stw	r18,16(sp)
 4006928:	2027883a 	mov	r19,r4
 400692c:	dc000215 	stw	r16,8(sp)
 4006930:	40066b40 	call	40066b4 <__b2d>
 4006934:	d80b883a 	mov	r5,sp
 4006938:	8809883a 	mov	r4,r17
 400693c:	1025883a 	mov	r18,r2
 4006940:	1821883a 	mov	r16,r3
 4006944:	40066b40 	call	40066b4 <__b2d>
 4006948:	8a000417 	ldw	r8,16(r17)
 400694c:	99000417 	ldw	r4,16(r19)
 4006950:	d9400117 	ldw	r5,4(sp)
 4006954:	2209c83a 	sub	r4,r4,r8
 4006958:	2010917a 	slli	r8,r4,5
 400695c:	d9000017 	ldw	r4,0(sp)
 4006960:	2909c83a 	sub	r4,r5,r4
 4006964:	4109883a 	add	r4,r8,r4
 4006968:	01000e0e 	bge	zero,r4,40069a4 <__ratio+0x98>
 400696c:	2008953a 	slli	r4,r4,20
 4006970:	2421883a 	add	r16,r4,r16
 4006974:	100d883a 	mov	r6,r2
 4006978:	180f883a 	mov	r7,r3
 400697c:	9009883a 	mov	r4,r18
 4006980:	800b883a 	mov	r5,r16
 4006984:	400aea80 	call	400aea8 <__divdf3>
 4006988:	dfc00617 	ldw	ra,24(sp)
 400698c:	dcc00517 	ldw	r19,20(sp)
 4006990:	dc800417 	ldw	r18,16(sp)
 4006994:	dc400317 	ldw	r17,12(sp)
 4006998:	dc000217 	ldw	r16,8(sp)
 400699c:	dec00704 	addi	sp,sp,28
 40069a0:	f800283a 	ret
 40069a4:	2008953a 	slli	r4,r4,20
 40069a8:	1907c83a 	sub	r3,r3,r4
 40069ac:	003ff106 	br	4006974 <__alt_data_end+0xfc006974>

040069b0 <_mprec_log10>:
 40069b0:	defffe04 	addi	sp,sp,-8
 40069b4:	dc000015 	stw	r16,0(sp)
 40069b8:	dfc00115 	stw	ra,4(sp)
 40069bc:	008005c4 	movi	r2,23
 40069c0:	2021883a 	mov	r16,r4
 40069c4:	11000d0e 	bge	r2,r4,40069fc <_mprec_log10+0x4c>
 40069c8:	0005883a 	mov	r2,zero
 40069cc:	00cffc34 	movhi	r3,16368
 40069d0:	843fffc4 	addi	r16,r16,-1
 40069d4:	000d883a 	mov	r6,zero
 40069d8:	01d00934 	movhi	r7,16420
 40069dc:	1009883a 	mov	r4,r2
 40069e0:	180b883a 	mov	r5,r3
 40069e4:	400b9e80 	call	400b9e8 <__muldf3>
 40069e8:	803ff91e 	bne	r16,zero,40069d0 <__alt_data_end+0xfc0069d0>
 40069ec:	dfc00117 	ldw	ra,4(sp)
 40069f0:	dc000017 	ldw	r16,0(sp)
 40069f4:	dec00204 	addi	sp,sp,8
 40069f8:	f800283a 	ret
 40069fc:	202090fa 	slli	r16,r4,3
 4006a00:	00810074 	movhi	r2,1025
 4006a04:	1080a504 	addi	r2,r2,660
 4006a08:	1421883a 	add	r16,r2,r16
 4006a0c:	80800017 	ldw	r2,0(r16)
 4006a10:	80c00117 	ldw	r3,4(r16)
 4006a14:	dfc00117 	ldw	ra,4(sp)
 4006a18:	dc000017 	ldw	r16,0(sp)
 4006a1c:	dec00204 	addi	sp,sp,8
 4006a20:	f800283a 	ret

04006a24 <__copybits>:
 4006a24:	297fffc4 	addi	r5,r5,-1
 4006a28:	280fd17a 	srai	r7,r5,5
 4006a2c:	30c00417 	ldw	r3,16(r6)
 4006a30:	30800504 	addi	r2,r6,20
 4006a34:	39c00044 	addi	r7,r7,1
 4006a38:	18c7883a 	add	r3,r3,r3
 4006a3c:	39cf883a 	add	r7,r7,r7
 4006a40:	18c7883a 	add	r3,r3,r3
 4006a44:	39cf883a 	add	r7,r7,r7
 4006a48:	10c7883a 	add	r3,r2,r3
 4006a4c:	21cf883a 	add	r7,r4,r7
 4006a50:	10c00d2e 	bgeu	r2,r3,4006a88 <__copybits+0x64>
 4006a54:	200b883a 	mov	r5,r4
 4006a58:	12000017 	ldw	r8,0(r2)
 4006a5c:	29400104 	addi	r5,r5,4
 4006a60:	10800104 	addi	r2,r2,4
 4006a64:	2a3fff15 	stw	r8,-4(r5)
 4006a68:	10fffb36 	bltu	r2,r3,4006a58 <__alt_data_end+0xfc006a58>
 4006a6c:	1985c83a 	sub	r2,r3,r6
 4006a70:	10bffac4 	addi	r2,r2,-21
 4006a74:	1004d0ba 	srli	r2,r2,2
 4006a78:	10800044 	addi	r2,r2,1
 4006a7c:	1085883a 	add	r2,r2,r2
 4006a80:	1085883a 	add	r2,r2,r2
 4006a84:	2089883a 	add	r4,r4,r2
 4006a88:	21c0032e 	bgeu	r4,r7,4006a98 <__copybits+0x74>
 4006a8c:	20000015 	stw	zero,0(r4)
 4006a90:	21000104 	addi	r4,r4,4
 4006a94:	21fffd36 	bltu	r4,r7,4006a8c <__alt_data_end+0xfc006a8c>
 4006a98:	f800283a 	ret

04006a9c <__any_on>:
 4006a9c:	20c00417 	ldw	r3,16(r4)
 4006aa0:	2805d17a 	srai	r2,r5,5
 4006aa4:	21000504 	addi	r4,r4,20
 4006aa8:	18800d0e 	bge	r3,r2,4006ae0 <__any_on+0x44>
 4006aac:	18c7883a 	add	r3,r3,r3
 4006ab0:	18c7883a 	add	r3,r3,r3
 4006ab4:	20c7883a 	add	r3,r4,r3
 4006ab8:	20c0192e 	bgeu	r4,r3,4006b20 <__any_on+0x84>
 4006abc:	18bfff17 	ldw	r2,-4(r3)
 4006ac0:	18ffff04 	addi	r3,r3,-4
 4006ac4:	1000041e 	bne	r2,zero,4006ad8 <__any_on+0x3c>
 4006ac8:	20c0142e 	bgeu	r4,r3,4006b1c <__any_on+0x80>
 4006acc:	18ffff04 	addi	r3,r3,-4
 4006ad0:	19400017 	ldw	r5,0(r3)
 4006ad4:	283ffc26 	beq	r5,zero,4006ac8 <__alt_data_end+0xfc006ac8>
 4006ad8:	00800044 	movi	r2,1
 4006adc:	f800283a 	ret
 4006ae0:	10c00a0e 	bge	r2,r3,4006b0c <__any_on+0x70>
 4006ae4:	1085883a 	add	r2,r2,r2
 4006ae8:	1085883a 	add	r2,r2,r2
 4006aec:	294007cc 	andi	r5,r5,31
 4006af0:	2087883a 	add	r3,r4,r2
 4006af4:	283ff026 	beq	r5,zero,4006ab8 <__alt_data_end+0xfc006ab8>
 4006af8:	19800017 	ldw	r6,0(r3)
 4006afc:	3144d83a 	srl	r2,r6,r5
 4006b00:	114a983a 	sll	r5,r2,r5
 4006b04:	317ff41e 	bne	r6,r5,4006ad8 <__alt_data_end+0xfc006ad8>
 4006b08:	003feb06 	br	4006ab8 <__alt_data_end+0xfc006ab8>
 4006b0c:	1085883a 	add	r2,r2,r2
 4006b10:	1085883a 	add	r2,r2,r2
 4006b14:	2087883a 	add	r3,r4,r2
 4006b18:	003fe706 	br	4006ab8 <__alt_data_end+0xfc006ab8>
 4006b1c:	f800283a 	ret
 4006b20:	0005883a 	mov	r2,zero
 4006b24:	f800283a 	ret

04006b28 <__fpclassifyd>:
 4006b28:	00a00034 	movhi	r2,32768
 4006b2c:	10bfffc4 	addi	r2,r2,-1
 4006b30:	2884703a 	and	r2,r5,r2
 4006b34:	10000726 	beq	r2,zero,4006b54 <__fpclassifyd+0x2c>
 4006b38:	00fffc34 	movhi	r3,65520
 4006b3c:	019ff834 	movhi	r6,32736
 4006b40:	28c7883a 	add	r3,r5,r3
 4006b44:	31bfffc4 	addi	r6,r6,-1
 4006b48:	30c00536 	bltu	r6,r3,4006b60 <__fpclassifyd+0x38>
 4006b4c:	00800104 	movi	r2,4
 4006b50:	f800283a 	ret
 4006b54:	2000021e 	bne	r4,zero,4006b60 <__fpclassifyd+0x38>
 4006b58:	00800084 	movi	r2,2
 4006b5c:	f800283a 	ret
 4006b60:	00dffc34 	movhi	r3,32752
 4006b64:	019ff834 	movhi	r6,32736
 4006b68:	28cb883a 	add	r5,r5,r3
 4006b6c:	31bfffc4 	addi	r6,r6,-1
 4006b70:	317ff62e 	bgeu	r6,r5,4006b4c <__alt_data_end+0xfc006b4c>
 4006b74:	01400434 	movhi	r5,16
 4006b78:	297fffc4 	addi	r5,r5,-1
 4006b7c:	28800236 	bltu	r5,r2,4006b88 <__fpclassifyd+0x60>
 4006b80:	008000c4 	movi	r2,3
 4006b84:	f800283a 	ret
 4006b88:	10c00226 	beq	r2,r3,4006b94 <__fpclassifyd+0x6c>
 4006b8c:	0005883a 	mov	r2,zero
 4006b90:	f800283a 	ret
 4006b94:	2005003a 	cmpeq	r2,r4,zero
 4006b98:	f800283a 	ret

04006b9c <_sbrk_r>:
 4006b9c:	defffd04 	addi	sp,sp,-12
 4006ba0:	dc000015 	stw	r16,0(sp)
 4006ba4:	04010074 	movhi	r16,1025
 4006ba8:	dc400115 	stw	r17,4(sp)
 4006bac:	840ef804 	addi	r16,r16,15328
 4006bb0:	2023883a 	mov	r17,r4
 4006bb4:	2809883a 	mov	r4,r5
 4006bb8:	dfc00215 	stw	ra,8(sp)
 4006bbc:	80000015 	stw	zero,0(r16)
 4006bc0:	400d4280 	call	400d428 <sbrk>
 4006bc4:	00ffffc4 	movi	r3,-1
 4006bc8:	10c00526 	beq	r2,r3,4006be0 <_sbrk_r+0x44>
 4006bcc:	dfc00217 	ldw	ra,8(sp)
 4006bd0:	dc400117 	ldw	r17,4(sp)
 4006bd4:	dc000017 	ldw	r16,0(sp)
 4006bd8:	dec00304 	addi	sp,sp,12
 4006bdc:	f800283a 	ret
 4006be0:	80c00017 	ldw	r3,0(r16)
 4006be4:	183ff926 	beq	r3,zero,4006bcc <__alt_data_end+0xfc006bcc>
 4006be8:	88c00015 	stw	r3,0(r17)
 4006bec:	003ff706 	br	4006bcc <__alt_data_end+0xfc006bcc>

04006bf0 <__sread>:
 4006bf0:	defffe04 	addi	sp,sp,-8
 4006bf4:	dc000015 	stw	r16,0(sp)
 4006bf8:	2821883a 	mov	r16,r5
 4006bfc:	2940038f 	ldh	r5,14(r5)
 4006c00:	dfc00115 	stw	ra,4(sp)
 4006c04:	40090940 	call	4009094 <_read_r>
 4006c08:	10000716 	blt	r2,zero,4006c28 <__sread+0x38>
 4006c0c:	80c01417 	ldw	r3,80(r16)
 4006c10:	1887883a 	add	r3,r3,r2
 4006c14:	80c01415 	stw	r3,80(r16)
 4006c18:	dfc00117 	ldw	ra,4(sp)
 4006c1c:	dc000017 	ldw	r16,0(sp)
 4006c20:	dec00204 	addi	sp,sp,8
 4006c24:	f800283a 	ret
 4006c28:	80c0030b 	ldhu	r3,12(r16)
 4006c2c:	18fbffcc 	andi	r3,r3,61439
 4006c30:	80c0030d 	sth	r3,12(r16)
 4006c34:	dfc00117 	ldw	ra,4(sp)
 4006c38:	dc000017 	ldw	r16,0(sp)
 4006c3c:	dec00204 	addi	sp,sp,8
 4006c40:	f800283a 	ret

04006c44 <__seofread>:
 4006c44:	0005883a 	mov	r2,zero
 4006c48:	f800283a 	ret

04006c4c <__swrite>:
 4006c4c:	2880030b 	ldhu	r2,12(r5)
 4006c50:	defffb04 	addi	sp,sp,-20
 4006c54:	dcc00315 	stw	r19,12(sp)
 4006c58:	dc800215 	stw	r18,8(sp)
 4006c5c:	dc400115 	stw	r17,4(sp)
 4006c60:	dc000015 	stw	r16,0(sp)
 4006c64:	dfc00415 	stw	ra,16(sp)
 4006c68:	10c0400c 	andi	r3,r2,256
 4006c6c:	2821883a 	mov	r16,r5
 4006c70:	2023883a 	mov	r17,r4
 4006c74:	3025883a 	mov	r18,r6
 4006c78:	3827883a 	mov	r19,r7
 4006c7c:	18000526 	beq	r3,zero,4006c94 <__swrite+0x48>
 4006c80:	2940038f 	ldh	r5,14(r5)
 4006c84:	01c00084 	movi	r7,2
 4006c88:	000d883a 	mov	r6,zero
 4006c8c:	4008ed80 	call	4008ed8 <_lseek_r>
 4006c90:	8080030b 	ldhu	r2,12(r16)
 4006c94:	8140038f 	ldh	r5,14(r16)
 4006c98:	10bbffcc 	andi	r2,r2,61439
 4006c9c:	980f883a 	mov	r7,r19
 4006ca0:	900d883a 	mov	r6,r18
 4006ca4:	8809883a 	mov	r4,r17
 4006ca8:	8080030d 	sth	r2,12(r16)
 4006cac:	dfc00417 	ldw	ra,16(sp)
 4006cb0:	dcc00317 	ldw	r19,12(sp)
 4006cb4:	dc800217 	ldw	r18,8(sp)
 4006cb8:	dc400117 	ldw	r17,4(sp)
 4006cbc:	dc000017 	ldw	r16,0(sp)
 4006cc0:	dec00504 	addi	sp,sp,20
 4006cc4:	40084e81 	jmpi	40084e8 <_write_r>

04006cc8 <__sseek>:
 4006cc8:	defffe04 	addi	sp,sp,-8
 4006ccc:	dc000015 	stw	r16,0(sp)
 4006cd0:	2821883a 	mov	r16,r5
 4006cd4:	2940038f 	ldh	r5,14(r5)
 4006cd8:	dfc00115 	stw	ra,4(sp)
 4006cdc:	4008ed80 	call	4008ed8 <_lseek_r>
 4006ce0:	00ffffc4 	movi	r3,-1
 4006ce4:	10c00826 	beq	r2,r3,4006d08 <__sseek+0x40>
 4006ce8:	80c0030b 	ldhu	r3,12(r16)
 4006cec:	80801415 	stw	r2,80(r16)
 4006cf0:	18c40014 	ori	r3,r3,4096
 4006cf4:	80c0030d 	sth	r3,12(r16)
 4006cf8:	dfc00117 	ldw	ra,4(sp)
 4006cfc:	dc000017 	ldw	r16,0(sp)
 4006d00:	dec00204 	addi	sp,sp,8
 4006d04:	f800283a 	ret
 4006d08:	80c0030b 	ldhu	r3,12(r16)
 4006d0c:	18fbffcc 	andi	r3,r3,61439
 4006d10:	80c0030d 	sth	r3,12(r16)
 4006d14:	dfc00117 	ldw	ra,4(sp)
 4006d18:	dc000017 	ldw	r16,0(sp)
 4006d1c:	dec00204 	addi	sp,sp,8
 4006d20:	f800283a 	ret

04006d24 <__sclose>:
 4006d24:	2940038f 	ldh	r5,14(r5)
 4006d28:	40085481 	jmpi	4008548 <_close_r>

04006d2c <strcmp>:
 4006d2c:	2144b03a 	or	r2,r4,r5
 4006d30:	108000cc 	andi	r2,r2,3
 4006d34:	1000171e 	bne	r2,zero,4006d94 <strcmp+0x68>
 4006d38:	20800017 	ldw	r2,0(r4)
 4006d3c:	28c00017 	ldw	r3,0(r5)
 4006d40:	10c0141e 	bne	r2,r3,4006d94 <strcmp+0x68>
 4006d44:	027fbff4 	movhi	r9,65279
 4006d48:	4a7fbfc4 	addi	r9,r9,-257
 4006d4c:	0086303a 	nor	r3,zero,r2
 4006d50:	02202074 	movhi	r8,32897
 4006d54:	1245883a 	add	r2,r2,r9
 4006d58:	42202004 	addi	r8,r8,-32640
 4006d5c:	10c4703a 	and	r2,r2,r3
 4006d60:	1204703a 	and	r2,r2,r8
 4006d64:	10000226 	beq	r2,zero,4006d70 <strcmp+0x44>
 4006d68:	00002306 	br	4006df8 <strcmp+0xcc>
 4006d6c:	1000221e 	bne	r2,zero,4006df8 <strcmp+0xcc>
 4006d70:	21000104 	addi	r4,r4,4
 4006d74:	20c00017 	ldw	r3,0(r4)
 4006d78:	29400104 	addi	r5,r5,4
 4006d7c:	29800017 	ldw	r6,0(r5)
 4006d80:	1a4f883a 	add	r7,r3,r9
 4006d84:	00c4303a 	nor	r2,zero,r3
 4006d88:	3884703a 	and	r2,r7,r2
 4006d8c:	1204703a 	and	r2,r2,r8
 4006d90:	19bff626 	beq	r3,r6,4006d6c <__alt_data_end+0xfc006d6c>
 4006d94:	20800003 	ldbu	r2,0(r4)
 4006d98:	10c03fcc 	andi	r3,r2,255
 4006d9c:	18c0201c 	xori	r3,r3,128
 4006da0:	18ffe004 	addi	r3,r3,-128
 4006da4:	18000c26 	beq	r3,zero,4006dd8 <strcmp+0xac>
 4006da8:	29800007 	ldb	r6,0(r5)
 4006dac:	19800326 	beq	r3,r6,4006dbc <strcmp+0x90>
 4006db0:	00001306 	br	4006e00 <strcmp+0xd4>
 4006db4:	29800007 	ldb	r6,0(r5)
 4006db8:	11800b1e 	bne	r2,r6,4006de8 <strcmp+0xbc>
 4006dbc:	21000044 	addi	r4,r4,1
 4006dc0:	20c00003 	ldbu	r3,0(r4)
 4006dc4:	29400044 	addi	r5,r5,1
 4006dc8:	18803fcc 	andi	r2,r3,255
 4006dcc:	1080201c 	xori	r2,r2,128
 4006dd0:	10bfe004 	addi	r2,r2,-128
 4006dd4:	103ff71e 	bne	r2,zero,4006db4 <__alt_data_end+0xfc006db4>
 4006dd8:	0007883a 	mov	r3,zero
 4006ddc:	28800003 	ldbu	r2,0(r5)
 4006de0:	1885c83a 	sub	r2,r3,r2
 4006de4:	f800283a 	ret
 4006de8:	28800003 	ldbu	r2,0(r5)
 4006dec:	18c03fcc 	andi	r3,r3,255
 4006df0:	1885c83a 	sub	r2,r3,r2
 4006df4:	f800283a 	ret
 4006df8:	0005883a 	mov	r2,zero
 4006dfc:	f800283a 	ret
 4006e00:	10c03fcc 	andi	r3,r2,255
 4006e04:	003ff506 	br	4006ddc <__alt_data_end+0xfc006ddc>

04006e08 <strlen>:
 4006e08:	208000cc 	andi	r2,r4,3
 4006e0c:	10002026 	beq	r2,zero,4006e90 <strlen+0x88>
 4006e10:	20800007 	ldb	r2,0(r4)
 4006e14:	10002026 	beq	r2,zero,4006e98 <strlen+0x90>
 4006e18:	2005883a 	mov	r2,r4
 4006e1c:	00000206 	br	4006e28 <strlen+0x20>
 4006e20:	10c00007 	ldb	r3,0(r2)
 4006e24:	18001826 	beq	r3,zero,4006e88 <strlen+0x80>
 4006e28:	10800044 	addi	r2,r2,1
 4006e2c:	10c000cc 	andi	r3,r2,3
 4006e30:	183ffb1e 	bne	r3,zero,4006e20 <__alt_data_end+0xfc006e20>
 4006e34:	10c00017 	ldw	r3,0(r2)
 4006e38:	01ffbff4 	movhi	r7,65279
 4006e3c:	39ffbfc4 	addi	r7,r7,-257
 4006e40:	00ca303a 	nor	r5,zero,r3
 4006e44:	01a02074 	movhi	r6,32897
 4006e48:	19c7883a 	add	r3,r3,r7
 4006e4c:	31a02004 	addi	r6,r6,-32640
 4006e50:	1946703a 	and	r3,r3,r5
 4006e54:	1986703a 	and	r3,r3,r6
 4006e58:	1800091e 	bne	r3,zero,4006e80 <strlen+0x78>
 4006e5c:	10800104 	addi	r2,r2,4
 4006e60:	10c00017 	ldw	r3,0(r2)
 4006e64:	19cb883a 	add	r5,r3,r7
 4006e68:	00c6303a 	nor	r3,zero,r3
 4006e6c:	28c6703a 	and	r3,r5,r3
 4006e70:	1986703a 	and	r3,r3,r6
 4006e74:	183ff926 	beq	r3,zero,4006e5c <__alt_data_end+0xfc006e5c>
 4006e78:	00000106 	br	4006e80 <strlen+0x78>
 4006e7c:	10800044 	addi	r2,r2,1
 4006e80:	10c00007 	ldb	r3,0(r2)
 4006e84:	183ffd1e 	bne	r3,zero,4006e7c <__alt_data_end+0xfc006e7c>
 4006e88:	1105c83a 	sub	r2,r2,r4
 4006e8c:	f800283a 	ret
 4006e90:	2005883a 	mov	r2,r4
 4006e94:	003fe706 	br	4006e34 <__alt_data_end+0xfc006e34>
 4006e98:	0005883a 	mov	r2,zero
 4006e9c:	f800283a 	ret

04006ea0 <__sprint_r.part.0>:
 4006ea0:	28801917 	ldw	r2,100(r5)
 4006ea4:	defff604 	addi	sp,sp,-40
 4006ea8:	dd400515 	stw	r21,20(sp)
 4006eac:	dfc00915 	stw	ra,36(sp)
 4006eb0:	df000815 	stw	fp,32(sp)
 4006eb4:	ddc00715 	stw	r23,28(sp)
 4006eb8:	dd800615 	stw	r22,24(sp)
 4006ebc:	dd000415 	stw	r20,16(sp)
 4006ec0:	dcc00315 	stw	r19,12(sp)
 4006ec4:	dc800215 	stw	r18,8(sp)
 4006ec8:	dc400115 	stw	r17,4(sp)
 4006ecc:	dc000015 	stw	r16,0(sp)
 4006ed0:	1088000c 	andi	r2,r2,8192
 4006ed4:	302b883a 	mov	r21,r6
 4006ed8:	10002e26 	beq	r2,zero,4006f94 <__sprint_r.part.0+0xf4>
 4006edc:	30800217 	ldw	r2,8(r6)
 4006ee0:	35800017 	ldw	r22,0(r6)
 4006ee4:	10002926 	beq	r2,zero,4006f8c <__sprint_r.part.0+0xec>
 4006ee8:	2827883a 	mov	r19,r5
 4006eec:	2029883a 	mov	r20,r4
 4006ef0:	b5c00104 	addi	r23,r22,4
 4006ef4:	04bfffc4 	movi	r18,-1
 4006ef8:	bc400017 	ldw	r17,0(r23)
 4006efc:	b4000017 	ldw	r16,0(r22)
 4006f00:	0039883a 	mov	fp,zero
 4006f04:	8822d0ba 	srli	r17,r17,2
 4006f08:	8800031e 	bne	r17,zero,4006f18 <__sprint_r.part.0+0x78>
 4006f0c:	00001806 	br	4006f70 <__sprint_r.part.0+0xd0>
 4006f10:	84000104 	addi	r16,r16,4
 4006f14:	8f001526 	beq	r17,fp,4006f6c <__sprint_r.part.0+0xcc>
 4006f18:	81400017 	ldw	r5,0(r16)
 4006f1c:	980d883a 	mov	r6,r19
 4006f20:	a009883a 	mov	r4,r20
 4006f24:	40088c80 	call	40088c8 <_fputwc_r>
 4006f28:	e7000044 	addi	fp,fp,1
 4006f2c:	14bff81e 	bne	r2,r18,4006f10 <__alt_data_end+0xfc006f10>
 4006f30:	9005883a 	mov	r2,r18
 4006f34:	a8000215 	stw	zero,8(r21)
 4006f38:	a8000115 	stw	zero,4(r21)
 4006f3c:	dfc00917 	ldw	ra,36(sp)
 4006f40:	df000817 	ldw	fp,32(sp)
 4006f44:	ddc00717 	ldw	r23,28(sp)
 4006f48:	dd800617 	ldw	r22,24(sp)
 4006f4c:	dd400517 	ldw	r21,20(sp)
 4006f50:	dd000417 	ldw	r20,16(sp)
 4006f54:	dcc00317 	ldw	r19,12(sp)
 4006f58:	dc800217 	ldw	r18,8(sp)
 4006f5c:	dc400117 	ldw	r17,4(sp)
 4006f60:	dc000017 	ldw	r16,0(sp)
 4006f64:	dec00a04 	addi	sp,sp,40
 4006f68:	f800283a 	ret
 4006f6c:	a8800217 	ldw	r2,8(r21)
 4006f70:	8c63883a 	add	r17,r17,r17
 4006f74:	8c63883a 	add	r17,r17,r17
 4006f78:	1445c83a 	sub	r2,r2,r17
 4006f7c:	a8800215 	stw	r2,8(r21)
 4006f80:	b5800204 	addi	r22,r22,8
 4006f84:	bdc00204 	addi	r23,r23,8
 4006f88:	103fdb1e 	bne	r2,zero,4006ef8 <__alt_data_end+0xfc006ef8>
 4006f8c:	0005883a 	mov	r2,zero
 4006f90:	003fe806 	br	4006f34 <__alt_data_end+0xfc006f34>
 4006f94:	40089c80 	call	40089c8 <__sfvwrite_r>
 4006f98:	003fe606 	br	4006f34 <__alt_data_end+0xfc006f34>

04006f9c <__sprint_r>:
 4006f9c:	30c00217 	ldw	r3,8(r6)
 4006fa0:	18000126 	beq	r3,zero,4006fa8 <__sprint_r+0xc>
 4006fa4:	4006ea01 	jmpi	4006ea0 <__sprint_r.part.0>
 4006fa8:	30000115 	stw	zero,4(r6)
 4006fac:	0005883a 	mov	r2,zero
 4006fb0:	f800283a 	ret

04006fb4 <___vfiprintf_internal_r>:
 4006fb4:	deffc904 	addi	sp,sp,-220
 4006fb8:	df003515 	stw	fp,212(sp)
 4006fbc:	dd003115 	stw	r20,196(sp)
 4006fc0:	dfc03615 	stw	ra,216(sp)
 4006fc4:	ddc03415 	stw	r23,208(sp)
 4006fc8:	dd803315 	stw	r22,204(sp)
 4006fcc:	dd403215 	stw	r21,200(sp)
 4006fd0:	dcc03015 	stw	r19,192(sp)
 4006fd4:	dc802f15 	stw	r18,188(sp)
 4006fd8:	dc402e15 	stw	r17,184(sp)
 4006fdc:	dc002d15 	stw	r16,180(sp)
 4006fe0:	d9002015 	stw	r4,128(sp)
 4006fe4:	d9c02215 	stw	r7,136(sp)
 4006fe8:	2829883a 	mov	r20,r5
 4006fec:	3039883a 	mov	fp,r6
 4006ff0:	20000226 	beq	r4,zero,4006ffc <___vfiprintf_internal_r+0x48>
 4006ff4:	20800e17 	ldw	r2,56(r4)
 4006ff8:	1000cf26 	beq	r2,zero,4007338 <___vfiprintf_internal_r+0x384>
 4006ffc:	a080030b 	ldhu	r2,12(r20)
 4007000:	10c8000c 	andi	r3,r2,8192
 4007004:	1800061e 	bne	r3,zero,4007020 <___vfiprintf_internal_r+0x6c>
 4007008:	a1001917 	ldw	r4,100(r20)
 400700c:	00f7ffc4 	movi	r3,-8193
 4007010:	10880014 	ori	r2,r2,8192
 4007014:	20c6703a 	and	r3,r4,r3
 4007018:	a080030d 	sth	r2,12(r20)
 400701c:	a0c01915 	stw	r3,100(r20)
 4007020:	10c0020c 	andi	r3,r2,8
 4007024:	1800a926 	beq	r3,zero,40072cc <___vfiprintf_internal_r+0x318>
 4007028:	a0c00417 	ldw	r3,16(r20)
 400702c:	1800a726 	beq	r3,zero,40072cc <___vfiprintf_internal_r+0x318>
 4007030:	1080068c 	andi	r2,r2,26
 4007034:	00c00284 	movi	r3,10
 4007038:	10c0ac26 	beq	r2,r3,40072ec <___vfiprintf_internal_r+0x338>
 400703c:	da801a04 	addi	r10,sp,104
 4007040:	da801e15 	stw	r10,120(sp)
 4007044:	d8801e17 	ldw	r2,120(sp)
 4007048:	da8019c4 	addi	r10,sp,103
 400704c:	05810074 	movhi	r22,1025
 4007050:	05c10074 	movhi	r23,1025
 4007054:	da801f15 	stw	r10,124(sp)
 4007058:	1295c83a 	sub	r10,r2,r10
 400705c:	b580db04 	addi	r22,r22,876
 4007060:	bdc0d704 	addi	r23,r23,860
 4007064:	dec01a15 	stw	sp,104(sp)
 4007068:	d8001c15 	stw	zero,112(sp)
 400706c:	d8001b15 	stw	zero,108(sp)
 4007070:	d8002615 	stw	zero,152(sp)
 4007074:	d8002315 	stw	zero,140(sp)
 4007078:	da802715 	stw	r10,156(sp)
 400707c:	d811883a 	mov	r8,sp
 4007080:	dd002115 	stw	r20,132(sp)
 4007084:	e021883a 	mov	r16,fp
 4007088:	80800007 	ldb	r2,0(r16)
 400708c:	1003ea26 	beq	r2,zero,4008038 <___vfiprintf_internal_r+0x1084>
 4007090:	00c00944 	movi	r3,37
 4007094:	8025883a 	mov	r18,r16
 4007098:	10c0021e 	bne	r2,r3,40070a4 <___vfiprintf_internal_r+0xf0>
 400709c:	00001606 	br	40070f8 <___vfiprintf_internal_r+0x144>
 40070a0:	10c00326 	beq	r2,r3,40070b0 <___vfiprintf_internal_r+0xfc>
 40070a4:	94800044 	addi	r18,r18,1
 40070a8:	90800007 	ldb	r2,0(r18)
 40070ac:	103ffc1e 	bne	r2,zero,40070a0 <__alt_data_end+0xfc0070a0>
 40070b0:	9423c83a 	sub	r17,r18,r16
 40070b4:	88001026 	beq	r17,zero,40070f8 <___vfiprintf_internal_r+0x144>
 40070b8:	d8c01c17 	ldw	r3,112(sp)
 40070bc:	d8801b17 	ldw	r2,108(sp)
 40070c0:	44000015 	stw	r16,0(r8)
 40070c4:	88c7883a 	add	r3,r17,r3
 40070c8:	10800044 	addi	r2,r2,1
 40070cc:	44400115 	stw	r17,4(r8)
 40070d0:	d8c01c15 	stw	r3,112(sp)
 40070d4:	d8801b15 	stw	r2,108(sp)
 40070d8:	010001c4 	movi	r4,7
 40070dc:	2080760e 	bge	r4,r2,40072b8 <___vfiprintf_internal_r+0x304>
 40070e0:	1803821e 	bne	r3,zero,4007eec <___vfiprintf_internal_r+0xf38>
 40070e4:	da802317 	ldw	r10,140(sp)
 40070e8:	d8001b15 	stw	zero,108(sp)
 40070ec:	d811883a 	mov	r8,sp
 40070f0:	5455883a 	add	r10,r10,r17
 40070f4:	da802315 	stw	r10,140(sp)
 40070f8:	90800007 	ldb	r2,0(r18)
 40070fc:	10044626 	beq	r2,zero,4008218 <___vfiprintf_internal_r+0x1264>
 4007100:	90c00047 	ldb	r3,1(r18)
 4007104:	94000044 	addi	r16,r18,1
 4007108:	d8001d85 	stb	zero,118(sp)
 400710c:	0009883a 	mov	r4,zero
 4007110:	000f883a 	mov	r7,zero
 4007114:	027fffc4 	movi	r9,-1
 4007118:	0023883a 	mov	r17,zero
 400711c:	0029883a 	mov	r20,zero
 4007120:	01401604 	movi	r5,88
 4007124:	01800244 	movi	r6,9
 4007128:	03400a84 	movi	r13,42
 400712c:	03001b04 	movi	r12,108
 4007130:	84000044 	addi	r16,r16,1
 4007134:	18bff804 	addi	r2,r3,-32
 4007138:	28827336 	bltu	r5,r2,4007b08 <___vfiprintf_internal_r+0xb54>
 400713c:	100490ba 	slli	r2,r2,2
 4007140:	02810034 	movhi	r10,1024
 4007144:	529c5504 	addi	r10,r10,29012
 4007148:	1285883a 	add	r2,r2,r10
 400714c:	10800017 	ldw	r2,0(r2)
 4007150:	1000683a 	jmp	r2
 4007154:	0400783c 	xorhi	r16,zero,480
 4007158:	04007b08 	cmpgei	r16,zero,492
 400715c:	04007b08 	cmpgei	r16,zero,492
 4007160:	0400785c 	xori	r16,zero,481
 4007164:	04007b08 	cmpgei	r16,zero,492
 4007168:	04007b08 	cmpgei	r16,zero,492
 400716c:	04007b08 	cmpgei	r16,zero,492
 4007170:	04007b08 	cmpgei	r16,zero,492
 4007174:	04007b08 	cmpgei	r16,zero,492
 4007178:	04007b08 	cmpgei	r16,zero,492
 400717c:	04007a44 	movi	r16,489
 4007180:	04007a60 	cmpeqi	r16,zero,489
 4007184:	04007b08 	cmpgei	r16,zero,492
 4007188:	04007348 	cmpgei	r16,zero,461
 400718c:	04007a70 	cmpltui	r16,zero,489
 4007190:	04007b08 	cmpgei	r16,zero,492
 4007194:	04007868 	cmpgeui	r16,zero,481
 4007198:	04007874 	movhi	r16,481
 400719c:	04007874 	movhi	r16,481
 40071a0:	04007874 	movhi	r16,481
 40071a4:	04007874 	movhi	r16,481
 40071a8:	04007874 	movhi	r16,481
 40071ac:	04007874 	movhi	r16,481
 40071b0:	04007874 	movhi	r16,481
 40071b4:	04007874 	movhi	r16,481
 40071b8:	04007874 	movhi	r16,481
 40071bc:	04007b08 	cmpgei	r16,zero,492
 40071c0:	04007b08 	cmpgei	r16,zero,492
 40071c4:	04007b08 	cmpgei	r16,zero,492
 40071c8:	04007b08 	cmpgei	r16,zero,492
 40071cc:	04007b08 	cmpgei	r16,zero,492
 40071d0:	04007b08 	cmpgei	r16,zero,492
 40071d4:	04007b08 	cmpgei	r16,zero,492
 40071d8:	04007b08 	cmpgei	r16,zero,492
 40071dc:	04007b08 	cmpgei	r16,zero,492
 40071e0:	04007b08 	cmpgei	r16,zero,492
 40071e4:	040078a0 	cmpeqi	r16,zero,482
 40071e8:	04007b08 	cmpgei	r16,zero,492
 40071ec:	04007b08 	cmpgei	r16,zero,492
 40071f0:	04007b08 	cmpgei	r16,zero,492
 40071f4:	04007b08 	cmpgei	r16,zero,492
 40071f8:	04007b08 	cmpgei	r16,zero,492
 40071fc:	04007b08 	cmpgei	r16,zero,492
 4007200:	04007b08 	cmpgei	r16,zero,492
 4007204:	04007b08 	cmpgei	r16,zero,492
 4007208:	04007b08 	cmpgei	r16,zero,492
 400720c:	04007b08 	cmpgei	r16,zero,492
 4007210:	040078d8 	cmpnei	r16,zero,483
 4007214:	04007b08 	cmpgei	r16,zero,492
 4007218:	04007b08 	cmpgei	r16,zero,492
 400721c:	04007b08 	cmpgei	r16,zero,492
 4007220:	04007b08 	cmpgei	r16,zero,492
 4007224:	04007b08 	cmpgei	r16,zero,492
 4007228:	04007930 	cmpltui	r16,zero,484
 400722c:	04007b08 	cmpgei	r16,zero,492
 4007230:	04007b08 	cmpgei	r16,zero,492
 4007234:	040079a0 	cmpeqi	r16,zero,486
 4007238:	04007b08 	cmpgei	r16,zero,492
 400723c:	04007b08 	cmpgei	r16,zero,492
 4007240:	04007b08 	cmpgei	r16,zero,492
 4007244:	04007b08 	cmpgei	r16,zero,492
 4007248:	04007b08 	cmpgei	r16,zero,492
 400724c:	04007b08 	cmpgei	r16,zero,492
 4007250:	04007b08 	cmpgei	r16,zero,492
 4007254:	04007b08 	cmpgei	r16,zero,492
 4007258:	04007b08 	cmpgei	r16,zero,492
 400725c:	04007b08 	cmpgei	r16,zero,492
 4007260:	0400774c 	andi	r16,zero,477
 4007264:	04007778 	rdprs	r16,zero,477
 4007268:	04007b08 	cmpgei	r16,zero,492
 400726c:	04007b08 	cmpgei	r16,zero,492
 4007270:	04007b08 	cmpgei	r16,zero,492
 4007274:	04007ab0 	cmpltui	r16,zero,490
 4007278:	04007778 	rdprs	r16,zero,477
 400727c:	04007b08 	cmpgei	r16,zero,492
 4007280:	04007b08 	cmpgei	r16,zero,492
 4007284:	0400760c 	andi	r16,zero,472
 4007288:	04007b08 	cmpgei	r16,zero,492
 400728c:	0400761c 	xori	r16,zero,472
 4007290:	04007658 	cmpnei	r16,zero,473
 4007294:	04007354 	movui	r16,461
 4007298:	04007600 	call	400760 <__ram_exceptions_end+0x3e051c>
 400729c:	04007b08 	cmpgei	r16,zero,492
 40072a0:	040079dc 	xori	r16,zero,487
 40072a4:	04007b08 	cmpgei	r16,zero,492
 40072a8:	04007a34 	movhi	r16,488
 40072ac:	04007b08 	cmpgei	r16,zero,492
 40072b0:	04007b08 	cmpgei	r16,zero,492
 40072b4:	040076f8 	rdprs	r16,zero,475
 40072b8:	42000204 	addi	r8,r8,8
 40072bc:	da802317 	ldw	r10,140(sp)
 40072c0:	5455883a 	add	r10,r10,r17
 40072c4:	da802315 	stw	r10,140(sp)
 40072c8:	003f8b06 	br	40070f8 <__alt_data_end+0xfc0070f8>
 40072cc:	d9002017 	ldw	r4,128(sp)
 40072d0:	a00b883a 	mov	r5,r20
 40072d4:	40027540 	call	4002754 <__swsetup_r>
 40072d8:	1003b11e 	bne	r2,zero,40081a0 <___vfiprintf_internal_r+0x11ec>
 40072dc:	a080030b 	ldhu	r2,12(r20)
 40072e0:	00c00284 	movi	r3,10
 40072e4:	1080068c 	andi	r2,r2,26
 40072e8:	10ff541e 	bne	r2,r3,400703c <__alt_data_end+0xfc00703c>
 40072ec:	a080038f 	ldh	r2,14(r20)
 40072f0:	103f5216 	blt	r2,zero,400703c <__alt_data_end+0xfc00703c>
 40072f4:	d9c02217 	ldw	r7,136(sp)
 40072f8:	d9002017 	ldw	r4,128(sp)
 40072fc:	e00d883a 	mov	r6,fp
 4007300:	a00b883a 	mov	r5,r20
 4007304:	400842c0 	call	400842c <__sbprintf>
 4007308:	dfc03617 	ldw	ra,216(sp)
 400730c:	df003517 	ldw	fp,212(sp)
 4007310:	ddc03417 	ldw	r23,208(sp)
 4007314:	dd803317 	ldw	r22,204(sp)
 4007318:	dd403217 	ldw	r21,200(sp)
 400731c:	dd003117 	ldw	r20,196(sp)
 4007320:	dcc03017 	ldw	r19,192(sp)
 4007324:	dc802f17 	ldw	r18,188(sp)
 4007328:	dc402e17 	ldw	r17,184(sp)
 400732c:	dc002d17 	ldw	r16,180(sp)
 4007330:	dec03704 	addi	sp,sp,220
 4007334:	f800283a 	ret
 4007338:	40047280 	call	4004728 <__sinit>
 400733c:	003f2f06 	br	4006ffc <__alt_data_end+0xfc006ffc>
 4007340:	0463c83a 	sub	r17,zero,r17
 4007344:	d8802215 	stw	r2,136(sp)
 4007348:	a5000114 	ori	r20,r20,4
 400734c:	80c00007 	ldb	r3,0(r16)
 4007350:	003f7706 	br	4007130 <__alt_data_end+0xfc007130>
 4007354:	00800c04 	movi	r2,48
 4007358:	da802217 	ldw	r10,136(sp)
 400735c:	d8801d05 	stb	r2,116(sp)
 4007360:	00801e04 	movi	r2,120
 4007364:	d8801d45 	stb	r2,117(sp)
 4007368:	d8001d85 	stb	zero,118(sp)
 400736c:	50c00104 	addi	r3,r10,4
 4007370:	54800017 	ldw	r18,0(r10)
 4007374:	0027883a 	mov	r19,zero
 4007378:	a0800094 	ori	r2,r20,2
 400737c:	48030b16 	blt	r9,zero,4007fac <___vfiprintf_internal_r+0xff8>
 4007380:	00bfdfc4 	movi	r2,-129
 4007384:	a096703a 	and	r11,r20,r2
 4007388:	d8c02215 	stw	r3,136(sp)
 400738c:	5d000094 	ori	r20,r11,2
 4007390:	90032b1e 	bne	r18,zero,4008040 <___vfiprintf_internal_r+0x108c>
 4007394:	00810074 	movhi	r2,1025
 4007398:	10807604 	addi	r2,r2,472
 400739c:	d8802615 	stw	r2,152(sp)
 40073a0:	0039883a 	mov	fp,zero
 40073a4:	48017b1e 	bne	r9,zero,4007994 <___vfiprintf_internal_r+0x9e0>
 40073a8:	0013883a 	mov	r9,zero
 40073ac:	0027883a 	mov	r19,zero
 40073b0:	dd401a04 	addi	r21,sp,104
 40073b4:	4825883a 	mov	r18,r9
 40073b8:	4cc0010e 	bge	r9,r19,40073c0 <___vfiprintf_internal_r+0x40c>
 40073bc:	9825883a 	mov	r18,r19
 40073c0:	e7003fcc 	andi	fp,fp,255
 40073c4:	e700201c 	xori	fp,fp,128
 40073c8:	e73fe004 	addi	fp,fp,-128
 40073cc:	e0000126 	beq	fp,zero,40073d4 <___vfiprintf_internal_r+0x420>
 40073d0:	94800044 	addi	r18,r18,1
 40073d4:	a380008c 	andi	r14,r20,2
 40073d8:	70000126 	beq	r14,zero,40073e0 <___vfiprintf_internal_r+0x42c>
 40073dc:	94800084 	addi	r18,r18,2
 40073e0:	a700210c 	andi	fp,r20,132
 40073e4:	e001df1e 	bne	fp,zero,4007b64 <___vfiprintf_internal_r+0xbb0>
 40073e8:	8c87c83a 	sub	r3,r17,r18
 40073ec:	00c1dd0e 	bge	zero,r3,4007b64 <___vfiprintf_internal_r+0xbb0>
 40073f0:	01c00404 	movi	r7,16
 40073f4:	d8801c17 	ldw	r2,112(sp)
 40073f8:	38c3ad0e 	bge	r7,r3,40082b0 <___vfiprintf_internal_r+0x12fc>
 40073fc:	02810074 	movhi	r10,1025
 4007400:	5280db04 	addi	r10,r10,876
 4007404:	dc002915 	stw	r16,164(sp)
 4007408:	d9801b17 	ldw	r6,108(sp)
 400740c:	da802415 	stw	r10,144(sp)
 4007410:	03c001c4 	movi	r15,7
 4007414:	da402515 	stw	r9,148(sp)
 4007418:	db802815 	stw	r14,160(sp)
 400741c:	1821883a 	mov	r16,r3
 4007420:	00000506 	br	4007438 <___vfiprintf_internal_r+0x484>
 4007424:	31400084 	addi	r5,r6,2
 4007428:	42000204 	addi	r8,r8,8
 400742c:	200d883a 	mov	r6,r4
 4007430:	843ffc04 	addi	r16,r16,-16
 4007434:	3c000d0e 	bge	r7,r16,400746c <___vfiprintf_internal_r+0x4b8>
 4007438:	10800404 	addi	r2,r2,16
 400743c:	31000044 	addi	r4,r6,1
 4007440:	45800015 	stw	r22,0(r8)
 4007444:	41c00115 	stw	r7,4(r8)
 4007448:	d8801c15 	stw	r2,112(sp)
 400744c:	d9001b15 	stw	r4,108(sp)
 4007450:	793ff40e 	bge	r15,r4,4007424 <__alt_data_end+0xfc007424>
 4007454:	1001b51e 	bne	r2,zero,4007b2c <___vfiprintf_internal_r+0xb78>
 4007458:	843ffc04 	addi	r16,r16,-16
 400745c:	000d883a 	mov	r6,zero
 4007460:	01400044 	movi	r5,1
 4007464:	d811883a 	mov	r8,sp
 4007468:	3c3ff316 	blt	r7,r16,4007438 <__alt_data_end+0xfc007438>
 400746c:	8007883a 	mov	r3,r16
 4007470:	da402517 	ldw	r9,148(sp)
 4007474:	db802817 	ldw	r14,160(sp)
 4007478:	dc002917 	ldw	r16,164(sp)
 400747c:	da802417 	ldw	r10,144(sp)
 4007480:	1885883a 	add	r2,r3,r2
 4007484:	40c00115 	stw	r3,4(r8)
 4007488:	42800015 	stw	r10,0(r8)
 400748c:	d8801c15 	stw	r2,112(sp)
 4007490:	d9401b15 	stw	r5,108(sp)
 4007494:	00c001c4 	movi	r3,7
 4007498:	19426016 	blt	r3,r5,4007e1c <___vfiprintf_internal_r+0xe68>
 400749c:	d8c01d87 	ldb	r3,118(sp)
 40074a0:	42000204 	addi	r8,r8,8
 40074a4:	29000044 	addi	r4,r5,1
 40074a8:	1801b31e 	bne	r3,zero,4007b78 <___vfiprintf_internal_r+0xbc4>
 40074ac:	7001c026 	beq	r14,zero,4007bb0 <___vfiprintf_internal_r+0xbfc>
 40074b0:	d8c01d04 	addi	r3,sp,116
 40074b4:	10800084 	addi	r2,r2,2
 40074b8:	40c00015 	stw	r3,0(r8)
 40074bc:	00c00084 	movi	r3,2
 40074c0:	40c00115 	stw	r3,4(r8)
 40074c4:	d8801c15 	stw	r2,112(sp)
 40074c8:	d9001b15 	stw	r4,108(sp)
 40074cc:	00c001c4 	movi	r3,7
 40074d0:	1902650e 	bge	r3,r4,4007e68 <___vfiprintf_internal_r+0xeb4>
 40074d4:	10029a1e 	bne	r2,zero,4007f40 <___vfiprintf_internal_r+0xf8c>
 40074d8:	00c02004 	movi	r3,128
 40074dc:	01000044 	movi	r4,1
 40074e0:	000b883a 	mov	r5,zero
 40074e4:	d811883a 	mov	r8,sp
 40074e8:	e0c1b31e 	bne	fp,r3,4007bb8 <___vfiprintf_internal_r+0xc04>
 40074ec:	8cb9c83a 	sub	fp,r17,r18
 40074f0:	0701b10e 	bge	zero,fp,4007bb8 <___vfiprintf_internal_r+0xc04>
 40074f4:	01c00404 	movi	r7,16
 40074f8:	3f03890e 	bge	r7,fp,4008320 <___vfiprintf_internal_r+0x136c>
 40074fc:	00c10074 	movhi	r3,1025
 4007500:	18c0d704 	addi	r3,r3,860
 4007504:	d8c02415 	stw	r3,144(sp)
 4007508:	8007883a 	mov	r3,r16
 400750c:	034001c4 	movi	r13,7
 4007510:	e021883a 	mov	r16,fp
 4007514:	da402515 	stw	r9,148(sp)
 4007518:	1839883a 	mov	fp,r3
 400751c:	00000506 	br	4007534 <___vfiprintf_internal_r+0x580>
 4007520:	29800084 	addi	r6,r5,2
 4007524:	42000204 	addi	r8,r8,8
 4007528:	180b883a 	mov	r5,r3
 400752c:	843ffc04 	addi	r16,r16,-16
 4007530:	3c000d0e 	bge	r7,r16,4007568 <___vfiprintf_internal_r+0x5b4>
 4007534:	10800404 	addi	r2,r2,16
 4007538:	28c00044 	addi	r3,r5,1
 400753c:	45c00015 	stw	r23,0(r8)
 4007540:	41c00115 	stw	r7,4(r8)
 4007544:	d8801c15 	stw	r2,112(sp)
 4007548:	d8c01b15 	stw	r3,108(sp)
 400754c:	68fff40e 	bge	r13,r3,4007520 <__alt_data_end+0xfc007520>
 4007550:	1002241e 	bne	r2,zero,4007de4 <___vfiprintf_internal_r+0xe30>
 4007554:	843ffc04 	addi	r16,r16,-16
 4007558:	01800044 	movi	r6,1
 400755c:	000b883a 	mov	r5,zero
 4007560:	d811883a 	mov	r8,sp
 4007564:	3c3ff316 	blt	r7,r16,4007534 <__alt_data_end+0xfc007534>
 4007568:	da402517 	ldw	r9,148(sp)
 400756c:	e007883a 	mov	r3,fp
 4007570:	8039883a 	mov	fp,r16
 4007574:	1821883a 	mov	r16,r3
 4007578:	d8c02417 	ldw	r3,144(sp)
 400757c:	1705883a 	add	r2,r2,fp
 4007580:	47000115 	stw	fp,4(r8)
 4007584:	40c00015 	stw	r3,0(r8)
 4007588:	d8801c15 	stw	r2,112(sp)
 400758c:	d9801b15 	stw	r6,108(sp)
 4007590:	00c001c4 	movi	r3,7
 4007594:	19827616 	blt	r3,r6,4007f70 <___vfiprintf_internal_r+0xfbc>
 4007598:	4cf9c83a 	sub	fp,r9,r19
 400759c:	42000204 	addi	r8,r8,8
 40075a0:	31000044 	addi	r4,r6,1
 40075a4:	300b883a 	mov	r5,r6
 40075a8:	07018516 	blt	zero,fp,4007bc0 <___vfiprintf_internal_r+0xc0c>
 40075ac:	9885883a 	add	r2,r19,r2
 40075b0:	45400015 	stw	r21,0(r8)
 40075b4:	44c00115 	stw	r19,4(r8)
 40075b8:	d8801c15 	stw	r2,112(sp)
 40075bc:	d9001b15 	stw	r4,108(sp)
 40075c0:	00c001c4 	movi	r3,7
 40075c4:	1901dd0e 	bge	r3,r4,4007d3c <___vfiprintf_internal_r+0xd88>
 40075c8:	1002401e 	bne	r2,zero,4007ecc <___vfiprintf_internal_r+0xf18>
 40075cc:	d8001b15 	stw	zero,108(sp)
 40075d0:	a2c0010c 	andi	r11,r20,4
 40075d4:	58000226 	beq	r11,zero,40075e0 <___vfiprintf_internal_r+0x62c>
 40075d8:	8ca7c83a 	sub	r19,r17,r18
 40075dc:	04c2f216 	blt	zero,r19,40081a8 <___vfiprintf_internal_r+0x11f4>
 40075e0:	8c80010e 	bge	r17,r18,40075e8 <___vfiprintf_internal_r+0x634>
 40075e4:	9023883a 	mov	r17,r18
 40075e8:	da802317 	ldw	r10,140(sp)
 40075ec:	5455883a 	add	r10,r10,r17
 40075f0:	da802315 	stw	r10,140(sp)
 40075f4:	d8001b15 	stw	zero,108(sp)
 40075f8:	d811883a 	mov	r8,sp
 40075fc:	003ea206 	br	4007088 <__alt_data_end+0xfc007088>
 4007600:	a5000814 	ori	r20,r20,32
 4007604:	80c00007 	ldb	r3,0(r16)
 4007608:	003ec906 	br	4007130 <__alt_data_end+0xfc007130>
 400760c:	80c00007 	ldb	r3,0(r16)
 4007610:	1b030926 	beq	r3,r12,4008238 <___vfiprintf_internal_r+0x1284>
 4007614:	a5000414 	ori	r20,r20,16
 4007618:	003ec506 	br	4007130 <__alt_data_end+0xfc007130>
 400761c:	21003fcc 	andi	r4,r4,255
 4007620:	20035e1e 	bne	r4,zero,400839c <___vfiprintf_internal_r+0x13e8>
 4007624:	a080080c 	andi	r2,r20,32
 4007628:	1002a526 	beq	r2,zero,40080c0 <___vfiprintf_internal_r+0x110c>
 400762c:	da802217 	ldw	r10,136(sp)
 4007630:	50800017 	ldw	r2,0(r10)
 4007634:	da802317 	ldw	r10,140(sp)
 4007638:	5007d7fa 	srai	r3,r10,31
 400763c:	da802217 	ldw	r10,136(sp)
 4007640:	10c00115 	stw	r3,4(r2)
 4007644:	52800104 	addi	r10,r10,4
 4007648:	da802215 	stw	r10,136(sp)
 400764c:	da802317 	ldw	r10,140(sp)
 4007650:	12800015 	stw	r10,0(r2)
 4007654:	003e8c06 	br	4007088 <__alt_data_end+0xfc007088>
 4007658:	21003fcc 	andi	r4,r4,255
 400765c:	2003511e 	bne	r4,zero,40083a4 <___vfiprintf_internal_r+0x13f0>
 4007660:	a080080c 	andi	r2,r20,32
 4007664:	1000a126 	beq	r2,zero,40078ec <___vfiprintf_internal_r+0x938>
 4007668:	da802217 	ldw	r10,136(sp)
 400766c:	d8001d85 	stb	zero,118(sp)
 4007670:	50800204 	addi	r2,r10,8
 4007674:	54800017 	ldw	r18,0(r10)
 4007678:	54c00117 	ldw	r19,4(r10)
 400767c:	4802b416 	blt	r9,zero,4008150 <___vfiprintf_internal_r+0x119c>
 4007680:	013fdfc4 	movi	r4,-129
 4007684:	94c6b03a 	or	r3,r18,r19
 4007688:	d8802215 	stw	r2,136(sp)
 400768c:	a128703a 	and	r20,r20,r4
 4007690:	1800a226 	beq	r3,zero,400791c <___vfiprintf_internal_r+0x968>
 4007694:	0039883a 	mov	fp,zero
 4007698:	dd401a04 	addi	r21,sp,104
 400769c:	9006d0fa 	srli	r3,r18,3
 40076a0:	9808977a 	slli	r4,r19,29
 40076a4:	9826d0fa 	srli	r19,r19,3
 40076a8:	948001cc 	andi	r18,r18,7
 40076ac:	90800c04 	addi	r2,r18,48
 40076b0:	ad7fffc4 	addi	r21,r21,-1
 40076b4:	20e4b03a 	or	r18,r4,r3
 40076b8:	a8800005 	stb	r2,0(r21)
 40076bc:	94c6b03a 	or	r3,r18,r19
 40076c0:	183ff61e 	bne	r3,zero,400769c <__alt_data_end+0xfc00769c>
 40076c4:	a0c0004c 	andi	r3,r20,1
 40076c8:	18005926 	beq	r3,zero,4007830 <___vfiprintf_internal_r+0x87c>
 40076cc:	10803fcc 	andi	r2,r2,255
 40076d0:	1080201c 	xori	r2,r2,128
 40076d4:	10bfe004 	addi	r2,r2,-128
 40076d8:	00c00c04 	movi	r3,48
 40076dc:	10c05426 	beq	r2,r3,4007830 <___vfiprintf_internal_r+0x87c>
 40076e0:	da801e17 	ldw	r10,120(sp)
 40076e4:	a8bfffc4 	addi	r2,r21,-1
 40076e8:	a8ffffc5 	stb	r3,-1(r21)
 40076ec:	50a7c83a 	sub	r19,r10,r2
 40076f0:	102b883a 	mov	r21,r2
 40076f4:	003f2f06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 40076f8:	21003fcc 	andi	r4,r4,255
 40076fc:	2003421e 	bne	r4,zero,4008408 <___vfiprintf_internal_r+0x1454>
 4007700:	00810074 	movhi	r2,1025
 4007704:	10807604 	addi	r2,r2,472
 4007708:	d8802615 	stw	r2,152(sp)
 400770c:	a080080c 	andi	r2,r20,32
 4007710:	1000aa26 	beq	r2,zero,40079bc <___vfiprintf_internal_r+0xa08>
 4007714:	da802217 	ldw	r10,136(sp)
 4007718:	54800017 	ldw	r18,0(r10)
 400771c:	54c00117 	ldw	r19,4(r10)
 4007720:	52800204 	addi	r10,r10,8
 4007724:	da802215 	stw	r10,136(sp)
 4007728:	a080004c 	andi	r2,r20,1
 400772c:	1001d226 	beq	r2,zero,4007e78 <___vfiprintf_internal_r+0xec4>
 4007730:	94c4b03a 	or	r2,r18,r19
 4007734:	1002351e 	bne	r2,zero,400800c <___vfiprintf_internal_r+0x1058>
 4007738:	d8001d85 	stb	zero,118(sp)
 400773c:	48022216 	blt	r9,zero,4007fc8 <___vfiprintf_internal_r+0x1014>
 4007740:	00bfdfc4 	movi	r2,-129
 4007744:	a0a8703a 	and	r20,r20,r2
 4007748:	003f1506 	br	40073a0 <__alt_data_end+0xfc0073a0>
 400774c:	da802217 	ldw	r10,136(sp)
 4007750:	04800044 	movi	r18,1
 4007754:	d8001d85 	stb	zero,118(sp)
 4007758:	50800017 	ldw	r2,0(r10)
 400775c:	52800104 	addi	r10,r10,4
 4007760:	da802215 	stw	r10,136(sp)
 4007764:	d8801005 	stb	r2,64(sp)
 4007768:	9027883a 	mov	r19,r18
 400776c:	dd401004 	addi	r21,sp,64
 4007770:	0013883a 	mov	r9,zero
 4007774:	003f1706 	br	40073d4 <__alt_data_end+0xfc0073d4>
 4007778:	21003fcc 	andi	r4,r4,255
 400777c:	2003201e 	bne	r4,zero,4008400 <___vfiprintf_internal_r+0x144c>
 4007780:	a080080c 	andi	r2,r20,32
 4007784:	10004b26 	beq	r2,zero,40078b4 <___vfiprintf_internal_r+0x900>
 4007788:	da802217 	ldw	r10,136(sp)
 400778c:	50800117 	ldw	r2,4(r10)
 4007790:	54800017 	ldw	r18,0(r10)
 4007794:	52800204 	addi	r10,r10,8
 4007798:	da802215 	stw	r10,136(sp)
 400779c:	1027883a 	mov	r19,r2
 40077a0:	10022c16 	blt	r2,zero,4008054 <___vfiprintf_internal_r+0x10a0>
 40077a4:	df001d83 	ldbu	fp,118(sp)
 40077a8:	48007216 	blt	r9,zero,4007974 <___vfiprintf_internal_r+0x9c0>
 40077ac:	00ffdfc4 	movi	r3,-129
 40077b0:	94c4b03a 	or	r2,r18,r19
 40077b4:	a0e8703a 	and	r20,r20,r3
 40077b8:	1000cc26 	beq	r2,zero,4007aec <___vfiprintf_internal_r+0xb38>
 40077bc:	98021026 	beq	r19,zero,4008000 <___vfiprintf_internal_r+0x104c>
 40077c0:	dc402415 	stw	r17,144(sp)
 40077c4:	dc002515 	stw	r16,148(sp)
 40077c8:	9823883a 	mov	r17,r19
 40077cc:	9021883a 	mov	r16,r18
 40077d0:	dd401a04 	addi	r21,sp,104
 40077d4:	4825883a 	mov	r18,r9
 40077d8:	4027883a 	mov	r19,r8
 40077dc:	8009883a 	mov	r4,r16
 40077e0:	880b883a 	mov	r5,r17
 40077e4:	01800284 	movi	r6,10
 40077e8:	000f883a 	mov	r7,zero
 40077ec:	4009f100 	call	4009f10 <__umoddi3>
 40077f0:	10800c04 	addi	r2,r2,48
 40077f4:	ad7fffc4 	addi	r21,r21,-1
 40077f8:	8009883a 	mov	r4,r16
 40077fc:	880b883a 	mov	r5,r17
 4007800:	a8800005 	stb	r2,0(r21)
 4007804:	01800284 	movi	r6,10
 4007808:	000f883a 	mov	r7,zero
 400780c:	40099980 	call	4009998 <__udivdi3>
 4007810:	1021883a 	mov	r16,r2
 4007814:	10c4b03a 	or	r2,r2,r3
 4007818:	1823883a 	mov	r17,r3
 400781c:	103fef1e 	bne	r2,zero,40077dc <__alt_data_end+0xfc0077dc>
 4007820:	dc402417 	ldw	r17,144(sp)
 4007824:	dc002517 	ldw	r16,148(sp)
 4007828:	9013883a 	mov	r9,r18
 400782c:	9811883a 	mov	r8,r19
 4007830:	da801e17 	ldw	r10,120(sp)
 4007834:	5567c83a 	sub	r19,r10,r21
 4007838:	003ede06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 400783c:	38803fcc 	andi	r2,r7,255
 4007840:	1080201c 	xori	r2,r2,128
 4007844:	10bfe004 	addi	r2,r2,-128
 4007848:	1002371e 	bne	r2,zero,4008128 <___vfiprintf_internal_r+0x1174>
 400784c:	01000044 	movi	r4,1
 4007850:	01c00804 	movi	r7,32
 4007854:	80c00007 	ldb	r3,0(r16)
 4007858:	003e3506 	br	4007130 <__alt_data_end+0xfc007130>
 400785c:	a5000054 	ori	r20,r20,1
 4007860:	80c00007 	ldb	r3,0(r16)
 4007864:	003e3206 	br	4007130 <__alt_data_end+0xfc007130>
 4007868:	a5002014 	ori	r20,r20,128
 400786c:	80c00007 	ldb	r3,0(r16)
 4007870:	003e2f06 	br	4007130 <__alt_data_end+0xfc007130>
 4007874:	8015883a 	mov	r10,r16
 4007878:	0023883a 	mov	r17,zero
 400787c:	18bff404 	addi	r2,r3,-48
 4007880:	50c00007 	ldb	r3,0(r10)
 4007884:	8c4002a4 	muli	r17,r17,10
 4007888:	84000044 	addi	r16,r16,1
 400788c:	8015883a 	mov	r10,r16
 4007890:	1463883a 	add	r17,r2,r17
 4007894:	18bff404 	addi	r2,r3,-48
 4007898:	30bff92e 	bgeu	r6,r2,4007880 <__alt_data_end+0xfc007880>
 400789c:	003e2506 	br	4007134 <__alt_data_end+0xfc007134>
 40078a0:	21003fcc 	andi	r4,r4,255
 40078a4:	2002d41e 	bne	r4,zero,40083f8 <___vfiprintf_internal_r+0x1444>
 40078a8:	a5000414 	ori	r20,r20,16
 40078ac:	a080080c 	andi	r2,r20,32
 40078b0:	103fb51e 	bne	r2,zero,4007788 <__alt_data_end+0xfc007788>
 40078b4:	a080040c 	andi	r2,r20,16
 40078b8:	1001f826 	beq	r2,zero,400809c <___vfiprintf_internal_r+0x10e8>
 40078bc:	da802217 	ldw	r10,136(sp)
 40078c0:	54800017 	ldw	r18,0(r10)
 40078c4:	52800104 	addi	r10,r10,4
 40078c8:	da802215 	stw	r10,136(sp)
 40078cc:	9027d7fa 	srai	r19,r18,31
 40078d0:	9805883a 	mov	r2,r19
 40078d4:	003fb206 	br	40077a0 <__alt_data_end+0xfc0077a0>
 40078d8:	21003fcc 	andi	r4,r4,255
 40078dc:	2002c41e 	bne	r4,zero,40083f0 <___vfiprintf_internal_r+0x143c>
 40078e0:	a5000414 	ori	r20,r20,16
 40078e4:	a080080c 	andi	r2,r20,32
 40078e8:	103f5f1e 	bne	r2,zero,4007668 <__alt_data_end+0xfc007668>
 40078ec:	a080040c 	andi	r2,r20,16
 40078f0:	10020f26 	beq	r2,zero,4008130 <___vfiprintf_internal_r+0x117c>
 40078f4:	da802217 	ldw	r10,136(sp)
 40078f8:	d8001d85 	stb	zero,118(sp)
 40078fc:	0027883a 	mov	r19,zero
 4007900:	50800104 	addi	r2,r10,4
 4007904:	54800017 	ldw	r18,0(r10)
 4007908:	48021116 	blt	r9,zero,4008150 <___vfiprintf_internal_r+0x119c>
 400790c:	00ffdfc4 	movi	r3,-129
 4007910:	d8802215 	stw	r2,136(sp)
 4007914:	a0e8703a 	and	r20,r20,r3
 4007918:	903f5e1e 	bne	r18,zero,4007694 <__alt_data_end+0xfc007694>
 400791c:	0039883a 	mov	fp,zero
 4007920:	4802a626 	beq	r9,zero,40083bc <___vfiprintf_internal_r+0x1408>
 4007924:	0025883a 	mov	r18,zero
 4007928:	0027883a 	mov	r19,zero
 400792c:	003f5a06 	br	4007698 <__alt_data_end+0xfc007698>
 4007930:	21003fcc 	andi	r4,r4,255
 4007934:	20029f1e 	bne	r4,zero,40083b4 <___vfiprintf_internal_r+0x1400>
 4007938:	a5000414 	ori	r20,r20,16
 400793c:	a080080c 	andi	r2,r20,32
 4007940:	10005e1e 	bne	r2,zero,4007abc <___vfiprintf_internal_r+0xb08>
 4007944:	a080040c 	andi	r2,r20,16
 4007948:	1001a21e 	bne	r2,zero,4007fd4 <___vfiprintf_internal_r+0x1020>
 400794c:	a080100c 	andi	r2,r20,64
 4007950:	d8001d85 	stb	zero,118(sp)
 4007954:	da802217 	ldw	r10,136(sp)
 4007958:	1002231e 	bne	r2,zero,40081e8 <___vfiprintf_internal_r+0x1234>
 400795c:	50800104 	addi	r2,r10,4
 4007960:	54800017 	ldw	r18,0(r10)
 4007964:	0027883a 	mov	r19,zero
 4007968:	4801a00e 	bge	r9,zero,4007fec <___vfiprintf_internal_r+0x1038>
 400796c:	d8802215 	stw	r2,136(sp)
 4007970:	0039883a 	mov	fp,zero
 4007974:	94c4b03a 	or	r2,r18,r19
 4007978:	103f901e 	bne	r2,zero,40077bc <__alt_data_end+0xfc0077bc>
 400797c:	00800044 	movi	r2,1
 4007980:	10803fcc 	andi	r2,r2,255
 4007984:	00c00044 	movi	r3,1
 4007988:	10c05926 	beq	r2,r3,4007af0 <___vfiprintf_internal_r+0xb3c>
 400798c:	00c00084 	movi	r3,2
 4007990:	10ffe41e 	bne	r2,r3,4007924 <__alt_data_end+0xfc007924>
 4007994:	0025883a 	mov	r18,zero
 4007998:	0027883a 	mov	r19,zero
 400799c:	00013d06 	br	4007e94 <___vfiprintf_internal_r+0xee0>
 40079a0:	21003fcc 	andi	r4,r4,255
 40079a4:	2002811e 	bne	r4,zero,40083ac <___vfiprintf_internal_r+0x13f8>
 40079a8:	00810074 	movhi	r2,1025
 40079ac:	10807104 	addi	r2,r2,452
 40079b0:	d8802615 	stw	r2,152(sp)
 40079b4:	a080080c 	andi	r2,r20,32
 40079b8:	103f561e 	bne	r2,zero,4007714 <__alt_data_end+0xfc007714>
 40079bc:	a080040c 	andi	r2,r20,16
 40079c0:	1001d126 	beq	r2,zero,4008108 <___vfiprintf_internal_r+0x1154>
 40079c4:	da802217 	ldw	r10,136(sp)
 40079c8:	0027883a 	mov	r19,zero
 40079cc:	54800017 	ldw	r18,0(r10)
 40079d0:	52800104 	addi	r10,r10,4
 40079d4:	da802215 	stw	r10,136(sp)
 40079d8:	003f5306 	br	4007728 <__alt_data_end+0xfc007728>
 40079dc:	da802217 	ldw	r10,136(sp)
 40079e0:	d8001d85 	stb	zero,118(sp)
 40079e4:	55400017 	ldw	r21,0(r10)
 40079e8:	50c00104 	addi	r3,r10,4
 40079ec:	a8024226 	beq	r21,zero,40082f8 <___vfiprintf_internal_r+0x1344>
 40079f0:	48021816 	blt	r9,zero,4008254 <___vfiprintf_internal_r+0x12a0>
 40079f4:	480d883a 	mov	r6,r9
 40079f8:	000b883a 	mov	r5,zero
 40079fc:	a809883a 	mov	r4,r21
 4007a00:	d8c02a15 	stw	r3,168(sp)
 4007a04:	da002b15 	stw	r8,172(sp)
 4007a08:	da402c15 	stw	r9,176(sp)
 4007a0c:	40057d80 	call	40057d8 <memchr>
 4007a10:	d8c02a17 	ldw	r3,168(sp)
 4007a14:	da002b17 	ldw	r8,172(sp)
 4007a18:	da402c17 	ldw	r9,176(sp)
 4007a1c:	10024826 	beq	r2,zero,4008340 <___vfiprintf_internal_r+0x138c>
 4007a20:	1567c83a 	sub	r19,r2,r21
 4007a24:	df001d83 	ldbu	fp,118(sp)
 4007a28:	d8c02215 	stw	r3,136(sp)
 4007a2c:	0013883a 	mov	r9,zero
 4007a30:	003e6006 	br	40073b4 <__alt_data_end+0xfc0073b4>
 4007a34:	21003fcc 	andi	r4,r4,255
 4007a38:	203fc026 	beq	r4,zero,400793c <__alt_data_end+0xfc00793c>
 4007a3c:	d9c01d85 	stb	r7,118(sp)
 4007a40:	003fbe06 	br	400793c <__alt_data_end+0xfc00793c>
 4007a44:	da802217 	ldw	r10,136(sp)
 4007a48:	54400017 	ldw	r17,0(r10)
 4007a4c:	50800104 	addi	r2,r10,4
 4007a50:	883e3b16 	blt	r17,zero,4007340 <__alt_data_end+0xfc007340>
 4007a54:	d8802215 	stw	r2,136(sp)
 4007a58:	80c00007 	ldb	r3,0(r16)
 4007a5c:	003db406 	br	4007130 <__alt_data_end+0xfc007130>
 4007a60:	01000044 	movi	r4,1
 4007a64:	01c00ac4 	movi	r7,43
 4007a68:	80c00007 	ldb	r3,0(r16)
 4007a6c:	003db006 	br	4007130 <__alt_data_end+0xfc007130>
 4007a70:	80c00007 	ldb	r3,0(r16)
 4007a74:	82800044 	addi	r10,r16,1
 4007a78:	1b423c26 	beq	r3,r13,400836c <___vfiprintf_internal_r+0x13b8>
 4007a7c:	18bff404 	addi	r2,r3,-48
 4007a80:	0013883a 	mov	r9,zero
 4007a84:	30822b36 	bltu	r6,r2,4008334 <___vfiprintf_internal_r+0x1380>
 4007a88:	50c00007 	ldb	r3,0(r10)
 4007a8c:	4a4002a4 	muli	r9,r9,10
 4007a90:	54000044 	addi	r16,r10,1
 4007a94:	8015883a 	mov	r10,r16
 4007a98:	4893883a 	add	r9,r9,r2
 4007a9c:	18bff404 	addi	r2,r3,-48
 4007aa0:	30bff92e 	bgeu	r6,r2,4007a88 <__alt_data_end+0xfc007a88>
 4007aa4:	483da30e 	bge	r9,zero,4007134 <__alt_data_end+0xfc007134>
 4007aa8:	027fffc4 	movi	r9,-1
 4007aac:	003da106 	br	4007134 <__alt_data_end+0xfc007134>
 4007ab0:	a5001014 	ori	r20,r20,64
 4007ab4:	80c00007 	ldb	r3,0(r16)
 4007ab8:	003d9d06 	br	4007130 <__alt_data_end+0xfc007130>
 4007abc:	da802217 	ldw	r10,136(sp)
 4007ac0:	d8001d85 	stb	zero,118(sp)
 4007ac4:	50c00204 	addi	r3,r10,8
 4007ac8:	54800017 	ldw	r18,0(r10)
 4007acc:	54c00117 	ldw	r19,4(r10)
 4007ad0:	4801ca16 	blt	r9,zero,40081fc <___vfiprintf_internal_r+0x1248>
 4007ad4:	013fdfc4 	movi	r4,-129
 4007ad8:	94c4b03a 	or	r2,r18,r19
 4007adc:	d8c02215 	stw	r3,136(sp)
 4007ae0:	a128703a 	and	r20,r20,r4
 4007ae4:	0039883a 	mov	fp,zero
 4007ae8:	103f341e 	bne	r2,zero,40077bc <__alt_data_end+0xfc0077bc>
 4007aec:	483e2e26 	beq	r9,zero,40073a8 <__alt_data_end+0xfc0073a8>
 4007af0:	0025883a 	mov	r18,zero
 4007af4:	94800c04 	addi	r18,r18,48
 4007af8:	dc8019c5 	stb	r18,103(sp)
 4007afc:	dcc02717 	ldw	r19,156(sp)
 4007b00:	dd4019c4 	addi	r21,sp,103
 4007b04:	003e2b06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 4007b08:	21003fcc 	andi	r4,r4,255
 4007b0c:	2002361e 	bne	r4,zero,40083e8 <___vfiprintf_internal_r+0x1434>
 4007b10:	1801c126 	beq	r3,zero,4008218 <___vfiprintf_internal_r+0x1264>
 4007b14:	04800044 	movi	r18,1
 4007b18:	d8c01005 	stb	r3,64(sp)
 4007b1c:	d8001d85 	stb	zero,118(sp)
 4007b20:	9027883a 	mov	r19,r18
 4007b24:	dd401004 	addi	r21,sp,64
 4007b28:	003f1106 	br	4007770 <__alt_data_end+0xfc007770>
 4007b2c:	d9402117 	ldw	r5,132(sp)
 4007b30:	d9002017 	ldw	r4,128(sp)
 4007b34:	d9801a04 	addi	r6,sp,104
 4007b38:	d9c02b15 	stw	r7,172(sp)
 4007b3c:	dbc02a15 	stw	r15,168(sp)
 4007b40:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007b44:	d9c02b17 	ldw	r7,172(sp)
 4007b48:	dbc02a17 	ldw	r15,168(sp)
 4007b4c:	10006d1e 	bne	r2,zero,4007d04 <___vfiprintf_internal_r+0xd50>
 4007b50:	d9801b17 	ldw	r6,108(sp)
 4007b54:	d8801c17 	ldw	r2,112(sp)
 4007b58:	d811883a 	mov	r8,sp
 4007b5c:	31400044 	addi	r5,r6,1
 4007b60:	003e3306 	br	4007430 <__alt_data_end+0xfc007430>
 4007b64:	d9401b17 	ldw	r5,108(sp)
 4007b68:	d8801c17 	ldw	r2,112(sp)
 4007b6c:	29000044 	addi	r4,r5,1
 4007b70:	d8c01d87 	ldb	r3,118(sp)
 4007b74:	183e4d26 	beq	r3,zero,40074ac <__alt_data_end+0xfc0074ac>
 4007b78:	00c00044 	movi	r3,1
 4007b7c:	d9401d84 	addi	r5,sp,118
 4007b80:	10c5883a 	add	r2,r2,r3
 4007b84:	41400015 	stw	r5,0(r8)
 4007b88:	40c00115 	stw	r3,4(r8)
 4007b8c:	d8801c15 	stw	r2,112(sp)
 4007b90:	d9001b15 	stw	r4,108(sp)
 4007b94:	014001c4 	movi	r5,7
 4007b98:	2900a90e 	bge	r5,r4,4007e40 <___vfiprintf_internal_r+0xe8c>
 4007b9c:	1000da1e 	bne	r2,zero,4007f08 <___vfiprintf_internal_r+0xf54>
 4007ba0:	7000ab1e 	bne	r14,zero,4007e50 <___vfiprintf_internal_r+0xe9c>
 4007ba4:	000b883a 	mov	r5,zero
 4007ba8:	1809883a 	mov	r4,r3
 4007bac:	d811883a 	mov	r8,sp
 4007bb0:	00c02004 	movi	r3,128
 4007bb4:	e0fe4d26 	beq	fp,r3,40074ec <__alt_data_end+0xfc0074ec>
 4007bb8:	4cf9c83a 	sub	fp,r9,r19
 4007bbc:	073e7b0e 	bge	zero,fp,40075ac <__alt_data_end+0xfc0075ac>
 4007bc0:	01c00404 	movi	r7,16
 4007bc4:	3f01900e 	bge	r7,fp,4008208 <___vfiprintf_internal_r+0x1254>
 4007bc8:	00c10074 	movhi	r3,1025
 4007bcc:	18c0d704 	addi	r3,r3,860
 4007bd0:	d8c02415 	stw	r3,144(sp)
 4007bd4:	034001c4 	movi	r13,7
 4007bd8:	00000506 	br	4007bf0 <___vfiprintf_internal_r+0xc3c>
 4007bdc:	29000084 	addi	r4,r5,2
 4007be0:	42000204 	addi	r8,r8,8
 4007be4:	180b883a 	mov	r5,r3
 4007be8:	e73ffc04 	addi	fp,fp,-16
 4007bec:	3f000d0e 	bge	r7,fp,4007c24 <___vfiprintf_internal_r+0xc70>
 4007bf0:	10800404 	addi	r2,r2,16
 4007bf4:	28c00044 	addi	r3,r5,1
 4007bf8:	45c00015 	stw	r23,0(r8)
 4007bfc:	41c00115 	stw	r7,4(r8)
 4007c00:	d8801c15 	stw	r2,112(sp)
 4007c04:	d8c01b15 	stw	r3,108(sp)
 4007c08:	68fff40e 	bge	r13,r3,4007bdc <__alt_data_end+0xfc007bdc>
 4007c0c:	1000101e 	bne	r2,zero,4007c50 <___vfiprintf_internal_r+0xc9c>
 4007c10:	e73ffc04 	addi	fp,fp,-16
 4007c14:	01000044 	movi	r4,1
 4007c18:	000b883a 	mov	r5,zero
 4007c1c:	d811883a 	mov	r8,sp
 4007c20:	3f3ff316 	blt	r7,fp,4007bf0 <__alt_data_end+0xfc007bf0>
 4007c24:	da802417 	ldw	r10,144(sp)
 4007c28:	1705883a 	add	r2,r2,fp
 4007c2c:	47000115 	stw	fp,4(r8)
 4007c30:	42800015 	stw	r10,0(r8)
 4007c34:	d8801c15 	stw	r2,112(sp)
 4007c38:	d9001b15 	stw	r4,108(sp)
 4007c3c:	00c001c4 	movi	r3,7
 4007c40:	19003616 	blt	r3,r4,4007d1c <___vfiprintf_internal_r+0xd68>
 4007c44:	42000204 	addi	r8,r8,8
 4007c48:	21000044 	addi	r4,r4,1
 4007c4c:	003e5706 	br	40075ac <__alt_data_end+0xfc0075ac>
 4007c50:	d9402117 	ldw	r5,132(sp)
 4007c54:	d9002017 	ldw	r4,128(sp)
 4007c58:	d9801a04 	addi	r6,sp,104
 4007c5c:	d9c02b15 	stw	r7,172(sp)
 4007c60:	db402a15 	stw	r13,168(sp)
 4007c64:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007c68:	d9c02b17 	ldw	r7,172(sp)
 4007c6c:	db402a17 	ldw	r13,168(sp)
 4007c70:	1000241e 	bne	r2,zero,4007d04 <___vfiprintf_internal_r+0xd50>
 4007c74:	d9401b17 	ldw	r5,108(sp)
 4007c78:	d8801c17 	ldw	r2,112(sp)
 4007c7c:	d811883a 	mov	r8,sp
 4007c80:	29000044 	addi	r4,r5,1
 4007c84:	003fd806 	br	4007be8 <__alt_data_end+0xfc007be8>
 4007c88:	d9401b17 	ldw	r5,108(sp)
 4007c8c:	00c10074 	movhi	r3,1025
 4007c90:	18c0db04 	addi	r3,r3,876
 4007c94:	d8c02415 	stw	r3,144(sp)
 4007c98:	29400044 	addi	r5,r5,1
 4007c9c:	d8c02417 	ldw	r3,144(sp)
 4007ca0:	14c5883a 	add	r2,r2,r19
 4007ca4:	44c00115 	stw	r19,4(r8)
 4007ca8:	40c00015 	stw	r3,0(r8)
 4007cac:	d8801c15 	stw	r2,112(sp)
 4007cb0:	d9401b15 	stw	r5,108(sp)
 4007cb4:	00c001c4 	movi	r3,7
 4007cb8:	1940070e 	bge	r3,r5,4007cd8 <___vfiprintf_internal_r+0xd24>
 4007cbc:	103e4826 	beq	r2,zero,40075e0 <__alt_data_end+0xfc0075e0>
 4007cc0:	d9402117 	ldw	r5,132(sp)
 4007cc4:	d9002017 	ldw	r4,128(sp)
 4007cc8:	d9801a04 	addi	r6,sp,104
 4007ccc:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007cd0:	10000c1e 	bne	r2,zero,4007d04 <___vfiprintf_internal_r+0xd50>
 4007cd4:	d8801c17 	ldw	r2,112(sp)
 4007cd8:	8c80010e 	bge	r17,r18,4007ce0 <___vfiprintf_internal_r+0xd2c>
 4007cdc:	9023883a 	mov	r17,r18
 4007ce0:	da802317 	ldw	r10,140(sp)
 4007ce4:	5455883a 	add	r10,r10,r17
 4007ce8:	da802315 	stw	r10,140(sp)
 4007cec:	103e4126 	beq	r2,zero,40075f4 <__alt_data_end+0xfc0075f4>
 4007cf0:	d9402117 	ldw	r5,132(sp)
 4007cf4:	d9002017 	ldw	r4,128(sp)
 4007cf8:	d9801a04 	addi	r6,sp,104
 4007cfc:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007d00:	103e3c26 	beq	r2,zero,40075f4 <__alt_data_end+0xfc0075f4>
 4007d04:	dd002117 	ldw	r20,132(sp)
 4007d08:	a080030b 	ldhu	r2,12(r20)
 4007d0c:	1080100c 	andi	r2,r2,64
 4007d10:	1001231e 	bne	r2,zero,40081a0 <___vfiprintf_internal_r+0x11ec>
 4007d14:	d8802317 	ldw	r2,140(sp)
 4007d18:	003d7b06 	br	4007308 <__alt_data_end+0xfc007308>
 4007d1c:	1000991e 	bne	r2,zero,4007f84 <___vfiprintf_internal_r+0xfd0>
 4007d20:	00c00044 	movi	r3,1
 4007d24:	9805883a 	mov	r2,r19
 4007d28:	dd400015 	stw	r21,0(sp)
 4007d2c:	dcc00115 	stw	r19,4(sp)
 4007d30:	dcc01c15 	stw	r19,112(sp)
 4007d34:	d8c01b15 	stw	r3,108(sp)
 4007d38:	d811883a 	mov	r8,sp
 4007d3c:	42000204 	addi	r8,r8,8
 4007d40:	a2c0010c 	andi	r11,r20,4
 4007d44:	583fe426 	beq	r11,zero,4007cd8 <__alt_data_end+0xfc007cd8>
 4007d48:	8ca7c83a 	sub	r19,r17,r18
 4007d4c:	04ffe20e 	bge	zero,r19,4007cd8 <__alt_data_end+0xfc007cd8>
 4007d50:	01c00404 	movi	r7,16
 4007d54:	3cffcc0e 	bge	r7,r19,4007c88 <__alt_data_end+0xfc007c88>
 4007d58:	02810074 	movhi	r10,1025
 4007d5c:	5280db04 	addi	r10,r10,876
 4007d60:	d9001b17 	ldw	r4,108(sp)
 4007d64:	da802415 	stw	r10,144(sp)
 4007d68:	382b883a 	mov	r21,r7
 4007d6c:	050001c4 	movi	r20,7
 4007d70:	df002017 	ldw	fp,128(sp)
 4007d74:	00000506 	br	4007d8c <___vfiprintf_internal_r+0xdd8>
 4007d78:	21400084 	addi	r5,r4,2
 4007d7c:	42000204 	addi	r8,r8,8
 4007d80:	1809883a 	mov	r4,r3
 4007d84:	9cfffc04 	addi	r19,r19,-16
 4007d88:	acffc40e 	bge	r21,r19,4007c9c <__alt_data_end+0xfc007c9c>
 4007d8c:	10800404 	addi	r2,r2,16
 4007d90:	20c00044 	addi	r3,r4,1
 4007d94:	45800015 	stw	r22,0(r8)
 4007d98:	45400115 	stw	r21,4(r8)
 4007d9c:	d8801c15 	stw	r2,112(sp)
 4007da0:	d8c01b15 	stw	r3,108(sp)
 4007da4:	a0fff40e 	bge	r20,r3,4007d78 <__alt_data_end+0xfc007d78>
 4007da8:	1000041e 	bne	r2,zero,4007dbc <___vfiprintf_internal_r+0xe08>
 4007dac:	01400044 	movi	r5,1
 4007db0:	0009883a 	mov	r4,zero
 4007db4:	d811883a 	mov	r8,sp
 4007db8:	003ff206 	br	4007d84 <__alt_data_end+0xfc007d84>
 4007dbc:	d9402117 	ldw	r5,132(sp)
 4007dc0:	d9801a04 	addi	r6,sp,104
 4007dc4:	e009883a 	mov	r4,fp
 4007dc8:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007dcc:	103fcd1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007dd0:	d9001b17 	ldw	r4,108(sp)
 4007dd4:	d8801c17 	ldw	r2,112(sp)
 4007dd8:	d811883a 	mov	r8,sp
 4007ddc:	21400044 	addi	r5,r4,1
 4007de0:	003fe806 	br	4007d84 <__alt_data_end+0xfc007d84>
 4007de4:	d9402117 	ldw	r5,132(sp)
 4007de8:	d9002017 	ldw	r4,128(sp)
 4007dec:	d9801a04 	addi	r6,sp,104
 4007df0:	d9c02b15 	stw	r7,172(sp)
 4007df4:	db402a15 	stw	r13,168(sp)
 4007df8:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007dfc:	d9c02b17 	ldw	r7,172(sp)
 4007e00:	db402a17 	ldw	r13,168(sp)
 4007e04:	103fbf1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007e08:	d9401b17 	ldw	r5,108(sp)
 4007e0c:	d8801c17 	ldw	r2,112(sp)
 4007e10:	d811883a 	mov	r8,sp
 4007e14:	29800044 	addi	r6,r5,1
 4007e18:	003dc406 	br	400752c <__alt_data_end+0xfc00752c>
 4007e1c:	1000d21e 	bne	r2,zero,4008168 <___vfiprintf_internal_r+0x11b4>
 4007e20:	d8c01d87 	ldb	r3,118(sp)
 4007e24:	18009526 	beq	r3,zero,400807c <___vfiprintf_internal_r+0x10c8>
 4007e28:	00800044 	movi	r2,1
 4007e2c:	d8c01d84 	addi	r3,sp,118
 4007e30:	1009883a 	mov	r4,r2
 4007e34:	d8c00015 	stw	r3,0(sp)
 4007e38:	d8800115 	stw	r2,4(sp)
 4007e3c:	d811883a 	mov	r8,sp
 4007e40:	200b883a 	mov	r5,r4
 4007e44:	42000204 	addi	r8,r8,8
 4007e48:	21000044 	addi	r4,r4,1
 4007e4c:	003d9706 	br	40074ac <__alt_data_end+0xfc0074ac>
 4007e50:	d9001d04 	addi	r4,sp,116
 4007e54:	00800084 	movi	r2,2
 4007e58:	d9000015 	stw	r4,0(sp)
 4007e5c:	d8800115 	stw	r2,4(sp)
 4007e60:	1809883a 	mov	r4,r3
 4007e64:	d811883a 	mov	r8,sp
 4007e68:	200b883a 	mov	r5,r4
 4007e6c:	42000204 	addi	r8,r8,8
 4007e70:	21000044 	addi	r4,r4,1
 4007e74:	003f4e06 	br	4007bb0 <__alt_data_end+0xfc007bb0>
 4007e78:	d8001d85 	stb	zero,118(sp)
 4007e7c:	48005016 	blt	r9,zero,4007fc0 <___vfiprintf_internal_r+0x100c>
 4007e80:	00ffdfc4 	movi	r3,-129
 4007e84:	94c4b03a 	or	r2,r18,r19
 4007e88:	a0e8703a 	and	r20,r20,r3
 4007e8c:	103d4426 	beq	r2,zero,40073a0 <__alt_data_end+0xfc0073a0>
 4007e90:	0039883a 	mov	fp,zero
 4007e94:	d9002617 	ldw	r4,152(sp)
 4007e98:	dd401a04 	addi	r21,sp,104
 4007e9c:	908003cc 	andi	r2,r18,15
 4007ea0:	9806973a 	slli	r3,r19,28
 4007ea4:	2085883a 	add	r2,r4,r2
 4007ea8:	9024d13a 	srli	r18,r18,4
 4007eac:	10800003 	ldbu	r2,0(r2)
 4007eb0:	9826d13a 	srli	r19,r19,4
 4007eb4:	ad7fffc4 	addi	r21,r21,-1
 4007eb8:	1ca4b03a 	or	r18,r3,r18
 4007ebc:	a8800005 	stb	r2,0(r21)
 4007ec0:	94c4b03a 	or	r2,r18,r19
 4007ec4:	103ff51e 	bne	r2,zero,4007e9c <__alt_data_end+0xfc007e9c>
 4007ec8:	003e5906 	br	4007830 <__alt_data_end+0xfc007830>
 4007ecc:	d9402117 	ldw	r5,132(sp)
 4007ed0:	d9002017 	ldw	r4,128(sp)
 4007ed4:	d9801a04 	addi	r6,sp,104
 4007ed8:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007edc:	103f891e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007ee0:	d8801c17 	ldw	r2,112(sp)
 4007ee4:	d811883a 	mov	r8,sp
 4007ee8:	003f9506 	br	4007d40 <__alt_data_end+0xfc007d40>
 4007eec:	d9402117 	ldw	r5,132(sp)
 4007ef0:	d9002017 	ldw	r4,128(sp)
 4007ef4:	d9801a04 	addi	r6,sp,104
 4007ef8:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007efc:	103f811e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007f00:	d811883a 	mov	r8,sp
 4007f04:	003ced06 	br	40072bc <__alt_data_end+0xfc0072bc>
 4007f08:	d9402117 	ldw	r5,132(sp)
 4007f0c:	d9002017 	ldw	r4,128(sp)
 4007f10:	d9801a04 	addi	r6,sp,104
 4007f14:	da402c15 	stw	r9,176(sp)
 4007f18:	db802a15 	stw	r14,168(sp)
 4007f1c:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007f20:	da402c17 	ldw	r9,176(sp)
 4007f24:	db802a17 	ldw	r14,168(sp)
 4007f28:	103f761e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007f2c:	d9401b17 	ldw	r5,108(sp)
 4007f30:	d8801c17 	ldw	r2,112(sp)
 4007f34:	d811883a 	mov	r8,sp
 4007f38:	29000044 	addi	r4,r5,1
 4007f3c:	003d5b06 	br	40074ac <__alt_data_end+0xfc0074ac>
 4007f40:	d9402117 	ldw	r5,132(sp)
 4007f44:	d9002017 	ldw	r4,128(sp)
 4007f48:	d9801a04 	addi	r6,sp,104
 4007f4c:	da402c15 	stw	r9,176(sp)
 4007f50:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007f54:	da402c17 	ldw	r9,176(sp)
 4007f58:	103f6a1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007f5c:	d9401b17 	ldw	r5,108(sp)
 4007f60:	d8801c17 	ldw	r2,112(sp)
 4007f64:	d811883a 	mov	r8,sp
 4007f68:	29000044 	addi	r4,r5,1
 4007f6c:	003f1006 	br	4007bb0 <__alt_data_end+0xfc007bb0>
 4007f70:	1000c31e 	bne	r2,zero,4008280 <___vfiprintf_internal_r+0x12cc>
 4007f74:	01000044 	movi	r4,1
 4007f78:	000b883a 	mov	r5,zero
 4007f7c:	d811883a 	mov	r8,sp
 4007f80:	003f0d06 	br	4007bb8 <__alt_data_end+0xfc007bb8>
 4007f84:	d9402117 	ldw	r5,132(sp)
 4007f88:	d9002017 	ldw	r4,128(sp)
 4007f8c:	d9801a04 	addi	r6,sp,104
 4007f90:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4007f94:	103f5b1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 4007f98:	d9001b17 	ldw	r4,108(sp)
 4007f9c:	d8801c17 	ldw	r2,112(sp)
 4007fa0:	d811883a 	mov	r8,sp
 4007fa4:	21000044 	addi	r4,r4,1
 4007fa8:	003d8006 	br	40075ac <__alt_data_end+0xfc0075ac>
 4007fac:	01010074 	movhi	r4,1025
 4007fb0:	21007604 	addi	r4,r4,472
 4007fb4:	d9002615 	stw	r4,152(sp)
 4007fb8:	d8c02215 	stw	r3,136(sp)
 4007fbc:	1029883a 	mov	r20,r2
 4007fc0:	94c4b03a 	or	r2,r18,r19
 4007fc4:	103fb21e 	bne	r2,zero,4007e90 <__alt_data_end+0xfc007e90>
 4007fc8:	0039883a 	mov	fp,zero
 4007fcc:	00800084 	movi	r2,2
 4007fd0:	003e6b06 	br	4007980 <__alt_data_end+0xfc007980>
 4007fd4:	da802217 	ldw	r10,136(sp)
 4007fd8:	d8001d85 	stb	zero,118(sp)
 4007fdc:	0027883a 	mov	r19,zero
 4007fe0:	50800104 	addi	r2,r10,4
 4007fe4:	54800017 	ldw	r18,0(r10)
 4007fe8:	483e6016 	blt	r9,zero,400796c <__alt_data_end+0xfc00796c>
 4007fec:	00ffdfc4 	movi	r3,-129
 4007ff0:	d8802215 	stw	r2,136(sp)
 4007ff4:	a0e8703a 	and	r20,r20,r3
 4007ff8:	0039883a 	mov	fp,zero
 4007ffc:	903ebb26 	beq	r18,zero,4007aec <__alt_data_end+0xfc007aec>
 4008000:	00800244 	movi	r2,9
 4008004:	14bdee36 	bltu	r2,r18,40077c0 <__alt_data_end+0xfc0077c0>
 4008008:	003eba06 	br	4007af4 <__alt_data_end+0xfc007af4>
 400800c:	00800c04 	movi	r2,48
 4008010:	d8c01d45 	stb	r3,117(sp)
 4008014:	d8801d05 	stb	r2,116(sp)
 4008018:	d8001d85 	stb	zero,118(sp)
 400801c:	a0c00094 	ori	r3,r20,2
 4008020:	4800a916 	blt	r9,zero,40082c8 <___vfiprintf_internal_r+0x1314>
 4008024:	00bfdfc4 	movi	r2,-129
 4008028:	a096703a 	and	r11,r20,r2
 400802c:	5d000094 	ori	r20,r11,2
 4008030:	0039883a 	mov	fp,zero
 4008034:	003f9706 	br	4007e94 <__alt_data_end+0xfc007e94>
 4008038:	8025883a 	mov	r18,r16
 400803c:	003c2e06 	br	40070f8 <__alt_data_end+0xfc0070f8>
 4008040:	00810074 	movhi	r2,1025
 4008044:	10807604 	addi	r2,r2,472
 4008048:	0039883a 	mov	fp,zero
 400804c:	d8802615 	stw	r2,152(sp)
 4008050:	003f9006 	br	4007e94 <__alt_data_end+0xfc007e94>
 4008054:	04a5c83a 	sub	r18,zero,r18
 4008058:	07000b44 	movi	fp,45
 400805c:	9004c03a 	cmpne	r2,r18,zero
 4008060:	04e7c83a 	sub	r19,zero,r19
 4008064:	df001d85 	stb	fp,118(sp)
 4008068:	98a7c83a 	sub	r19,r19,r2
 400806c:	48009f16 	blt	r9,zero,40082ec <___vfiprintf_internal_r+0x1338>
 4008070:	00bfdfc4 	movi	r2,-129
 4008074:	a0a8703a 	and	r20,r20,r2
 4008078:	003dd006 	br	40077bc <__alt_data_end+0xfc0077bc>
 400807c:	70004c26 	beq	r14,zero,40081b0 <___vfiprintf_internal_r+0x11fc>
 4008080:	00800084 	movi	r2,2
 4008084:	d8c01d04 	addi	r3,sp,116
 4008088:	d8c00015 	stw	r3,0(sp)
 400808c:	d8800115 	stw	r2,4(sp)
 4008090:	01000044 	movi	r4,1
 4008094:	d811883a 	mov	r8,sp
 4008098:	003f7306 	br	4007e68 <__alt_data_end+0xfc007e68>
 400809c:	a080100c 	andi	r2,r20,64
 40080a0:	da802217 	ldw	r10,136(sp)
 40080a4:	103e0626 	beq	r2,zero,40078c0 <__alt_data_end+0xfc0078c0>
 40080a8:	5480000f 	ldh	r18,0(r10)
 40080ac:	52800104 	addi	r10,r10,4
 40080b0:	da802215 	stw	r10,136(sp)
 40080b4:	9027d7fa 	srai	r19,r18,31
 40080b8:	9805883a 	mov	r2,r19
 40080bc:	003db806 	br	40077a0 <__alt_data_end+0xfc0077a0>
 40080c0:	a080040c 	andi	r2,r20,16
 40080c4:	1000091e 	bne	r2,zero,40080ec <___vfiprintf_internal_r+0x1138>
 40080c8:	a2c0100c 	andi	r11,r20,64
 40080cc:	58000726 	beq	r11,zero,40080ec <___vfiprintf_internal_r+0x1138>
 40080d0:	da802217 	ldw	r10,136(sp)
 40080d4:	50800017 	ldw	r2,0(r10)
 40080d8:	52800104 	addi	r10,r10,4
 40080dc:	da802215 	stw	r10,136(sp)
 40080e0:	da802317 	ldw	r10,140(sp)
 40080e4:	1280000d 	sth	r10,0(r2)
 40080e8:	003be706 	br	4007088 <__alt_data_end+0xfc007088>
 40080ec:	da802217 	ldw	r10,136(sp)
 40080f0:	50800017 	ldw	r2,0(r10)
 40080f4:	52800104 	addi	r10,r10,4
 40080f8:	da802215 	stw	r10,136(sp)
 40080fc:	da802317 	ldw	r10,140(sp)
 4008100:	12800015 	stw	r10,0(r2)
 4008104:	003be006 	br	4007088 <__alt_data_end+0xfc007088>
 4008108:	a080100c 	andi	r2,r20,64
 400810c:	da802217 	ldw	r10,136(sp)
 4008110:	10003026 	beq	r2,zero,40081d4 <___vfiprintf_internal_r+0x1220>
 4008114:	5480000b 	ldhu	r18,0(r10)
 4008118:	52800104 	addi	r10,r10,4
 400811c:	0027883a 	mov	r19,zero
 4008120:	da802215 	stw	r10,136(sp)
 4008124:	003d8006 	br	4007728 <__alt_data_end+0xfc007728>
 4008128:	80c00007 	ldb	r3,0(r16)
 400812c:	003c0006 	br	4007130 <__alt_data_end+0xfc007130>
 4008130:	a080100c 	andi	r2,r20,64
 4008134:	d8001d85 	stb	zero,118(sp)
 4008138:	da802217 	ldw	r10,136(sp)
 400813c:	1000201e 	bne	r2,zero,40081c0 <___vfiprintf_internal_r+0x120c>
 4008140:	50800104 	addi	r2,r10,4
 4008144:	54800017 	ldw	r18,0(r10)
 4008148:	0027883a 	mov	r19,zero
 400814c:	483def0e 	bge	r9,zero,400790c <__alt_data_end+0xfc00790c>
 4008150:	94c6b03a 	or	r3,r18,r19
 4008154:	d8802215 	stw	r2,136(sp)
 4008158:	183d4e1e 	bne	r3,zero,4007694 <__alt_data_end+0xfc007694>
 400815c:	0039883a 	mov	fp,zero
 4008160:	0005883a 	mov	r2,zero
 4008164:	003e0606 	br	4007980 <__alt_data_end+0xfc007980>
 4008168:	d9402117 	ldw	r5,132(sp)
 400816c:	d9002017 	ldw	r4,128(sp)
 4008170:	d9801a04 	addi	r6,sp,104
 4008174:	da402c15 	stw	r9,176(sp)
 4008178:	db802a15 	stw	r14,168(sp)
 400817c:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4008180:	da402c17 	ldw	r9,176(sp)
 4008184:	db802a17 	ldw	r14,168(sp)
 4008188:	103ede1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 400818c:	d9401b17 	ldw	r5,108(sp)
 4008190:	d8801c17 	ldw	r2,112(sp)
 4008194:	d811883a 	mov	r8,sp
 4008198:	29000044 	addi	r4,r5,1
 400819c:	003e7406 	br	4007b70 <__alt_data_end+0xfc007b70>
 40081a0:	00bfffc4 	movi	r2,-1
 40081a4:	003c5806 	br	4007308 <__alt_data_end+0xfc007308>
 40081a8:	d811883a 	mov	r8,sp
 40081ac:	003ee806 	br	4007d50 <__alt_data_end+0xfc007d50>
 40081b0:	000b883a 	mov	r5,zero
 40081b4:	01000044 	movi	r4,1
 40081b8:	d811883a 	mov	r8,sp
 40081bc:	003e7c06 	br	4007bb0 <__alt_data_end+0xfc007bb0>
 40081c0:	50800104 	addi	r2,r10,4
 40081c4:	5480000b 	ldhu	r18,0(r10)
 40081c8:	0027883a 	mov	r19,zero
 40081cc:	483dcf0e 	bge	r9,zero,400790c <__alt_data_end+0xfc00790c>
 40081d0:	003fdf06 	br	4008150 <__alt_data_end+0xfc008150>
 40081d4:	54800017 	ldw	r18,0(r10)
 40081d8:	52800104 	addi	r10,r10,4
 40081dc:	0027883a 	mov	r19,zero
 40081e0:	da802215 	stw	r10,136(sp)
 40081e4:	003d5006 	br	4007728 <__alt_data_end+0xfc007728>
 40081e8:	50800104 	addi	r2,r10,4
 40081ec:	5480000b 	ldhu	r18,0(r10)
 40081f0:	0027883a 	mov	r19,zero
 40081f4:	483f7d0e 	bge	r9,zero,4007fec <__alt_data_end+0xfc007fec>
 40081f8:	003ddc06 	br	400796c <__alt_data_end+0xfc00796c>
 40081fc:	d8c02215 	stw	r3,136(sp)
 4008200:	0039883a 	mov	fp,zero
 4008204:	003ddb06 	br	4007974 <__alt_data_end+0xfc007974>
 4008208:	02810074 	movhi	r10,1025
 400820c:	5280d704 	addi	r10,r10,860
 4008210:	da802415 	stw	r10,144(sp)
 4008214:	003e8306 	br	4007c24 <__alt_data_end+0xfc007c24>
 4008218:	d8801c17 	ldw	r2,112(sp)
 400821c:	dd002117 	ldw	r20,132(sp)
 4008220:	103eb926 	beq	r2,zero,4007d08 <__alt_data_end+0xfc007d08>
 4008224:	d9002017 	ldw	r4,128(sp)
 4008228:	d9801a04 	addi	r6,sp,104
 400822c:	a00b883a 	mov	r5,r20
 4008230:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4008234:	003eb406 	br	4007d08 <__alt_data_end+0xfc007d08>
 4008238:	80c00043 	ldbu	r3,1(r16)
 400823c:	a5000814 	ori	r20,r20,32
 4008240:	84000044 	addi	r16,r16,1
 4008244:	18c03fcc 	andi	r3,r3,255
 4008248:	18c0201c 	xori	r3,r3,128
 400824c:	18ffe004 	addi	r3,r3,-128
 4008250:	003bb706 	br	4007130 <__alt_data_end+0xfc007130>
 4008254:	a809883a 	mov	r4,r21
 4008258:	d8c02a15 	stw	r3,168(sp)
 400825c:	da002b15 	stw	r8,172(sp)
 4008260:	4006e080 	call	4006e08 <strlen>
 4008264:	d8c02a17 	ldw	r3,168(sp)
 4008268:	1027883a 	mov	r19,r2
 400826c:	df001d83 	ldbu	fp,118(sp)
 4008270:	d8c02215 	stw	r3,136(sp)
 4008274:	0013883a 	mov	r9,zero
 4008278:	da002b17 	ldw	r8,172(sp)
 400827c:	003c4d06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 4008280:	d9402117 	ldw	r5,132(sp)
 4008284:	d9002017 	ldw	r4,128(sp)
 4008288:	d9801a04 	addi	r6,sp,104
 400828c:	da402c15 	stw	r9,176(sp)
 4008290:	4006ea00 	call	4006ea0 <__sprint_r.part.0>
 4008294:	da402c17 	ldw	r9,176(sp)
 4008298:	103e9a1e 	bne	r2,zero,4007d04 <__alt_data_end+0xfc007d04>
 400829c:	d9401b17 	ldw	r5,108(sp)
 40082a0:	d8801c17 	ldw	r2,112(sp)
 40082a4:	d811883a 	mov	r8,sp
 40082a8:	29000044 	addi	r4,r5,1
 40082ac:	003e4206 	br	4007bb8 <__alt_data_end+0xfc007bb8>
 40082b0:	d9401b17 	ldw	r5,108(sp)
 40082b4:	01010074 	movhi	r4,1025
 40082b8:	2100db04 	addi	r4,r4,876
 40082bc:	d9002415 	stw	r4,144(sp)
 40082c0:	29400044 	addi	r5,r5,1
 40082c4:	003c6d06 	br	400747c <__alt_data_end+0xfc00747c>
 40082c8:	0039883a 	mov	fp,zero
 40082cc:	00800084 	movi	r2,2
 40082d0:	10803fcc 	andi	r2,r2,255
 40082d4:	01000044 	movi	r4,1
 40082d8:	11001e26 	beq	r2,r4,4008354 <___vfiprintf_internal_r+0x13a0>
 40082dc:	01000084 	movi	r4,2
 40082e0:	11001e1e 	bne	r2,r4,400835c <___vfiprintf_internal_r+0x13a8>
 40082e4:	1829883a 	mov	r20,r3
 40082e8:	003eea06 	br	4007e94 <__alt_data_end+0xfc007e94>
 40082ec:	a007883a 	mov	r3,r20
 40082f0:	00800044 	movi	r2,1
 40082f4:	003ff606 	br	40082d0 <__alt_data_end+0xfc0082d0>
 40082f8:	00800184 	movi	r2,6
 40082fc:	1240012e 	bgeu	r2,r9,4008304 <___vfiprintf_internal_r+0x1350>
 4008300:	1013883a 	mov	r9,r2
 4008304:	4827883a 	mov	r19,r9
 4008308:	4825883a 	mov	r18,r9
 400830c:	48001516 	blt	r9,zero,4008364 <___vfiprintf_internal_r+0x13b0>
 4008310:	05410074 	movhi	r21,1025
 4008314:	d8c02215 	stw	r3,136(sp)
 4008318:	ad407b04 	addi	r21,r21,492
 400831c:	003d1406 	br	4007770 <__alt_data_end+0xfc007770>
 4008320:	02810074 	movhi	r10,1025
 4008324:	5280d704 	addi	r10,r10,860
 4008328:	da802415 	stw	r10,144(sp)
 400832c:	200d883a 	mov	r6,r4
 4008330:	003c9106 	br	4007578 <__alt_data_end+0xfc007578>
 4008334:	5021883a 	mov	r16,r10
 4008338:	0013883a 	mov	r9,zero
 400833c:	003b7d06 	br	4007134 <__alt_data_end+0xfc007134>
 4008340:	4827883a 	mov	r19,r9
 4008344:	df001d83 	ldbu	fp,118(sp)
 4008348:	d8c02215 	stw	r3,136(sp)
 400834c:	0013883a 	mov	r9,zero
 4008350:	003c1806 	br	40073b4 <__alt_data_end+0xfc0073b4>
 4008354:	1829883a 	mov	r20,r3
 4008358:	003d1806 	br	40077bc <__alt_data_end+0xfc0077bc>
 400835c:	1829883a 	mov	r20,r3
 4008360:	003ccd06 	br	4007698 <__alt_data_end+0xfc007698>
 4008364:	0025883a 	mov	r18,zero
 4008368:	003fe906 	br	4008310 <__alt_data_end+0xfc008310>
 400836c:	d8802217 	ldw	r2,136(sp)
 4008370:	80c00043 	ldbu	r3,1(r16)
 4008374:	5021883a 	mov	r16,r10
 4008378:	12400017 	ldw	r9,0(r2)
 400837c:	10800104 	addi	r2,r2,4
 4008380:	d8802215 	stw	r2,136(sp)
 4008384:	483faf0e 	bge	r9,zero,4008244 <__alt_data_end+0xfc008244>
 4008388:	18c03fcc 	andi	r3,r3,255
 400838c:	18c0201c 	xori	r3,r3,128
 4008390:	027fffc4 	movi	r9,-1
 4008394:	18ffe004 	addi	r3,r3,-128
 4008398:	003b6506 	br	4007130 <__alt_data_end+0xfc007130>
 400839c:	d9c01d85 	stb	r7,118(sp)
 40083a0:	003ca006 	br	4007624 <__alt_data_end+0xfc007624>
 40083a4:	d9c01d85 	stb	r7,118(sp)
 40083a8:	003cad06 	br	4007660 <__alt_data_end+0xfc007660>
 40083ac:	d9c01d85 	stb	r7,118(sp)
 40083b0:	003d7d06 	br	40079a8 <__alt_data_end+0xfc0079a8>
 40083b4:	d9c01d85 	stb	r7,118(sp)
 40083b8:	003d5f06 	br	4007938 <__alt_data_end+0xfc007938>
 40083bc:	a080004c 	andi	r2,r20,1
 40083c0:	0039883a 	mov	fp,zero
 40083c4:	10000526 	beq	r2,zero,40083dc <___vfiprintf_internal_r+0x1428>
 40083c8:	00800c04 	movi	r2,48
 40083cc:	d88019c5 	stb	r2,103(sp)
 40083d0:	dcc02717 	ldw	r19,156(sp)
 40083d4:	dd4019c4 	addi	r21,sp,103
 40083d8:	003bf606 	br	40073b4 <__alt_data_end+0xfc0073b4>
 40083dc:	0027883a 	mov	r19,zero
 40083e0:	dd401a04 	addi	r21,sp,104
 40083e4:	003bf306 	br	40073b4 <__alt_data_end+0xfc0073b4>
 40083e8:	d9c01d85 	stb	r7,118(sp)
 40083ec:	003dc806 	br	4007b10 <__alt_data_end+0xfc007b10>
 40083f0:	d9c01d85 	stb	r7,118(sp)
 40083f4:	003d3a06 	br	40078e0 <__alt_data_end+0xfc0078e0>
 40083f8:	d9c01d85 	stb	r7,118(sp)
 40083fc:	003d2a06 	br	40078a8 <__alt_data_end+0xfc0078a8>
 4008400:	d9c01d85 	stb	r7,118(sp)
 4008404:	003cde06 	br	4007780 <__alt_data_end+0xfc007780>
 4008408:	d9c01d85 	stb	r7,118(sp)
 400840c:	003cbc06 	br	4007700 <__alt_data_end+0xfc007700>

04008410 <__vfiprintf_internal>:
 4008410:	00810074 	movhi	r2,1025
 4008414:	10880304 	addi	r2,r2,8204
 4008418:	300f883a 	mov	r7,r6
 400841c:	280d883a 	mov	r6,r5
 4008420:	200b883a 	mov	r5,r4
 4008424:	11000017 	ldw	r4,0(r2)
 4008428:	4006fb41 	jmpi	4006fb4 <___vfiprintf_internal_r>

0400842c <__sbprintf>:
 400842c:	2880030b 	ldhu	r2,12(r5)
 4008430:	2ac01917 	ldw	r11,100(r5)
 4008434:	2a80038b 	ldhu	r10,14(r5)
 4008438:	2a400717 	ldw	r9,28(r5)
 400843c:	2a000917 	ldw	r8,36(r5)
 4008440:	defee204 	addi	sp,sp,-1144
 4008444:	00c10004 	movi	r3,1024
 4008448:	dc011a15 	stw	r16,1128(sp)
 400844c:	10bfff4c 	andi	r2,r2,65533
 4008450:	2821883a 	mov	r16,r5
 4008454:	d8cb883a 	add	r5,sp,r3
 4008458:	dc811c15 	stw	r18,1136(sp)
 400845c:	dc411b15 	stw	r17,1132(sp)
 4008460:	dfc11d15 	stw	ra,1140(sp)
 4008464:	2025883a 	mov	r18,r4
 4008468:	d881030d 	sth	r2,1036(sp)
 400846c:	dac11915 	stw	r11,1124(sp)
 4008470:	da81038d 	sth	r10,1038(sp)
 4008474:	da410715 	stw	r9,1052(sp)
 4008478:	da010915 	stw	r8,1060(sp)
 400847c:	dec10015 	stw	sp,1024(sp)
 4008480:	dec10415 	stw	sp,1040(sp)
 4008484:	d8c10215 	stw	r3,1032(sp)
 4008488:	d8c10515 	stw	r3,1044(sp)
 400848c:	d8010615 	stw	zero,1048(sp)
 4008490:	4006fb40 	call	4006fb4 <___vfiprintf_internal_r>
 4008494:	1023883a 	mov	r17,r2
 4008498:	10000416 	blt	r2,zero,40084ac <__sbprintf+0x80>
 400849c:	d9410004 	addi	r5,sp,1024
 40084a0:	9009883a 	mov	r4,r18
 40084a4:	400434c0 	call	400434c <_fflush_r>
 40084a8:	10000d1e 	bne	r2,zero,40084e0 <__sbprintf+0xb4>
 40084ac:	d881030b 	ldhu	r2,1036(sp)
 40084b0:	1080100c 	andi	r2,r2,64
 40084b4:	10000326 	beq	r2,zero,40084c4 <__sbprintf+0x98>
 40084b8:	8080030b 	ldhu	r2,12(r16)
 40084bc:	10801014 	ori	r2,r2,64
 40084c0:	8080030d 	sth	r2,12(r16)
 40084c4:	8805883a 	mov	r2,r17
 40084c8:	dfc11d17 	ldw	ra,1140(sp)
 40084cc:	dc811c17 	ldw	r18,1136(sp)
 40084d0:	dc411b17 	ldw	r17,1132(sp)
 40084d4:	dc011a17 	ldw	r16,1128(sp)
 40084d8:	dec11e04 	addi	sp,sp,1144
 40084dc:	f800283a 	ret
 40084e0:	047fffc4 	movi	r17,-1
 40084e4:	003ff106 	br	40084ac <__alt_data_end+0xfc0084ac>

040084e8 <_write_r>:
 40084e8:	defffd04 	addi	sp,sp,-12
 40084ec:	2805883a 	mov	r2,r5
 40084f0:	dc000015 	stw	r16,0(sp)
 40084f4:	04010074 	movhi	r16,1025
 40084f8:	dc400115 	stw	r17,4(sp)
 40084fc:	300b883a 	mov	r5,r6
 4008500:	840ef804 	addi	r16,r16,15328
 4008504:	2023883a 	mov	r17,r4
 4008508:	380d883a 	mov	r6,r7
 400850c:	1009883a 	mov	r4,r2
 4008510:	dfc00215 	stw	ra,8(sp)
 4008514:	80000015 	stw	zero,0(r16)
 4008518:	400d5280 	call	400d528 <write>
 400851c:	00ffffc4 	movi	r3,-1
 4008520:	10c00526 	beq	r2,r3,4008538 <_write_r+0x50>
 4008524:	dfc00217 	ldw	ra,8(sp)
 4008528:	dc400117 	ldw	r17,4(sp)
 400852c:	dc000017 	ldw	r16,0(sp)
 4008530:	dec00304 	addi	sp,sp,12
 4008534:	f800283a 	ret
 4008538:	80c00017 	ldw	r3,0(r16)
 400853c:	183ff926 	beq	r3,zero,4008524 <__alt_data_end+0xfc008524>
 4008540:	88c00015 	stw	r3,0(r17)
 4008544:	003ff706 	br	4008524 <__alt_data_end+0xfc008524>

04008548 <_close_r>:
 4008548:	defffd04 	addi	sp,sp,-12
 400854c:	dc000015 	stw	r16,0(sp)
 4008550:	04010074 	movhi	r16,1025
 4008554:	dc400115 	stw	r17,4(sp)
 4008558:	840ef804 	addi	r16,r16,15328
 400855c:	2023883a 	mov	r17,r4
 4008560:	2809883a 	mov	r4,r5
 4008564:	dfc00215 	stw	ra,8(sp)
 4008568:	80000015 	stw	zero,0(r16)
 400856c:	400ccb40 	call	400ccb4 <close>
 4008570:	00ffffc4 	movi	r3,-1
 4008574:	10c00526 	beq	r2,r3,400858c <_close_r+0x44>
 4008578:	dfc00217 	ldw	ra,8(sp)
 400857c:	dc400117 	ldw	r17,4(sp)
 4008580:	dc000017 	ldw	r16,0(sp)
 4008584:	dec00304 	addi	sp,sp,12
 4008588:	f800283a 	ret
 400858c:	80c00017 	ldw	r3,0(r16)
 4008590:	183ff926 	beq	r3,zero,4008578 <__alt_data_end+0xfc008578>
 4008594:	88c00015 	stw	r3,0(r17)
 4008598:	003ff706 	br	4008578 <__alt_data_end+0xfc008578>

0400859c <_calloc_r>:
 400859c:	298b383a 	mul	r5,r5,r6
 40085a0:	defffe04 	addi	sp,sp,-8
 40085a4:	dfc00115 	stw	ra,4(sp)
 40085a8:	dc000015 	stw	r16,0(sp)
 40085ac:	4004fcc0 	call	4004fcc <_malloc_r>
 40085b0:	10002926 	beq	r2,zero,4008658 <_calloc_r+0xbc>
 40085b4:	11bfff17 	ldw	r6,-4(r2)
 40085b8:	1021883a 	mov	r16,r2
 40085bc:	00bfff04 	movi	r2,-4
 40085c0:	308c703a 	and	r6,r6,r2
 40085c4:	00c00904 	movi	r3,36
 40085c8:	308d883a 	add	r6,r6,r2
 40085cc:	19801636 	bltu	r3,r6,4008628 <_calloc_r+0x8c>
 40085d0:	008004c4 	movi	r2,19
 40085d4:	11800b2e 	bgeu	r2,r6,4008604 <_calloc_r+0x68>
 40085d8:	80000015 	stw	zero,0(r16)
 40085dc:	80000115 	stw	zero,4(r16)
 40085e0:	008006c4 	movi	r2,27
 40085e4:	11801a2e 	bgeu	r2,r6,4008650 <_calloc_r+0xb4>
 40085e8:	80000215 	stw	zero,8(r16)
 40085ec:	80000315 	stw	zero,12(r16)
 40085f0:	30c0151e 	bne	r6,r3,4008648 <_calloc_r+0xac>
 40085f4:	80000415 	stw	zero,16(r16)
 40085f8:	80800604 	addi	r2,r16,24
 40085fc:	80000515 	stw	zero,20(r16)
 4008600:	00000106 	br	4008608 <_calloc_r+0x6c>
 4008604:	8005883a 	mov	r2,r16
 4008608:	10000015 	stw	zero,0(r2)
 400860c:	10000115 	stw	zero,4(r2)
 4008610:	10000215 	stw	zero,8(r2)
 4008614:	8005883a 	mov	r2,r16
 4008618:	dfc00117 	ldw	ra,4(sp)
 400861c:	dc000017 	ldw	r16,0(sp)
 4008620:	dec00204 	addi	sp,sp,8
 4008624:	f800283a 	ret
 4008628:	000b883a 	mov	r5,zero
 400862c:	8009883a 	mov	r4,r16
 4008630:	4005a040 	call	4005a04 <memset>
 4008634:	8005883a 	mov	r2,r16
 4008638:	dfc00117 	ldw	ra,4(sp)
 400863c:	dc000017 	ldw	r16,0(sp)
 4008640:	dec00204 	addi	sp,sp,8
 4008644:	f800283a 	ret
 4008648:	80800404 	addi	r2,r16,16
 400864c:	003fee06 	br	4008608 <__alt_data_end+0xfc008608>
 4008650:	80800204 	addi	r2,r16,8
 4008654:	003fec06 	br	4008608 <__alt_data_end+0xfc008608>
 4008658:	0005883a 	mov	r2,zero
 400865c:	003fee06 	br	4008618 <__alt_data_end+0xfc008618>

04008660 <_fclose_r>:
 4008660:	28003926 	beq	r5,zero,4008748 <_fclose_r+0xe8>
 4008664:	defffc04 	addi	sp,sp,-16
 4008668:	dc400115 	stw	r17,4(sp)
 400866c:	dc000015 	stw	r16,0(sp)
 4008670:	dfc00315 	stw	ra,12(sp)
 4008674:	dc800215 	stw	r18,8(sp)
 4008678:	2023883a 	mov	r17,r4
 400867c:	2821883a 	mov	r16,r5
 4008680:	20000226 	beq	r4,zero,400868c <_fclose_r+0x2c>
 4008684:	20800e17 	ldw	r2,56(r4)
 4008688:	10002726 	beq	r2,zero,4008728 <_fclose_r+0xc8>
 400868c:	8080030f 	ldh	r2,12(r16)
 4008690:	1000071e 	bne	r2,zero,40086b0 <_fclose_r+0x50>
 4008694:	0005883a 	mov	r2,zero
 4008698:	dfc00317 	ldw	ra,12(sp)
 400869c:	dc800217 	ldw	r18,8(sp)
 40086a0:	dc400117 	ldw	r17,4(sp)
 40086a4:	dc000017 	ldw	r16,0(sp)
 40086a8:	dec00404 	addi	sp,sp,16
 40086ac:	f800283a 	ret
 40086b0:	800b883a 	mov	r5,r16
 40086b4:	8809883a 	mov	r4,r17
 40086b8:	40041300 	call	4004130 <__sflush_r>
 40086bc:	1025883a 	mov	r18,r2
 40086c0:	80800b17 	ldw	r2,44(r16)
 40086c4:	10000426 	beq	r2,zero,40086d8 <_fclose_r+0x78>
 40086c8:	81400717 	ldw	r5,28(r16)
 40086cc:	8809883a 	mov	r4,r17
 40086d0:	103ee83a 	callr	r2
 40086d4:	10001616 	blt	r2,zero,4008730 <_fclose_r+0xd0>
 40086d8:	8080030b 	ldhu	r2,12(r16)
 40086dc:	1080200c 	andi	r2,r2,128
 40086e0:	1000151e 	bne	r2,zero,4008738 <_fclose_r+0xd8>
 40086e4:	81400c17 	ldw	r5,48(r16)
 40086e8:	28000526 	beq	r5,zero,4008700 <_fclose_r+0xa0>
 40086ec:	80801004 	addi	r2,r16,64
 40086f0:	28800226 	beq	r5,r2,40086fc <_fclose_r+0x9c>
 40086f4:	8809883a 	mov	r4,r17
 40086f8:	400489c0 	call	400489c <_free_r>
 40086fc:	80000c15 	stw	zero,48(r16)
 4008700:	81401117 	ldw	r5,68(r16)
 4008704:	28000326 	beq	r5,zero,4008714 <_fclose_r+0xb4>
 4008708:	8809883a 	mov	r4,r17
 400870c:	400489c0 	call	400489c <_free_r>
 4008710:	80001115 	stw	zero,68(r16)
 4008714:	40047380 	call	4004738 <__sfp_lock_acquire>
 4008718:	8000030d 	sth	zero,12(r16)
 400871c:	400473c0 	call	400473c <__sfp_lock_release>
 4008720:	9005883a 	mov	r2,r18
 4008724:	003fdc06 	br	4008698 <__alt_data_end+0xfc008698>
 4008728:	40047280 	call	4004728 <__sinit>
 400872c:	003fd706 	br	400868c <__alt_data_end+0xfc00868c>
 4008730:	04bfffc4 	movi	r18,-1
 4008734:	003fe806 	br	40086d8 <__alt_data_end+0xfc0086d8>
 4008738:	81400417 	ldw	r5,16(r16)
 400873c:	8809883a 	mov	r4,r17
 4008740:	400489c0 	call	400489c <_free_r>
 4008744:	003fe706 	br	40086e4 <__alt_data_end+0xfc0086e4>
 4008748:	0005883a 	mov	r2,zero
 400874c:	f800283a 	ret

04008750 <fclose>:
 4008750:	00810074 	movhi	r2,1025
 4008754:	10880304 	addi	r2,r2,8204
 4008758:	200b883a 	mov	r5,r4
 400875c:	11000017 	ldw	r4,0(r2)
 4008760:	40086601 	jmpi	4008660 <_fclose_r>

04008764 <__fputwc>:
 4008764:	defff804 	addi	sp,sp,-32
 4008768:	dcc00415 	stw	r19,16(sp)
 400876c:	dc800315 	stw	r18,12(sp)
 4008770:	dc000115 	stw	r16,4(sp)
 4008774:	dfc00715 	stw	ra,28(sp)
 4008778:	dd400615 	stw	r21,24(sp)
 400877c:	dd000515 	stw	r20,20(sp)
 4008780:	dc400215 	stw	r17,8(sp)
 4008784:	2027883a 	mov	r19,r4
 4008788:	2825883a 	mov	r18,r5
 400878c:	3021883a 	mov	r16,r6
 4008790:	4004dbc0 	call	4004dbc <__locale_mb_cur_max>
 4008794:	00c00044 	movi	r3,1
 4008798:	10c03e26 	beq	r2,r3,4008894 <__fputwc+0x130>
 400879c:	81c01704 	addi	r7,r16,92
 40087a0:	900d883a 	mov	r6,r18
 40087a4:	d80b883a 	mov	r5,sp
 40087a8:	9809883a 	mov	r4,r19
 40087ac:	40097b00 	call	40097b0 <_wcrtomb_r>
 40087b0:	1029883a 	mov	r20,r2
 40087b4:	00bfffc4 	movi	r2,-1
 40087b8:	a0802026 	beq	r20,r2,400883c <__fputwc+0xd8>
 40087bc:	d9400003 	ldbu	r5,0(sp)
 40087c0:	a0001c26 	beq	r20,zero,4008834 <__fputwc+0xd0>
 40087c4:	0023883a 	mov	r17,zero
 40087c8:	05400284 	movi	r21,10
 40087cc:	00000906 	br	40087f4 <__fputwc+0x90>
 40087d0:	80800017 	ldw	r2,0(r16)
 40087d4:	11400005 	stb	r5,0(r2)
 40087d8:	80c00017 	ldw	r3,0(r16)
 40087dc:	18c00044 	addi	r3,r3,1
 40087e0:	80c00015 	stw	r3,0(r16)
 40087e4:	8c400044 	addi	r17,r17,1
 40087e8:	dc45883a 	add	r2,sp,r17
 40087ec:	8d00112e 	bgeu	r17,r20,4008834 <__fputwc+0xd0>
 40087f0:	11400003 	ldbu	r5,0(r2)
 40087f4:	80c00217 	ldw	r3,8(r16)
 40087f8:	18ffffc4 	addi	r3,r3,-1
 40087fc:	80c00215 	stw	r3,8(r16)
 4008800:	183ff30e 	bge	r3,zero,40087d0 <__alt_data_end+0xfc0087d0>
 4008804:	80800617 	ldw	r2,24(r16)
 4008808:	18801916 	blt	r3,r2,4008870 <__fputwc+0x10c>
 400880c:	80800017 	ldw	r2,0(r16)
 4008810:	11400005 	stb	r5,0(r2)
 4008814:	80800017 	ldw	r2,0(r16)
 4008818:	10c00003 	ldbu	r3,0(r2)
 400881c:	10800044 	addi	r2,r2,1
 4008820:	1d402326 	beq	r3,r21,40088b0 <__fputwc+0x14c>
 4008824:	80800015 	stw	r2,0(r16)
 4008828:	8c400044 	addi	r17,r17,1
 400882c:	dc45883a 	add	r2,sp,r17
 4008830:	8d3fef36 	bltu	r17,r20,40087f0 <__alt_data_end+0xfc0087f0>
 4008834:	9005883a 	mov	r2,r18
 4008838:	00000406 	br	400884c <__fputwc+0xe8>
 400883c:	80c0030b 	ldhu	r3,12(r16)
 4008840:	a005883a 	mov	r2,r20
 4008844:	18c01014 	ori	r3,r3,64
 4008848:	80c0030d 	sth	r3,12(r16)
 400884c:	dfc00717 	ldw	ra,28(sp)
 4008850:	dd400617 	ldw	r21,24(sp)
 4008854:	dd000517 	ldw	r20,20(sp)
 4008858:	dcc00417 	ldw	r19,16(sp)
 400885c:	dc800317 	ldw	r18,12(sp)
 4008860:	dc400217 	ldw	r17,8(sp)
 4008864:	dc000117 	ldw	r16,4(sp)
 4008868:	dec00804 	addi	sp,sp,32
 400886c:	f800283a 	ret
 4008870:	800d883a 	mov	r6,r16
 4008874:	29403fcc 	andi	r5,r5,255
 4008878:	9809883a 	mov	r4,r19
 400887c:	40096580 	call	4009658 <__swbuf_r>
 4008880:	10bfffe0 	cmpeqi	r2,r2,-1
 4008884:	10803fcc 	andi	r2,r2,255
 4008888:	103fd626 	beq	r2,zero,40087e4 <__alt_data_end+0xfc0087e4>
 400888c:	00bfffc4 	movi	r2,-1
 4008890:	003fee06 	br	400884c <__alt_data_end+0xfc00884c>
 4008894:	90ffffc4 	addi	r3,r18,-1
 4008898:	01003f84 	movi	r4,254
 400889c:	20ffbf36 	bltu	r4,r3,400879c <__alt_data_end+0xfc00879c>
 40088a0:	900b883a 	mov	r5,r18
 40088a4:	dc800005 	stb	r18,0(sp)
 40088a8:	1029883a 	mov	r20,r2
 40088ac:	003fc506 	br	40087c4 <__alt_data_end+0xfc0087c4>
 40088b0:	800d883a 	mov	r6,r16
 40088b4:	a80b883a 	mov	r5,r21
 40088b8:	9809883a 	mov	r4,r19
 40088bc:	40096580 	call	4009658 <__swbuf_r>
 40088c0:	10bfffe0 	cmpeqi	r2,r2,-1
 40088c4:	003fef06 	br	4008884 <__alt_data_end+0xfc008884>

040088c8 <_fputwc_r>:
 40088c8:	3080030b 	ldhu	r2,12(r6)
 40088cc:	10c8000c 	andi	r3,r2,8192
 40088d0:	1800051e 	bne	r3,zero,40088e8 <_fputwc_r+0x20>
 40088d4:	30c01917 	ldw	r3,100(r6)
 40088d8:	10880014 	ori	r2,r2,8192
 40088dc:	3080030d 	sth	r2,12(r6)
 40088e0:	18880014 	ori	r2,r3,8192
 40088e4:	30801915 	stw	r2,100(r6)
 40088e8:	40087641 	jmpi	4008764 <__fputwc>

040088ec <fputwc>:
 40088ec:	00810074 	movhi	r2,1025
 40088f0:	defffc04 	addi	sp,sp,-16
 40088f4:	10880304 	addi	r2,r2,8204
 40088f8:	dc000115 	stw	r16,4(sp)
 40088fc:	14000017 	ldw	r16,0(r2)
 4008900:	dc400215 	stw	r17,8(sp)
 4008904:	dfc00315 	stw	ra,12(sp)
 4008908:	2023883a 	mov	r17,r4
 400890c:	80000226 	beq	r16,zero,4008918 <fputwc+0x2c>
 4008910:	80800e17 	ldw	r2,56(r16)
 4008914:	10001026 	beq	r2,zero,4008958 <fputwc+0x6c>
 4008918:	2880030b 	ldhu	r2,12(r5)
 400891c:	10c8000c 	andi	r3,r2,8192
 4008920:	1800051e 	bne	r3,zero,4008938 <fputwc+0x4c>
 4008924:	28c01917 	ldw	r3,100(r5)
 4008928:	10880014 	ori	r2,r2,8192
 400892c:	2880030d 	sth	r2,12(r5)
 4008930:	18880014 	ori	r2,r3,8192
 4008934:	28801915 	stw	r2,100(r5)
 4008938:	280d883a 	mov	r6,r5
 400893c:	8009883a 	mov	r4,r16
 4008940:	880b883a 	mov	r5,r17
 4008944:	dfc00317 	ldw	ra,12(sp)
 4008948:	dc400217 	ldw	r17,8(sp)
 400894c:	dc000117 	ldw	r16,4(sp)
 4008950:	dec00404 	addi	sp,sp,16
 4008954:	40087641 	jmpi	4008764 <__fputwc>
 4008958:	8009883a 	mov	r4,r16
 400895c:	d9400015 	stw	r5,0(sp)
 4008960:	40047280 	call	4004728 <__sinit>
 4008964:	d9400017 	ldw	r5,0(sp)
 4008968:	003feb06 	br	4008918 <__alt_data_end+0xfc008918>

0400896c <_fstat_r>:
 400896c:	defffd04 	addi	sp,sp,-12
 4008970:	2805883a 	mov	r2,r5
 4008974:	dc000015 	stw	r16,0(sp)
 4008978:	04010074 	movhi	r16,1025
 400897c:	dc400115 	stw	r17,4(sp)
 4008980:	840ef804 	addi	r16,r16,15328
 4008984:	2023883a 	mov	r17,r4
 4008988:	300b883a 	mov	r5,r6
 400898c:	1009883a 	mov	r4,r2
 4008990:	dfc00215 	stw	ra,8(sp)
 4008994:	80000015 	stw	zero,0(r16)
 4008998:	400ce000 	call	400ce00 <fstat>
 400899c:	00ffffc4 	movi	r3,-1
 40089a0:	10c00526 	beq	r2,r3,40089b8 <_fstat_r+0x4c>
 40089a4:	dfc00217 	ldw	ra,8(sp)
 40089a8:	dc400117 	ldw	r17,4(sp)
 40089ac:	dc000017 	ldw	r16,0(sp)
 40089b0:	dec00304 	addi	sp,sp,12
 40089b4:	f800283a 	ret
 40089b8:	80c00017 	ldw	r3,0(r16)
 40089bc:	183ff926 	beq	r3,zero,40089a4 <__alt_data_end+0xfc0089a4>
 40089c0:	88c00015 	stw	r3,0(r17)
 40089c4:	003ff706 	br	40089a4 <__alt_data_end+0xfc0089a4>

040089c8 <__sfvwrite_r>:
 40089c8:	30800217 	ldw	r2,8(r6)
 40089cc:	10006726 	beq	r2,zero,4008b6c <__sfvwrite_r+0x1a4>
 40089d0:	28c0030b 	ldhu	r3,12(r5)
 40089d4:	defff404 	addi	sp,sp,-48
 40089d8:	dd400715 	stw	r21,28(sp)
 40089dc:	dd000615 	stw	r20,24(sp)
 40089e0:	dc000215 	stw	r16,8(sp)
 40089e4:	dfc00b15 	stw	ra,44(sp)
 40089e8:	df000a15 	stw	fp,40(sp)
 40089ec:	ddc00915 	stw	r23,36(sp)
 40089f0:	dd800815 	stw	r22,32(sp)
 40089f4:	dcc00515 	stw	r19,20(sp)
 40089f8:	dc800415 	stw	r18,16(sp)
 40089fc:	dc400315 	stw	r17,12(sp)
 4008a00:	1880020c 	andi	r2,r3,8
 4008a04:	2821883a 	mov	r16,r5
 4008a08:	202b883a 	mov	r21,r4
 4008a0c:	3029883a 	mov	r20,r6
 4008a10:	10002726 	beq	r2,zero,4008ab0 <__sfvwrite_r+0xe8>
 4008a14:	28800417 	ldw	r2,16(r5)
 4008a18:	10002526 	beq	r2,zero,4008ab0 <__sfvwrite_r+0xe8>
 4008a1c:	1880008c 	andi	r2,r3,2
 4008a20:	a4400017 	ldw	r17,0(r20)
 4008a24:	10002a26 	beq	r2,zero,4008ad0 <__sfvwrite_r+0x108>
 4008a28:	05a00034 	movhi	r22,32768
 4008a2c:	0027883a 	mov	r19,zero
 4008a30:	0025883a 	mov	r18,zero
 4008a34:	b5bf0004 	addi	r22,r22,-1024
 4008a38:	980d883a 	mov	r6,r19
 4008a3c:	a809883a 	mov	r4,r21
 4008a40:	90004626 	beq	r18,zero,4008b5c <__sfvwrite_r+0x194>
 4008a44:	900f883a 	mov	r7,r18
 4008a48:	b480022e 	bgeu	r22,r18,4008a54 <__sfvwrite_r+0x8c>
 4008a4c:	01e00034 	movhi	r7,32768
 4008a50:	39ff0004 	addi	r7,r7,-1024
 4008a54:	80800917 	ldw	r2,36(r16)
 4008a58:	81400717 	ldw	r5,28(r16)
 4008a5c:	103ee83a 	callr	r2
 4008a60:	0080570e 	bge	zero,r2,4008bc0 <__sfvwrite_r+0x1f8>
 4008a64:	a0c00217 	ldw	r3,8(r20)
 4008a68:	98a7883a 	add	r19,r19,r2
 4008a6c:	90a5c83a 	sub	r18,r18,r2
 4008a70:	1885c83a 	sub	r2,r3,r2
 4008a74:	a0800215 	stw	r2,8(r20)
 4008a78:	103fef1e 	bne	r2,zero,4008a38 <__alt_data_end+0xfc008a38>
 4008a7c:	0005883a 	mov	r2,zero
 4008a80:	dfc00b17 	ldw	ra,44(sp)
 4008a84:	df000a17 	ldw	fp,40(sp)
 4008a88:	ddc00917 	ldw	r23,36(sp)
 4008a8c:	dd800817 	ldw	r22,32(sp)
 4008a90:	dd400717 	ldw	r21,28(sp)
 4008a94:	dd000617 	ldw	r20,24(sp)
 4008a98:	dcc00517 	ldw	r19,20(sp)
 4008a9c:	dc800417 	ldw	r18,16(sp)
 4008aa0:	dc400317 	ldw	r17,12(sp)
 4008aa4:	dc000217 	ldw	r16,8(sp)
 4008aa8:	dec00c04 	addi	sp,sp,48
 4008aac:	f800283a 	ret
 4008ab0:	800b883a 	mov	r5,r16
 4008ab4:	a809883a 	mov	r4,r21
 4008ab8:	40027540 	call	4002754 <__swsetup_r>
 4008abc:	1000eb1e 	bne	r2,zero,4008e6c <__sfvwrite_r+0x4a4>
 4008ac0:	80c0030b 	ldhu	r3,12(r16)
 4008ac4:	a4400017 	ldw	r17,0(r20)
 4008ac8:	1880008c 	andi	r2,r3,2
 4008acc:	103fd61e 	bne	r2,zero,4008a28 <__alt_data_end+0xfc008a28>
 4008ad0:	1880004c 	andi	r2,r3,1
 4008ad4:	10003f1e 	bne	r2,zero,4008bd4 <__sfvwrite_r+0x20c>
 4008ad8:	0039883a 	mov	fp,zero
 4008adc:	0025883a 	mov	r18,zero
 4008ae0:	90001a26 	beq	r18,zero,4008b4c <__sfvwrite_r+0x184>
 4008ae4:	1880800c 	andi	r2,r3,512
 4008ae8:	84c00217 	ldw	r19,8(r16)
 4008aec:	10002126 	beq	r2,zero,4008b74 <__sfvwrite_r+0x1ac>
 4008af0:	982f883a 	mov	r23,r19
 4008af4:	94c09336 	bltu	r18,r19,4008d44 <__sfvwrite_r+0x37c>
 4008af8:	1881200c 	andi	r2,r3,1152
 4008afc:	10009e1e 	bne	r2,zero,4008d78 <__sfvwrite_r+0x3b0>
 4008b00:	81000017 	ldw	r4,0(r16)
 4008b04:	b80d883a 	mov	r6,r23
 4008b08:	e00b883a 	mov	r5,fp
 4008b0c:	4008f380 	call	4008f38 <memmove>
 4008b10:	80c00217 	ldw	r3,8(r16)
 4008b14:	81000017 	ldw	r4,0(r16)
 4008b18:	9005883a 	mov	r2,r18
 4008b1c:	1ce7c83a 	sub	r19,r3,r19
 4008b20:	25cf883a 	add	r7,r4,r23
 4008b24:	84c00215 	stw	r19,8(r16)
 4008b28:	81c00015 	stw	r7,0(r16)
 4008b2c:	a0c00217 	ldw	r3,8(r20)
 4008b30:	e0b9883a 	add	fp,fp,r2
 4008b34:	90a5c83a 	sub	r18,r18,r2
 4008b38:	18a7c83a 	sub	r19,r3,r2
 4008b3c:	a4c00215 	stw	r19,8(r20)
 4008b40:	983fce26 	beq	r19,zero,4008a7c <__alt_data_end+0xfc008a7c>
 4008b44:	80c0030b 	ldhu	r3,12(r16)
 4008b48:	903fe61e 	bne	r18,zero,4008ae4 <__alt_data_end+0xfc008ae4>
 4008b4c:	8f000017 	ldw	fp,0(r17)
 4008b50:	8c800117 	ldw	r18,4(r17)
 4008b54:	8c400204 	addi	r17,r17,8
 4008b58:	003fe106 	br	4008ae0 <__alt_data_end+0xfc008ae0>
 4008b5c:	8cc00017 	ldw	r19,0(r17)
 4008b60:	8c800117 	ldw	r18,4(r17)
 4008b64:	8c400204 	addi	r17,r17,8
 4008b68:	003fb306 	br	4008a38 <__alt_data_end+0xfc008a38>
 4008b6c:	0005883a 	mov	r2,zero
 4008b70:	f800283a 	ret
 4008b74:	81000017 	ldw	r4,0(r16)
 4008b78:	80800417 	ldw	r2,16(r16)
 4008b7c:	11005736 	bltu	r2,r4,4008cdc <__sfvwrite_r+0x314>
 4008b80:	85c00517 	ldw	r23,20(r16)
 4008b84:	95c05536 	bltu	r18,r23,4008cdc <__sfvwrite_r+0x314>
 4008b88:	00a00034 	movhi	r2,32768
 4008b8c:	10bfffc4 	addi	r2,r2,-1
 4008b90:	9009883a 	mov	r4,r18
 4008b94:	1480012e 	bgeu	r2,r18,4008b9c <__sfvwrite_r+0x1d4>
 4008b98:	1009883a 	mov	r4,r2
 4008b9c:	b80b883a 	mov	r5,r23
 4008ba0:	400a4480 	call	400a448 <__divsi3>
 4008ba4:	15cf383a 	mul	r7,r2,r23
 4008ba8:	81400717 	ldw	r5,28(r16)
 4008bac:	80800917 	ldw	r2,36(r16)
 4008bb0:	e00d883a 	mov	r6,fp
 4008bb4:	a809883a 	mov	r4,r21
 4008bb8:	103ee83a 	callr	r2
 4008bbc:	00bfdb16 	blt	zero,r2,4008b2c <__alt_data_end+0xfc008b2c>
 4008bc0:	8080030b 	ldhu	r2,12(r16)
 4008bc4:	10801014 	ori	r2,r2,64
 4008bc8:	8080030d 	sth	r2,12(r16)
 4008bcc:	00bfffc4 	movi	r2,-1
 4008bd0:	003fab06 	br	4008a80 <__alt_data_end+0xfc008a80>
 4008bd4:	0027883a 	mov	r19,zero
 4008bd8:	0011883a 	mov	r8,zero
 4008bdc:	0039883a 	mov	fp,zero
 4008be0:	0025883a 	mov	r18,zero
 4008be4:	90001f26 	beq	r18,zero,4008c64 <__sfvwrite_r+0x29c>
 4008be8:	40005a26 	beq	r8,zero,4008d54 <__sfvwrite_r+0x38c>
 4008bec:	982d883a 	mov	r22,r19
 4008bf0:	94c0012e 	bgeu	r18,r19,4008bf8 <__sfvwrite_r+0x230>
 4008bf4:	902d883a 	mov	r22,r18
 4008bf8:	81000017 	ldw	r4,0(r16)
 4008bfc:	80800417 	ldw	r2,16(r16)
 4008c00:	b02f883a 	mov	r23,r22
 4008c04:	81c00517 	ldw	r7,20(r16)
 4008c08:	1100032e 	bgeu	r2,r4,4008c18 <__sfvwrite_r+0x250>
 4008c0c:	80c00217 	ldw	r3,8(r16)
 4008c10:	38c7883a 	add	r3,r7,r3
 4008c14:	1d801816 	blt	r3,r22,4008c78 <__sfvwrite_r+0x2b0>
 4008c18:	b1c03e16 	blt	r22,r7,4008d14 <__sfvwrite_r+0x34c>
 4008c1c:	80800917 	ldw	r2,36(r16)
 4008c20:	81400717 	ldw	r5,28(r16)
 4008c24:	e00d883a 	mov	r6,fp
 4008c28:	da000115 	stw	r8,4(sp)
 4008c2c:	a809883a 	mov	r4,r21
 4008c30:	103ee83a 	callr	r2
 4008c34:	102f883a 	mov	r23,r2
 4008c38:	da000117 	ldw	r8,4(sp)
 4008c3c:	00bfe00e 	bge	zero,r2,4008bc0 <__alt_data_end+0xfc008bc0>
 4008c40:	9de7c83a 	sub	r19,r19,r23
 4008c44:	98001f26 	beq	r19,zero,4008cc4 <__sfvwrite_r+0x2fc>
 4008c48:	a0800217 	ldw	r2,8(r20)
 4008c4c:	e5f9883a 	add	fp,fp,r23
 4008c50:	95e5c83a 	sub	r18,r18,r23
 4008c54:	15efc83a 	sub	r23,r2,r23
 4008c58:	a5c00215 	stw	r23,8(r20)
 4008c5c:	b83f8726 	beq	r23,zero,4008a7c <__alt_data_end+0xfc008a7c>
 4008c60:	903fe11e 	bne	r18,zero,4008be8 <__alt_data_end+0xfc008be8>
 4008c64:	8f000017 	ldw	fp,0(r17)
 4008c68:	8c800117 	ldw	r18,4(r17)
 4008c6c:	0011883a 	mov	r8,zero
 4008c70:	8c400204 	addi	r17,r17,8
 4008c74:	003fdb06 	br	4008be4 <__alt_data_end+0xfc008be4>
 4008c78:	180d883a 	mov	r6,r3
 4008c7c:	e00b883a 	mov	r5,fp
 4008c80:	da000115 	stw	r8,4(sp)
 4008c84:	d8c00015 	stw	r3,0(sp)
 4008c88:	4008f380 	call	4008f38 <memmove>
 4008c8c:	d8c00017 	ldw	r3,0(sp)
 4008c90:	80800017 	ldw	r2,0(r16)
 4008c94:	800b883a 	mov	r5,r16
 4008c98:	a809883a 	mov	r4,r21
 4008c9c:	10c5883a 	add	r2,r2,r3
 4008ca0:	80800015 	stw	r2,0(r16)
 4008ca4:	d8c00015 	stw	r3,0(sp)
 4008ca8:	400434c0 	call	400434c <_fflush_r>
 4008cac:	d8c00017 	ldw	r3,0(sp)
 4008cb0:	da000117 	ldw	r8,4(sp)
 4008cb4:	103fc21e 	bne	r2,zero,4008bc0 <__alt_data_end+0xfc008bc0>
 4008cb8:	182f883a 	mov	r23,r3
 4008cbc:	9de7c83a 	sub	r19,r19,r23
 4008cc0:	983fe11e 	bne	r19,zero,4008c48 <__alt_data_end+0xfc008c48>
 4008cc4:	800b883a 	mov	r5,r16
 4008cc8:	a809883a 	mov	r4,r21
 4008ccc:	400434c0 	call	400434c <_fflush_r>
 4008cd0:	103fbb1e 	bne	r2,zero,4008bc0 <__alt_data_end+0xfc008bc0>
 4008cd4:	0011883a 	mov	r8,zero
 4008cd8:	003fdb06 	br	4008c48 <__alt_data_end+0xfc008c48>
 4008cdc:	94c0012e 	bgeu	r18,r19,4008ce4 <__sfvwrite_r+0x31c>
 4008ce0:	9027883a 	mov	r19,r18
 4008ce4:	980d883a 	mov	r6,r19
 4008ce8:	e00b883a 	mov	r5,fp
 4008cec:	4008f380 	call	4008f38 <memmove>
 4008cf0:	80800217 	ldw	r2,8(r16)
 4008cf4:	80c00017 	ldw	r3,0(r16)
 4008cf8:	14c5c83a 	sub	r2,r2,r19
 4008cfc:	1cc7883a 	add	r3,r3,r19
 4008d00:	80800215 	stw	r2,8(r16)
 4008d04:	80c00015 	stw	r3,0(r16)
 4008d08:	10004326 	beq	r2,zero,4008e18 <__sfvwrite_r+0x450>
 4008d0c:	9805883a 	mov	r2,r19
 4008d10:	003f8606 	br	4008b2c <__alt_data_end+0xfc008b2c>
 4008d14:	b00d883a 	mov	r6,r22
 4008d18:	e00b883a 	mov	r5,fp
 4008d1c:	da000115 	stw	r8,4(sp)
 4008d20:	4008f380 	call	4008f38 <memmove>
 4008d24:	80800217 	ldw	r2,8(r16)
 4008d28:	80c00017 	ldw	r3,0(r16)
 4008d2c:	da000117 	ldw	r8,4(sp)
 4008d30:	1585c83a 	sub	r2,r2,r22
 4008d34:	1dad883a 	add	r22,r3,r22
 4008d38:	80800215 	stw	r2,8(r16)
 4008d3c:	85800015 	stw	r22,0(r16)
 4008d40:	003fbf06 	br	4008c40 <__alt_data_end+0xfc008c40>
 4008d44:	81000017 	ldw	r4,0(r16)
 4008d48:	9027883a 	mov	r19,r18
 4008d4c:	902f883a 	mov	r23,r18
 4008d50:	003f6c06 	br	4008b04 <__alt_data_end+0xfc008b04>
 4008d54:	900d883a 	mov	r6,r18
 4008d58:	01400284 	movi	r5,10
 4008d5c:	e009883a 	mov	r4,fp
 4008d60:	40057d80 	call	40057d8 <memchr>
 4008d64:	10003e26 	beq	r2,zero,4008e60 <__sfvwrite_r+0x498>
 4008d68:	10800044 	addi	r2,r2,1
 4008d6c:	1727c83a 	sub	r19,r2,fp
 4008d70:	02000044 	movi	r8,1
 4008d74:	003f9d06 	br	4008bec <__alt_data_end+0xfc008bec>
 4008d78:	80800517 	ldw	r2,20(r16)
 4008d7c:	81400417 	ldw	r5,16(r16)
 4008d80:	81c00017 	ldw	r7,0(r16)
 4008d84:	10a7883a 	add	r19,r2,r2
 4008d88:	9885883a 	add	r2,r19,r2
 4008d8c:	1026d7fa 	srli	r19,r2,31
 4008d90:	396dc83a 	sub	r22,r7,r5
 4008d94:	b1000044 	addi	r4,r22,1
 4008d98:	9885883a 	add	r2,r19,r2
 4008d9c:	1027d07a 	srai	r19,r2,1
 4008da0:	2485883a 	add	r2,r4,r18
 4008da4:	980d883a 	mov	r6,r19
 4008da8:	9880022e 	bgeu	r19,r2,4008db4 <__sfvwrite_r+0x3ec>
 4008dac:	1027883a 	mov	r19,r2
 4008db0:	100d883a 	mov	r6,r2
 4008db4:	18c1000c 	andi	r3,r3,1024
 4008db8:	18001c26 	beq	r3,zero,4008e2c <__sfvwrite_r+0x464>
 4008dbc:	300b883a 	mov	r5,r6
 4008dc0:	a809883a 	mov	r4,r21
 4008dc4:	4004fcc0 	call	4004fcc <_malloc_r>
 4008dc8:	102f883a 	mov	r23,r2
 4008dcc:	10002926 	beq	r2,zero,4008e74 <__sfvwrite_r+0x4ac>
 4008dd0:	81400417 	ldw	r5,16(r16)
 4008dd4:	b00d883a 	mov	r6,r22
 4008dd8:	1009883a 	mov	r4,r2
 4008ddc:	40058bc0 	call	40058bc <memcpy>
 4008de0:	8080030b 	ldhu	r2,12(r16)
 4008de4:	00fedfc4 	movi	r3,-1153
 4008de8:	10c4703a 	and	r2,r2,r3
 4008dec:	10802014 	ori	r2,r2,128
 4008df0:	8080030d 	sth	r2,12(r16)
 4008df4:	bd89883a 	add	r4,r23,r22
 4008df8:	9d8fc83a 	sub	r7,r19,r22
 4008dfc:	85c00415 	stw	r23,16(r16)
 4008e00:	84c00515 	stw	r19,20(r16)
 4008e04:	81000015 	stw	r4,0(r16)
 4008e08:	9027883a 	mov	r19,r18
 4008e0c:	81c00215 	stw	r7,8(r16)
 4008e10:	902f883a 	mov	r23,r18
 4008e14:	003f3b06 	br	4008b04 <__alt_data_end+0xfc008b04>
 4008e18:	800b883a 	mov	r5,r16
 4008e1c:	a809883a 	mov	r4,r21
 4008e20:	400434c0 	call	400434c <_fflush_r>
 4008e24:	103fb926 	beq	r2,zero,4008d0c <__alt_data_end+0xfc008d0c>
 4008e28:	003f6506 	br	4008bc0 <__alt_data_end+0xfc008bc0>
 4008e2c:	a809883a 	mov	r4,r21
 4008e30:	40090f40 	call	40090f4 <_realloc_r>
 4008e34:	102f883a 	mov	r23,r2
 4008e38:	103fee1e 	bne	r2,zero,4008df4 <__alt_data_end+0xfc008df4>
 4008e3c:	81400417 	ldw	r5,16(r16)
 4008e40:	a809883a 	mov	r4,r21
 4008e44:	400489c0 	call	400489c <_free_r>
 4008e48:	8080030b 	ldhu	r2,12(r16)
 4008e4c:	00ffdfc4 	movi	r3,-129
 4008e50:	1884703a 	and	r2,r3,r2
 4008e54:	00c00304 	movi	r3,12
 4008e58:	a8c00015 	stw	r3,0(r21)
 4008e5c:	003f5906 	br	4008bc4 <__alt_data_end+0xfc008bc4>
 4008e60:	94c00044 	addi	r19,r18,1
 4008e64:	02000044 	movi	r8,1
 4008e68:	003f6006 	br	4008bec <__alt_data_end+0xfc008bec>
 4008e6c:	00bfffc4 	movi	r2,-1
 4008e70:	003f0306 	br	4008a80 <__alt_data_end+0xfc008a80>
 4008e74:	00800304 	movi	r2,12
 4008e78:	a8800015 	stw	r2,0(r21)
 4008e7c:	8080030b 	ldhu	r2,12(r16)
 4008e80:	003f5006 	br	4008bc4 <__alt_data_end+0xfc008bc4>

04008e84 <_isatty_r>:
 4008e84:	defffd04 	addi	sp,sp,-12
 4008e88:	dc000015 	stw	r16,0(sp)
 4008e8c:	04010074 	movhi	r16,1025
 4008e90:	dc400115 	stw	r17,4(sp)
 4008e94:	840ef804 	addi	r16,r16,15328
 4008e98:	2023883a 	mov	r17,r4
 4008e9c:	2809883a 	mov	r4,r5
 4008ea0:	dfc00215 	stw	ra,8(sp)
 4008ea4:	80000015 	stw	zero,0(r16)
 4008ea8:	400cf000 	call	400cf00 <isatty>
 4008eac:	00ffffc4 	movi	r3,-1
 4008eb0:	10c00526 	beq	r2,r3,4008ec8 <_isatty_r+0x44>
 4008eb4:	dfc00217 	ldw	ra,8(sp)
 4008eb8:	dc400117 	ldw	r17,4(sp)
 4008ebc:	dc000017 	ldw	r16,0(sp)
 4008ec0:	dec00304 	addi	sp,sp,12
 4008ec4:	f800283a 	ret
 4008ec8:	80c00017 	ldw	r3,0(r16)
 4008ecc:	183ff926 	beq	r3,zero,4008eb4 <__alt_data_end+0xfc008eb4>
 4008ed0:	88c00015 	stw	r3,0(r17)
 4008ed4:	003ff706 	br	4008eb4 <__alt_data_end+0xfc008eb4>

04008ed8 <_lseek_r>:
 4008ed8:	defffd04 	addi	sp,sp,-12
 4008edc:	2805883a 	mov	r2,r5
 4008ee0:	dc000015 	stw	r16,0(sp)
 4008ee4:	04010074 	movhi	r16,1025
 4008ee8:	dc400115 	stw	r17,4(sp)
 4008eec:	300b883a 	mov	r5,r6
 4008ef0:	840ef804 	addi	r16,r16,15328
 4008ef4:	2023883a 	mov	r17,r4
 4008ef8:	380d883a 	mov	r6,r7
 4008efc:	1009883a 	mov	r4,r2
 4008f00:	dfc00215 	stw	ra,8(sp)
 4008f04:	80000015 	stw	zero,0(r16)
 4008f08:	400d0e00 	call	400d0e0 <lseek>
 4008f0c:	00ffffc4 	movi	r3,-1
 4008f10:	10c00526 	beq	r2,r3,4008f28 <_lseek_r+0x50>
 4008f14:	dfc00217 	ldw	ra,8(sp)
 4008f18:	dc400117 	ldw	r17,4(sp)
 4008f1c:	dc000017 	ldw	r16,0(sp)
 4008f20:	dec00304 	addi	sp,sp,12
 4008f24:	f800283a 	ret
 4008f28:	80c00017 	ldw	r3,0(r16)
 4008f2c:	183ff926 	beq	r3,zero,4008f14 <__alt_data_end+0xfc008f14>
 4008f30:	88c00015 	stw	r3,0(r17)
 4008f34:	003ff706 	br	4008f14 <__alt_data_end+0xfc008f14>

04008f38 <memmove>:
 4008f38:	2005883a 	mov	r2,r4
 4008f3c:	29000b2e 	bgeu	r5,r4,4008f6c <memmove+0x34>
 4008f40:	298f883a 	add	r7,r5,r6
 4008f44:	21c0092e 	bgeu	r4,r7,4008f6c <memmove+0x34>
 4008f48:	2187883a 	add	r3,r4,r6
 4008f4c:	198bc83a 	sub	r5,r3,r6
 4008f50:	30004826 	beq	r6,zero,4009074 <memmove+0x13c>
 4008f54:	39ffffc4 	addi	r7,r7,-1
 4008f58:	39000003 	ldbu	r4,0(r7)
 4008f5c:	18ffffc4 	addi	r3,r3,-1
 4008f60:	19000005 	stb	r4,0(r3)
 4008f64:	28fffb1e 	bne	r5,r3,4008f54 <__alt_data_end+0xfc008f54>
 4008f68:	f800283a 	ret
 4008f6c:	00c003c4 	movi	r3,15
 4008f70:	1980412e 	bgeu	r3,r6,4009078 <memmove+0x140>
 4008f74:	2886b03a 	or	r3,r5,r2
 4008f78:	18c000cc 	andi	r3,r3,3
 4008f7c:	1800401e 	bne	r3,zero,4009080 <memmove+0x148>
 4008f80:	33fffc04 	addi	r15,r6,-16
 4008f84:	781ed13a 	srli	r15,r15,4
 4008f88:	28c00104 	addi	r3,r5,4
 4008f8c:	13400104 	addi	r13,r2,4
 4008f90:	781c913a 	slli	r14,r15,4
 4008f94:	2b000204 	addi	r12,r5,8
 4008f98:	12c00204 	addi	r11,r2,8
 4008f9c:	73800504 	addi	r14,r14,20
 4008fa0:	2a800304 	addi	r10,r5,12
 4008fa4:	12400304 	addi	r9,r2,12
 4008fa8:	2b9d883a 	add	r14,r5,r14
 4008fac:	2811883a 	mov	r8,r5
 4008fb0:	100f883a 	mov	r7,r2
 4008fb4:	41000017 	ldw	r4,0(r8)
 4008fb8:	39c00404 	addi	r7,r7,16
 4008fbc:	18c00404 	addi	r3,r3,16
 4008fc0:	393ffc15 	stw	r4,-16(r7)
 4008fc4:	193ffc17 	ldw	r4,-16(r3)
 4008fc8:	6b400404 	addi	r13,r13,16
 4008fcc:	5ac00404 	addi	r11,r11,16
 4008fd0:	693ffc15 	stw	r4,-16(r13)
 4008fd4:	61000017 	ldw	r4,0(r12)
 4008fd8:	4a400404 	addi	r9,r9,16
 4008fdc:	42000404 	addi	r8,r8,16
 4008fe0:	593ffc15 	stw	r4,-16(r11)
 4008fe4:	51000017 	ldw	r4,0(r10)
 4008fe8:	63000404 	addi	r12,r12,16
 4008fec:	52800404 	addi	r10,r10,16
 4008ff0:	493ffc15 	stw	r4,-16(r9)
 4008ff4:	1bbfef1e 	bne	r3,r14,4008fb4 <__alt_data_end+0xfc008fb4>
 4008ff8:	79000044 	addi	r4,r15,1
 4008ffc:	2008913a 	slli	r4,r4,4
 4009000:	328003cc 	andi	r10,r6,15
 4009004:	02c000c4 	movi	r11,3
 4009008:	1107883a 	add	r3,r2,r4
 400900c:	290b883a 	add	r5,r5,r4
 4009010:	5a801e2e 	bgeu	r11,r10,400908c <memmove+0x154>
 4009014:	1813883a 	mov	r9,r3
 4009018:	2811883a 	mov	r8,r5
 400901c:	500f883a 	mov	r7,r10
 4009020:	41000017 	ldw	r4,0(r8)
 4009024:	4a400104 	addi	r9,r9,4
 4009028:	39ffff04 	addi	r7,r7,-4
 400902c:	493fff15 	stw	r4,-4(r9)
 4009030:	42000104 	addi	r8,r8,4
 4009034:	59fffa36 	bltu	r11,r7,4009020 <__alt_data_end+0xfc009020>
 4009038:	513fff04 	addi	r4,r10,-4
 400903c:	2008d0ba 	srli	r4,r4,2
 4009040:	318000cc 	andi	r6,r6,3
 4009044:	21000044 	addi	r4,r4,1
 4009048:	2109883a 	add	r4,r4,r4
 400904c:	2109883a 	add	r4,r4,r4
 4009050:	1907883a 	add	r3,r3,r4
 4009054:	290b883a 	add	r5,r5,r4
 4009058:	30000b26 	beq	r6,zero,4009088 <memmove+0x150>
 400905c:	198d883a 	add	r6,r3,r6
 4009060:	29c00003 	ldbu	r7,0(r5)
 4009064:	18c00044 	addi	r3,r3,1
 4009068:	29400044 	addi	r5,r5,1
 400906c:	19ffffc5 	stb	r7,-1(r3)
 4009070:	19bffb1e 	bne	r3,r6,4009060 <__alt_data_end+0xfc009060>
 4009074:	f800283a 	ret
 4009078:	1007883a 	mov	r3,r2
 400907c:	003ff606 	br	4009058 <__alt_data_end+0xfc009058>
 4009080:	1007883a 	mov	r3,r2
 4009084:	003ff506 	br	400905c <__alt_data_end+0xfc00905c>
 4009088:	f800283a 	ret
 400908c:	500d883a 	mov	r6,r10
 4009090:	003ff106 	br	4009058 <__alt_data_end+0xfc009058>

04009094 <_read_r>:
 4009094:	defffd04 	addi	sp,sp,-12
 4009098:	2805883a 	mov	r2,r5
 400909c:	dc000015 	stw	r16,0(sp)
 40090a0:	04010074 	movhi	r16,1025
 40090a4:	dc400115 	stw	r17,4(sp)
 40090a8:	300b883a 	mov	r5,r6
 40090ac:	840ef804 	addi	r16,r16,15328
 40090b0:	2023883a 	mov	r17,r4
 40090b4:	380d883a 	mov	r6,r7
 40090b8:	1009883a 	mov	r4,r2
 40090bc:	dfc00215 	stw	ra,8(sp)
 40090c0:	80000015 	stw	zero,0(r16)
 40090c4:	400d2c80 	call	400d2c8 <read>
 40090c8:	00ffffc4 	movi	r3,-1
 40090cc:	10c00526 	beq	r2,r3,40090e4 <_read_r+0x50>
 40090d0:	dfc00217 	ldw	ra,8(sp)
 40090d4:	dc400117 	ldw	r17,4(sp)
 40090d8:	dc000017 	ldw	r16,0(sp)
 40090dc:	dec00304 	addi	sp,sp,12
 40090e0:	f800283a 	ret
 40090e4:	80c00017 	ldw	r3,0(r16)
 40090e8:	183ff926 	beq	r3,zero,40090d0 <__alt_data_end+0xfc0090d0>
 40090ec:	88c00015 	stw	r3,0(r17)
 40090f0:	003ff706 	br	40090d0 <__alt_data_end+0xfc0090d0>

040090f4 <_realloc_r>:
 40090f4:	defff604 	addi	sp,sp,-40
 40090f8:	dc400115 	stw	r17,4(sp)
 40090fc:	dfc00915 	stw	ra,36(sp)
 4009100:	df000815 	stw	fp,32(sp)
 4009104:	ddc00715 	stw	r23,28(sp)
 4009108:	dd800615 	stw	r22,24(sp)
 400910c:	dd400515 	stw	r21,20(sp)
 4009110:	dd000415 	stw	r20,16(sp)
 4009114:	dcc00315 	stw	r19,12(sp)
 4009118:	dc800215 	stw	r18,8(sp)
 400911c:	dc000015 	stw	r16,0(sp)
 4009120:	3023883a 	mov	r17,r6
 4009124:	2800b626 	beq	r5,zero,4009400 <_realloc_r+0x30c>
 4009128:	2829883a 	mov	r20,r5
 400912c:	2025883a 	mov	r18,r4
 4009130:	400d2300 	call	400d230 <__malloc_lock>
 4009134:	a0ffff17 	ldw	r3,-4(r20)
 4009138:	043fff04 	movi	r16,-4
 400913c:	888002c4 	addi	r2,r17,11
 4009140:	01000584 	movi	r4,22
 4009144:	a57ffe04 	addi	r21,r20,-8
 4009148:	1c20703a 	and	r16,r3,r16
 400914c:	2080332e 	bgeu	r4,r2,400921c <_realloc_r+0x128>
 4009150:	05bffe04 	movi	r22,-8
 4009154:	15ac703a 	and	r22,r2,r22
 4009158:	b005883a 	mov	r2,r22
 400915c:	b0005716 	blt	r22,zero,40092bc <_realloc_r+0x1c8>
 4009160:	b4405636 	bltu	r22,r17,40092bc <_realloc_r+0x1c8>
 4009164:	8080300e 	bge	r16,r2,4009228 <_realloc_r+0x134>
 4009168:	07010074 	movhi	fp,1025
 400916c:	e7026404 	addi	fp,fp,2448
 4009170:	e2000217 	ldw	r8,8(fp)
 4009174:	ac09883a 	add	r4,r21,r16
 4009178:	22006126 	beq	r4,r8,4009300 <_realloc_r+0x20c>
 400917c:	22400117 	ldw	r9,4(r4)
 4009180:	01ffff84 	movi	r7,-2
 4009184:	49ce703a 	and	r7,r9,r7
 4009188:	21cf883a 	add	r7,r4,r7
 400918c:	39800117 	ldw	r6,4(r7)
 4009190:	3180004c 	andi	r6,r6,1
 4009194:	30003e26 	beq	r6,zero,4009290 <_realloc_r+0x19c>
 4009198:	18c0004c 	andi	r3,r3,1
 400919c:	18008126 	beq	r3,zero,40093a4 <_realloc_r+0x2b0>
 40091a0:	880b883a 	mov	r5,r17
 40091a4:	9009883a 	mov	r4,r18
 40091a8:	4004fcc0 	call	4004fcc <_malloc_r>
 40091ac:	1023883a 	mov	r17,r2
 40091b0:	10011e26 	beq	r2,zero,400962c <_realloc_r+0x538>
 40091b4:	a0ffff17 	ldw	r3,-4(r20)
 40091b8:	113ffe04 	addi	r4,r2,-8
 40091bc:	00bfff84 	movi	r2,-2
 40091c0:	1884703a 	and	r2,r3,r2
 40091c4:	a885883a 	add	r2,r21,r2
 40091c8:	2080ee26 	beq	r4,r2,4009584 <_realloc_r+0x490>
 40091cc:	81bfff04 	addi	r6,r16,-4
 40091d0:	00800904 	movi	r2,36
 40091d4:	1180b836 	bltu	r2,r6,40094b8 <_realloc_r+0x3c4>
 40091d8:	00c004c4 	movi	r3,19
 40091dc:	19809536 	bltu	r3,r6,4009434 <_realloc_r+0x340>
 40091e0:	8805883a 	mov	r2,r17
 40091e4:	a007883a 	mov	r3,r20
 40091e8:	19000017 	ldw	r4,0(r3)
 40091ec:	11000015 	stw	r4,0(r2)
 40091f0:	19000117 	ldw	r4,4(r3)
 40091f4:	11000115 	stw	r4,4(r2)
 40091f8:	18c00217 	ldw	r3,8(r3)
 40091fc:	10c00215 	stw	r3,8(r2)
 4009200:	a00b883a 	mov	r5,r20
 4009204:	9009883a 	mov	r4,r18
 4009208:	400489c0 	call	400489c <_free_r>
 400920c:	9009883a 	mov	r4,r18
 4009210:	400d2540 	call	400d254 <__malloc_unlock>
 4009214:	8805883a 	mov	r2,r17
 4009218:	00001106 	br	4009260 <_realloc_r+0x16c>
 400921c:	00800404 	movi	r2,16
 4009220:	102d883a 	mov	r22,r2
 4009224:	003fce06 	br	4009160 <__alt_data_end+0xfc009160>
 4009228:	a023883a 	mov	r17,r20
 400922c:	858fc83a 	sub	r7,r16,r22
 4009230:	008003c4 	movi	r2,15
 4009234:	18c0004c 	andi	r3,r3,1
 4009238:	11c02436 	bltu	r2,r7,40092cc <_realloc_r+0x1d8>
 400923c:	1c06b03a 	or	r3,r3,r16
 4009240:	a8c00115 	stw	r3,4(r21)
 4009244:	ac21883a 	add	r16,r21,r16
 4009248:	80800117 	ldw	r2,4(r16)
 400924c:	10800054 	ori	r2,r2,1
 4009250:	80800115 	stw	r2,4(r16)
 4009254:	9009883a 	mov	r4,r18
 4009258:	400d2540 	call	400d254 <__malloc_unlock>
 400925c:	8805883a 	mov	r2,r17
 4009260:	dfc00917 	ldw	ra,36(sp)
 4009264:	df000817 	ldw	fp,32(sp)
 4009268:	ddc00717 	ldw	r23,28(sp)
 400926c:	dd800617 	ldw	r22,24(sp)
 4009270:	dd400517 	ldw	r21,20(sp)
 4009274:	dd000417 	ldw	r20,16(sp)
 4009278:	dcc00317 	ldw	r19,12(sp)
 400927c:	dc800217 	ldw	r18,8(sp)
 4009280:	dc400117 	ldw	r17,4(sp)
 4009284:	dc000017 	ldw	r16,0(sp)
 4009288:	dec00a04 	addi	sp,sp,40
 400928c:	f800283a 	ret
 4009290:	017fff04 	movi	r5,-4
 4009294:	494a703a 	and	r5,r9,r5
 4009298:	814d883a 	add	r6,r16,r5
 400929c:	30801e16 	blt	r6,r2,4009318 <_realloc_r+0x224>
 40092a0:	20800317 	ldw	r2,12(r4)
 40092a4:	21000217 	ldw	r4,8(r4)
 40092a8:	a023883a 	mov	r17,r20
 40092ac:	3021883a 	mov	r16,r6
 40092b0:	20800315 	stw	r2,12(r4)
 40092b4:	11000215 	stw	r4,8(r2)
 40092b8:	003fdc06 	br	400922c <__alt_data_end+0xfc00922c>
 40092bc:	00800304 	movi	r2,12
 40092c0:	90800015 	stw	r2,0(r18)
 40092c4:	0005883a 	mov	r2,zero
 40092c8:	003fe506 	br	4009260 <__alt_data_end+0xfc009260>
 40092cc:	1d86b03a 	or	r3,r3,r22
 40092d0:	a8c00115 	stw	r3,4(r21)
 40092d4:	ad8b883a 	add	r5,r21,r22
 40092d8:	38c00054 	ori	r3,r7,1
 40092dc:	28c00115 	stw	r3,4(r5)
 40092e0:	29cf883a 	add	r7,r5,r7
 40092e4:	38c00117 	ldw	r3,4(r7)
 40092e8:	29400204 	addi	r5,r5,8
 40092ec:	9009883a 	mov	r4,r18
 40092f0:	18800054 	ori	r2,r3,1
 40092f4:	38800115 	stw	r2,4(r7)
 40092f8:	400489c0 	call	400489c <_free_r>
 40092fc:	003fd506 	br	4009254 <__alt_data_end+0xfc009254>
 4009300:	21c00117 	ldw	r7,4(r4)
 4009304:	017fff04 	movi	r5,-4
 4009308:	b1800404 	addi	r6,r22,16
 400930c:	394a703a 	and	r5,r7,r5
 4009310:	814f883a 	add	r7,r16,r5
 4009314:	39805b0e 	bge	r7,r6,4009484 <_realloc_r+0x390>
 4009318:	18c0004c 	andi	r3,r3,1
 400931c:	183fa01e 	bne	r3,zero,40091a0 <__alt_data_end+0xfc0091a0>
 4009320:	a4fffe17 	ldw	r19,-8(r20)
 4009324:	00ffff04 	movi	r3,-4
 4009328:	ace7c83a 	sub	r19,r21,r19
 400932c:	99800117 	ldw	r6,4(r19)
 4009330:	30c6703a 	and	r3,r6,r3
 4009334:	20002026 	beq	r4,zero,40093b8 <_realloc_r+0x2c4>
 4009338:	80ef883a 	add	r23,r16,r3
 400933c:	b96f883a 	add	r23,r23,r5
 4009340:	22006126 	beq	r4,r8,40094c8 <_realloc_r+0x3d4>
 4009344:	b8801c16 	blt	r23,r2,40093b8 <_realloc_r+0x2c4>
 4009348:	20800317 	ldw	r2,12(r4)
 400934c:	20c00217 	ldw	r3,8(r4)
 4009350:	81bfff04 	addi	r6,r16,-4
 4009354:	01000904 	movi	r4,36
 4009358:	18800315 	stw	r2,12(r3)
 400935c:	10c00215 	stw	r3,8(r2)
 4009360:	98c00217 	ldw	r3,8(r19)
 4009364:	98800317 	ldw	r2,12(r19)
 4009368:	9c400204 	addi	r17,r19,8
 400936c:	18800315 	stw	r2,12(r3)
 4009370:	10c00215 	stw	r3,8(r2)
 4009374:	21801b36 	bltu	r4,r6,40093e4 <_realloc_r+0x2f0>
 4009378:	008004c4 	movi	r2,19
 400937c:	1180362e 	bgeu	r2,r6,4009458 <_realloc_r+0x364>
 4009380:	a0800017 	ldw	r2,0(r20)
 4009384:	98800215 	stw	r2,8(r19)
 4009388:	a0800117 	ldw	r2,4(r20)
 400938c:	98800315 	stw	r2,12(r19)
 4009390:	008006c4 	movi	r2,27
 4009394:	11808136 	bltu	r2,r6,400959c <_realloc_r+0x4a8>
 4009398:	98800404 	addi	r2,r19,16
 400939c:	a5000204 	addi	r20,r20,8
 40093a0:	00002e06 	br	400945c <_realloc_r+0x368>
 40093a4:	a4fffe17 	ldw	r19,-8(r20)
 40093a8:	00ffff04 	movi	r3,-4
 40093ac:	ace7c83a 	sub	r19,r21,r19
 40093b0:	99000117 	ldw	r4,4(r19)
 40093b4:	20c6703a 	and	r3,r4,r3
 40093b8:	983f7926 	beq	r19,zero,40091a0 <__alt_data_end+0xfc0091a0>
 40093bc:	80ef883a 	add	r23,r16,r3
 40093c0:	b8bf7716 	blt	r23,r2,40091a0 <__alt_data_end+0xfc0091a0>
 40093c4:	98800317 	ldw	r2,12(r19)
 40093c8:	98c00217 	ldw	r3,8(r19)
 40093cc:	81bfff04 	addi	r6,r16,-4
 40093d0:	01000904 	movi	r4,36
 40093d4:	18800315 	stw	r2,12(r3)
 40093d8:	10c00215 	stw	r3,8(r2)
 40093dc:	9c400204 	addi	r17,r19,8
 40093e0:	21bfe52e 	bgeu	r4,r6,4009378 <__alt_data_end+0xfc009378>
 40093e4:	a00b883a 	mov	r5,r20
 40093e8:	8809883a 	mov	r4,r17
 40093ec:	4008f380 	call	4008f38 <memmove>
 40093f0:	98c00117 	ldw	r3,4(r19)
 40093f4:	b821883a 	mov	r16,r23
 40093f8:	982b883a 	mov	r21,r19
 40093fc:	003f8b06 	br	400922c <__alt_data_end+0xfc00922c>
 4009400:	300b883a 	mov	r5,r6
 4009404:	dfc00917 	ldw	ra,36(sp)
 4009408:	df000817 	ldw	fp,32(sp)
 400940c:	ddc00717 	ldw	r23,28(sp)
 4009410:	dd800617 	ldw	r22,24(sp)
 4009414:	dd400517 	ldw	r21,20(sp)
 4009418:	dd000417 	ldw	r20,16(sp)
 400941c:	dcc00317 	ldw	r19,12(sp)
 4009420:	dc800217 	ldw	r18,8(sp)
 4009424:	dc400117 	ldw	r17,4(sp)
 4009428:	dc000017 	ldw	r16,0(sp)
 400942c:	dec00a04 	addi	sp,sp,40
 4009430:	4004fcc1 	jmpi	4004fcc <_malloc_r>
 4009434:	a0c00017 	ldw	r3,0(r20)
 4009438:	88c00015 	stw	r3,0(r17)
 400943c:	a0c00117 	ldw	r3,4(r20)
 4009440:	88c00115 	stw	r3,4(r17)
 4009444:	00c006c4 	movi	r3,27
 4009448:	19804636 	bltu	r3,r6,4009564 <_realloc_r+0x470>
 400944c:	88800204 	addi	r2,r17,8
 4009450:	a0c00204 	addi	r3,r20,8
 4009454:	003f6406 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009458:	8805883a 	mov	r2,r17
 400945c:	a0c00017 	ldw	r3,0(r20)
 4009460:	b821883a 	mov	r16,r23
 4009464:	982b883a 	mov	r21,r19
 4009468:	10c00015 	stw	r3,0(r2)
 400946c:	a0c00117 	ldw	r3,4(r20)
 4009470:	10c00115 	stw	r3,4(r2)
 4009474:	a0c00217 	ldw	r3,8(r20)
 4009478:	10c00215 	stw	r3,8(r2)
 400947c:	98c00117 	ldw	r3,4(r19)
 4009480:	003f6a06 	br	400922c <__alt_data_end+0xfc00922c>
 4009484:	adab883a 	add	r21,r21,r22
 4009488:	3d85c83a 	sub	r2,r7,r22
 400948c:	e5400215 	stw	r21,8(fp)
 4009490:	10800054 	ori	r2,r2,1
 4009494:	a8800115 	stw	r2,4(r21)
 4009498:	a0bfff17 	ldw	r2,-4(r20)
 400949c:	9009883a 	mov	r4,r18
 40094a0:	1080004c 	andi	r2,r2,1
 40094a4:	1584b03a 	or	r2,r2,r22
 40094a8:	a0bfff15 	stw	r2,-4(r20)
 40094ac:	400d2540 	call	400d254 <__malloc_unlock>
 40094b0:	a005883a 	mov	r2,r20
 40094b4:	003f6a06 	br	4009260 <__alt_data_end+0xfc009260>
 40094b8:	a00b883a 	mov	r5,r20
 40094bc:	8809883a 	mov	r4,r17
 40094c0:	4008f380 	call	4008f38 <memmove>
 40094c4:	003f4e06 	br	4009200 <__alt_data_end+0xfc009200>
 40094c8:	b1000404 	addi	r4,r22,16
 40094cc:	b93fba16 	blt	r23,r4,40093b8 <__alt_data_end+0xfc0093b8>
 40094d0:	98800317 	ldw	r2,12(r19)
 40094d4:	98c00217 	ldw	r3,8(r19)
 40094d8:	81bfff04 	addi	r6,r16,-4
 40094dc:	01000904 	movi	r4,36
 40094e0:	18800315 	stw	r2,12(r3)
 40094e4:	10c00215 	stw	r3,8(r2)
 40094e8:	9c400204 	addi	r17,r19,8
 40094ec:	21804336 	bltu	r4,r6,40095fc <_realloc_r+0x508>
 40094f0:	008004c4 	movi	r2,19
 40094f4:	11803f2e 	bgeu	r2,r6,40095f4 <_realloc_r+0x500>
 40094f8:	a0800017 	ldw	r2,0(r20)
 40094fc:	98800215 	stw	r2,8(r19)
 4009500:	a0800117 	ldw	r2,4(r20)
 4009504:	98800315 	stw	r2,12(r19)
 4009508:	008006c4 	movi	r2,27
 400950c:	11803f36 	bltu	r2,r6,400960c <_realloc_r+0x518>
 4009510:	98800404 	addi	r2,r19,16
 4009514:	a5000204 	addi	r20,r20,8
 4009518:	a0c00017 	ldw	r3,0(r20)
 400951c:	10c00015 	stw	r3,0(r2)
 4009520:	a0c00117 	ldw	r3,4(r20)
 4009524:	10c00115 	stw	r3,4(r2)
 4009528:	a0c00217 	ldw	r3,8(r20)
 400952c:	10c00215 	stw	r3,8(r2)
 4009530:	9d87883a 	add	r3,r19,r22
 4009534:	bd85c83a 	sub	r2,r23,r22
 4009538:	e0c00215 	stw	r3,8(fp)
 400953c:	10800054 	ori	r2,r2,1
 4009540:	18800115 	stw	r2,4(r3)
 4009544:	98800117 	ldw	r2,4(r19)
 4009548:	9009883a 	mov	r4,r18
 400954c:	1080004c 	andi	r2,r2,1
 4009550:	1584b03a 	or	r2,r2,r22
 4009554:	98800115 	stw	r2,4(r19)
 4009558:	400d2540 	call	400d254 <__malloc_unlock>
 400955c:	8805883a 	mov	r2,r17
 4009560:	003f3f06 	br	4009260 <__alt_data_end+0xfc009260>
 4009564:	a0c00217 	ldw	r3,8(r20)
 4009568:	88c00215 	stw	r3,8(r17)
 400956c:	a0c00317 	ldw	r3,12(r20)
 4009570:	88c00315 	stw	r3,12(r17)
 4009574:	30801126 	beq	r6,r2,40095bc <_realloc_r+0x4c8>
 4009578:	88800404 	addi	r2,r17,16
 400957c:	a0c00404 	addi	r3,r20,16
 4009580:	003f1906 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009584:	893fff17 	ldw	r4,-4(r17)
 4009588:	00bfff04 	movi	r2,-4
 400958c:	a023883a 	mov	r17,r20
 4009590:	2084703a 	and	r2,r4,r2
 4009594:	80a1883a 	add	r16,r16,r2
 4009598:	003f2406 	br	400922c <__alt_data_end+0xfc00922c>
 400959c:	a0800217 	ldw	r2,8(r20)
 40095a0:	98800415 	stw	r2,16(r19)
 40095a4:	a0800317 	ldw	r2,12(r20)
 40095a8:	98800515 	stw	r2,20(r19)
 40095ac:	31000a26 	beq	r6,r4,40095d8 <_realloc_r+0x4e4>
 40095b0:	98800604 	addi	r2,r19,24
 40095b4:	a5000404 	addi	r20,r20,16
 40095b8:	003fa806 	br	400945c <__alt_data_end+0xfc00945c>
 40095bc:	a1000417 	ldw	r4,16(r20)
 40095c0:	88800604 	addi	r2,r17,24
 40095c4:	a0c00604 	addi	r3,r20,24
 40095c8:	89000415 	stw	r4,16(r17)
 40095cc:	a1000517 	ldw	r4,20(r20)
 40095d0:	89000515 	stw	r4,20(r17)
 40095d4:	003f0406 	br	40091e8 <__alt_data_end+0xfc0091e8>
 40095d8:	a0c00417 	ldw	r3,16(r20)
 40095dc:	a5000604 	addi	r20,r20,24
 40095e0:	98800804 	addi	r2,r19,32
 40095e4:	98c00615 	stw	r3,24(r19)
 40095e8:	a0ffff17 	ldw	r3,-4(r20)
 40095ec:	98c00715 	stw	r3,28(r19)
 40095f0:	003f9a06 	br	400945c <__alt_data_end+0xfc00945c>
 40095f4:	8805883a 	mov	r2,r17
 40095f8:	003fc706 	br	4009518 <__alt_data_end+0xfc009518>
 40095fc:	a00b883a 	mov	r5,r20
 4009600:	8809883a 	mov	r4,r17
 4009604:	4008f380 	call	4008f38 <memmove>
 4009608:	003fc906 	br	4009530 <__alt_data_end+0xfc009530>
 400960c:	a0800217 	ldw	r2,8(r20)
 4009610:	98800415 	stw	r2,16(r19)
 4009614:	a0800317 	ldw	r2,12(r20)
 4009618:	98800515 	stw	r2,20(r19)
 400961c:	31000726 	beq	r6,r4,400963c <_realloc_r+0x548>
 4009620:	98800604 	addi	r2,r19,24
 4009624:	a5000404 	addi	r20,r20,16
 4009628:	003fbb06 	br	4009518 <__alt_data_end+0xfc009518>
 400962c:	9009883a 	mov	r4,r18
 4009630:	400d2540 	call	400d254 <__malloc_unlock>
 4009634:	0005883a 	mov	r2,zero
 4009638:	003f0906 	br	4009260 <__alt_data_end+0xfc009260>
 400963c:	a0c00417 	ldw	r3,16(r20)
 4009640:	a5000604 	addi	r20,r20,24
 4009644:	98800804 	addi	r2,r19,32
 4009648:	98c00615 	stw	r3,24(r19)
 400964c:	a0ffff17 	ldw	r3,-4(r20)
 4009650:	98c00715 	stw	r3,28(r19)
 4009654:	003fb006 	br	4009518 <__alt_data_end+0xfc009518>

04009658 <__swbuf_r>:
 4009658:	defffb04 	addi	sp,sp,-20
 400965c:	dcc00315 	stw	r19,12(sp)
 4009660:	dc800215 	stw	r18,8(sp)
 4009664:	dc000015 	stw	r16,0(sp)
 4009668:	dfc00415 	stw	ra,16(sp)
 400966c:	dc400115 	stw	r17,4(sp)
 4009670:	2025883a 	mov	r18,r4
 4009674:	2827883a 	mov	r19,r5
 4009678:	3021883a 	mov	r16,r6
 400967c:	20000226 	beq	r4,zero,4009688 <__swbuf_r+0x30>
 4009680:	20800e17 	ldw	r2,56(r4)
 4009684:	10004226 	beq	r2,zero,4009790 <__swbuf_r+0x138>
 4009688:	80800617 	ldw	r2,24(r16)
 400968c:	8100030b 	ldhu	r4,12(r16)
 4009690:	80800215 	stw	r2,8(r16)
 4009694:	2080020c 	andi	r2,r4,8
 4009698:	10003626 	beq	r2,zero,4009774 <__swbuf_r+0x11c>
 400969c:	80c00417 	ldw	r3,16(r16)
 40096a0:	18003426 	beq	r3,zero,4009774 <__swbuf_r+0x11c>
 40096a4:	2088000c 	andi	r2,r4,8192
 40096a8:	9c403fcc 	andi	r17,r19,255
 40096ac:	10001a26 	beq	r2,zero,4009718 <__swbuf_r+0xc0>
 40096b0:	80800017 	ldw	r2,0(r16)
 40096b4:	81000517 	ldw	r4,20(r16)
 40096b8:	10c7c83a 	sub	r3,r2,r3
 40096bc:	1900200e 	bge	r3,r4,4009740 <__swbuf_r+0xe8>
 40096c0:	18c00044 	addi	r3,r3,1
 40096c4:	81000217 	ldw	r4,8(r16)
 40096c8:	11400044 	addi	r5,r2,1
 40096cc:	81400015 	stw	r5,0(r16)
 40096d0:	213fffc4 	addi	r4,r4,-1
 40096d4:	81000215 	stw	r4,8(r16)
 40096d8:	14c00005 	stb	r19,0(r2)
 40096dc:	80800517 	ldw	r2,20(r16)
 40096e0:	10c01e26 	beq	r2,r3,400975c <__swbuf_r+0x104>
 40096e4:	8080030b 	ldhu	r2,12(r16)
 40096e8:	1080004c 	andi	r2,r2,1
 40096ec:	10000226 	beq	r2,zero,40096f8 <__swbuf_r+0xa0>
 40096f0:	00800284 	movi	r2,10
 40096f4:	88801926 	beq	r17,r2,400975c <__swbuf_r+0x104>
 40096f8:	8805883a 	mov	r2,r17
 40096fc:	dfc00417 	ldw	ra,16(sp)
 4009700:	dcc00317 	ldw	r19,12(sp)
 4009704:	dc800217 	ldw	r18,8(sp)
 4009708:	dc400117 	ldw	r17,4(sp)
 400970c:	dc000017 	ldw	r16,0(sp)
 4009710:	dec00504 	addi	sp,sp,20
 4009714:	f800283a 	ret
 4009718:	81401917 	ldw	r5,100(r16)
 400971c:	00b7ffc4 	movi	r2,-8193
 4009720:	21080014 	ori	r4,r4,8192
 4009724:	2884703a 	and	r2,r5,r2
 4009728:	80801915 	stw	r2,100(r16)
 400972c:	80800017 	ldw	r2,0(r16)
 4009730:	8100030d 	sth	r4,12(r16)
 4009734:	81000517 	ldw	r4,20(r16)
 4009738:	10c7c83a 	sub	r3,r2,r3
 400973c:	193fe016 	blt	r3,r4,40096c0 <__alt_data_end+0xfc0096c0>
 4009740:	800b883a 	mov	r5,r16
 4009744:	9009883a 	mov	r4,r18
 4009748:	400434c0 	call	400434c <_fflush_r>
 400974c:	1000071e 	bne	r2,zero,400976c <__swbuf_r+0x114>
 4009750:	80800017 	ldw	r2,0(r16)
 4009754:	00c00044 	movi	r3,1
 4009758:	003fda06 	br	40096c4 <__alt_data_end+0xfc0096c4>
 400975c:	800b883a 	mov	r5,r16
 4009760:	9009883a 	mov	r4,r18
 4009764:	400434c0 	call	400434c <_fflush_r>
 4009768:	103fe326 	beq	r2,zero,40096f8 <__alt_data_end+0xfc0096f8>
 400976c:	00bfffc4 	movi	r2,-1
 4009770:	003fe206 	br	40096fc <__alt_data_end+0xfc0096fc>
 4009774:	800b883a 	mov	r5,r16
 4009778:	9009883a 	mov	r4,r18
 400977c:	40027540 	call	4002754 <__swsetup_r>
 4009780:	103ffa1e 	bne	r2,zero,400976c <__alt_data_end+0xfc00976c>
 4009784:	8100030b 	ldhu	r4,12(r16)
 4009788:	80c00417 	ldw	r3,16(r16)
 400978c:	003fc506 	br	40096a4 <__alt_data_end+0xfc0096a4>
 4009790:	40047280 	call	4004728 <__sinit>
 4009794:	003fbc06 	br	4009688 <__alt_data_end+0xfc009688>

04009798 <__swbuf>:
 4009798:	00810074 	movhi	r2,1025
 400979c:	10880304 	addi	r2,r2,8204
 40097a0:	280d883a 	mov	r6,r5
 40097a4:	200b883a 	mov	r5,r4
 40097a8:	11000017 	ldw	r4,0(r2)
 40097ac:	40096581 	jmpi	4009658 <__swbuf_r>

040097b0 <_wcrtomb_r>:
 40097b0:	defff604 	addi	sp,sp,-40
 40097b4:	00810074 	movhi	r2,1025
 40097b8:	dc800815 	stw	r18,32(sp)
 40097bc:	dc400715 	stw	r17,28(sp)
 40097c0:	dc000615 	stw	r16,24(sp)
 40097c4:	10880704 	addi	r2,r2,8220
 40097c8:	dfc00915 	stw	ra,36(sp)
 40097cc:	2021883a 	mov	r16,r4
 40097d0:	3823883a 	mov	r17,r7
 40097d4:	14800017 	ldw	r18,0(r2)
 40097d8:	28001426 	beq	r5,zero,400982c <_wcrtomb_r+0x7c>
 40097dc:	d9400415 	stw	r5,16(sp)
 40097e0:	d9800515 	stw	r6,20(sp)
 40097e4:	4004db00 	call	4004db0 <__locale_charset>
 40097e8:	d9800517 	ldw	r6,20(sp)
 40097ec:	d9400417 	ldw	r5,16(sp)
 40097f0:	100f883a 	mov	r7,r2
 40097f4:	dc400015 	stw	r17,0(sp)
 40097f8:	8009883a 	mov	r4,r16
 40097fc:	903ee83a 	callr	r18
 4009800:	00ffffc4 	movi	r3,-1
 4009804:	10c0031e 	bne	r2,r3,4009814 <_wcrtomb_r+0x64>
 4009808:	88000015 	stw	zero,0(r17)
 400980c:	00c02284 	movi	r3,138
 4009810:	80c00015 	stw	r3,0(r16)
 4009814:	dfc00917 	ldw	ra,36(sp)
 4009818:	dc800817 	ldw	r18,32(sp)
 400981c:	dc400717 	ldw	r17,28(sp)
 4009820:	dc000617 	ldw	r16,24(sp)
 4009824:	dec00a04 	addi	sp,sp,40
 4009828:	f800283a 	ret
 400982c:	4004db00 	call	4004db0 <__locale_charset>
 4009830:	100f883a 	mov	r7,r2
 4009834:	dc400015 	stw	r17,0(sp)
 4009838:	000d883a 	mov	r6,zero
 400983c:	d9400104 	addi	r5,sp,4
 4009840:	8009883a 	mov	r4,r16
 4009844:	903ee83a 	callr	r18
 4009848:	003fed06 	br	4009800 <__alt_data_end+0xfc009800>

0400984c <wcrtomb>:
 400984c:	defff604 	addi	sp,sp,-40
 4009850:	00810074 	movhi	r2,1025
 4009854:	dc800615 	stw	r18,24(sp)
 4009858:	dc400515 	stw	r17,20(sp)
 400985c:	10880304 	addi	r2,r2,8204
 4009860:	dfc00915 	stw	ra,36(sp)
 4009864:	dd000815 	stw	r20,32(sp)
 4009868:	dcc00715 	stw	r19,28(sp)
 400986c:	dc000415 	stw	r16,16(sp)
 4009870:	3025883a 	mov	r18,r6
 4009874:	14400017 	ldw	r17,0(r2)
 4009878:	20001926 	beq	r4,zero,40098e0 <wcrtomb+0x94>
 400987c:	00810074 	movhi	r2,1025
 4009880:	10880704 	addi	r2,r2,8220
 4009884:	15000017 	ldw	r20,0(r2)
 4009888:	2021883a 	mov	r16,r4
 400988c:	2827883a 	mov	r19,r5
 4009890:	4004db00 	call	4004db0 <__locale_charset>
 4009894:	100f883a 	mov	r7,r2
 4009898:	dc800015 	stw	r18,0(sp)
 400989c:	980d883a 	mov	r6,r19
 40098a0:	800b883a 	mov	r5,r16
 40098a4:	8809883a 	mov	r4,r17
 40098a8:	a03ee83a 	callr	r20
 40098ac:	00ffffc4 	movi	r3,-1
 40098b0:	10c0031e 	bne	r2,r3,40098c0 <wcrtomb+0x74>
 40098b4:	90000015 	stw	zero,0(r18)
 40098b8:	00c02284 	movi	r3,138
 40098bc:	88c00015 	stw	r3,0(r17)
 40098c0:	dfc00917 	ldw	ra,36(sp)
 40098c4:	dd000817 	ldw	r20,32(sp)
 40098c8:	dcc00717 	ldw	r19,28(sp)
 40098cc:	dc800617 	ldw	r18,24(sp)
 40098d0:	dc400517 	ldw	r17,20(sp)
 40098d4:	dc000417 	ldw	r16,16(sp)
 40098d8:	dec00a04 	addi	sp,sp,40
 40098dc:	f800283a 	ret
 40098e0:	00810074 	movhi	r2,1025
 40098e4:	10880704 	addi	r2,r2,8220
 40098e8:	14000017 	ldw	r16,0(r2)
 40098ec:	4004db00 	call	4004db0 <__locale_charset>
 40098f0:	100f883a 	mov	r7,r2
 40098f4:	dc800015 	stw	r18,0(sp)
 40098f8:	000d883a 	mov	r6,zero
 40098fc:	d9400104 	addi	r5,sp,4
 4009900:	8809883a 	mov	r4,r17
 4009904:	803ee83a 	callr	r16
 4009908:	003fe806 	br	40098ac <__alt_data_end+0xfc0098ac>

0400990c <__ascii_wctomb>:
 400990c:	28000526 	beq	r5,zero,4009924 <__ascii_wctomb+0x18>
 4009910:	00803fc4 	movi	r2,255
 4009914:	11800536 	bltu	r2,r6,400992c <__ascii_wctomb+0x20>
 4009918:	29800005 	stb	r6,0(r5)
 400991c:	00800044 	movi	r2,1
 4009920:	f800283a 	ret
 4009924:	0005883a 	mov	r2,zero
 4009928:	f800283a 	ret
 400992c:	00802284 	movi	r2,138
 4009930:	20800015 	stw	r2,0(r4)
 4009934:	00bfffc4 	movi	r2,-1
 4009938:	f800283a 	ret

0400993c <_wctomb_r>:
 400993c:	00810074 	movhi	r2,1025
 4009940:	defff904 	addi	sp,sp,-28
 4009944:	10880704 	addi	r2,r2,8220
 4009948:	dfc00615 	stw	ra,24(sp)
 400994c:	dc400515 	stw	r17,20(sp)
 4009950:	dc000415 	stw	r16,16(sp)
 4009954:	3823883a 	mov	r17,r7
 4009958:	14000017 	ldw	r16,0(r2)
 400995c:	d9000115 	stw	r4,4(sp)
 4009960:	d9400215 	stw	r5,8(sp)
 4009964:	d9800315 	stw	r6,12(sp)
 4009968:	4004db00 	call	4004db0 <__locale_charset>
 400996c:	d9800317 	ldw	r6,12(sp)
 4009970:	d9400217 	ldw	r5,8(sp)
 4009974:	d9000117 	ldw	r4,4(sp)
 4009978:	100f883a 	mov	r7,r2
 400997c:	dc400015 	stw	r17,0(sp)
 4009980:	803ee83a 	callr	r16
 4009984:	dfc00617 	ldw	ra,24(sp)
 4009988:	dc400517 	ldw	r17,20(sp)
 400998c:	dc000417 	ldw	r16,16(sp)
 4009990:	dec00704 	addi	sp,sp,28
 4009994:	f800283a 	ret

04009998 <__udivdi3>:
 4009998:	defff504 	addi	sp,sp,-44
 400999c:	dcc00415 	stw	r19,16(sp)
 40099a0:	dc000115 	stw	r16,4(sp)
 40099a4:	dfc00a15 	stw	ra,40(sp)
 40099a8:	df000915 	stw	fp,36(sp)
 40099ac:	ddc00815 	stw	r23,32(sp)
 40099b0:	dd800715 	stw	r22,28(sp)
 40099b4:	dd400615 	stw	r21,24(sp)
 40099b8:	dd000515 	stw	r20,20(sp)
 40099bc:	dc800315 	stw	r18,12(sp)
 40099c0:	dc400215 	stw	r17,8(sp)
 40099c4:	2027883a 	mov	r19,r4
 40099c8:	2821883a 	mov	r16,r5
 40099cc:	3800411e 	bne	r7,zero,4009ad4 <__udivdi3+0x13c>
 40099d0:	3023883a 	mov	r17,r6
 40099d4:	2025883a 	mov	r18,r4
 40099d8:	2980522e 	bgeu	r5,r6,4009b24 <__udivdi3+0x18c>
 40099dc:	00bfffd4 	movui	r2,65535
 40099e0:	282d883a 	mov	r22,r5
 40099e4:	1180a836 	bltu	r2,r6,4009c88 <__udivdi3+0x2f0>
 40099e8:	00803fc4 	movi	r2,255
 40099ec:	1185803a 	cmpltu	r2,r2,r6
 40099f0:	100490fa 	slli	r2,r2,3
 40099f4:	3086d83a 	srl	r3,r6,r2
 40099f8:	01010074 	movhi	r4,1025
 40099fc:	2100df04 	addi	r4,r4,892
 4009a00:	20c7883a 	add	r3,r4,r3
 4009a04:	18c00003 	ldbu	r3,0(r3)
 4009a08:	1885883a 	add	r2,r3,r2
 4009a0c:	00c00804 	movi	r3,32
 4009a10:	1887c83a 	sub	r3,r3,r2
 4009a14:	18000526 	beq	r3,zero,4009a2c <__udivdi3+0x94>
 4009a18:	80e0983a 	sll	r16,r16,r3
 4009a1c:	9884d83a 	srl	r2,r19,r2
 4009a20:	30e2983a 	sll	r17,r6,r3
 4009a24:	98e4983a 	sll	r18,r19,r3
 4009a28:	142cb03a 	or	r22,r2,r16
 4009a2c:	882ad43a 	srli	r21,r17,16
 4009a30:	b009883a 	mov	r4,r22
 4009a34:	8d3fffcc 	andi	r20,r17,65535
 4009a38:	a80b883a 	mov	r5,r21
 4009a3c:	400a5a40 	call	400a5a4 <__umodsi3>
 4009a40:	b009883a 	mov	r4,r22
 4009a44:	a80b883a 	mov	r5,r21
 4009a48:	1027883a 	mov	r19,r2
 4009a4c:	400a5400 	call	400a540 <__udivsi3>
 4009a50:	102d883a 	mov	r22,r2
 4009a54:	9826943a 	slli	r19,r19,16
 4009a58:	9004d43a 	srli	r2,r18,16
 4009a5c:	a5a1383a 	mul	r16,r20,r22
 4009a60:	14c4b03a 	or	r2,r2,r19
 4009a64:	1400052e 	bgeu	r2,r16,4009a7c <__udivdi3+0xe4>
 4009a68:	1445883a 	add	r2,r2,r17
 4009a6c:	b0ffffc4 	addi	r3,r22,-1
 4009a70:	14400136 	bltu	r2,r17,4009a78 <__udivdi3+0xe0>
 4009a74:	14012336 	bltu	r2,r16,4009f04 <__udivdi3+0x56c>
 4009a78:	182d883a 	mov	r22,r3
 4009a7c:	1421c83a 	sub	r16,r2,r16
 4009a80:	a80b883a 	mov	r5,r21
 4009a84:	8009883a 	mov	r4,r16
 4009a88:	400a5a40 	call	400a5a4 <__umodsi3>
 4009a8c:	1027883a 	mov	r19,r2
 4009a90:	a80b883a 	mov	r5,r21
 4009a94:	8009883a 	mov	r4,r16
 4009a98:	400a5400 	call	400a540 <__udivsi3>
 4009a9c:	9826943a 	slli	r19,r19,16
 4009aa0:	a0a9383a 	mul	r20,r20,r2
 4009aa4:	94bfffcc 	andi	r18,r18,65535
 4009aa8:	94e4b03a 	or	r18,r18,r19
 4009aac:	9500052e 	bgeu	r18,r20,4009ac4 <__udivdi3+0x12c>
 4009ab0:	8ca5883a 	add	r18,r17,r18
 4009ab4:	10ffffc4 	addi	r3,r2,-1
 4009ab8:	9440f136 	bltu	r18,r17,4009e80 <__udivdi3+0x4e8>
 4009abc:	9500f02e 	bgeu	r18,r20,4009e80 <__udivdi3+0x4e8>
 4009ac0:	10bfff84 	addi	r2,r2,-2
 4009ac4:	b00c943a 	slli	r6,r22,16
 4009ac8:	0007883a 	mov	r3,zero
 4009acc:	3084b03a 	or	r2,r6,r2
 4009ad0:	00005906 	br	4009c38 <__udivdi3+0x2a0>
 4009ad4:	29c05636 	bltu	r5,r7,4009c30 <__udivdi3+0x298>
 4009ad8:	00bfffd4 	movui	r2,65535
 4009adc:	11c0622e 	bgeu	r2,r7,4009c68 <__udivdi3+0x2d0>
 4009ae0:	00804034 	movhi	r2,256
 4009ae4:	10bfffc4 	addi	r2,r2,-1
 4009ae8:	11c0ee36 	bltu	r2,r7,4009ea4 <__udivdi3+0x50c>
 4009aec:	00800404 	movi	r2,16
 4009af0:	3886d83a 	srl	r3,r7,r2
 4009af4:	01010074 	movhi	r4,1025
 4009af8:	2100df04 	addi	r4,r4,892
 4009afc:	20c7883a 	add	r3,r4,r3
 4009b00:	18c00003 	ldbu	r3,0(r3)
 4009b04:	05400804 	movi	r21,32
 4009b08:	1885883a 	add	r2,r3,r2
 4009b0c:	a8abc83a 	sub	r21,r21,r2
 4009b10:	a800621e 	bne	r21,zero,4009c9c <__udivdi3+0x304>
 4009b14:	3c00e936 	bltu	r7,r16,4009ebc <__udivdi3+0x524>
 4009b18:	9985403a 	cmpgeu	r2,r19,r6
 4009b1c:	0007883a 	mov	r3,zero
 4009b20:	00004506 	br	4009c38 <__udivdi3+0x2a0>
 4009b24:	3000041e 	bne	r6,zero,4009b38 <__udivdi3+0x1a0>
 4009b28:	000b883a 	mov	r5,zero
 4009b2c:	01000044 	movi	r4,1
 4009b30:	400a5400 	call	400a540 <__udivsi3>
 4009b34:	1023883a 	mov	r17,r2
 4009b38:	00bfffd4 	movui	r2,65535
 4009b3c:	14404e2e 	bgeu	r2,r17,4009c78 <__udivdi3+0x2e0>
 4009b40:	00804034 	movhi	r2,256
 4009b44:	10bfffc4 	addi	r2,r2,-1
 4009b48:	1440d836 	bltu	r2,r17,4009eac <__udivdi3+0x514>
 4009b4c:	00800404 	movi	r2,16
 4009b50:	8886d83a 	srl	r3,r17,r2
 4009b54:	01010074 	movhi	r4,1025
 4009b58:	2100df04 	addi	r4,r4,892
 4009b5c:	20c7883a 	add	r3,r4,r3
 4009b60:	18c00003 	ldbu	r3,0(r3)
 4009b64:	1885883a 	add	r2,r3,r2
 4009b68:	00c00804 	movi	r3,32
 4009b6c:	1887c83a 	sub	r3,r3,r2
 4009b70:	18008f1e 	bne	r3,zero,4009db0 <__udivdi3+0x418>
 4009b74:	882ad43a 	srli	r21,r17,16
 4009b78:	8461c83a 	sub	r16,r16,r17
 4009b7c:	8d3fffcc 	andi	r20,r17,65535
 4009b80:	00c00044 	movi	r3,1
 4009b84:	8009883a 	mov	r4,r16
 4009b88:	a80b883a 	mov	r5,r21
 4009b8c:	d8c00015 	stw	r3,0(sp)
 4009b90:	400a5a40 	call	400a5a4 <__umodsi3>
 4009b94:	8009883a 	mov	r4,r16
 4009b98:	a80b883a 	mov	r5,r21
 4009b9c:	1027883a 	mov	r19,r2
 4009ba0:	400a5400 	call	400a540 <__udivsi3>
 4009ba4:	9826943a 	slli	r19,r19,16
 4009ba8:	9008d43a 	srli	r4,r18,16
 4009bac:	1521383a 	mul	r16,r2,r20
 4009bb0:	102d883a 	mov	r22,r2
 4009bb4:	24c8b03a 	or	r4,r4,r19
 4009bb8:	d8c00017 	ldw	r3,0(sp)
 4009bbc:	2400052e 	bgeu	r4,r16,4009bd4 <__udivdi3+0x23c>
 4009bc0:	2449883a 	add	r4,r4,r17
 4009bc4:	b0bfffc4 	addi	r2,r22,-1
 4009bc8:	24400136 	bltu	r4,r17,4009bd0 <__udivdi3+0x238>
 4009bcc:	2400ca36 	bltu	r4,r16,4009ef8 <__udivdi3+0x560>
 4009bd0:	102d883a 	mov	r22,r2
 4009bd4:	2421c83a 	sub	r16,r4,r16
 4009bd8:	a80b883a 	mov	r5,r21
 4009bdc:	8009883a 	mov	r4,r16
 4009be0:	d8c00015 	stw	r3,0(sp)
 4009be4:	400a5a40 	call	400a5a4 <__umodsi3>
 4009be8:	1027883a 	mov	r19,r2
 4009bec:	a80b883a 	mov	r5,r21
 4009bf0:	8009883a 	mov	r4,r16
 4009bf4:	400a5400 	call	400a540 <__udivsi3>
 4009bf8:	9826943a 	slli	r19,r19,16
 4009bfc:	1529383a 	mul	r20,r2,r20
 4009c00:	94bfffcc 	andi	r18,r18,65535
 4009c04:	94e4b03a 	or	r18,r18,r19
 4009c08:	d8c00017 	ldw	r3,0(sp)
 4009c0c:	9500052e 	bgeu	r18,r20,4009c24 <__udivdi3+0x28c>
 4009c10:	8ca5883a 	add	r18,r17,r18
 4009c14:	113fffc4 	addi	r4,r2,-1
 4009c18:	94409736 	bltu	r18,r17,4009e78 <__udivdi3+0x4e0>
 4009c1c:	9500962e 	bgeu	r18,r20,4009e78 <__udivdi3+0x4e0>
 4009c20:	10bfff84 	addi	r2,r2,-2
 4009c24:	b00c943a 	slli	r6,r22,16
 4009c28:	3084b03a 	or	r2,r6,r2
 4009c2c:	00000206 	br	4009c38 <__udivdi3+0x2a0>
 4009c30:	0007883a 	mov	r3,zero
 4009c34:	0005883a 	mov	r2,zero
 4009c38:	dfc00a17 	ldw	ra,40(sp)
 4009c3c:	df000917 	ldw	fp,36(sp)
 4009c40:	ddc00817 	ldw	r23,32(sp)
 4009c44:	dd800717 	ldw	r22,28(sp)
 4009c48:	dd400617 	ldw	r21,24(sp)
 4009c4c:	dd000517 	ldw	r20,20(sp)
 4009c50:	dcc00417 	ldw	r19,16(sp)
 4009c54:	dc800317 	ldw	r18,12(sp)
 4009c58:	dc400217 	ldw	r17,8(sp)
 4009c5c:	dc000117 	ldw	r16,4(sp)
 4009c60:	dec00b04 	addi	sp,sp,44
 4009c64:	f800283a 	ret
 4009c68:	00803fc4 	movi	r2,255
 4009c6c:	11c5803a 	cmpltu	r2,r2,r7
 4009c70:	100490fa 	slli	r2,r2,3
 4009c74:	003f9e06 	br	4009af0 <__alt_data_end+0xfc009af0>
 4009c78:	00803fc4 	movi	r2,255
 4009c7c:	1445803a 	cmpltu	r2,r2,r17
 4009c80:	100490fa 	slli	r2,r2,3
 4009c84:	003fb206 	br	4009b50 <__alt_data_end+0xfc009b50>
 4009c88:	00804034 	movhi	r2,256
 4009c8c:	10bfffc4 	addi	r2,r2,-1
 4009c90:	11808836 	bltu	r2,r6,4009eb4 <__udivdi3+0x51c>
 4009c94:	00800404 	movi	r2,16
 4009c98:	003f5606 	br	40099f4 <__alt_data_end+0xfc0099f4>
 4009c9c:	30aed83a 	srl	r23,r6,r2
 4009ca0:	3d4e983a 	sll	r7,r7,r21
 4009ca4:	80acd83a 	srl	r22,r16,r2
 4009ca8:	9884d83a 	srl	r2,r19,r2
 4009cac:	3deeb03a 	or	r23,r7,r23
 4009cb0:	b824d43a 	srli	r18,r23,16
 4009cb4:	8560983a 	sll	r16,r16,r21
 4009cb8:	b009883a 	mov	r4,r22
 4009cbc:	900b883a 	mov	r5,r18
 4009cc0:	3568983a 	sll	r20,r6,r21
 4009cc4:	1420b03a 	or	r16,r2,r16
 4009cc8:	400a5a40 	call	400a5a4 <__umodsi3>
 4009ccc:	b009883a 	mov	r4,r22
 4009cd0:	900b883a 	mov	r5,r18
 4009cd4:	1023883a 	mov	r17,r2
 4009cd8:	400a5400 	call	400a540 <__udivsi3>
 4009cdc:	8808943a 	slli	r4,r17,16
 4009ce0:	bf3fffcc 	andi	fp,r23,65535
 4009ce4:	8006d43a 	srli	r3,r16,16
 4009ce8:	e0a3383a 	mul	r17,fp,r2
 4009cec:	100d883a 	mov	r6,r2
 4009cf0:	1906b03a 	or	r3,r3,r4
 4009cf4:	1c40042e 	bgeu	r3,r17,4009d08 <__udivdi3+0x370>
 4009cf8:	1dc7883a 	add	r3,r3,r23
 4009cfc:	10bfffc4 	addi	r2,r2,-1
 4009d00:	1dc0752e 	bgeu	r3,r23,4009ed8 <__udivdi3+0x540>
 4009d04:	100d883a 	mov	r6,r2
 4009d08:	1c63c83a 	sub	r17,r3,r17
 4009d0c:	900b883a 	mov	r5,r18
 4009d10:	8809883a 	mov	r4,r17
 4009d14:	d9800015 	stw	r6,0(sp)
 4009d18:	400a5a40 	call	400a5a4 <__umodsi3>
 4009d1c:	102d883a 	mov	r22,r2
 4009d20:	8809883a 	mov	r4,r17
 4009d24:	900b883a 	mov	r5,r18
 4009d28:	400a5400 	call	400a540 <__udivsi3>
 4009d2c:	b02c943a 	slli	r22,r22,16
 4009d30:	e089383a 	mul	r4,fp,r2
 4009d34:	843fffcc 	andi	r16,r16,65535
 4009d38:	85a0b03a 	or	r16,r16,r22
 4009d3c:	d9800017 	ldw	r6,0(sp)
 4009d40:	8100042e 	bgeu	r16,r4,4009d54 <__udivdi3+0x3bc>
 4009d44:	85e1883a 	add	r16,r16,r23
 4009d48:	10ffffc4 	addi	r3,r2,-1
 4009d4c:	85c05e2e 	bgeu	r16,r23,4009ec8 <__udivdi3+0x530>
 4009d50:	1805883a 	mov	r2,r3
 4009d54:	300c943a 	slli	r6,r6,16
 4009d58:	a17fffcc 	andi	r5,r20,65535
 4009d5c:	a028d43a 	srli	r20,r20,16
 4009d60:	3084b03a 	or	r2,r6,r2
 4009d64:	10ffffcc 	andi	r3,r2,65535
 4009d68:	100cd43a 	srli	r6,r2,16
 4009d6c:	194f383a 	mul	r7,r3,r5
 4009d70:	1d07383a 	mul	r3,r3,r20
 4009d74:	314b383a 	mul	r5,r6,r5
 4009d78:	3810d43a 	srli	r8,r7,16
 4009d7c:	8121c83a 	sub	r16,r16,r4
 4009d80:	1947883a 	add	r3,r3,r5
 4009d84:	40c7883a 	add	r3,r8,r3
 4009d88:	350d383a 	mul	r6,r6,r20
 4009d8c:	1940022e 	bgeu	r3,r5,4009d98 <__udivdi3+0x400>
 4009d90:	01000074 	movhi	r4,1
 4009d94:	310d883a 	add	r6,r6,r4
 4009d98:	1828d43a 	srli	r20,r3,16
 4009d9c:	a18d883a 	add	r6,r20,r6
 4009da0:	81803e36 	bltu	r16,r6,4009e9c <__udivdi3+0x504>
 4009da4:	81803826 	beq	r16,r6,4009e88 <__udivdi3+0x4f0>
 4009da8:	0007883a 	mov	r3,zero
 4009dac:	003fa206 	br	4009c38 <__alt_data_end+0xfc009c38>
 4009db0:	88e2983a 	sll	r17,r17,r3
 4009db4:	80a8d83a 	srl	r20,r16,r2
 4009db8:	80e0983a 	sll	r16,r16,r3
 4009dbc:	882ad43a 	srli	r21,r17,16
 4009dc0:	9884d83a 	srl	r2,r19,r2
 4009dc4:	a009883a 	mov	r4,r20
 4009dc8:	a80b883a 	mov	r5,r21
 4009dcc:	142eb03a 	or	r23,r2,r16
 4009dd0:	98e4983a 	sll	r18,r19,r3
 4009dd4:	400a5a40 	call	400a5a4 <__umodsi3>
 4009dd8:	a009883a 	mov	r4,r20
 4009ddc:	a80b883a 	mov	r5,r21
 4009de0:	1021883a 	mov	r16,r2
 4009de4:	400a5400 	call	400a540 <__udivsi3>
 4009de8:	1039883a 	mov	fp,r2
 4009dec:	8d3fffcc 	andi	r20,r17,65535
 4009df0:	8020943a 	slli	r16,r16,16
 4009df4:	b804d43a 	srli	r2,r23,16
 4009df8:	a72d383a 	mul	r22,r20,fp
 4009dfc:	1404b03a 	or	r2,r2,r16
 4009e00:	1580062e 	bgeu	r2,r22,4009e1c <__udivdi3+0x484>
 4009e04:	1445883a 	add	r2,r2,r17
 4009e08:	e0ffffc4 	addi	r3,fp,-1
 4009e0c:	14403836 	bltu	r2,r17,4009ef0 <__udivdi3+0x558>
 4009e10:	1580372e 	bgeu	r2,r22,4009ef0 <__udivdi3+0x558>
 4009e14:	e73fff84 	addi	fp,fp,-2
 4009e18:	1445883a 	add	r2,r2,r17
 4009e1c:	15adc83a 	sub	r22,r2,r22
 4009e20:	a80b883a 	mov	r5,r21
 4009e24:	b009883a 	mov	r4,r22
 4009e28:	400a5a40 	call	400a5a4 <__umodsi3>
 4009e2c:	1027883a 	mov	r19,r2
 4009e30:	b009883a 	mov	r4,r22
 4009e34:	a80b883a 	mov	r5,r21
 4009e38:	400a5400 	call	400a540 <__udivsi3>
 4009e3c:	9826943a 	slli	r19,r19,16
 4009e40:	a0a1383a 	mul	r16,r20,r2
 4009e44:	b93fffcc 	andi	r4,r23,65535
 4009e48:	24c8b03a 	or	r4,r4,r19
 4009e4c:	2400062e 	bgeu	r4,r16,4009e68 <__udivdi3+0x4d0>
 4009e50:	2449883a 	add	r4,r4,r17
 4009e54:	10ffffc4 	addi	r3,r2,-1
 4009e58:	24402336 	bltu	r4,r17,4009ee8 <__udivdi3+0x550>
 4009e5c:	2400222e 	bgeu	r4,r16,4009ee8 <__udivdi3+0x550>
 4009e60:	10bfff84 	addi	r2,r2,-2
 4009e64:	2449883a 	add	r4,r4,r17
 4009e68:	e038943a 	slli	fp,fp,16
 4009e6c:	2421c83a 	sub	r16,r4,r16
 4009e70:	e086b03a 	or	r3,fp,r2
 4009e74:	003f4306 	br	4009b84 <__alt_data_end+0xfc009b84>
 4009e78:	2005883a 	mov	r2,r4
 4009e7c:	003f6906 	br	4009c24 <__alt_data_end+0xfc009c24>
 4009e80:	1805883a 	mov	r2,r3
 4009e84:	003f0f06 	br	4009ac4 <__alt_data_end+0xfc009ac4>
 4009e88:	1806943a 	slli	r3,r3,16
 4009e8c:	9d66983a 	sll	r19,r19,r21
 4009e90:	39ffffcc 	andi	r7,r7,65535
 4009e94:	19c7883a 	add	r3,r3,r7
 4009e98:	98ffc32e 	bgeu	r19,r3,4009da8 <__alt_data_end+0xfc009da8>
 4009e9c:	10bfffc4 	addi	r2,r2,-1
 4009ea0:	003fc106 	br	4009da8 <__alt_data_end+0xfc009da8>
 4009ea4:	00800604 	movi	r2,24
 4009ea8:	003f1106 	br	4009af0 <__alt_data_end+0xfc009af0>
 4009eac:	00800604 	movi	r2,24
 4009eb0:	003f2706 	br	4009b50 <__alt_data_end+0xfc009b50>
 4009eb4:	00800604 	movi	r2,24
 4009eb8:	003ece06 	br	40099f4 <__alt_data_end+0xfc0099f4>
 4009ebc:	0007883a 	mov	r3,zero
 4009ec0:	00800044 	movi	r2,1
 4009ec4:	003f5c06 	br	4009c38 <__alt_data_end+0xfc009c38>
 4009ec8:	813fa12e 	bgeu	r16,r4,4009d50 <__alt_data_end+0xfc009d50>
 4009ecc:	10bfff84 	addi	r2,r2,-2
 4009ed0:	85e1883a 	add	r16,r16,r23
 4009ed4:	003f9f06 	br	4009d54 <__alt_data_end+0xfc009d54>
 4009ed8:	1c7f8a2e 	bgeu	r3,r17,4009d04 <__alt_data_end+0xfc009d04>
 4009edc:	31bfff84 	addi	r6,r6,-2
 4009ee0:	1dc7883a 	add	r3,r3,r23
 4009ee4:	003f8806 	br	4009d08 <__alt_data_end+0xfc009d08>
 4009ee8:	1805883a 	mov	r2,r3
 4009eec:	003fde06 	br	4009e68 <__alt_data_end+0xfc009e68>
 4009ef0:	1839883a 	mov	fp,r3
 4009ef4:	003fc906 	br	4009e1c <__alt_data_end+0xfc009e1c>
 4009ef8:	b5bfff84 	addi	r22,r22,-2
 4009efc:	2449883a 	add	r4,r4,r17
 4009f00:	003f3406 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 4009f04:	b5bfff84 	addi	r22,r22,-2
 4009f08:	1445883a 	add	r2,r2,r17
 4009f0c:	003edb06 	br	4009a7c <__alt_data_end+0xfc009a7c>

04009f10 <__umoddi3>:
 4009f10:	defff404 	addi	sp,sp,-48
 4009f14:	df000a15 	stw	fp,40(sp)
 4009f18:	dc400315 	stw	r17,12(sp)
 4009f1c:	dc000215 	stw	r16,8(sp)
 4009f20:	dfc00b15 	stw	ra,44(sp)
 4009f24:	ddc00915 	stw	r23,36(sp)
 4009f28:	dd800815 	stw	r22,32(sp)
 4009f2c:	dd400715 	stw	r21,28(sp)
 4009f30:	dd000615 	stw	r20,24(sp)
 4009f34:	dcc00515 	stw	r19,20(sp)
 4009f38:	dc800415 	stw	r18,16(sp)
 4009f3c:	2021883a 	mov	r16,r4
 4009f40:	2823883a 	mov	r17,r5
 4009f44:	2839883a 	mov	fp,r5
 4009f48:	38003c1e 	bne	r7,zero,400a03c <__umoddi3+0x12c>
 4009f4c:	3027883a 	mov	r19,r6
 4009f50:	2029883a 	mov	r20,r4
 4009f54:	2980512e 	bgeu	r5,r6,400a09c <__umoddi3+0x18c>
 4009f58:	00bfffd4 	movui	r2,65535
 4009f5c:	11809a36 	bltu	r2,r6,400a1c8 <__umoddi3+0x2b8>
 4009f60:	01003fc4 	movi	r4,255
 4009f64:	2189803a 	cmpltu	r4,r4,r6
 4009f68:	200890fa 	slli	r4,r4,3
 4009f6c:	3104d83a 	srl	r2,r6,r4
 4009f70:	00c10074 	movhi	r3,1025
 4009f74:	18c0df04 	addi	r3,r3,892
 4009f78:	1885883a 	add	r2,r3,r2
 4009f7c:	10c00003 	ldbu	r3,0(r2)
 4009f80:	00800804 	movi	r2,32
 4009f84:	1909883a 	add	r4,r3,r4
 4009f88:	1125c83a 	sub	r18,r2,r4
 4009f8c:	90000526 	beq	r18,zero,4009fa4 <__umoddi3+0x94>
 4009f90:	8ca2983a 	sll	r17,r17,r18
 4009f94:	8108d83a 	srl	r4,r16,r4
 4009f98:	34a6983a 	sll	r19,r6,r18
 4009f9c:	84a8983a 	sll	r20,r16,r18
 4009fa0:	2478b03a 	or	fp,r4,r17
 4009fa4:	982ed43a 	srli	r23,r19,16
 4009fa8:	e009883a 	mov	r4,fp
 4009fac:	9dbfffcc 	andi	r22,r19,65535
 4009fb0:	b80b883a 	mov	r5,r23
 4009fb4:	400a5a40 	call	400a5a4 <__umodsi3>
 4009fb8:	e009883a 	mov	r4,fp
 4009fbc:	b80b883a 	mov	r5,r23
 4009fc0:	102b883a 	mov	r21,r2
 4009fc4:	400a5400 	call	400a540 <__udivsi3>
 4009fc8:	a806943a 	slli	r3,r21,16
 4009fcc:	a008d43a 	srli	r4,r20,16
 4009fd0:	b085383a 	mul	r2,r22,r2
 4009fd4:	20c8b03a 	or	r4,r4,r3
 4009fd8:	2080032e 	bgeu	r4,r2,4009fe8 <__umoddi3+0xd8>
 4009fdc:	24c9883a 	add	r4,r4,r19
 4009fe0:	24c00136 	bltu	r4,r19,4009fe8 <__umoddi3+0xd8>
 4009fe4:	20811036 	bltu	r4,r2,400a428 <__umoddi3+0x518>
 4009fe8:	20abc83a 	sub	r21,r4,r2
 4009fec:	b80b883a 	mov	r5,r23
 4009ff0:	a809883a 	mov	r4,r21
 4009ff4:	400a5a40 	call	400a5a4 <__umodsi3>
 4009ff8:	1023883a 	mov	r17,r2
 4009ffc:	b80b883a 	mov	r5,r23
 400a000:	a809883a 	mov	r4,r21
 400a004:	400a5400 	call	400a540 <__udivsi3>
 400a008:	8822943a 	slli	r17,r17,16
 400a00c:	b085383a 	mul	r2,r22,r2
 400a010:	a0ffffcc 	andi	r3,r20,65535
 400a014:	1c46b03a 	or	r3,r3,r17
 400a018:	1880042e 	bgeu	r3,r2,400a02c <__umoddi3+0x11c>
 400a01c:	1cc7883a 	add	r3,r3,r19
 400a020:	1cc00236 	bltu	r3,r19,400a02c <__umoddi3+0x11c>
 400a024:	1880012e 	bgeu	r3,r2,400a02c <__umoddi3+0x11c>
 400a028:	1cc7883a 	add	r3,r3,r19
 400a02c:	1885c83a 	sub	r2,r3,r2
 400a030:	1484d83a 	srl	r2,r2,r18
 400a034:	0007883a 	mov	r3,zero
 400a038:	00004f06 	br	400a178 <__umoddi3+0x268>
 400a03c:	29c04c36 	bltu	r5,r7,400a170 <__umoddi3+0x260>
 400a040:	00bfffd4 	movui	r2,65535
 400a044:	11c0582e 	bgeu	r2,r7,400a1a8 <__umoddi3+0x298>
 400a048:	00804034 	movhi	r2,256
 400a04c:	10bfffc4 	addi	r2,r2,-1
 400a050:	11c0e736 	bltu	r2,r7,400a3f0 <__umoddi3+0x4e0>
 400a054:	01000404 	movi	r4,16
 400a058:	3904d83a 	srl	r2,r7,r4
 400a05c:	00c10074 	movhi	r3,1025
 400a060:	18c0df04 	addi	r3,r3,892
 400a064:	1885883a 	add	r2,r3,r2
 400a068:	14c00003 	ldbu	r19,0(r2)
 400a06c:	00c00804 	movi	r3,32
 400a070:	9927883a 	add	r19,r19,r4
 400a074:	1ce9c83a 	sub	r20,r3,r19
 400a078:	a000581e 	bne	r20,zero,400a1dc <__umoddi3+0x2cc>
 400a07c:	3c400136 	bltu	r7,r17,400a084 <__umoddi3+0x174>
 400a080:	8180eb36 	bltu	r16,r6,400a430 <__umoddi3+0x520>
 400a084:	8185c83a 	sub	r2,r16,r6
 400a088:	89e3c83a 	sub	r17,r17,r7
 400a08c:	8089803a 	cmpltu	r4,r16,r2
 400a090:	8939c83a 	sub	fp,r17,r4
 400a094:	e007883a 	mov	r3,fp
 400a098:	00003706 	br	400a178 <__umoddi3+0x268>
 400a09c:	3000041e 	bne	r6,zero,400a0b0 <__umoddi3+0x1a0>
 400a0a0:	000b883a 	mov	r5,zero
 400a0a4:	01000044 	movi	r4,1
 400a0a8:	400a5400 	call	400a540 <__udivsi3>
 400a0ac:	1027883a 	mov	r19,r2
 400a0b0:	00bfffd4 	movui	r2,65535
 400a0b4:	14c0402e 	bgeu	r2,r19,400a1b8 <__umoddi3+0x2a8>
 400a0b8:	00804034 	movhi	r2,256
 400a0bc:	10bfffc4 	addi	r2,r2,-1
 400a0c0:	14c0cd36 	bltu	r2,r19,400a3f8 <__umoddi3+0x4e8>
 400a0c4:	00800404 	movi	r2,16
 400a0c8:	9886d83a 	srl	r3,r19,r2
 400a0cc:	01010074 	movhi	r4,1025
 400a0d0:	2100df04 	addi	r4,r4,892
 400a0d4:	20c7883a 	add	r3,r4,r3
 400a0d8:	18c00003 	ldbu	r3,0(r3)
 400a0dc:	1887883a 	add	r3,r3,r2
 400a0e0:	00800804 	movi	r2,32
 400a0e4:	10e5c83a 	sub	r18,r2,r3
 400a0e8:	9000901e 	bne	r18,zero,400a32c <__umoddi3+0x41c>
 400a0ec:	982cd43a 	srli	r22,r19,16
 400a0f0:	8ce3c83a 	sub	r17,r17,r19
 400a0f4:	9d7fffcc 	andi	r21,r19,65535
 400a0f8:	b00b883a 	mov	r5,r22
 400a0fc:	8809883a 	mov	r4,r17
 400a100:	400a5a40 	call	400a5a4 <__umodsi3>
 400a104:	8809883a 	mov	r4,r17
 400a108:	b00b883a 	mov	r5,r22
 400a10c:	1021883a 	mov	r16,r2
 400a110:	400a5400 	call	400a540 <__udivsi3>
 400a114:	8006943a 	slli	r3,r16,16
 400a118:	a008d43a 	srli	r4,r20,16
 400a11c:	1545383a 	mul	r2,r2,r21
 400a120:	20c8b03a 	or	r4,r4,r3
 400a124:	2080042e 	bgeu	r4,r2,400a138 <__umoddi3+0x228>
 400a128:	24c9883a 	add	r4,r4,r19
 400a12c:	24c00236 	bltu	r4,r19,400a138 <__umoddi3+0x228>
 400a130:	2080012e 	bgeu	r4,r2,400a138 <__umoddi3+0x228>
 400a134:	24c9883a 	add	r4,r4,r19
 400a138:	20a1c83a 	sub	r16,r4,r2
 400a13c:	b00b883a 	mov	r5,r22
 400a140:	8009883a 	mov	r4,r16
 400a144:	400a5a40 	call	400a5a4 <__umodsi3>
 400a148:	1023883a 	mov	r17,r2
 400a14c:	b00b883a 	mov	r5,r22
 400a150:	8009883a 	mov	r4,r16
 400a154:	400a5400 	call	400a540 <__udivsi3>
 400a158:	8822943a 	slli	r17,r17,16
 400a15c:	1545383a 	mul	r2,r2,r21
 400a160:	a53fffcc 	andi	r20,r20,65535
 400a164:	a446b03a 	or	r3,r20,r17
 400a168:	18bfb02e 	bgeu	r3,r2,400a02c <__alt_data_end+0xfc00a02c>
 400a16c:	003fab06 	br	400a01c <__alt_data_end+0xfc00a01c>
 400a170:	2005883a 	mov	r2,r4
 400a174:	2807883a 	mov	r3,r5
 400a178:	dfc00b17 	ldw	ra,44(sp)
 400a17c:	df000a17 	ldw	fp,40(sp)
 400a180:	ddc00917 	ldw	r23,36(sp)
 400a184:	dd800817 	ldw	r22,32(sp)
 400a188:	dd400717 	ldw	r21,28(sp)
 400a18c:	dd000617 	ldw	r20,24(sp)
 400a190:	dcc00517 	ldw	r19,20(sp)
 400a194:	dc800417 	ldw	r18,16(sp)
 400a198:	dc400317 	ldw	r17,12(sp)
 400a19c:	dc000217 	ldw	r16,8(sp)
 400a1a0:	dec00c04 	addi	sp,sp,48
 400a1a4:	f800283a 	ret
 400a1a8:	04c03fc4 	movi	r19,255
 400a1ac:	99c9803a 	cmpltu	r4,r19,r7
 400a1b0:	200890fa 	slli	r4,r4,3
 400a1b4:	003fa806 	br	400a058 <__alt_data_end+0xfc00a058>
 400a1b8:	00803fc4 	movi	r2,255
 400a1bc:	14c5803a 	cmpltu	r2,r2,r19
 400a1c0:	100490fa 	slli	r2,r2,3
 400a1c4:	003fc006 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400a1c8:	00804034 	movhi	r2,256
 400a1cc:	10bfffc4 	addi	r2,r2,-1
 400a1d0:	11808b36 	bltu	r2,r6,400a400 <__umoddi3+0x4f0>
 400a1d4:	01000404 	movi	r4,16
 400a1d8:	003f6406 	br	4009f6c <__alt_data_end+0xfc009f6c>
 400a1dc:	34c4d83a 	srl	r2,r6,r19
 400a1e0:	3d0e983a 	sll	r7,r7,r20
 400a1e4:	8cf8d83a 	srl	fp,r17,r19
 400a1e8:	8d10983a 	sll	r8,r17,r20
 400a1ec:	38aab03a 	or	r21,r7,r2
 400a1f0:	a82cd43a 	srli	r22,r21,16
 400a1f4:	84e2d83a 	srl	r17,r16,r19
 400a1f8:	e009883a 	mov	r4,fp
 400a1fc:	b00b883a 	mov	r5,r22
 400a200:	8a22b03a 	or	r17,r17,r8
 400a204:	3524983a 	sll	r18,r6,r20
 400a208:	400a5a40 	call	400a5a4 <__umodsi3>
 400a20c:	e009883a 	mov	r4,fp
 400a210:	b00b883a 	mov	r5,r22
 400a214:	102f883a 	mov	r23,r2
 400a218:	400a5400 	call	400a540 <__udivsi3>
 400a21c:	100d883a 	mov	r6,r2
 400a220:	b808943a 	slli	r4,r23,16
 400a224:	aa3fffcc 	andi	r8,r21,65535
 400a228:	8804d43a 	srli	r2,r17,16
 400a22c:	41af383a 	mul	r23,r8,r6
 400a230:	8520983a 	sll	r16,r16,r20
 400a234:	1104b03a 	or	r2,r2,r4
 400a238:	15c0042e 	bgeu	r2,r23,400a24c <__umoddi3+0x33c>
 400a23c:	1545883a 	add	r2,r2,r21
 400a240:	30ffffc4 	addi	r3,r6,-1
 400a244:	1540742e 	bgeu	r2,r21,400a418 <__umoddi3+0x508>
 400a248:	180d883a 	mov	r6,r3
 400a24c:	15efc83a 	sub	r23,r2,r23
 400a250:	b00b883a 	mov	r5,r22
 400a254:	b809883a 	mov	r4,r23
 400a258:	d9800115 	stw	r6,4(sp)
 400a25c:	da000015 	stw	r8,0(sp)
 400a260:	400a5a40 	call	400a5a4 <__umodsi3>
 400a264:	b00b883a 	mov	r5,r22
 400a268:	b809883a 	mov	r4,r23
 400a26c:	1039883a 	mov	fp,r2
 400a270:	400a5400 	call	400a540 <__udivsi3>
 400a274:	da000017 	ldw	r8,0(sp)
 400a278:	e038943a 	slli	fp,fp,16
 400a27c:	100b883a 	mov	r5,r2
 400a280:	4089383a 	mul	r4,r8,r2
 400a284:	8a3fffcc 	andi	r8,r17,65535
 400a288:	4710b03a 	or	r8,r8,fp
 400a28c:	d9800117 	ldw	r6,4(sp)
 400a290:	4100042e 	bgeu	r8,r4,400a2a4 <__umoddi3+0x394>
 400a294:	4551883a 	add	r8,r8,r21
 400a298:	10bfffc4 	addi	r2,r2,-1
 400a29c:	45405a2e 	bgeu	r8,r21,400a408 <__umoddi3+0x4f8>
 400a2a0:	100b883a 	mov	r5,r2
 400a2a4:	300c943a 	slli	r6,r6,16
 400a2a8:	91ffffcc 	andi	r7,r18,65535
 400a2ac:	9004d43a 	srli	r2,r18,16
 400a2b0:	314cb03a 	or	r6,r6,r5
 400a2b4:	317fffcc 	andi	r5,r6,65535
 400a2b8:	300cd43a 	srli	r6,r6,16
 400a2bc:	29d3383a 	mul	r9,r5,r7
 400a2c0:	288b383a 	mul	r5,r5,r2
 400a2c4:	31cf383a 	mul	r7,r6,r7
 400a2c8:	4806d43a 	srli	r3,r9,16
 400a2cc:	4111c83a 	sub	r8,r8,r4
 400a2d0:	29cb883a 	add	r5,r5,r7
 400a2d4:	194b883a 	add	r5,r3,r5
 400a2d8:	3085383a 	mul	r2,r6,r2
 400a2dc:	29c0022e 	bgeu	r5,r7,400a2e8 <__umoddi3+0x3d8>
 400a2e0:	00c00074 	movhi	r3,1
 400a2e4:	10c5883a 	add	r2,r2,r3
 400a2e8:	2808d43a 	srli	r4,r5,16
 400a2ec:	280a943a 	slli	r5,r5,16
 400a2f0:	4a7fffcc 	andi	r9,r9,65535
 400a2f4:	2085883a 	add	r2,r4,r2
 400a2f8:	2a4b883a 	add	r5,r5,r9
 400a2fc:	40803636 	bltu	r8,r2,400a3d8 <__umoddi3+0x4c8>
 400a300:	40804d26 	beq	r8,r2,400a438 <__umoddi3+0x528>
 400a304:	4089c83a 	sub	r4,r8,r2
 400a308:	280f883a 	mov	r7,r5
 400a30c:	81cfc83a 	sub	r7,r16,r7
 400a310:	81c7803a 	cmpltu	r3,r16,r7
 400a314:	20c7c83a 	sub	r3,r4,r3
 400a318:	1cc4983a 	sll	r2,r3,r19
 400a31c:	3d0ed83a 	srl	r7,r7,r20
 400a320:	1d06d83a 	srl	r3,r3,r20
 400a324:	11c4b03a 	or	r2,r2,r7
 400a328:	003f9306 	br	400a178 <__alt_data_end+0xfc00a178>
 400a32c:	9ca6983a 	sll	r19,r19,r18
 400a330:	88e8d83a 	srl	r20,r17,r3
 400a334:	80c4d83a 	srl	r2,r16,r3
 400a338:	982cd43a 	srli	r22,r19,16
 400a33c:	8ca2983a 	sll	r17,r17,r18
 400a340:	a009883a 	mov	r4,r20
 400a344:	b00b883a 	mov	r5,r22
 400a348:	1478b03a 	or	fp,r2,r17
 400a34c:	400a5a40 	call	400a5a4 <__umodsi3>
 400a350:	a009883a 	mov	r4,r20
 400a354:	b00b883a 	mov	r5,r22
 400a358:	1023883a 	mov	r17,r2
 400a35c:	400a5400 	call	400a540 <__udivsi3>
 400a360:	9d7fffcc 	andi	r21,r19,65535
 400a364:	880a943a 	slli	r5,r17,16
 400a368:	e008d43a 	srli	r4,fp,16
 400a36c:	a885383a 	mul	r2,r21,r2
 400a370:	84a8983a 	sll	r20,r16,r18
 400a374:	2148b03a 	or	r4,r4,r5
 400a378:	2080042e 	bgeu	r4,r2,400a38c <__umoddi3+0x47c>
 400a37c:	24c9883a 	add	r4,r4,r19
 400a380:	24c00236 	bltu	r4,r19,400a38c <__umoddi3+0x47c>
 400a384:	2080012e 	bgeu	r4,r2,400a38c <__umoddi3+0x47c>
 400a388:	24c9883a 	add	r4,r4,r19
 400a38c:	20a3c83a 	sub	r17,r4,r2
 400a390:	b00b883a 	mov	r5,r22
 400a394:	8809883a 	mov	r4,r17
 400a398:	400a5a40 	call	400a5a4 <__umodsi3>
 400a39c:	102f883a 	mov	r23,r2
 400a3a0:	8809883a 	mov	r4,r17
 400a3a4:	b00b883a 	mov	r5,r22
 400a3a8:	400a5400 	call	400a540 <__udivsi3>
 400a3ac:	b82e943a 	slli	r23,r23,16
 400a3b0:	a885383a 	mul	r2,r21,r2
 400a3b4:	e13fffcc 	andi	r4,fp,65535
 400a3b8:	25c8b03a 	or	r4,r4,r23
 400a3bc:	2080042e 	bgeu	r4,r2,400a3d0 <__umoddi3+0x4c0>
 400a3c0:	24c9883a 	add	r4,r4,r19
 400a3c4:	24c00236 	bltu	r4,r19,400a3d0 <__umoddi3+0x4c0>
 400a3c8:	2080012e 	bgeu	r4,r2,400a3d0 <__umoddi3+0x4c0>
 400a3cc:	24c9883a 	add	r4,r4,r19
 400a3d0:	20a3c83a 	sub	r17,r4,r2
 400a3d4:	003f4806 	br	400a0f8 <__alt_data_end+0xfc00a0f8>
 400a3d8:	2c8fc83a 	sub	r7,r5,r18
 400a3dc:	1545c83a 	sub	r2,r2,r21
 400a3e0:	29cb803a 	cmpltu	r5,r5,r7
 400a3e4:	1145c83a 	sub	r2,r2,r5
 400a3e8:	4089c83a 	sub	r4,r8,r2
 400a3ec:	003fc706 	br	400a30c <__alt_data_end+0xfc00a30c>
 400a3f0:	01000604 	movi	r4,24
 400a3f4:	003f1806 	br	400a058 <__alt_data_end+0xfc00a058>
 400a3f8:	00800604 	movi	r2,24
 400a3fc:	003f3206 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400a400:	01000604 	movi	r4,24
 400a404:	003ed906 	br	4009f6c <__alt_data_end+0xfc009f6c>
 400a408:	413fa52e 	bgeu	r8,r4,400a2a0 <__alt_data_end+0xfc00a2a0>
 400a40c:	297fff84 	addi	r5,r5,-2
 400a410:	4551883a 	add	r8,r8,r21
 400a414:	003fa306 	br	400a2a4 <__alt_data_end+0xfc00a2a4>
 400a418:	15ff8b2e 	bgeu	r2,r23,400a248 <__alt_data_end+0xfc00a248>
 400a41c:	31bfff84 	addi	r6,r6,-2
 400a420:	1545883a 	add	r2,r2,r21
 400a424:	003f8906 	br	400a24c <__alt_data_end+0xfc00a24c>
 400a428:	24c9883a 	add	r4,r4,r19
 400a42c:	003eee06 	br	4009fe8 <__alt_data_end+0xfc009fe8>
 400a430:	8005883a 	mov	r2,r16
 400a434:	003f1706 	br	400a094 <__alt_data_end+0xfc00a094>
 400a438:	817fe736 	bltu	r16,r5,400a3d8 <__alt_data_end+0xfc00a3d8>
 400a43c:	280f883a 	mov	r7,r5
 400a440:	0009883a 	mov	r4,zero
 400a444:	003fb106 	br	400a30c <__alt_data_end+0xfc00a30c>

0400a448 <__divsi3>:
 400a448:	20001b16 	blt	r4,zero,400a4b8 <__divsi3+0x70>
 400a44c:	000f883a 	mov	r7,zero
 400a450:	28001616 	blt	r5,zero,400a4ac <__divsi3+0x64>
 400a454:	200d883a 	mov	r6,r4
 400a458:	29001a2e 	bgeu	r5,r4,400a4c4 <__divsi3+0x7c>
 400a45c:	00800804 	movi	r2,32
 400a460:	00c00044 	movi	r3,1
 400a464:	00000106 	br	400a46c <__divsi3+0x24>
 400a468:	10000d26 	beq	r2,zero,400a4a0 <__divsi3+0x58>
 400a46c:	294b883a 	add	r5,r5,r5
 400a470:	10bfffc4 	addi	r2,r2,-1
 400a474:	18c7883a 	add	r3,r3,r3
 400a478:	293ffb36 	bltu	r5,r4,400a468 <__alt_data_end+0xfc00a468>
 400a47c:	0005883a 	mov	r2,zero
 400a480:	18000726 	beq	r3,zero,400a4a0 <__divsi3+0x58>
 400a484:	0005883a 	mov	r2,zero
 400a488:	31400236 	bltu	r6,r5,400a494 <__divsi3+0x4c>
 400a48c:	314dc83a 	sub	r6,r6,r5
 400a490:	10c4b03a 	or	r2,r2,r3
 400a494:	1806d07a 	srli	r3,r3,1
 400a498:	280ad07a 	srli	r5,r5,1
 400a49c:	183ffa1e 	bne	r3,zero,400a488 <__alt_data_end+0xfc00a488>
 400a4a0:	38000126 	beq	r7,zero,400a4a8 <__divsi3+0x60>
 400a4a4:	0085c83a 	sub	r2,zero,r2
 400a4a8:	f800283a 	ret
 400a4ac:	014bc83a 	sub	r5,zero,r5
 400a4b0:	39c0005c 	xori	r7,r7,1
 400a4b4:	003fe706 	br	400a454 <__alt_data_end+0xfc00a454>
 400a4b8:	0109c83a 	sub	r4,zero,r4
 400a4bc:	01c00044 	movi	r7,1
 400a4c0:	003fe306 	br	400a450 <__alt_data_end+0xfc00a450>
 400a4c4:	00c00044 	movi	r3,1
 400a4c8:	003fee06 	br	400a484 <__alt_data_end+0xfc00a484>

0400a4cc <__modsi3>:
 400a4cc:	20001716 	blt	r4,zero,400a52c <__modsi3+0x60>
 400a4d0:	000f883a 	mov	r7,zero
 400a4d4:	2005883a 	mov	r2,r4
 400a4d8:	28001216 	blt	r5,zero,400a524 <__modsi3+0x58>
 400a4dc:	2900162e 	bgeu	r5,r4,400a538 <__modsi3+0x6c>
 400a4e0:	01800804 	movi	r6,32
 400a4e4:	00c00044 	movi	r3,1
 400a4e8:	00000106 	br	400a4f0 <__modsi3+0x24>
 400a4ec:	30000a26 	beq	r6,zero,400a518 <__modsi3+0x4c>
 400a4f0:	294b883a 	add	r5,r5,r5
 400a4f4:	31bfffc4 	addi	r6,r6,-1
 400a4f8:	18c7883a 	add	r3,r3,r3
 400a4fc:	293ffb36 	bltu	r5,r4,400a4ec <__alt_data_end+0xfc00a4ec>
 400a500:	18000526 	beq	r3,zero,400a518 <__modsi3+0x4c>
 400a504:	1806d07a 	srli	r3,r3,1
 400a508:	11400136 	bltu	r2,r5,400a510 <__modsi3+0x44>
 400a50c:	1145c83a 	sub	r2,r2,r5
 400a510:	280ad07a 	srli	r5,r5,1
 400a514:	183ffb1e 	bne	r3,zero,400a504 <__alt_data_end+0xfc00a504>
 400a518:	38000126 	beq	r7,zero,400a520 <__modsi3+0x54>
 400a51c:	0085c83a 	sub	r2,zero,r2
 400a520:	f800283a 	ret
 400a524:	014bc83a 	sub	r5,zero,r5
 400a528:	003fec06 	br	400a4dc <__alt_data_end+0xfc00a4dc>
 400a52c:	0109c83a 	sub	r4,zero,r4
 400a530:	01c00044 	movi	r7,1
 400a534:	003fe706 	br	400a4d4 <__alt_data_end+0xfc00a4d4>
 400a538:	00c00044 	movi	r3,1
 400a53c:	003ff106 	br	400a504 <__alt_data_end+0xfc00a504>

0400a540 <__udivsi3>:
 400a540:	200d883a 	mov	r6,r4
 400a544:	2900152e 	bgeu	r5,r4,400a59c <__udivsi3+0x5c>
 400a548:	28001416 	blt	r5,zero,400a59c <__udivsi3+0x5c>
 400a54c:	00800804 	movi	r2,32
 400a550:	00c00044 	movi	r3,1
 400a554:	00000206 	br	400a560 <__udivsi3+0x20>
 400a558:	10000e26 	beq	r2,zero,400a594 <__udivsi3+0x54>
 400a55c:	28000516 	blt	r5,zero,400a574 <__udivsi3+0x34>
 400a560:	294b883a 	add	r5,r5,r5
 400a564:	10bfffc4 	addi	r2,r2,-1
 400a568:	18c7883a 	add	r3,r3,r3
 400a56c:	293ffa36 	bltu	r5,r4,400a558 <__alt_data_end+0xfc00a558>
 400a570:	18000826 	beq	r3,zero,400a594 <__udivsi3+0x54>
 400a574:	0005883a 	mov	r2,zero
 400a578:	31400236 	bltu	r6,r5,400a584 <__udivsi3+0x44>
 400a57c:	314dc83a 	sub	r6,r6,r5
 400a580:	10c4b03a 	or	r2,r2,r3
 400a584:	1806d07a 	srli	r3,r3,1
 400a588:	280ad07a 	srli	r5,r5,1
 400a58c:	183ffa1e 	bne	r3,zero,400a578 <__alt_data_end+0xfc00a578>
 400a590:	f800283a 	ret
 400a594:	0005883a 	mov	r2,zero
 400a598:	f800283a 	ret
 400a59c:	00c00044 	movi	r3,1
 400a5a0:	003ff406 	br	400a574 <__alt_data_end+0xfc00a574>

0400a5a4 <__umodsi3>:
 400a5a4:	2005883a 	mov	r2,r4
 400a5a8:	2900122e 	bgeu	r5,r4,400a5f4 <__umodsi3+0x50>
 400a5ac:	28001116 	blt	r5,zero,400a5f4 <__umodsi3+0x50>
 400a5b0:	01800804 	movi	r6,32
 400a5b4:	00c00044 	movi	r3,1
 400a5b8:	00000206 	br	400a5c4 <__umodsi3+0x20>
 400a5bc:	30000c26 	beq	r6,zero,400a5f0 <__umodsi3+0x4c>
 400a5c0:	28000516 	blt	r5,zero,400a5d8 <__umodsi3+0x34>
 400a5c4:	294b883a 	add	r5,r5,r5
 400a5c8:	31bfffc4 	addi	r6,r6,-1
 400a5cc:	18c7883a 	add	r3,r3,r3
 400a5d0:	293ffa36 	bltu	r5,r4,400a5bc <__alt_data_end+0xfc00a5bc>
 400a5d4:	18000626 	beq	r3,zero,400a5f0 <__umodsi3+0x4c>
 400a5d8:	1806d07a 	srli	r3,r3,1
 400a5dc:	11400136 	bltu	r2,r5,400a5e4 <__umodsi3+0x40>
 400a5e0:	1145c83a 	sub	r2,r2,r5
 400a5e4:	280ad07a 	srli	r5,r5,1
 400a5e8:	183ffb1e 	bne	r3,zero,400a5d8 <__alt_data_end+0xfc00a5d8>
 400a5ec:	f800283a 	ret
 400a5f0:	f800283a 	ret
 400a5f4:	00c00044 	movi	r3,1
 400a5f8:	003ff706 	br	400a5d8 <__alt_data_end+0xfc00a5d8>

0400a5fc <__adddf3>:
 400a5fc:	02c00434 	movhi	r11,16
 400a600:	5affffc4 	addi	r11,r11,-1
 400a604:	2806d7fa 	srli	r3,r5,31
 400a608:	2ad4703a 	and	r10,r5,r11
 400a60c:	3ad2703a 	and	r9,r7,r11
 400a610:	3804d53a 	srli	r2,r7,20
 400a614:	3018d77a 	srli	r12,r6,29
 400a618:	280ad53a 	srli	r5,r5,20
 400a61c:	501490fa 	slli	r10,r10,3
 400a620:	2010d77a 	srli	r8,r4,29
 400a624:	481290fa 	slli	r9,r9,3
 400a628:	380ed7fa 	srli	r7,r7,31
 400a62c:	defffb04 	addi	sp,sp,-20
 400a630:	dc800215 	stw	r18,8(sp)
 400a634:	dc400115 	stw	r17,4(sp)
 400a638:	dc000015 	stw	r16,0(sp)
 400a63c:	dfc00415 	stw	ra,16(sp)
 400a640:	dcc00315 	stw	r19,12(sp)
 400a644:	1c803fcc 	andi	r18,r3,255
 400a648:	2c01ffcc 	andi	r16,r5,2047
 400a64c:	5210b03a 	or	r8,r10,r8
 400a650:	202290fa 	slli	r17,r4,3
 400a654:	1081ffcc 	andi	r2,r2,2047
 400a658:	4b12b03a 	or	r9,r9,r12
 400a65c:	300c90fa 	slli	r6,r6,3
 400a660:	91c07526 	beq	r18,r7,400a838 <__adddf3+0x23c>
 400a664:	8087c83a 	sub	r3,r16,r2
 400a668:	00c0ab0e 	bge	zero,r3,400a918 <__adddf3+0x31c>
 400a66c:	10002a1e 	bne	r2,zero,400a718 <__adddf3+0x11c>
 400a670:	4984b03a 	or	r2,r9,r6
 400a674:	1000961e 	bne	r2,zero,400a8d0 <__adddf3+0x2d4>
 400a678:	888001cc 	andi	r2,r17,7
 400a67c:	10000726 	beq	r2,zero,400a69c <__adddf3+0xa0>
 400a680:	888003cc 	andi	r2,r17,15
 400a684:	00c00104 	movi	r3,4
 400a688:	10c00426 	beq	r2,r3,400a69c <__adddf3+0xa0>
 400a68c:	88c7883a 	add	r3,r17,r3
 400a690:	1c63803a 	cmpltu	r17,r3,r17
 400a694:	4451883a 	add	r8,r8,r17
 400a698:	1823883a 	mov	r17,r3
 400a69c:	4080202c 	andhi	r2,r8,128
 400a6a0:	10005926 	beq	r2,zero,400a808 <__adddf3+0x20c>
 400a6a4:	84000044 	addi	r16,r16,1
 400a6a8:	0081ffc4 	movi	r2,2047
 400a6ac:	8080ba26 	beq	r16,r2,400a998 <__adddf3+0x39c>
 400a6b0:	00bfe034 	movhi	r2,65408
 400a6b4:	10bfffc4 	addi	r2,r2,-1
 400a6b8:	4090703a 	and	r8,r8,r2
 400a6bc:	4004977a 	slli	r2,r8,29
 400a6c0:	4010927a 	slli	r8,r8,9
 400a6c4:	8822d0fa 	srli	r17,r17,3
 400a6c8:	8401ffcc 	andi	r16,r16,2047
 400a6cc:	4010d33a 	srli	r8,r8,12
 400a6d0:	9007883a 	mov	r3,r18
 400a6d4:	1444b03a 	or	r2,r2,r17
 400a6d8:	8401ffcc 	andi	r16,r16,2047
 400a6dc:	8020953a 	slli	r16,r16,20
 400a6e0:	18c03fcc 	andi	r3,r3,255
 400a6e4:	01000434 	movhi	r4,16
 400a6e8:	213fffc4 	addi	r4,r4,-1
 400a6ec:	180697fa 	slli	r3,r3,31
 400a6f0:	4110703a 	and	r8,r8,r4
 400a6f4:	4410b03a 	or	r8,r8,r16
 400a6f8:	40c6b03a 	or	r3,r8,r3
 400a6fc:	dfc00417 	ldw	ra,16(sp)
 400a700:	dcc00317 	ldw	r19,12(sp)
 400a704:	dc800217 	ldw	r18,8(sp)
 400a708:	dc400117 	ldw	r17,4(sp)
 400a70c:	dc000017 	ldw	r16,0(sp)
 400a710:	dec00504 	addi	sp,sp,20
 400a714:	f800283a 	ret
 400a718:	0081ffc4 	movi	r2,2047
 400a71c:	80bfd626 	beq	r16,r2,400a678 <__alt_data_end+0xfc00a678>
 400a720:	4a402034 	orhi	r9,r9,128
 400a724:	00800e04 	movi	r2,56
 400a728:	10c09f16 	blt	r2,r3,400a9a8 <__adddf3+0x3ac>
 400a72c:	008007c4 	movi	r2,31
 400a730:	10c0c216 	blt	r2,r3,400aa3c <__adddf3+0x440>
 400a734:	00800804 	movi	r2,32
 400a738:	10c5c83a 	sub	r2,r2,r3
 400a73c:	488a983a 	sll	r5,r9,r2
 400a740:	30c8d83a 	srl	r4,r6,r3
 400a744:	3084983a 	sll	r2,r6,r2
 400a748:	48c6d83a 	srl	r3,r9,r3
 400a74c:	290cb03a 	or	r6,r5,r4
 400a750:	1004c03a 	cmpne	r2,r2,zero
 400a754:	308cb03a 	or	r6,r6,r2
 400a758:	898dc83a 	sub	r6,r17,r6
 400a75c:	89a3803a 	cmpltu	r17,r17,r6
 400a760:	40d1c83a 	sub	r8,r8,r3
 400a764:	4451c83a 	sub	r8,r8,r17
 400a768:	3023883a 	mov	r17,r6
 400a76c:	4080202c 	andhi	r2,r8,128
 400a770:	10002326 	beq	r2,zero,400a800 <__adddf3+0x204>
 400a774:	04c02034 	movhi	r19,128
 400a778:	9cffffc4 	addi	r19,r19,-1
 400a77c:	44e6703a 	and	r19,r8,r19
 400a780:	98007626 	beq	r19,zero,400a95c <__adddf3+0x360>
 400a784:	9809883a 	mov	r4,r19
 400a788:	400cc000 	call	400cc00 <__clzsi2>
 400a78c:	10fffe04 	addi	r3,r2,-8
 400a790:	010007c4 	movi	r4,31
 400a794:	20c07716 	blt	r4,r3,400a974 <__adddf3+0x378>
 400a798:	00800804 	movi	r2,32
 400a79c:	10c5c83a 	sub	r2,r2,r3
 400a7a0:	8884d83a 	srl	r2,r17,r2
 400a7a4:	98d0983a 	sll	r8,r19,r3
 400a7a8:	88e2983a 	sll	r17,r17,r3
 400a7ac:	1204b03a 	or	r2,r2,r8
 400a7b0:	1c007416 	blt	r3,r16,400a984 <__adddf3+0x388>
 400a7b4:	1c21c83a 	sub	r16,r3,r16
 400a7b8:	82000044 	addi	r8,r16,1
 400a7bc:	00c007c4 	movi	r3,31
 400a7c0:	1a009116 	blt	r3,r8,400aa08 <__adddf3+0x40c>
 400a7c4:	00c00804 	movi	r3,32
 400a7c8:	1a07c83a 	sub	r3,r3,r8
 400a7cc:	8a08d83a 	srl	r4,r17,r8
 400a7d0:	88e2983a 	sll	r17,r17,r3
 400a7d4:	10c6983a 	sll	r3,r2,r3
 400a7d8:	1210d83a 	srl	r8,r2,r8
 400a7dc:	8804c03a 	cmpne	r2,r17,zero
 400a7e0:	1906b03a 	or	r3,r3,r4
 400a7e4:	18a2b03a 	or	r17,r3,r2
 400a7e8:	0021883a 	mov	r16,zero
 400a7ec:	003fa206 	br	400a678 <__alt_data_end+0xfc00a678>
 400a7f0:	1890b03a 	or	r8,r3,r2
 400a7f4:	40017d26 	beq	r8,zero,400adec <__adddf3+0x7f0>
 400a7f8:	1011883a 	mov	r8,r2
 400a7fc:	1823883a 	mov	r17,r3
 400a800:	888001cc 	andi	r2,r17,7
 400a804:	103f9e1e 	bne	r2,zero,400a680 <__alt_data_end+0xfc00a680>
 400a808:	4004977a 	slli	r2,r8,29
 400a80c:	8822d0fa 	srli	r17,r17,3
 400a810:	4010d0fa 	srli	r8,r8,3
 400a814:	9007883a 	mov	r3,r18
 400a818:	1444b03a 	or	r2,r2,r17
 400a81c:	0101ffc4 	movi	r4,2047
 400a820:	81002426 	beq	r16,r4,400a8b4 <__adddf3+0x2b8>
 400a824:	8120703a 	and	r16,r16,r4
 400a828:	01000434 	movhi	r4,16
 400a82c:	213fffc4 	addi	r4,r4,-1
 400a830:	4110703a 	and	r8,r8,r4
 400a834:	003fa806 	br	400a6d8 <__alt_data_end+0xfc00a6d8>
 400a838:	8089c83a 	sub	r4,r16,r2
 400a83c:	01005e0e 	bge	zero,r4,400a9b8 <__adddf3+0x3bc>
 400a840:	10002b26 	beq	r2,zero,400a8f0 <__adddf3+0x2f4>
 400a844:	0081ffc4 	movi	r2,2047
 400a848:	80bf8b26 	beq	r16,r2,400a678 <__alt_data_end+0xfc00a678>
 400a84c:	4a402034 	orhi	r9,r9,128
 400a850:	00800e04 	movi	r2,56
 400a854:	1100a40e 	bge	r2,r4,400aae8 <__adddf3+0x4ec>
 400a858:	498cb03a 	or	r6,r9,r6
 400a85c:	300ac03a 	cmpne	r5,r6,zero
 400a860:	0013883a 	mov	r9,zero
 400a864:	2c4b883a 	add	r5,r5,r17
 400a868:	2c63803a 	cmpltu	r17,r5,r17
 400a86c:	4a11883a 	add	r8,r9,r8
 400a870:	8a11883a 	add	r8,r17,r8
 400a874:	2823883a 	mov	r17,r5
 400a878:	4080202c 	andhi	r2,r8,128
 400a87c:	103fe026 	beq	r2,zero,400a800 <__alt_data_end+0xfc00a800>
 400a880:	84000044 	addi	r16,r16,1
 400a884:	0081ffc4 	movi	r2,2047
 400a888:	8080d226 	beq	r16,r2,400abd4 <__adddf3+0x5d8>
 400a88c:	00bfe034 	movhi	r2,65408
 400a890:	10bfffc4 	addi	r2,r2,-1
 400a894:	4090703a 	and	r8,r8,r2
 400a898:	880ad07a 	srli	r5,r17,1
 400a89c:	400897fa 	slli	r4,r8,31
 400a8a0:	88c0004c 	andi	r3,r17,1
 400a8a4:	28e2b03a 	or	r17,r5,r3
 400a8a8:	4010d07a 	srli	r8,r8,1
 400a8ac:	2462b03a 	or	r17,r4,r17
 400a8b0:	003f7106 	br	400a678 <__alt_data_end+0xfc00a678>
 400a8b4:	4088b03a 	or	r4,r8,r2
 400a8b8:	20014526 	beq	r4,zero,400add0 <__adddf3+0x7d4>
 400a8bc:	01000434 	movhi	r4,16
 400a8c0:	42000234 	orhi	r8,r8,8
 400a8c4:	213fffc4 	addi	r4,r4,-1
 400a8c8:	4110703a 	and	r8,r8,r4
 400a8cc:	003f8206 	br	400a6d8 <__alt_data_end+0xfc00a6d8>
 400a8d0:	18ffffc4 	addi	r3,r3,-1
 400a8d4:	1800491e 	bne	r3,zero,400a9fc <__adddf3+0x400>
 400a8d8:	898bc83a 	sub	r5,r17,r6
 400a8dc:	8963803a 	cmpltu	r17,r17,r5
 400a8e0:	4251c83a 	sub	r8,r8,r9
 400a8e4:	4451c83a 	sub	r8,r8,r17
 400a8e8:	2823883a 	mov	r17,r5
 400a8ec:	003f9f06 	br	400a76c <__alt_data_end+0xfc00a76c>
 400a8f0:	4984b03a 	or	r2,r9,r6
 400a8f4:	103f6026 	beq	r2,zero,400a678 <__alt_data_end+0xfc00a678>
 400a8f8:	213fffc4 	addi	r4,r4,-1
 400a8fc:	2000931e 	bne	r4,zero,400ab4c <__adddf3+0x550>
 400a900:	898d883a 	add	r6,r17,r6
 400a904:	3463803a 	cmpltu	r17,r6,r17
 400a908:	4251883a 	add	r8,r8,r9
 400a90c:	8a11883a 	add	r8,r17,r8
 400a910:	3023883a 	mov	r17,r6
 400a914:	003fd806 	br	400a878 <__alt_data_end+0xfc00a878>
 400a918:	1800541e 	bne	r3,zero,400aa6c <__adddf3+0x470>
 400a91c:	80800044 	addi	r2,r16,1
 400a920:	1081ffcc 	andi	r2,r2,2047
 400a924:	00c00044 	movi	r3,1
 400a928:	1880a00e 	bge	r3,r2,400abac <__adddf3+0x5b0>
 400a92c:	8989c83a 	sub	r4,r17,r6
 400a930:	8905803a 	cmpltu	r2,r17,r4
 400a934:	4267c83a 	sub	r19,r8,r9
 400a938:	98a7c83a 	sub	r19,r19,r2
 400a93c:	9880202c 	andhi	r2,r19,128
 400a940:	10006326 	beq	r2,zero,400aad0 <__adddf3+0x4d4>
 400a944:	3463c83a 	sub	r17,r6,r17
 400a948:	4a07c83a 	sub	r3,r9,r8
 400a94c:	344d803a 	cmpltu	r6,r6,r17
 400a950:	19a7c83a 	sub	r19,r3,r6
 400a954:	3825883a 	mov	r18,r7
 400a958:	983f8a1e 	bne	r19,zero,400a784 <__alt_data_end+0xfc00a784>
 400a95c:	8809883a 	mov	r4,r17
 400a960:	400cc000 	call	400cc00 <__clzsi2>
 400a964:	10800804 	addi	r2,r2,32
 400a968:	10fffe04 	addi	r3,r2,-8
 400a96c:	010007c4 	movi	r4,31
 400a970:	20ff890e 	bge	r4,r3,400a798 <__alt_data_end+0xfc00a798>
 400a974:	10bff604 	addi	r2,r2,-40
 400a978:	8884983a 	sll	r2,r17,r2
 400a97c:	0023883a 	mov	r17,zero
 400a980:	1c3f8c0e 	bge	r3,r16,400a7b4 <__alt_data_end+0xfc00a7b4>
 400a984:	023fe034 	movhi	r8,65408
 400a988:	423fffc4 	addi	r8,r8,-1
 400a98c:	80e1c83a 	sub	r16,r16,r3
 400a990:	1210703a 	and	r8,r2,r8
 400a994:	003f3806 	br	400a678 <__alt_data_end+0xfc00a678>
 400a998:	9007883a 	mov	r3,r18
 400a99c:	0011883a 	mov	r8,zero
 400a9a0:	0005883a 	mov	r2,zero
 400a9a4:	003f4c06 	br	400a6d8 <__alt_data_end+0xfc00a6d8>
 400a9a8:	498cb03a 	or	r6,r9,r6
 400a9ac:	300cc03a 	cmpne	r6,r6,zero
 400a9b0:	0007883a 	mov	r3,zero
 400a9b4:	003f6806 	br	400a758 <__alt_data_end+0xfc00a758>
 400a9b8:	20009c1e 	bne	r4,zero,400ac2c <__adddf3+0x630>
 400a9bc:	80800044 	addi	r2,r16,1
 400a9c0:	1141ffcc 	andi	r5,r2,2047
 400a9c4:	01000044 	movi	r4,1
 400a9c8:	2140670e 	bge	r4,r5,400ab68 <__adddf3+0x56c>
 400a9cc:	0101ffc4 	movi	r4,2047
 400a9d0:	11007f26 	beq	r2,r4,400abd0 <__adddf3+0x5d4>
 400a9d4:	898d883a 	add	r6,r17,r6
 400a9d8:	4247883a 	add	r3,r8,r9
 400a9dc:	3451803a 	cmpltu	r8,r6,r17
 400a9e0:	40d1883a 	add	r8,r8,r3
 400a9e4:	402297fa 	slli	r17,r8,31
 400a9e8:	300cd07a 	srli	r6,r6,1
 400a9ec:	4010d07a 	srli	r8,r8,1
 400a9f0:	1021883a 	mov	r16,r2
 400a9f4:	89a2b03a 	or	r17,r17,r6
 400a9f8:	003f1f06 	br	400a678 <__alt_data_end+0xfc00a678>
 400a9fc:	0081ffc4 	movi	r2,2047
 400aa00:	80bf481e 	bne	r16,r2,400a724 <__alt_data_end+0xfc00a724>
 400aa04:	003f1c06 	br	400a678 <__alt_data_end+0xfc00a678>
 400aa08:	843ff844 	addi	r16,r16,-31
 400aa0c:	01000804 	movi	r4,32
 400aa10:	1406d83a 	srl	r3,r2,r16
 400aa14:	41005026 	beq	r8,r4,400ab58 <__adddf3+0x55c>
 400aa18:	01001004 	movi	r4,64
 400aa1c:	2211c83a 	sub	r8,r4,r8
 400aa20:	1204983a 	sll	r2,r2,r8
 400aa24:	88a2b03a 	or	r17,r17,r2
 400aa28:	8822c03a 	cmpne	r17,r17,zero
 400aa2c:	1c62b03a 	or	r17,r3,r17
 400aa30:	0011883a 	mov	r8,zero
 400aa34:	0021883a 	mov	r16,zero
 400aa38:	003f7106 	br	400a800 <__alt_data_end+0xfc00a800>
 400aa3c:	193ff804 	addi	r4,r3,-32
 400aa40:	00800804 	movi	r2,32
 400aa44:	4908d83a 	srl	r4,r9,r4
 400aa48:	18804526 	beq	r3,r2,400ab60 <__adddf3+0x564>
 400aa4c:	00801004 	movi	r2,64
 400aa50:	10c5c83a 	sub	r2,r2,r3
 400aa54:	4886983a 	sll	r3,r9,r2
 400aa58:	198cb03a 	or	r6,r3,r6
 400aa5c:	300cc03a 	cmpne	r6,r6,zero
 400aa60:	218cb03a 	or	r6,r4,r6
 400aa64:	0007883a 	mov	r3,zero
 400aa68:	003f3b06 	br	400a758 <__alt_data_end+0xfc00a758>
 400aa6c:	80002a26 	beq	r16,zero,400ab18 <__adddf3+0x51c>
 400aa70:	0101ffc4 	movi	r4,2047
 400aa74:	11006826 	beq	r2,r4,400ac18 <__adddf3+0x61c>
 400aa78:	00c7c83a 	sub	r3,zero,r3
 400aa7c:	42002034 	orhi	r8,r8,128
 400aa80:	01000e04 	movi	r4,56
 400aa84:	20c07c16 	blt	r4,r3,400ac78 <__adddf3+0x67c>
 400aa88:	010007c4 	movi	r4,31
 400aa8c:	20c0da16 	blt	r4,r3,400adf8 <__adddf3+0x7fc>
 400aa90:	01000804 	movi	r4,32
 400aa94:	20c9c83a 	sub	r4,r4,r3
 400aa98:	4114983a 	sll	r10,r8,r4
 400aa9c:	88cad83a 	srl	r5,r17,r3
 400aaa0:	8908983a 	sll	r4,r17,r4
 400aaa4:	40c6d83a 	srl	r3,r8,r3
 400aaa8:	5162b03a 	or	r17,r10,r5
 400aaac:	2008c03a 	cmpne	r4,r4,zero
 400aab0:	8922b03a 	or	r17,r17,r4
 400aab4:	3463c83a 	sub	r17,r6,r17
 400aab8:	48c7c83a 	sub	r3,r9,r3
 400aabc:	344d803a 	cmpltu	r6,r6,r17
 400aac0:	1991c83a 	sub	r8,r3,r6
 400aac4:	1021883a 	mov	r16,r2
 400aac8:	3825883a 	mov	r18,r7
 400aacc:	003f2706 	br	400a76c <__alt_data_end+0xfc00a76c>
 400aad0:	24d0b03a 	or	r8,r4,r19
 400aad4:	40001b1e 	bne	r8,zero,400ab44 <__adddf3+0x548>
 400aad8:	0005883a 	mov	r2,zero
 400aadc:	0007883a 	mov	r3,zero
 400aae0:	0021883a 	mov	r16,zero
 400aae4:	003f4d06 	br	400a81c <__alt_data_end+0xfc00a81c>
 400aae8:	008007c4 	movi	r2,31
 400aaec:	11003c16 	blt	r2,r4,400abe0 <__adddf3+0x5e4>
 400aaf0:	00800804 	movi	r2,32
 400aaf4:	1105c83a 	sub	r2,r2,r4
 400aaf8:	488e983a 	sll	r7,r9,r2
 400aafc:	310ad83a 	srl	r5,r6,r4
 400ab00:	3084983a 	sll	r2,r6,r2
 400ab04:	4912d83a 	srl	r9,r9,r4
 400ab08:	394ab03a 	or	r5,r7,r5
 400ab0c:	1004c03a 	cmpne	r2,r2,zero
 400ab10:	288ab03a 	or	r5,r5,r2
 400ab14:	003f5306 	br	400a864 <__alt_data_end+0xfc00a864>
 400ab18:	4448b03a 	or	r4,r8,r17
 400ab1c:	20003e26 	beq	r4,zero,400ac18 <__adddf3+0x61c>
 400ab20:	00c6303a 	nor	r3,zero,r3
 400ab24:	18003a1e 	bne	r3,zero,400ac10 <__adddf3+0x614>
 400ab28:	3463c83a 	sub	r17,r6,r17
 400ab2c:	4a07c83a 	sub	r3,r9,r8
 400ab30:	344d803a 	cmpltu	r6,r6,r17
 400ab34:	1991c83a 	sub	r8,r3,r6
 400ab38:	1021883a 	mov	r16,r2
 400ab3c:	3825883a 	mov	r18,r7
 400ab40:	003f0a06 	br	400a76c <__alt_data_end+0xfc00a76c>
 400ab44:	2023883a 	mov	r17,r4
 400ab48:	003f0d06 	br	400a780 <__alt_data_end+0xfc00a780>
 400ab4c:	0081ffc4 	movi	r2,2047
 400ab50:	80bf3f1e 	bne	r16,r2,400a850 <__alt_data_end+0xfc00a850>
 400ab54:	003ec806 	br	400a678 <__alt_data_end+0xfc00a678>
 400ab58:	0005883a 	mov	r2,zero
 400ab5c:	003fb106 	br	400aa24 <__alt_data_end+0xfc00aa24>
 400ab60:	0007883a 	mov	r3,zero
 400ab64:	003fbc06 	br	400aa58 <__alt_data_end+0xfc00aa58>
 400ab68:	4444b03a 	or	r2,r8,r17
 400ab6c:	8000871e 	bne	r16,zero,400ad8c <__adddf3+0x790>
 400ab70:	1000ba26 	beq	r2,zero,400ae5c <__adddf3+0x860>
 400ab74:	4984b03a 	or	r2,r9,r6
 400ab78:	103ebf26 	beq	r2,zero,400a678 <__alt_data_end+0xfc00a678>
 400ab7c:	8985883a 	add	r2,r17,r6
 400ab80:	4247883a 	add	r3,r8,r9
 400ab84:	1451803a 	cmpltu	r8,r2,r17
 400ab88:	40d1883a 	add	r8,r8,r3
 400ab8c:	40c0202c 	andhi	r3,r8,128
 400ab90:	1023883a 	mov	r17,r2
 400ab94:	183f1a26 	beq	r3,zero,400a800 <__alt_data_end+0xfc00a800>
 400ab98:	00bfe034 	movhi	r2,65408
 400ab9c:	10bfffc4 	addi	r2,r2,-1
 400aba0:	2021883a 	mov	r16,r4
 400aba4:	4090703a 	and	r8,r8,r2
 400aba8:	003eb306 	br	400a678 <__alt_data_end+0xfc00a678>
 400abac:	4444b03a 	or	r2,r8,r17
 400abb0:	8000291e 	bne	r16,zero,400ac58 <__adddf3+0x65c>
 400abb4:	10004b1e 	bne	r2,zero,400ace4 <__adddf3+0x6e8>
 400abb8:	4990b03a 	or	r8,r9,r6
 400abbc:	40008b26 	beq	r8,zero,400adec <__adddf3+0x7f0>
 400abc0:	4811883a 	mov	r8,r9
 400abc4:	3023883a 	mov	r17,r6
 400abc8:	3825883a 	mov	r18,r7
 400abcc:	003eaa06 	br	400a678 <__alt_data_end+0xfc00a678>
 400abd0:	1021883a 	mov	r16,r2
 400abd4:	0011883a 	mov	r8,zero
 400abd8:	0005883a 	mov	r2,zero
 400abdc:	003f0f06 	br	400a81c <__alt_data_end+0xfc00a81c>
 400abe0:	217ff804 	addi	r5,r4,-32
 400abe4:	00800804 	movi	r2,32
 400abe8:	494ad83a 	srl	r5,r9,r5
 400abec:	20807d26 	beq	r4,r2,400ade4 <__adddf3+0x7e8>
 400abf0:	00801004 	movi	r2,64
 400abf4:	1109c83a 	sub	r4,r2,r4
 400abf8:	4912983a 	sll	r9,r9,r4
 400abfc:	498cb03a 	or	r6,r9,r6
 400ac00:	300cc03a 	cmpne	r6,r6,zero
 400ac04:	298ab03a 	or	r5,r5,r6
 400ac08:	0013883a 	mov	r9,zero
 400ac0c:	003f1506 	br	400a864 <__alt_data_end+0xfc00a864>
 400ac10:	0101ffc4 	movi	r4,2047
 400ac14:	113f9a1e 	bne	r2,r4,400aa80 <__alt_data_end+0xfc00aa80>
 400ac18:	4811883a 	mov	r8,r9
 400ac1c:	3023883a 	mov	r17,r6
 400ac20:	1021883a 	mov	r16,r2
 400ac24:	3825883a 	mov	r18,r7
 400ac28:	003e9306 	br	400a678 <__alt_data_end+0xfc00a678>
 400ac2c:	8000161e 	bne	r16,zero,400ac88 <__adddf3+0x68c>
 400ac30:	444ab03a 	or	r5,r8,r17
 400ac34:	28005126 	beq	r5,zero,400ad7c <__adddf3+0x780>
 400ac38:	0108303a 	nor	r4,zero,r4
 400ac3c:	20004d1e 	bne	r4,zero,400ad74 <__adddf3+0x778>
 400ac40:	89a3883a 	add	r17,r17,r6
 400ac44:	4253883a 	add	r9,r8,r9
 400ac48:	898d803a 	cmpltu	r6,r17,r6
 400ac4c:	3251883a 	add	r8,r6,r9
 400ac50:	1021883a 	mov	r16,r2
 400ac54:	003f0806 	br	400a878 <__alt_data_end+0xfc00a878>
 400ac58:	1000301e 	bne	r2,zero,400ad1c <__adddf3+0x720>
 400ac5c:	4984b03a 	or	r2,r9,r6
 400ac60:	10007126 	beq	r2,zero,400ae28 <__adddf3+0x82c>
 400ac64:	4811883a 	mov	r8,r9
 400ac68:	3023883a 	mov	r17,r6
 400ac6c:	3825883a 	mov	r18,r7
 400ac70:	0401ffc4 	movi	r16,2047
 400ac74:	003e8006 	br	400a678 <__alt_data_end+0xfc00a678>
 400ac78:	4462b03a 	or	r17,r8,r17
 400ac7c:	8822c03a 	cmpne	r17,r17,zero
 400ac80:	0007883a 	mov	r3,zero
 400ac84:	003f8b06 	br	400aab4 <__alt_data_end+0xfc00aab4>
 400ac88:	0141ffc4 	movi	r5,2047
 400ac8c:	11403b26 	beq	r2,r5,400ad7c <__adddf3+0x780>
 400ac90:	0109c83a 	sub	r4,zero,r4
 400ac94:	42002034 	orhi	r8,r8,128
 400ac98:	01400e04 	movi	r5,56
 400ac9c:	29006716 	blt	r5,r4,400ae3c <__adddf3+0x840>
 400aca0:	014007c4 	movi	r5,31
 400aca4:	29007016 	blt	r5,r4,400ae68 <__adddf3+0x86c>
 400aca8:	01400804 	movi	r5,32
 400acac:	290bc83a 	sub	r5,r5,r4
 400acb0:	4154983a 	sll	r10,r8,r5
 400acb4:	890ed83a 	srl	r7,r17,r4
 400acb8:	894a983a 	sll	r5,r17,r5
 400acbc:	4108d83a 	srl	r4,r8,r4
 400acc0:	51e2b03a 	or	r17,r10,r7
 400acc4:	280ac03a 	cmpne	r5,r5,zero
 400acc8:	8962b03a 	or	r17,r17,r5
 400accc:	89a3883a 	add	r17,r17,r6
 400acd0:	2253883a 	add	r9,r4,r9
 400acd4:	898d803a 	cmpltu	r6,r17,r6
 400acd8:	3251883a 	add	r8,r6,r9
 400acdc:	1021883a 	mov	r16,r2
 400ace0:	003ee506 	br	400a878 <__alt_data_end+0xfc00a878>
 400ace4:	4984b03a 	or	r2,r9,r6
 400ace8:	103e6326 	beq	r2,zero,400a678 <__alt_data_end+0xfc00a678>
 400acec:	8987c83a 	sub	r3,r17,r6
 400acf0:	88c9803a 	cmpltu	r4,r17,r3
 400acf4:	4245c83a 	sub	r2,r8,r9
 400acf8:	1105c83a 	sub	r2,r2,r4
 400acfc:	1100202c 	andhi	r4,r2,128
 400ad00:	203ebb26 	beq	r4,zero,400a7f0 <__alt_data_end+0xfc00a7f0>
 400ad04:	3463c83a 	sub	r17,r6,r17
 400ad08:	4a07c83a 	sub	r3,r9,r8
 400ad0c:	344d803a 	cmpltu	r6,r6,r17
 400ad10:	1991c83a 	sub	r8,r3,r6
 400ad14:	3825883a 	mov	r18,r7
 400ad18:	003e5706 	br	400a678 <__alt_data_end+0xfc00a678>
 400ad1c:	4984b03a 	or	r2,r9,r6
 400ad20:	10002e26 	beq	r2,zero,400addc <__adddf3+0x7e0>
 400ad24:	4004d0fa 	srli	r2,r8,3
 400ad28:	8822d0fa 	srli	r17,r17,3
 400ad2c:	4010977a 	slli	r8,r8,29
 400ad30:	10c0022c 	andhi	r3,r2,8
 400ad34:	4462b03a 	or	r17,r8,r17
 400ad38:	18000826 	beq	r3,zero,400ad5c <__adddf3+0x760>
 400ad3c:	4808d0fa 	srli	r4,r9,3
 400ad40:	20c0022c 	andhi	r3,r4,8
 400ad44:	1800051e 	bne	r3,zero,400ad5c <__adddf3+0x760>
 400ad48:	300cd0fa 	srli	r6,r6,3
 400ad4c:	4806977a 	slli	r3,r9,29
 400ad50:	2005883a 	mov	r2,r4
 400ad54:	3825883a 	mov	r18,r7
 400ad58:	19a2b03a 	or	r17,r3,r6
 400ad5c:	8810d77a 	srli	r8,r17,29
 400ad60:	100490fa 	slli	r2,r2,3
 400ad64:	882290fa 	slli	r17,r17,3
 400ad68:	0401ffc4 	movi	r16,2047
 400ad6c:	4090b03a 	or	r8,r8,r2
 400ad70:	003e4106 	br	400a678 <__alt_data_end+0xfc00a678>
 400ad74:	0141ffc4 	movi	r5,2047
 400ad78:	117fc71e 	bne	r2,r5,400ac98 <__alt_data_end+0xfc00ac98>
 400ad7c:	4811883a 	mov	r8,r9
 400ad80:	3023883a 	mov	r17,r6
 400ad84:	1021883a 	mov	r16,r2
 400ad88:	003e3b06 	br	400a678 <__alt_data_end+0xfc00a678>
 400ad8c:	10002f26 	beq	r2,zero,400ae4c <__adddf3+0x850>
 400ad90:	4984b03a 	or	r2,r9,r6
 400ad94:	10001126 	beq	r2,zero,400addc <__adddf3+0x7e0>
 400ad98:	4004d0fa 	srli	r2,r8,3
 400ad9c:	8822d0fa 	srli	r17,r17,3
 400ada0:	4010977a 	slli	r8,r8,29
 400ada4:	10c0022c 	andhi	r3,r2,8
 400ada8:	4462b03a 	or	r17,r8,r17
 400adac:	183feb26 	beq	r3,zero,400ad5c <__alt_data_end+0xfc00ad5c>
 400adb0:	4808d0fa 	srli	r4,r9,3
 400adb4:	20c0022c 	andhi	r3,r4,8
 400adb8:	183fe81e 	bne	r3,zero,400ad5c <__alt_data_end+0xfc00ad5c>
 400adbc:	300cd0fa 	srli	r6,r6,3
 400adc0:	4806977a 	slli	r3,r9,29
 400adc4:	2005883a 	mov	r2,r4
 400adc8:	19a2b03a 	or	r17,r3,r6
 400adcc:	003fe306 	br	400ad5c <__alt_data_end+0xfc00ad5c>
 400add0:	0011883a 	mov	r8,zero
 400add4:	0005883a 	mov	r2,zero
 400add8:	003e3f06 	br	400a6d8 <__alt_data_end+0xfc00a6d8>
 400addc:	0401ffc4 	movi	r16,2047
 400ade0:	003e2506 	br	400a678 <__alt_data_end+0xfc00a678>
 400ade4:	0013883a 	mov	r9,zero
 400ade8:	003f8406 	br	400abfc <__alt_data_end+0xfc00abfc>
 400adec:	0005883a 	mov	r2,zero
 400adf0:	0007883a 	mov	r3,zero
 400adf4:	003e8906 	br	400a81c <__alt_data_end+0xfc00a81c>
 400adf8:	197ff804 	addi	r5,r3,-32
 400adfc:	01000804 	movi	r4,32
 400ae00:	414ad83a 	srl	r5,r8,r5
 400ae04:	19002426 	beq	r3,r4,400ae98 <__adddf3+0x89c>
 400ae08:	01001004 	movi	r4,64
 400ae0c:	20c7c83a 	sub	r3,r4,r3
 400ae10:	40c6983a 	sll	r3,r8,r3
 400ae14:	1c46b03a 	or	r3,r3,r17
 400ae18:	1806c03a 	cmpne	r3,r3,zero
 400ae1c:	28e2b03a 	or	r17,r5,r3
 400ae20:	0007883a 	mov	r3,zero
 400ae24:	003f2306 	br	400aab4 <__alt_data_end+0xfc00aab4>
 400ae28:	0007883a 	mov	r3,zero
 400ae2c:	5811883a 	mov	r8,r11
 400ae30:	00bfffc4 	movi	r2,-1
 400ae34:	0401ffc4 	movi	r16,2047
 400ae38:	003e7806 	br	400a81c <__alt_data_end+0xfc00a81c>
 400ae3c:	4462b03a 	or	r17,r8,r17
 400ae40:	8822c03a 	cmpne	r17,r17,zero
 400ae44:	0009883a 	mov	r4,zero
 400ae48:	003fa006 	br	400accc <__alt_data_end+0xfc00accc>
 400ae4c:	4811883a 	mov	r8,r9
 400ae50:	3023883a 	mov	r17,r6
 400ae54:	0401ffc4 	movi	r16,2047
 400ae58:	003e0706 	br	400a678 <__alt_data_end+0xfc00a678>
 400ae5c:	4811883a 	mov	r8,r9
 400ae60:	3023883a 	mov	r17,r6
 400ae64:	003e0406 	br	400a678 <__alt_data_end+0xfc00a678>
 400ae68:	21fff804 	addi	r7,r4,-32
 400ae6c:	01400804 	movi	r5,32
 400ae70:	41ced83a 	srl	r7,r8,r7
 400ae74:	21400a26 	beq	r4,r5,400aea0 <__adddf3+0x8a4>
 400ae78:	01401004 	movi	r5,64
 400ae7c:	2909c83a 	sub	r4,r5,r4
 400ae80:	4108983a 	sll	r4,r8,r4
 400ae84:	2448b03a 	or	r4,r4,r17
 400ae88:	2008c03a 	cmpne	r4,r4,zero
 400ae8c:	3922b03a 	or	r17,r7,r4
 400ae90:	0009883a 	mov	r4,zero
 400ae94:	003f8d06 	br	400accc <__alt_data_end+0xfc00accc>
 400ae98:	0007883a 	mov	r3,zero
 400ae9c:	003fdd06 	br	400ae14 <__alt_data_end+0xfc00ae14>
 400aea0:	0009883a 	mov	r4,zero
 400aea4:	003ff706 	br	400ae84 <__alt_data_end+0xfc00ae84>

0400aea8 <__divdf3>:
 400aea8:	defff204 	addi	sp,sp,-56
 400aeac:	dd400915 	stw	r21,36(sp)
 400aeb0:	282ad53a 	srli	r21,r5,20
 400aeb4:	dd000815 	stw	r20,32(sp)
 400aeb8:	2828d7fa 	srli	r20,r5,31
 400aebc:	dc000415 	stw	r16,16(sp)
 400aec0:	04000434 	movhi	r16,16
 400aec4:	df000c15 	stw	fp,48(sp)
 400aec8:	843fffc4 	addi	r16,r16,-1
 400aecc:	dfc00d15 	stw	ra,52(sp)
 400aed0:	ddc00b15 	stw	r23,44(sp)
 400aed4:	dd800a15 	stw	r22,40(sp)
 400aed8:	dcc00715 	stw	r19,28(sp)
 400aedc:	dc800615 	stw	r18,24(sp)
 400aee0:	dc400515 	stw	r17,20(sp)
 400aee4:	ad41ffcc 	andi	r21,r21,2047
 400aee8:	2c20703a 	and	r16,r5,r16
 400aeec:	a7003fcc 	andi	fp,r20,255
 400aef0:	a8006126 	beq	r21,zero,400b078 <__divdf3+0x1d0>
 400aef4:	0081ffc4 	movi	r2,2047
 400aef8:	2025883a 	mov	r18,r4
 400aefc:	a8803726 	beq	r21,r2,400afdc <__divdf3+0x134>
 400af00:	80c00434 	orhi	r3,r16,16
 400af04:	180690fa 	slli	r3,r3,3
 400af08:	2020d77a 	srli	r16,r4,29
 400af0c:	202490fa 	slli	r18,r4,3
 400af10:	ad7f0044 	addi	r21,r21,-1023
 400af14:	80e0b03a 	or	r16,r16,r3
 400af18:	0027883a 	mov	r19,zero
 400af1c:	0013883a 	mov	r9,zero
 400af20:	3808d53a 	srli	r4,r7,20
 400af24:	382cd7fa 	srli	r22,r7,31
 400af28:	04400434 	movhi	r17,16
 400af2c:	8c7fffc4 	addi	r17,r17,-1
 400af30:	2101ffcc 	andi	r4,r4,2047
 400af34:	3011883a 	mov	r8,r6
 400af38:	3c62703a 	and	r17,r7,r17
 400af3c:	b5c03fcc 	andi	r23,r22,255
 400af40:	20006c26 	beq	r4,zero,400b0f4 <__divdf3+0x24c>
 400af44:	0081ffc4 	movi	r2,2047
 400af48:	20806426 	beq	r4,r2,400b0dc <__divdf3+0x234>
 400af4c:	88c00434 	orhi	r3,r17,16
 400af50:	180690fa 	slli	r3,r3,3
 400af54:	3022d77a 	srli	r17,r6,29
 400af58:	301090fa 	slli	r8,r6,3
 400af5c:	213f0044 	addi	r4,r4,-1023
 400af60:	88e2b03a 	or	r17,r17,r3
 400af64:	000d883a 	mov	r6,zero
 400af68:	a584f03a 	xor	r2,r20,r22
 400af6c:	34cab03a 	or	r5,r6,r19
 400af70:	1007883a 	mov	r3,r2
 400af74:	14c03fcc 	andi	r19,r2,255
 400af78:	008003c4 	movi	r2,15
 400af7c:	a92bc83a 	sub	r21,r21,r4
 400af80:	11409036 	bltu	r2,r5,400b1c4 <__divdf3+0x31c>
 400af84:	280a90ba 	slli	r5,r5,2
 400af88:	00810074 	movhi	r2,1025
 400af8c:	10abe704 	addi	r2,r2,-20580
 400af90:	288b883a 	add	r5,r5,r2
 400af94:	28800017 	ldw	r2,0(r5)
 400af98:	1000683a 	jmp	r2
 400af9c:	0400b1c4 	movi	r16,711
 400afa0:	0400b014 	movui	r16,704
 400afa4:	0400b1b4 	movhi	r16,710
 400afa8:	0400b008 	cmpgei	r16,zero,704
 400afac:	0400b1b4 	movhi	r16,710
 400afb0:	0400b188 	cmpgei	r16,zero,710
 400afb4:	0400b1b4 	movhi	r16,710
 400afb8:	0400b008 	cmpgei	r16,zero,704
 400afbc:	0400b014 	movui	r16,704
 400afc0:	0400b014 	movui	r16,704
 400afc4:	0400b188 	cmpgei	r16,zero,710
 400afc8:	0400b008 	cmpgei	r16,zero,704
 400afcc:	0400aff8 	rdprs	r16,zero,703
 400afd0:	0400aff8 	rdprs	r16,zero,703
 400afd4:	0400aff8 	rdprs	r16,zero,703
 400afd8:	0400b4a8 	cmpgeui	r16,zero,722
 400afdc:	2404b03a 	or	r2,r4,r16
 400afe0:	1000661e 	bne	r2,zero,400b17c <__divdf3+0x2d4>
 400afe4:	04c00204 	movi	r19,8
 400afe8:	0021883a 	mov	r16,zero
 400afec:	0025883a 	mov	r18,zero
 400aff0:	02400084 	movi	r9,2
 400aff4:	003fca06 	br	400af20 <__alt_data_end+0xfc00af20>
 400aff8:	8023883a 	mov	r17,r16
 400affc:	9011883a 	mov	r8,r18
 400b000:	e02f883a 	mov	r23,fp
 400b004:	480d883a 	mov	r6,r9
 400b008:	00800084 	movi	r2,2
 400b00c:	3081311e 	bne	r6,r2,400b4d4 <__divdf3+0x62c>
 400b010:	b827883a 	mov	r19,r23
 400b014:	98c0004c 	andi	r3,r19,1
 400b018:	0081ffc4 	movi	r2,2047
 400b01c:	000b883a 	mov	r5,zero
 400b020:	0025883a 	mov	r18,zero
 400b024:	1004953a 	slli	r2,r2,20
 400b028:	18c03fcc 	andi	r3,r3,255
 400b02c:	04400434 	movhi	r17,16
 400b030:	8c7fffc4 	addi	r17,r17,-1
 400b034:	180697fa 	slli	r3,r3,31
 400b038:	2c4a703a 	and	r5,r5,r17
 400b03c:	288ab03a 	or	r5,r5,r2
 400b040:	28c6b03a 	or	r3,r5,r3
 400b044:	9005883a 	mov	r2,r18
 400b048:	dfc00d17 	ldw	ra,52(sp)
 400b04c:	df000c17 	ldw	fp,48(sp)
 400b050:	ddc00b17 	ldw	r23,44(sp)
 400b054:	dd800a17 	ldw	r22,40(sp)
 400b058:	dd400917 	ldw	r21,36(sp)
 400b05c:	dd000817 	ldw	r20,32(sp)
 400b060:	dcc00717 	ldw	r19,28(sp)
 400b064:	dc800617 	ldw	r18,24(sp)
 400b068:	dc400517 	ldw	r17,20(sp)
 400b06c:	dc000417 	ldw	r16,16(sp)
 400b070:	dec00e04 	addi	sp,sp,56
 400b074:	f800283a 	ret
 400b078:	2404b03a 	or	r2,r4,r16
 400b07c:	2027883a 	mov	r19,r4
 400b080:	10003926 	beq	r2,zero,400b168 <__divdf3+0x2c0>
 400b084:	80012e26 	beq	r16,zero,400b540 <__divdf3+0x698>
 400b088:	8009883a 	mov	r4,r16
 400b08c:	d9800315 	stw	r6,12(sp)
 400b090:	d9c00215 	stw	r7,8(sp)
 400b094:	400cc000 	call	400cc00 <__clzsi2>
 400b098:	d9800317 	ldw	r6,12(sp)
 400b09c:	d9c00217 	ldw	r7,8(sp)
 400b0a0:	10fffd44 	addi	r3,r2,-11
 400b0a4:	01000704 	movi	r4,28
 400b0a8:	20c12116 	blt	r4,r3,400b530 <__divdf3+0x688>
 400b0ac:	01000744 	movi	r4,29
 400b0b0:	147ffe04 	addi	r17,r2,-8
 400b0b4:	20c9c83a 	sub	r4,r4,r3
 400b0b8:	8460983a 	sll	r16,r16,r17
 400b0bc:	9908d83a 	srl	r4,r19,r4
 400b0c0:	9c64983a 	sll	r18,r19,r17
 400b0c4:	2420b03a 	or	r16,r4,r16
 400b0c8:	057f0084 	movi	r21,-1022
 400b0cc:	a8ebc83a 	sub	r21,r21,r3
 400b0d0:	0027883a 	mov	r19,zero
 400b0d4:	0013883a 	mov	r9,zero
 400b0d8:	003f9106 	br	400af20 <__alt_data_end+0xfc00af20>
 400b0dc:	3444b03a 	or	r2,r6,r17
 400b0e0:	10001f1e 	bne	r2,zero,400b160 <__divdf3+0x2b8>
 400b0e4:	0023883a 	mov	r17,zero
 400b0e8:	0011883a 	mov	r8,zero
 400b0ec:	01800084 	movi	r6,2
 400b0f0:	003f9d06 	br	400af68 <__alt_data_end+0xfc00af68>
 400b0f4:	3444b03a 	or	r2,r6,r17
 400b0f8:	10001526 	beq	r2,zero,400b150 <__divdf3+0x2a8>
 400b0fc:	88011b26 	beq	r17,zero,400b56c <__divdf3+0x6c4>
 400b100:	8809883a 	mov	r4,r17
 400b104:	d9800315 	stw	r6,12(sp)
 400b108:	da400115 	stw	r9,4(sp)
 400b10c:	400cc000 	call	400cc00 <__clzsi2>
 400b110:	d9800317 	ldw	r6,12(sp)
 400b114:	da400117 	ldw	r9,4(sp)
 400b118:	10fffd44 	addi	r3,r2,-11
 400b11c:	01000704 	movi	r4,28
 400b120:	20c10e16 	blt	r4,r3,400b55c <__divdf3+0x6b4>
 400b124:	01000744 	movi	r4,29
 400b128:	123ffe04 	addi	r8,r2,-8
 400b12c:	20c9c83a 	sub	r4,r4,r3
 400b130:	8a22983a 	sll	r17,r17,r8
 400b134:	3108d83a 	srl	r4,r6,r4
 400b138:	3210983a 	sll	r8,r6,r8
 400b13c:	2462b03a 	or	r17,r4,r17
 400b140:	013f0084 	movi	r4,-1022
 400b144:	20c9c83a 	sub	r4,r4,r3
 400b148:	000d883a 	mov	r6,zero
 400b14c:	003f8606 	br	400af68 <__alt_data_end+0xfc00af68>
 400b150:	0023883a 	mov	r17,zero
 400b154:	0011883a 	mov	r8,zero
 400b158:	01800044 	movi	r6,1
 400b15c:	003f8206 	br	400af68 <__alt_data_end+0xfc00af68>
 400b160:	018000c4 	movi	r6,3
 400b164:	003f8006 	br	400af68 <__alt_data_end+0xfc00af68>
 400b168:	04c00104 	movi	r19,4
 400b16c:	0021883a 	mov	r16,zero
 400b170:	0025883a 	mov	r18,zero
 400b174:	02400044 	movi	r9,1
 400b178:	003f6906 	br	400af20 <__alt_data_end+0xfc00af20>
 400b17c:	04c00304 	movi	r19,12
 400b180:	024000c4 	movi	r9,3
 400b184:	003f6606 	br	400af20 <__alt_data_end+0xfc00af20>
 400b188:	01400434 	movhi	r5,16
 400b18c:	0007883a 	mov	r3,zero
 400b190:	297fffc4 	addi	r5,r5,-1
 400b194:	04bfffc4 	movi	r18,-1
 400b198:	0081ffc4 	movi	r2,2047
 400b19c:	003fa106 	br	400b024 <__alt_data_end+0xfc00b024>
 400b1a0:	00c00044 	movi	r3,1
 400b1a4:	1887c83a 	sub	r3,r3,r2
 400b1a8:	01000e04 	movi	r4,56
 400b1ac:	20c1210e 	bge	r4,r3,400b634 <__divdf3+0x78c>
 400b1b0:	98c0004c 	andi	r3,r19,1
 400b1b4:	0005883a 	mov	r2,zero
 400b1b8:	000b883a 	mov	r5,zero
 400b1bc:	0025883a 	mov	r18,zero
 400b1c0:	003f9806 	br	400b024 <__alt_data_end+0xfc00b024>
 400b1c4:	8c00fd36 	bltu	r17,r16,400b5bc <__divdf3+0x714>
 400b1c8:	8440fb26 	beq	r16,r17,400b5b8 <__divdf3+0x710>
 400b1cc:	8007883a 	mov	r3,r16
 400b1d0:	ad7fffc4 	addi	r21,r21,-1
 400b1d4:	0021883a 	mov	r16,zero
 400b1d8:	400ad63a 	srli	r5,r8,24
 400b1dc:	8822923a 	slli	r17,r17,8
 400b1e0:	1809883a 	mov	r4,r3
 400b1e4:	402c923a 	slli	r22,r8,8
 400b1e8:	8978b03a 	or	fp,r17,r5
 400b1ec:	e028d43a 	srli	r20,fp,16
 400b1f0:	d8c00015 	stw	r3,0(sp)
 400b1f4:	e5ffffcc 	andi	r23,fp,65535
 400b1f8:	a00b883a 	mov	r5,r20
 400b1fc:	400a5400 	call	400a540 <__udivsi3>
 400b200:	d8c00017 	ldw	r3,0(sp)
 400b204:	a00b883a 	mov	r5,r20
 400b208:	d8800315 	stw	r2,12(sp)
 400b20c:	1809883a 	mov	r4,r3
 400b210:	400a5a40 	call	400a5a4 <__umodsi3>
 400b214:	d9800317 	ldw	r6,12(sp)
 400b218:	1006943a 	slli	r3,r2,16
 400b21c:	9004d43a 	srli	r2,r18,16
 400b220:	b9a3383a 	mul	r17,r23,r6
 400b224:	10c4b03a 	or	r2,r2,r3
 400b228:	1440062e 	bgeu	r2,r17,400b244 <__divdf3+0x39c>
 400b22c:	1705883a 	add	r2,r2,fp
 400b230:	30ffffc4 	addi	r3,r6,-1
 400b234:	1700ee36 	bltu	r2,fp,400b5f0 <__divdf3+0x748>
 400b238:	1440ed2e 	bgeu	r2,r17,400b5f0 <__divdf3+0x748>
 400b23c:	31bfff84 	addi	r6,r6,-2
 400b240:	1705883a 	add	r2,r2,fp
 400b244:	1463c83a 	sub	r17,r2,r17
 400b248:	a00b883a 	mov	r5,r20
 400b24c:	8809883a 	mov	r4,r17
 400b250:	d9800315 	stw	r6,12(sp)
 400b254:	400a5400 	call	400a540 <__udivsi3>
 400b258:	a00b883a 	mov	r5,r20
 400b25c:	8809883a 	mov	r4,r17
 400b260:	d8800215 	stw	r2,8(sp)
 400b264:	400a5a40 	call	400a5a4 <__umodsi3>
 400b268:	d9c00217 	ldw	r7,8(sp)
 400b26c:	1004943a 	slli	r2,r2,16
 400b270:	94bfffcc 	andi	r18,r18,65535
 400b274:	b9d1383a 	mul	r8,r23,r7
 400b278:	90a4b03a 	or	r18,r18,r2
 400b27c:	d9800317 	ldw	r6,12(sp)
 400b280:	9200062e 	bgeu	r18,r8,400b29c <__divdf3+0x3f4>
 400b284:	9725883a 	add	r18,r18,fp
 400b288:	38bfffc4 	addi	r2,r7,-1
 400b28c:	9700d636 	bltu	r18,fp,400b5e8 <__divdf3+0x740>
 400b290:	9200d52e 	bgeu	r18,r8,400b5e8 <__divdf3+0x740>
 400b294:	39ffff84 	addi	r7,r7,-2
 400b298:	9725883a 	add	r18,r18,fp
 400b29c:	3004943a 	slli	r2,r6,16
 400b2a0:	b012d43a 	srli	r9,r22,16
 400b2a4:	b1bfffcc 	andi	r6,r22,65535
 400b2a8:	11e2b03a 	or	r17,r2,r7
 400b2ac:	8806d43a 	srli	r3,r17,16
 400b2b0:	893fffcc 	andi	r4,r17,65535
 400b2b4:	218b383a 	mul	r5,r4,r6
 400b2b8:	30c5383a 	mul	r2,r6,r3
 400b2bc:	2249383a 	mul	r4,r4,r9
 400b2c0:	280ed43a 	srli	r7,r5,16
 400b2c4:	9225c83a 	sub	r18,r18,r8
 400b2c8:	2089883a 	add	r4,r4,r2
 400b2cc:	3909883a 	add	r4,r7,r4
 400b2d0:	1a47383a 	mul	r3,r3,r9
 400b2d4:	2080022e 	bgeu	r4,r2,400b2e0 <__divdf3+0x438>
 400b2d8:	00800074 	movhi	r2,1
 400b2dc:	1887883a 	add	r3,r3,r2
 400b2e0:	2004d43a 	srli	r2,r4,16
 400b2e4:	2008943a 	slli	r4,r4,16
 400b2e8:	297fffcc 	andi	r5,r5,65535
 400b2ec:	10c7883a 	add	r3,r2,r3
 400b2f0:	2149883a 	add	r4,r4,r5
 400b2f4:	90c0a536 	bltu	r18,r3,400b58c <__divdf3+0x6e4>
 400b2f8:	90c0bf26 	beq	r18,r3,400b5f8 <__divdf3+0x750>
 400b2fc:	90c7c83a 	sub	r3,r18,r3
 400b300:	810fc83a 	sub	r7,r16,r4
 400b304:	81e5803a 	cmpltu	r18,r16,r7
 400b308:	1ca5c83a 	sub	r18,r3,r18
 400b30c:	e480c126 	beq	fp,r18,400b614 <__divdf3+0x76c>
 400b310:	a00b883a 	mov	r5,r20
 400b314:	9009883a 	mov	r4,r18
 400b318:	d9800315 	stw	r6,12(sp)
 400b31c:	d9c00215 	stw	r7,8(sp)
 400b320:	da400115 	stw	r9,4(sp)
 400b324:	400a5400 	call	400a540 <__udivsi3>
 400b328:	a00b883a 	mov	r5,r20
 400b32c:	9009883a 	mov	r4,r18
 400b330:	d8800015 	stw	r2,0(sp)
 400b334:	400a5a40 	call	400a5a4 <__umodsi3>
 400b338:	d9c00217 	ldw	r7,8(sp)
 400b33c:	da000017 	ldw	r8,0(sp)
 400b340:	1006943a 	slli	r3,r2,16
 400b344:	3804d43a 	srli	r2,r7,16
 400b348:	ba21383a 	mul	r16,r23,r8
 400b34c:	d9800317 	ldw	r6,12(sp)
 400b350:	10c4b03a 	or	r2,r2,r3
 400b354:	da400117 	ldw	r9,4(sp)
 400b358:	1400062e 	bgeu	r2,r16,400b374 <__divdf3+0x4cc>
 400b35c:	1705883a 	add	r2,r2,fp
 400b360:	40ffffc4 	addi	r3,r8,-1
 400b364:	1700ad36 	bltu	r2,fp,400b61c <__divdf3+0x774>
 400b368:	1400ac2e 	bgeu	r2,r16,400b61c <__divdf3+0x774>
 400b36c:	423fff84 	addi	r8,r8,-2
 400b370:	1705883a 	add	r2,r2,fp
 400b374:	1421c83a 	sub	r16,r2,r16
 400b378:	a00b883a 	mov	r5,r20
 400b37c:	8009883a 	mov	r4,r16
 400b380:	d9800315 	stw	r6,12(sp)
 400b384:	d9c00215 	stw	r7,8(sp)
 400b388:	da000015 	stw	r8,0(sp)
 400b38c:	da400115 	stw	r9,4(sp)
 400b390:	400a5400 	call	400a540 <__udivsi3>
 400b394:	8009883a 	mov	r4,r16
 400b398:	a00b883a 	mov	r5,r20
 400b39c:	1025883a 	mov	r18,r2
 400b3a0:	400a5a40 	call	400a5a4 <__umodsi3>
 400b3a4:	d9c00217 	ldw	r7,8(sp)
 400b3a8:	1004943a 	slli	r2,r2,16
 400b3ac:	bcaf383a 	mul	r23,r23,r18
 400b3b0:	393fffcc 	andi	r4,r7,65535
 400b3b4:	2088b03a 	or	r4,r4,r2
 400b3b8:	d9800317 	ldw	r6,12(sp)
 400b3bc:	da000017 	ldw	r8,0(sp)
 400b3c0:	da400117 	ldw	r9,4(sp)
 400b3c4:	25c0062e 	bgeu	r4,r23,400b3e0 <__divdf3+0x538>
 400b3c8:	2709883a 	add	r4,r4,fp
 400b3cc:	90bfffc4 	addi	r2,r18,-1
 400b3d0:	27009436 	bltu	r4,fp,400b624 <__divdf3+0x77c>
 400b3d4:	25c0932e 	bgeu	r4,r23,400b624 <__divdf3+0x77c>
 400b3d8:	94bfff84 	addi	r18,r18,-2
 400b3dc:	2709883a 	add	r4,r4,fp
 400b3e0:	4004943a 	slli	r2,r8,16
 400b3e4:	25efc83a 	sub	r23,r4,r23
 400b3e8:	1490b03a 	or	r8,r2,r18
 400b3ec:	4008d43a 	srli	r4,r8,16
 400b3f0:	40ffffcc 	andi	r3,r8,65535
 400b3f4:	30c5383a 	mul	r2,r6,r3
 400b3f8:	1a47383a 	mul	r3,r3,r9
 400b3fc:	310d383a 	mul	r6,r6,r4
 400b400:	100ad43a 	srli	r5,r2,16
 400b404:	4913383a 	mul	r9,r9,r4
 400b408:	1987883a 	add	r3,r3,r6
 400b40c:	28c7883a 	add	r3,r5,r3
 400b410:	1980022e 	bgeu	r3,r6,400b41c <__divdf3+0x574>
 400b414:	01000074 	movhi	r4,1
 400b418:	4913883a 	add	r9,r9,r4
 400b41c:	1808d43a 	srli	r4,r3,16
 400b420:	1806943a 	slli	r3,r3,16
 400b424:	10bfffcc 	andi	r2,r2,65535
 400b428:	2253883a 	add	r9,r4,r9
 400b42c:	1887883a 	add	r3,r3,r2
 400b430:	ba403836 	bltu	r23,r9,400b514 <__divdf3+0x66c>
 400b434:	ba403626 	beq	r23,r9,400b510 <__divdf3+0x668>
 400b438:	42000054 	ori	r8,r8,1
 400b43c:	a880ffc4 	addi	r2,r21,1023
 400b440:	00bf570e 	bge	zero,r2,400b1a0 <__alt_data_end+0xfc00b1a0>
 400b444:	40c001cc 	andi	r3,r8,7
 400b448:	18000726 	beq	r3,zero,400b468 <__divdf3+0x5c0>
 400b44c:	40c003cc 	andi	r3,r8,15
 400b450:	01000104 	movi	r4,4
 400b454:	19000426 	beq	r3,r4,400b468 <__divdf3+0x5c0>
 400b458:	4107883a 	add	r3,r8,r4
 400b45c:	1a11803a 	cmpltu	r8,r3,r8
 400b460:	8a23883a 	add	r17,r17,r8
 400b464:	1811883a 	mov	r8,r3
 400b468:	88c0402c 	andhi	r3,r17,256
 400b46c:	18000426 	beq	r3,zero,400b480 <__divdf3+0x5d8>
 400b470:	00ffc034 	movhi	r3,65280
 400b474:	18ffffc4 	addi	r3,r3,-1
 400b478:	a8810004 	addi	r2,r21,1024
 400b47c:	88e2703a 	and	r17,r17,r3
 400b480:	00c1ff84 	movi	r3,2046
 400b484:	18bee316 	blt	r3,r2,400b014 <__alt_data_end+0xfc00b014>
 400b488:	8824977a 	slli	r18,r17,29
 400b48c:	4010d0fa 	srli	r8,r8,3
 400b490:	8822927a 	slli	r17,r17,9
 400b494:	1081ffcc 	andi	r2,r2,2047
 400b498:	9224b03a 	or	r18,r18,r8
 400b49c:	880ad33a 	srli	r5,r17,12
 400b4a0:	98c0004c 	andi	r3,r19,1
 400b4a4:	003edf06 	br	400b024 <__alt_data_end+0xfc00b024>
 400b4a8:	8080022c 	andhi	r2,r16,8
 400b4ac:	10001226 	beq	r2,zero,400b4f8 <__divdf3+0x650>
 400b4b0:	8880022c 	andhi	r2,r17,8
 400b4b4:	1000101e 	bne	r2,zero,400b4f8 <__divdf3+0x650>
 400b4b8:	00800434 	movhi	r2,16
 400b4bc:	89400234 	orhi	r5,r17,8
 400b4c0:	10bfffc4 	addi	r2,r2,-1
 400b4c4:	b007883a 	mov	r3,r22
 400b4c8:	288a703a 	and	r5,r5,r2
 400b4cc:	4025883a 	mov	r18,r8
 400b4d0:	003f3106 	br	400b198 <__alt_data_end+0xfc00b198>
 400b4d4:	008000c4 	movi	r2,3
 400b4d8:	3080a626 	beq	r6,r2,400b774 <__divdf3+0x8cc>
 400b4dc:	00800044 	movi	r2,1
 400b4e0:	3080521e 	bne	r6,r2,400b62c <__divdf3+0x784>
 400b4e4:	b807883a 	mov	r3,r23
 400b4e8:	0005883a 	mov	r2,zero
 400b4ec:	000b883a 	mov	r5,zero
 400b4f0:	0025883a 	mov	r18,zero
 400b4f4:	003ecb06 	br	400b024 <__alt_data_end+0xfc00b024>
 400b4f8:	00800434 	movhi	r2,16
 400b4fc:	81400234 	orhi	r5,r16,8
 400b500:	10bfffc4 	addi	r2,r2,-1
 400b504:	a007883a 	mov	r3,r20
 400b508:	288a703a 	and	r5,r5,r2
 400b50c:	003f2206 	br	400b198 <__alt_data_end+0xfc00b198>
 400b510:	183fca26 	beq	r3,zero,400b43c <__alt_data_end+0xfc00b43c>
 400b514:	e5ef883a 	add	r23,fp,r23
 400b518:	40bfffc4 	addi	r2,r8,-1
 400b51c:	bf00392e 	bgeu	r23,fp,400b604 <__divdf3+0x75c>
 400b520:	1011883a 	mov	r8,r2
 400b524:	ba7fc41e 	bne	r23,r9,400b438 <__alt_data_end+0xfc00b438>
 400b528:	b0ffc31e 	bne	r22,r3,400b438 <__alt_data_end+0xfc00b438>
 400b52c:	003fc306 	br	400b43c <__alt_data_end+0xfc00b43c>
 400b530:	10bff604 	addi	r2,r2,-40
 400b534:	98a0983a 	sll	r16,r19,r2
 400b538:	0025883a 	mov	r18,zero
 400b53c:	003ee206 	br	400b0c8 <__alt_data_end+0xfc00b0c8>
 400b540:	d9800315 	stw	r6,12(sp)
 400b544:	d9c00215 	stw	r7,8(sp)
 400b548:	400cc000 	call	400cc00 <__clzsi2>
 400b54c:	10800804 	addi	r2,r2,32
 400b550:	d9c00217 	ldw	r7,8(sp)
 400b554:	d9800317 	ldw	r6,12(sp)
 400b558:	003ed106 	br	400b0a0 <__alt_data_end+0xfc00b0a0>
 400b55c:	10bff604 	addi	r2,r2,-40
 400b560:	30a2983a 	sll	r17,r6,r2
 400b564:	0011883a 	mov	r8,zero
 400b568:	003ef506 	br	400b140 <__alt_data_end+0xfc00b140>
 400b56c:	3009883a 	mov	r4,r6
 400b570:	d9800315 	stw	r6,12(sp)
 400b574:	da400115 	stw	r9,4(sp)
 400b578:	400cc000 	call	400cc00 <__clzsi2>
 400b57c:	10800804 	addi	r2,r2,32
 400b580:	da400117 	ldw	r9,4(sp)
 400b584:	d9800317 	ldw	r6,12(sp)
 400b588:	003ee306 	br	400b118 <__alt_data_end+0xfc00b118>
 400b58c:	85a1883a 	add	r16,r16,r22
 400b590:	8585803a 	cmpltu	r2,r16,r22
 400b594:	1705883a 	add	r2,r2,fp
 400b598:	14a5883a 	add	r18,r2,r18
 400b59c:	88bfffc4 	addi	r2,r17,-1
 400b5a0:	e4800c2e 	bgeu	fp,r18,400b5d4 <__divdf3+0x72c>
 400b5a4:	90c03e36 	bltu	r18,r3,400b6a0 <__divdf3+0x7f8>
 400b5a8:	1c806926 	beq	r3,r18,400b750 <__divdf3+0x8a8>
 400b5ac:	90c7c83a 	sub	r3,r18,r3
 400b5b0:	1023883a 	mov	r17,r2
 400b5b4:	003f5206 	br	400b300 <__alt_data_end+0xfc00b300>
 400b5b8:	923f0436 	bltu	r18,r8,400b1cc <__alt_data_end+0xfc00b1cc>
 400b5bc:	800897fa 	slli	r4,r16,31
 400b5c0:	9004d07a 	srli	r2,r18,1
 400b5c4:	8006d07a 	srli	r3,r16,1
 400b5c8:	902097fa 	slli	r16,r18,31
 400b5cc:	20a4b03a 	or	r18,r4,r2
 400b5d0:	003f0106 	br	400b1d8 <__alt_data_end+0xfc00b1d8>
 400b5d4:	e4bff51e 	bne	fp,r18,400b5ac <__alt_data_end+0xfc00b5ac>
 400b5d8:	85bff22e 	bgeu	r16,r22,400b5a4 <__alt_data_end+0xfc00b5a4>
 400b5dc:	e0c7c83a 	sub	r3,fp,r3
 400b5e0:	1023883a 	mov	r17,r2
 400b5e4:	003f4606 	br	400b300 <__alt_data_end+0xfc00b300>
 400b5e8:	100f883a 	mov	r7,r2
 400b5ec:	003f2b06 	br	400b29c <__alt_data_end+0xfc00b29c>
 400b5f0:	180d883a 	mov	r6,r3
 400b5f4:	003f1306 	br	400b244 <__alt_data_end+0xfc00b244>
 400b5f8:	813fe436 	bltu	r16,r4,400b58c <__alt_data_end+0xfc00b58c>
 400b5fc:	0007883a 	mov	r3,zero
 400b600:	003f3f06 	br	400b300 <__alt_data_end+0xfc00b300>
 400b604:	ba402c36 	bltu	r23,r9,400b6b8 <__divdf3+0x810>
 400b608:	4dc05426 	beq	r9,r23,400b75c <__divdf3+0x8b4>
 400b60c:	1011883a 	mov	r8,r2
 400b610:	003f8906 	br	400b438 <__alt_data_end+0xfc00b438>
 400b614:	023fffc4 	movi	r8,-1
 400b618:	003f8806 	br	400b43c <__alt_data_end+0xfc00b43c>
 400b61c:	1811883a 	mov	r8,r3
 400b620:	003f5406 	br	400b374 <__alt_data_end+0xfc00b374>
 400b624:	1025883a 	mov	r18,r2
 400b628:	003f6d06 	br	400b3e0 <__alt_data_end+0xfc00b3e0>
 400b62c:	b827883a 	mov	r19,r23
 400b630:	003f8206 	br	400b43c <__alt_data_end+0xfc00b43c>
 400b634:	010007c4 	movi	r4,31
 400b638:	20c02616 	blt	r4,r3,400b6d4 <__divdf3+0x82c>
 400b63c:	00800804 	movi	r2,32
 400b640:	10c5c83a 	sub	r2,r2,r3
 400b644:	888a983a 	sll	r5,r17,r2
 400b648:	40c8d83a 	srl	r4,r8,r3
 400b64c:	4084983a 	sll	r2,r8,r2
 400b650:	88e2d83a 	srl	r17,r17,r3
 400b654:	2906b03a 	or	r3,r5,r4
 400b658:	1004c03a 	cmpne	r2,r2,zero
 400b65c:	1886b03a 	or	r3,r3,r2
 400b660:	188001cc 	andi	r2,r3,7
 400b664:	10000726 	beq	r2,zero,400b684 <__divdf3+0x7dc>
 400b668:	188003cc 	andi	r2,r3,15
 400b66c:	01000104 	movi	r4,4
 400b670:	11000426 	beq	r2,r4,400b684 <__divdf3+0x7dc>
 400b674:	1805883a 	mov	r2,r3
 400b678:	10c00104 	addi	r3,r2,4
 400b67c:	1885803a 	cmpltu	r2,r3,r2
 400b680:	88a3883a 	add	r17,r17,r2
 400b684:	8880202c 	andhi	r2,r17,128
 400b688:	10002726 	beq	r2,zero,400b728 <__divdf3+0x880>
 400b68c:	98c0004c 	andi	r3,r19,1
 400b690:	00800044 	movi	r2,1
 400b694:	000b883a 	mov	r5,zero
 400b698:	0025883a 	mov	r18,zero
 400b69c:	003e6106 	br	400b024 <__alt_data_end+0xfc00b024>
 400b6a0:	85a1883a 	add	r16,r16,r22
 400b6a4:	8585803a 	cmpltu	r2,r16,r22
 400b6a8:	1705883a 	add	r2,r2,fp
 400b6ac:	14a5883a 	add	r18,r2,r18
 400b6b0:	8c7fff84 	addi	r17,r17,-2
 400b6b4:	003f1106 	br	400b2fc <__alt_data_end+0xfc00b2fc>
 400b6b8:	b589883a 	add	r4,r22,r22
 400b6bc:	25ad803a 	cmpltu	r22,r4,r22
 400b6c0:	b739883a 	add	fp,r22,fp
 400b6c4:	40bfff84 	addi	r2,r8,-2
 400b6c8:	bf2f883a 	add	r23,r23,fp
 400b6cc:	202d883a 	mov	r22,r4
 400b6d0:	003f9306 	br	400b520 <__alt_data_end+0xfc00b520>
 400b6d4:	013ff844 	movi	r4,-31
 400b6d8:	2085c83a 	sub	r2,r4,r2
 400b6dc:	8888d83a 	srl	r4,r17,r2
 400b6e0:	00800804 	movi	r2,32
 400b6e4:	18802126 	beq	r3,r2,400b76c <__divdf3+0x8c4>
 400b6e8:	00801004 	movi	r2,64
 400b6ec:	10c5c83a 	sub	r2,r2,r3
 400b6f0:	8884983a 	sll	r2,r17,r2
 400b6f4:	1204b03a 	or	r2,r2,r8
 400b6f8:	1004c03a 	cmpne	r2,r2,zero
 400b6fc:	2084b03a 	or	r2,r4,r2
 400b700:	144001cc 	andi	r17,r2,7
 400b704:	88000d1e 	bne	r17,zero,400b73c <__divdf3+0x894>
 400b708:	000b883a 	mov	r5,zero
 400b70c:	1024d0fa 	srli	r18,r2,3
 400b710:	98c0004c 	andi	r3,r19,1
 400b714:	0005883a 	mov	r2,zero
 400b718:	9464b03a 	or	r18,r18,r17
 400b71c:	003e4106 	br	400b024 <__alt_data_end+0xfc00b024>
 400b720:	1007883a 	mov	r3,r2
 400b724:	0023883a 	mov	r17,zero
 400b728:	880a927a 	slli	r5,r17,9
 400b72c:	1805883a 	mov	r2,r3
 400b730:	8822977a 	slli	r17,r17,29
 400b734:	280ad33a 	srli	r5,r5,12
 400b738:	003ff406 	br	400b70c <__alt_data_end+0xfc00b70c>
 400b73c:	10c003cc 	andi	r3,r2,15
 400b740:	01000104 	movi	r4,4
 400b744:	193ff626 	beq	r3,r4,400b720 <__alt_data_end+0xfc00b720>
 400b748:	0023883a 	mov	r17,zero
 400b74c:	003fca06 	br	400b678 <__alt_data_end+0xfc00b678>
 400b750:	813fd336 	bltu	r16,r4,400b6a0 <__alt_data_end+0xfc00b6a0>
 400b754:	1023883a 	mov	r17,r2
 400b758:	003fa806 	br	400b5fc <__alt_data_end+0xfc00b5fc>
 400b75c:	b0ffd636 	bltu	r22,r3,400b6b8 <__alt_data_end+0xfc00b6b8>
 400b760:	1011883a 	mov	r8,r2
 400b764:	b0ff341e 	bne	r22,r3,400b438 <__alt_data_end+0xfc00b438>
 400b768:	003f3406 	br	400b43c <__alt_data_end+0xfc00b43c>
 400b76c:	0005883a 	mov	r2,zero
 400b770:	003fe006 	br	400b6f4 <__alt_data_end+0xfc00b6f4>
 400b774:	00800434 	movhi	r2,16
 400b778:	89400234 	orhi	r5,r17,8
 400b77c:	10bfffc4 	addi	r2,r2,-1
 400b780:	b807883a 	mov	r3,r23
 400b784:	288a703a 	and	r5,r5,r2
 400b788:	4025883a 	mov	r18,r8
 400b78c:	003e8206 	br	400b198 <__alt_data_end+0xfc00b198>

0400b790 <__eqdf2>:
 400b790:	2804d53a 	srli	r2,r5,20
 400b794:	3806d53a 	srli	r3,r7,20
 400b798:	02000434 	movhi	r8,16
 400b79c:	423fffc4 	addi	r8,r8,-1
 400b7a0:	1081ffcc 	andi	r2,r2,2047
 400b7a4:	0281ffc4 	movi	r10,2047
 400b7a8:	2a12703a 	and	r9,r5,r8
 400b7ac:	18c1ffcc 	andi	r3,r3,2047
 400b7b0:	3a10703a 	and	r8,r7,r8
 400b7b4:	280ad7fa 	srli	r5,r5,31
 400b7b8:	380ed7fa 	srli	r7,r7,31
 400b7bc:	12801026 	beq	r2,r10,400b800 <__eqdf2+0x70>
 400b7c0:	0281ffc4 	movi	r10,2047
 400b7c4:	1a800a26 	beq	r3,r10,400b7f0 <__eqdf2+0x60>
 400b7c8:	10c00226 	beq	r2,r3,400b7d4 <__eqdf2+0x44>
 400b7cc:	00800044 	movi	r2,1
 400b7d0:	f800283a 	ret
 400b7d4:	4a3ffd1e 	bne	r9,r8,400b7cc <__alt_data_end+0xfc00b7cc>
 400b7d8:	21bffc1e 	bne	r4,r6,400b7cc <__alt_data_end+0xfc00b7cc>
 400b7dc:	29c00c26 	beq	r5,r7,400b810 <__eqdf2+0x80>
 400b7e0:	103ffa1e 	bne	r2,zero,400b7cc <__alt_data_end+0xfc00b7cc>
 400b7e4:	2244b03a 	or	r2,r4,r9
 400b7e8:	1004c03a 	cmpne	r2,r2,zero
 400b7ec:	f800283a 	ret
 400b7f0:	3214b03a 	or	r10,r6,r8
 400b7f4:	503ff426 	beq	r10,zero,400b7c8 <__alt_data_end+0xfc00b7c8>
 400b7f8:	00800044 	movi	r2,1
 400b7fc:	f800283a 	ret
 400b800:	2254b03a 	or	r10,r4,r9
 400b804:	503fee26 	beq	r10,zero,400b7c0 <__alt_data_end+0xfc00b7c0>
 400b808:	00800044 	movi	r2,1
 400b80c:	f800283a 	ret
 400b810:	0005883a 	mov	r2,zero
 400b814:	f800283a 	ret

0400b818 <__gedf2>:
 400b818:	2804d53a 	srli	r2,r5,20
 400b81c:	3806d53a 	srli	r3,r7,20
 400b820:	02000434 	movhi	r8,16
 400b824:	423fffc4 	addi	r8,r8,-1
 400b828:	1081ffcc 	andi	r2,r2,2047
 400b82c:	0241ffc4 	movi	r9,2047
 400b830:	2a14703a 	and	r10,r5,r8
 400b834:	18c1ffcc 	andi	r3,r3,2047
 400b838:	3a10703a 	and	r8,r7,r8
 400b83c:	280ad7fa 	srli	r5,r5,31
 400b840:	380ed7fa 	srli	r7,r7,31
 400b844:	12401d26 	beq	r2,r9,400b8bc <__gedf2+0xa4>
 400b848:	0241ffc4 	movi	r9,2047
 400b84c:	1a401226 	beq	r3,r9,400b898 <__gedf2+0x80>
 400b850:	1000081e 	bne	r2,zero,400b874 <__gedf2+0x5c>
 400b854:	2296b03a 	or	r11,r4,r10
 400b858:	5813003a 	cmpeq	r9,r11,zero
 400b85c:	1800091e 	bne	r3,zero,400b884 <__gedf2+0x6c>
 400b860:	3218b03a 	or	r12,r6,r8
 400b864:	6000071e 	bne	r12,zero,400b884 <__gedf2+0x6c>
 400b868:	0005883a 	mov	r2,zero
 400b86c:	5800101e 	bne	r11,zero,400b8b0 <__gedf2+0x98>
 400b870:	f800283a 	ret
 400b874:	18000c1e 	bne	r3,zero,400b8a8 <__gedf2+0x90>
 400b878:	3212b03a 	or	r9,r6,r8
 400b87c:	48000c26 	beq	r9,zero,400b8b0 <__gedf2+0x98>
 400b880:	0013883a 	mov	r9,zero
 400b884:	39c03fcc 	andi	r7,r7,255
 400b888:	48000826 	beq	r9,zero,400b8ac <__gedf2+0x94>
 400b88c:	38000926 	beq	r7,zero,400b8b4 <__gedf2+0x9c>
 400b890:	00800044 	movi	r2,1
 400b894:	f800283a 	ret
 400b898:	3212b03a 	or	r9,r6,r8
 400b89c:	483fec26 	beq	r9,zero,400b850 <__alt_data_end+0xfc00b850>
 400b8a0:	00bfff84 	movi	r2,-2
 400b8a4:	f800283a 	ret
 400b8a8:	39c03fcc 	andi	r7,r7,255
 400b8ac:	29c00626 	beq	r5,r7,400b8c8 <__gedf2+0xb0>
 400b8b0:	283ff726 	beq	r5,zero,400b890 <__alt_data_end+0xfc00b890>
 400b8b4:	00bfffc4 	movi	r2,-1
 400b8b8:	f800283a 	ret
 400b8bc:	2292b03a 	or	r9,r4,r10
 400b8c0:	483fe126 	beq	r9,zero,400b848 <__alt_data_end+0xfc00b848>
 400b8c4:	003ff606 	br	400b8a0 <__alt_data_end+0xfc00b8a0>
 400b8c8:	18bff916 	blt	r3,r2,400b8b0 <__alt_data_end+0xfc00b8b0>
 400b8cc:	10c00316 	blt	r2,r3,400b8dc <__gedf2+0xc4>
 400b8d0:	42bff736 	bltu	r8,r10,400b8b0 <__alt_data_end+0xfc00b8b0>
 400b8d4:	52000326 	beq	r10,r8,400b8e4 <__gedf2+0xcc>
 400b8d8:	5200042e 	bgeu	r10,r8,400b8ec <__gedf2+0xd4>
 400b8dc:	283fec1e 	bne	r5,zero,400b890 <__alt_data_end+0xfc00b890>
 400b8e0:	003ff406 	br	400b8b4 <__alt_data_end+0xfc00b8b4>
 400b8e4:	313ff236 	bltu	r6,r4,400b8b0 <__alt_data_end+0xfc00b8b0>
 400b8e8:	21bffc36 	bltu	r4,r6,400b8dc <__alt_data_end+0xfc00b8dc>
 400b8ec:	0005883a 	mov	r2,zero
 400b8f0:	f800283a 	ret

0400b8f4 <__ledf2>:
 400b8f4:	2804d53a 	srli	r2,r5,20
 400b8f8:	3810d53a 	srli	r8,r7,20
 400b8fc:	00c00434 	movhi	r3,16
 400b900:	18ffffc4 	addi	r3,r3,-1
 400b904:	1081ffcc 	andi	r2,r2,2047
 400b908:	0241ffc4 	movi	r9,2047
 400b90c:	28d4703a 	and	r10,r5,r3
 400b910:	4201ffcc 	andi	r8,r8,2047
 400b914:	38c6703a 	and	r3,r7,r3
 400b918:	280ad7fa 	srli	r5,r5,31
 400b91c:	380ed7fa 	srli	r7,r7,31
 400b920:	12401f26 	beq	r2,r9,400b9a0 <__ledf2+0xac>
 400b924:	0241ffc4 	movi	r9,2047
 400b928:	42401426 	beq	r8,r9,400b97c <__ledf2+0x88>
 400b92c:	1000091e 	bne	r2,zero,400b954 <__ledf2+0x60>
 400b930:	2296b03a 	or	r11,r4,r10
 400b934:	5813003a 	cmpeq	r9,r11,zero
 400b938:	29403fcc 	andi	r5,r5,255
 400b93c:	40000a1e 	bne	r8,zero,400b968 <__ledf2+0x74>
 400b940:	30d8b03a 	or	r12,r6,r3
 400b944:	6000081e 	bne	r12,zero,400b968 <__ledf2+0x74>
 400b948:	0005883a 	mov	r2,zero
 400b94c:	5800111e 	bne	r11,zero,400b994 <__ledf2+0xa0>
 400b950:	f800283a 	ret
 400b954:	29403fcc 	andi	r5,r5,255
 400b958:	40000c1e 	bne	r8,zero,400b98c <__ledf2+0x98>
 400b95c:	30d2b03a 	or	r9,r6,r3
 400b960:	48000c26 	beq	r9,zero,400b994 <__ledf2+0xa0>
 400b964:	0013883a 	mov	r9,zero
 400b968:	39c03fcc 	andi	r7,r7,255
 400b96c:	48000826 	beq	r9,zero,400b990 <__ledf2+0x9c>
 400b970:	38001126 	beq	r7,zero,400b9b8 <__ledf2+0xc4>
 400b974:	00800044 	movi	r2,1
 400b978:	f800283a 	ret
 400b97c:	30d2b03a 	or	r9,r6,r3
 400b980:	483fea26 	beq	r9,zero,400b92c <__alt_data_end+0xfc00b92c>
 400b984:	00800084 	movi	r2,2
 400b988:	f800283a 	ret
 400b98c:	39c03fcc 	andi	r7,r7,255
 400b990:	39400726 	beq	r7,r5,400b9b0 <__ledf2+0xbc>
 400b994:	2800081e 	bne	r5,zero,400b9b8 <__ledf2+0xc4>
 400b998:	00800044 	movi	r2,1
 400b99c:	f800283a 	ret
 400b9a0:	2292b03a 	or	r9,r4,r10
 400b9a4:	483fdf26 	beq	r9,zero,400b924 <__alt_data_end+0xfc00b924>
 400b9a8:	00800084 	movi	r2,2
 400b9ac:	f800283a 	ret
 400b9b0:	4080030e 	bge	r8,r2,400b9c0 <__ledf2+0xcc>
 400b9b4:	383fef26 	beq	r7,zero,400b974 <__alt_data_end+0xfc00b974>
 400b9b8:	00bfffc4 	movi	r2,-1
 400b9bc:	f800283a 	ret
 400b9c0:	123feb16 	blt	r2,r8,400b970 <__alt_data_end+0xfc00b970>
 400b9c4:	1abff336 	bltu	r3,r10,400b994 <__alt_data_end+0xfc00b994>
 400b9c8:	50c00326 	beq	r10,r3,400b9d8 <__ledf2+0xe4>
 400b9cc:	50c0042e 	bgeu	r10,r3,400b9e0 <__ledf2+0xec>
 400b9d0:	283fe81e 	bne	r5,zero,400b974 <__alt_data_end+0xfc00b974>
 400b9d4:	003ff806 	br	400b9b8 <__alt_data_end+0xfc00b9b8>
 400b9d8:	313fee36 	bltu	r6,r4,400b994 <__alt_data_end+0xfc00b994>
 400b9dc:	21bffc36 	bltu	r4,r6,400b9d0 <__alt_data_end+0xfc00b9d0>
 400b9e0:	0005883a 	mov	r2,zero
 400b9e4:	f800283a 	ret

0400b9e8 <__muldf3>:
 400b9e8:	defff304 	addi	sp,sp,-52
 400b9ec:	dd400815 	stw	r21,32(sp)
 400b9f0:	282ad53a 	srli	r21,r5,20
 400b9f4:	dd800915 	stw	r22,36(sp)
 400b9f8:	282cd7fa 	srli	r22,r5,31
 400b9fc:	dc000315 	stw	r16,12(sp)
 400ba00:	04000434 	movhi	r16,16
 400ba04:	dd000715 	stw	r20,28(sp)
 400ba08:	843fffc4 	addi	r16,r16,-1
 400ba0c:	dfc00c15 	stw	ra,48(sp)
 400ba10:	df000b15 	stw	fp,44(sp)
 400ba14:	ddc00a15 	stw	r23,40(sp)
 400ba18:	dcc00615 	stw	r19,24(sp)
 400ba1c:	dc800515 	stw	r18,20(sp)
 400ba20:	dc400415 	stw	r17,16(sp)
 400ba24:	ad41ffcc 	andi	r21,r21,2047
 400ba28:	2c20703a 	and	r16,r5,r16
 400ba2c:	b029883a 	mov	r20,r22
 400ba30:	b2403fcc 	andi	r9,r22,255
 400ba34:	a8006026 	beq	r21,zero,400bbb8 <__muldf3+0x1d0>
 400ba38:	0081ffc4 	movi	r2,2047
 400ba3c:	2027883a 	mov	r19,r4
 400ba40:	a8803626 	beq	r21,r2,400bb1c <__muldf3+0x134>
 400ba44:	80c00434 	orhi	r3,r16,16
 400ba48:	180690fa 	slli	r3,r3,3
 400ba4c:	2020d77a 	srli	r16,r4,29
 400ba50:	202690fa 	slli	r19,r4,3
 400ba54:	ad7f0044 	addi	r21,r21,-1023
 400ba58:	80e0b03a 	or	r16,r16,r3
 400ba5c:	0025883a 	mov	r18,zero
 400ba60:	0039883a 	mov	fp,zero
 400ba64:	3808d53a 	srli	r4,r7,20
 400ba68:	382ed7fa 	srli	r23,r7,31
 400ba6c:	04400434 	movhi	r17,16
 400ba70:	8c7fffc4 	addi	r17,r17,-1
 400ba74:	2101ffcc 	andi	r4,r4,2047
 400ba78:	3011883a 	mov	r8,r6
 400ba7c:	3c62703a 	and	r17,r7,r17
 400ba80:	ba803fcc 	andi	r10,r23,255
 400ba84:	20006d26 	beq	r4,zero,400bc3c <__muldf3+0x254>
 400ba88:	0081ffc4 	movi	r2,2047
 400ba8c:	20806526 	beq	r4,r2,400bc24 <__muldf3+0x23c>
 400ba90:	88c00434 	orhi	r3,r17,16
 400ba94:	180690fa 	slli	r3,r3,3
 400ba98:	3022d77a 	srli	r17,r6,29
 400ba9c:	301090fa 	slli	r8,r6,3
 400baa0:	213f0044 	addi	r4,r4,-1023
 400baa4:	88e2b03a 	or	r17,r17,r3
 400baa8:	000b883a 	mov	r5,zero
 400baac:	a909883a 	add	r4,r21,r4
 400bab0:	2c84b03a 	or	r2,r5,r18
 400bab4:	00c003c4 	movi	r3,15
 400bab8:	bdacf03a 	xor	r22,r23,r22
 400babc:	22c00044 	addi	r11,r4,1
 400bac0:	18809936 	bltu	r3,r2,400bd28 <__muldf3+0x340>
 400bac4:	100490ba 	slli	r2,r2,2
 400bac8:	00c10074 	movhi	r3,1025
 400bacc:	18eeb704 	addi	r3,r3,-17700
 400bad0:	10c5883a 	add	r2,r2,r3
 400bad4:	10800017 	ldw	r2,0(r2)
 400bad8:	1000683a 	jmp	r2
 400badc:	0400bd28 	cmpgeui	r16,zero,756
 400bae0:	0400bb3c 	xorhi	r16,zero,748
 400bae4:	0400bb3c 	xorhi	r16,zero,748
 400bae8:	0400bb38 	rdprs	r16,zero,748
 400baec:	0400bd04 	movi	r16,756
 400baf0:	0400bd04 	movi	r16,756
 400baf4:	0400bcec 	andhi	r16,zero,755
 400baf8:	0400bb38 	rdprs	r16,zero,748
 400bafc:	0400bd04 	movi	r16,756
 400bb00:	0400bcec 	andhi	r16,zero,755
 400bb04:	0400bd04 	movi	r16,756
 400bb08:	0400bb38 	rdprs	r16,zero,748
 400bb0c:	0400bd14 	movui	r16,756
 400bb10:	0400bd14 	movui	r16,756
 400bb14:	0400bd14 	movui	r16,756
 400bb18:	0400bf30 	cmpltui	r16,zero,764
 400bb1c:	2404b03a 	or	r2,r4,r16
 400bb20:	10006f1e 	bne	r2,zero,400bce0 <__muldf3+0x2f8>
 400bb24:	04800204 	movi	r18,8
 400bb28:	0021883a 	mov	r16,zero
 400bb2c:	0027883a 	mov	r19,zero
 400bb30:	07000084 	movi	fp,2
 400bb34:	003fcb06 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bb38:	502d883a 	mov	r22,r10
 400bb3c:	00800084 	movi	r2,2
 400bb40:	28805726 	beq	r5,r2,400bca0 <__muldf3+0x2b8>
 400bb44:	008000c4 	movi	r2,3
 400bb48:	28816626 	beq	r5,r2,400c0e4 <__muldf3+0x6fc>
 400bb4c:	00800044 	movi	r2,1
 400bb50:	2881411e 	bne	r5,r2,400c058 <__muldf3+0x670>
 400bb54:	b029883a 	mov	r20,r22
 400bb58:	0005883a 	mov	r2,zero
 400bb5c:	000b883a 	mov	r5,zero
 400bb60:	0027883a 	mov	r19,zero
 400bb64:	1004953a 	slli	r2,r2,20
 400bb68:	a0c03fcc 	andi	r3,r20,255
 400bb6c:	04400434 	movhi	r17,16
 400bb70:	8c7fffc4 	addi	r17,r17,-1
 400bb74:	180697fa 	slli	r3,r3,31
 400bb78:	2c4a703a 	and	r5,r5,r17
 400bb7c:	288ab03a 	or	r5,r5,r2
 400bb80:	28c6b03a 	or	r3,r5,r3
 400bb84:	9805883a 	mov	r2,r19
 400bb88:	dfc00c17 	ldw	ra,48(sp)
 400bb8c:	df000b17 	ldw	fp,44(sp)
 400bb90:	ddc00a17 	ldw	r23,40(sp)
 400bb94:	dd800917 	ldw	r22,36(sp)
 400bb98:	dd400817 	ldw	r21,32(sp)
 400bb9c:	dd000717 	ldw	r20,28(sp)
 400bba0:	dcc00617 	ldw	r19,24(sp)
 400bba4:	dc800517 	ldw	r18,20(sp)
 400bba8:	dc400417 	ldw	r17,16(sp)
 400bbac:	dc000317 	ldw	r16,12(sp)
 400bbb0:	dec00d04 	addi	sp,sp,52
 400bbb4:	f800283a 	ret
 400bbb8:	2404b03a 	or	r2,r4,r16
 400bbbc:	2025883a 	mov	r18,r4
 400bbc0:	10004226 	beq	r2,zero,400bccc <__muldf3+0x2e4>
 400bbc4:	8000fc26 	beq	r16,zero,400bfb8 <__muldf3+0x5d0>
 400bbc8:	8009883a 	mov	r4,r16
 400bbcc:	d9800215 	stw	r6,8(sp)
 400bbd0:	d9c00015 	stw	r7,0(sp)
 400bbd4:	da400115 	stw	r9,4(sp)
 400bbd8:	400cc000 	call	400cc00 <__clzsi2>
 400bbdc:	d9800217 	ldw	r6,8(sp)
 400bbe0:	d9c00017 	ldw	r7,0(sp)
 400bbe4:	da400117 	ldw	r9,4(sp)
 400bbe8:	10fffd44 	addi	r3,r2,-11
 400bbec:	01000704 	movi	r4,28
 400bbf0:	20c0ed16 	blt	r4,r3,400bfa8 <__muldf3+0x5c0>
 400bbf4:	01000744 	movi	r4,29
 400bbf8:	147ffe04 	addi	r17,r2,-8
 400bbfc:	20c9c83a 	sub	r4,r4,r3
 400bc00:	8460983a 	sll	r16,r16,r17
 400bc04:	9108d83a 	srl	r4,r18,r4
 400bc08:	9466983a 	sll	r19,r18,r17
 400bc0c:	2420b03a 	or	r16,r4,r16
 400bc10:	013f0084 	movi	r4,-1022
 400bc14:	20ebc83a 	sub	r21,r4,r3
 400bc18:	0025883a 	mov	r18,zero
 400bc1c:	0039883a 	mov	fp,zero
 400bc20:	003f9006 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bc24:	3444b03a 	or	r2,r6,r17
 400bc28:	1000261e 	bne	r2,zero,400bcc4 <__muldf3+0x2dc>
 400bc2c:	0023883a 	mov	r17,zero
 400bc30:	0011883a 	mov	r8,zero
 400bc34:	01400084 	movi	r5,2
 400bc38:	003f9c06 	br	400baac <__alt_data_end+0xfc00baac>
 400bc3c:	3444b03a 	or	r2,r6,r17
 400bc40:	10001c26 	beq	r2,zero,400bcb4 <__muldf3+0x2cc>
 400bc44:	8800ce26 	beq	r17,zero,400bf80 <__muldf3+0x598>
 400bc48:	8809883a 	mov	r4,r17
 400bc4c:	d9800215 	stw	r6,8(sp)
 400bc50:	da400115 	stw	r9,4(sp)
 400bc54:	da800015 	stw	r10,0(sp)
 400bc58:	400cc000 	call	400cc00 <__clzsi2>
 400bc5c:	d9800217 	ldw	r6,8(sp)
 400bc60:	da400117 	ldw	r9,4(sp)
 400bc64:	da800017 	ldw	r10,0(sp)
 400bc68:	113ffd44 	addi	r4,r2,-11
 400bc6c:	00c00704 	movi	r3,28
 400bc70:	1900bf16 	blt	r3,r4,400bf70 <__muldf3+0x588>
 400bc74:	00c00744 	movi	r3,29
 400bc78:	123ffe04 	addi	r8,r2,-8
 400bc7c:	1907c83a 	sub	r3,r3,r4
 400bc80:	8a22983a 	sll	r17,r17,r8
 400bc84:	30c6d83a 	srl	r3,r6,r3
 400bc88:	3210983a 	sll	r8,r6,r8
 400bc8c:	1c62b03a 	or	r17,r3,r17
 400bc90:	017f0084 	movi	r5,-1022
 400bc94:	2909c83a 	sub	r4,r5,r4
 400bc98:	000b883a 	mov	r5,zero
 400bc9c:	003f8306 	br	400baac <__alt_data_end+0xfc00baac>
 400bca0:	b029883a 	mov	r20,r22
 400bca4:	0081ffc4 	movi	r2,2047
 400bca8:	000b883a 	mov	r5,zero
 400bcac:	0027883a 	mov	r19,zero
 400bcb0:	003fac06 	br	400bb64 <__alt_data_end+0xfc00bb64>
 400bcb4:	0023883a 	mov	r17,zero
 400bcb8:	0011883a 	mov	r8,zero
 400bcbc:	01400044 	movi	r5,1
 400bcc0:	003f7a06 	br	400baac <__alt_data_end+0xfc00baac>
 400bcc4:	014000c4 	movi	r5,3
 400bcc8:	003f7806 	br	400baac <__alt_data_end+0xfc00baac>
 400bccc:	04800104 	movi	r18,4
 400bcd0:	0021883a 	mov	r16,zero
 400bcd4:	0027883a 	mov	r19,zero
 400bcd8:	07000044 	movi	fp,1
 400bcdc:	003f6106 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bce0:	04800304 	movi	r18,12
 400bce4:	070000c4 	movi	fp,3
 400bce8:	003f5e06 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bcec:	01400434 	movhi	r5,16
 400bcf0:	0029883a 	mov	r20,zero
 400bcf4:	297fffc4 	addi	r5,r5,-1
 400bcf8:	04ffffc4 	movi	r19,-1
 400bcfc:	0081ffc4 	movi	r2,2047
 400bd00:	003f9806 	br	400bb64 <__alt_data_end+0xfc00bb64>
 400bd04:	8023883a 	mov	r17,r16
 400bd08:	9811883a 	mov	r8,r19
 400bd0c:	e00b883a 	mov	r5,fp
 400bd10:	003f8a06 	br	400bb3c <__alt_data_end+0xfc00bb3c>
 400bd14:	8023883a 	mov	r17,r16
 400bd18:	9811883a 	mov	r8,r19
 400bd1c:	482d883a 	mov	r22,r9
 400bd20:	e00b883a 	mov	r5,fp
 400bd24:	003f8506 	br	400bb3c <__alt_data_end+0xfc00bb3c>
 400bd28:	980ad43a 	srli	r5,r19,16
 400bd2c:	401ad43a 	srli	r13,r8,16
 400bd30:	9cffffcc 	andi	r19,r19,65535
 400bd34:	423fffcc 	andi	r8,r8,65535
 400bd38:	44d9383a 	mul	r12,r8,r19
 400bd3c:	4145383a 	mul	r2,r8,r5
 400bd40:	6ccd383a 	mul	r6,r13,r19
 400bd44:	6006d43a 	srli	r3,r12,16
 400bd48:	2b5d383a 	mul	r14,r5,r13
 400bd4c:	308d883a 	add	r6,r6,r2
 400bd50:	198d883a 	add	r6,r3,r6
 400bd54:	3080022e 	bgeu	r6,r2,400bd60 <__muldf3+0x378>
 400bd58:	00800074 	movhi	r2,1
 400bd5c:	709d883a 	add	r14,r14,r2
 400bd60:	8828d43a 	srli	r20,r17,16
 400bd64:	8bffffcc 	andi	r15,r17,65535
 400bd68:	7ce3383a 	mul	r17,r15,r19
 400bd6c:	7945383a 	mul	r2,r15,r5
 400bd70:	a4e7383a 	mul	r19,r20,r19
 400bd74:	8814d43a 	srli	r10,r17,16
 400bd78:	3012943a 	slli	r9,r6,16
 400bd7c:	98a7883a 	add	r19,r19,r2
 400bd80:	633fffcc 	andi	r12,r12,65535
 400bd84:	54d5883a 	add	r10,r10,r19
 400bd88:	3006d43a 	srli	r3,r6,16
 400bd8c:	4b13883a 	add	r9,r9,r12
 400bd90:	2d0b383a 	mul	r5,r5,r20
 400bd94:	5080022e 	bgeu	r10,r2,400bda0 <__muldf3+0x3b8>
 400bd98:	00800074 	movhi	r2,1
 400bd9c:	288b883a 	add	r5,r5,r2
 400bda0:	802ad43a 	srli	r21,r16,16
 400bda4:	843fffcc 	andi	r16,r16,65535
 400bda8:	440d383a 	mul	r6,r8,r16
 400bdac:	4565383a 	mul	r18,r8,r21
 400bdb0:	8359383a 	mul	r12,r16,r13
 400bdb4:	500e943a 	slli	r7,r10,16
 400bdb8:	3010d43a 	srli	r8,r6,16
 400bdbc:	5026d43a 	srli	r19,r10,16
 400bdc0:	6499883a 	add	r12,r12,r18
 400bdc4:	8abfffcc 	andi	r10,r17,65535
 400bdc8:	3a95883a 	add	r10,r7,r10
 400bdcc:	4319883a 	add	r12,r8,r12
 400bdd0:	9967883a 	add	r19,r19,r5
 400bdd4:	1a87883a 	add	r3,r3,r10
 400bdd8:	6d5b383a 	mul	r13,r13,r21
 400bddc:	6480022e 	bgeu	r12,r18,400bde8 <__muldf3+0x400>
 400bde0:	00800074 	movhi	r2,1
 400bde4:	689b883a 	add	r13,r13,r2
 400bde8:	7c25383a 	mul	r18,r15,r16
 400bdec:	7d4b383a 	mul	r5,r15,r21
 400bdf0:	850f383a 	mul	r7,r16,r20
 400bdf4:	901ed43a 	srli	r15,r18,16
 400bdf8:	6004d43a 	srli	r2,r12,16
 400bdfc:	6010943a 	slli	r8,r12,16
 400be00:	394f883a 	add	r7,r7,r5
 400be04:	333fffcc 	andi	r12,r6,65535
 400be08:	79df883a 	add	r15,r15,r7
 400be0c:	135b883a 	add	r13,r2,r13
 400be10:	a563383a 	mul	r17,r20,r21
 400be14:	4305883a 	add	r2,r8,r12
 400be18:	7940022e 	bgeu	r15,r5,400be24 <__muldf3+0x43c>
 400be1c:	01400074 	movhi	r5,1
 400be20:	8963883a 	add	r17,r17,r5
 400be24:	780a943a 	slli	r5,r15,16
 400be28:	91bfffcc 	andi	r6,r18,65535
 400be2c:	70c7883a 	add	r3,r14,r3
 400be30:	298d883a 	add	r6,r5,r6
 400be34:	1a8f803a 	cmpltu	r7,r3,r10
 400be38:	34cb883a 	add	r5,r6,r19
 400be3c:	10c7883a 	add	r3,r2,r3
 400be40:	3955883a 	add	r10,r7,r5
 400be44:	1885803a 	cmpltu	r2,r3,r2
 400be48:	6a91883a 	add	r8,r13,r10
 400be4c:	780cd43a 	srli	r6,r15,16
 400be50:	1219883a 	add	r12,r2,r8
 400be54:	2ccb803a 	cmpltu	r5,r5,r19
 400be58:	51cf803a 	cmpltu	r7,r10,r7
 400be5c:	29ceb03a 	or	r7,r5,r7
 400be60:	4351803a 	cmpltu	r8,r8,r13
 400be64:	608b803a 	cmpltu	r5,r12,r2
 400be68:	4144b03a 	or	r2,r8,r5
 400be6c:	398f883a 	add	r7,r7,r6
 400be70:	3885883a 	add	r2,r7,r2
 400be74:	1810927a 	slli	r8,r3,9
 400be78:	1445883a 	add	r2,r2,r17
 400be7c:	1004927a 	slli	r2,r2,9
 400be80:	6022d5fa 	srli	r17,r12,23
 400be84:	1806d5fa 	srli	r3,r3,23
 400be88:	4252b03a 	or	r9,r8,r9
 400be8c:	600a927a 	slli	r5,r12,9
 400be90:	4810c03a 	cmpne	r8,r9,zero
 400be94:	1462b03a 	or	r17,r2,r17
 400be98:	40c6b03a 	or	r3,r8,r3
 400be9c:	8880402c 	andhi	r2,r17,256
 400bea0:	1950b03a 	or	r8,r3,r5
 400bea4:	10000726 	beq	r2,zero,400bec4 <__muldf3+0x4dc>
 400bea8:	4006d07a 	srli	r3,r8,1
 400beac:	880497fa 	slli	r2,r17,31
 400beb0:	4200004c 	andi	r8,r8,1
 400beb4:	8822d07a 	srli	r17,r17,1
 400beb8:	1a10b03a 	or	r8,r3,r8
 400bebc:	1210b03a 	or	r8,r2,r8
 400bec0:	5809883a 	mov	r4,r11
 400bec4:	2080ffc4 	addi	r2,r4,1023
 400bec8:	0080440e 	bge	zero,r2,400bfdc <__muldf3+0x5f4>
 400becc:	40c001cc 	andi	r3,r8,7
 400bed0:	18000726 	beq	r3,zero,400bef0 <__muldf3+0x508>
 400bed4:	40c003cc 	andi	r3,r8,15
 400bed8:	01400104 	movi	r5,4
 400bedc:	19400426 	beq	r3,r5,400bef0 <__muldf3+0x508>
 400bee0:	4147883a 	add	r3,r8,r5
 400bee4:	1a11803a 	cmpltu	r8,r3,r8
 400bee8:	8a23883a 	add	r17,r17,r8
 400beec:	1811883a 	mov	r8,r3
 400bef0:	88c0402c 	andhi	r3,r17,256
 400bef4:	18000426 	beq	r3,zero,400bf08 <__muldf3+0x520>
 400bef8:	00ffc034 	movhi	r3,65280
 400befc:	18ffffc4 	addi	r3,r3,-1
 400bf00:	20810004 	addi	r2,r4,1024
 400bf04:	88e2703a 	and	r17,r17,r3
 400bf08:	00c1ff84 	movi	r3,2046
 400bf0c:	18bf6416 	blt	r3,r2,400bca0 <__alt_data_end+0xfc00bca0>
 400bf10:	8826977a 	slli	r19,r17,29
 400bf14:	4010d0fa 	srli	r8,r8,3
 400bf18:	8822927a 	slli	r17,r17,9
 400bf1c:	1081ffcc 	andi	r2,r2,2047
 400bf20:	9a26b03a 	or	r19,r19,r8
 400bf24:	880ad33a 	srli	r5,r17,12
 400bf28:	b029883a 	mov	r20,r22
 400bf2c:	003f0d06 	br	400bb64 <__alt_data_end+0xfc00bb64>
 400bf30:	8080022c 	andhi	r2,r16,8
 400bf34:	10000926 	beq	r2,zero,400bf5c <__muldf3+0x574>
 400bf38:	8880022c 	andhi	r2,r17,8
 400bf3c:	1000071e 	bne	r2,zero,400bf5c <__muldf3+0x574>
 400bf40:	00800434 	movhi	r2,16
 400bf44:	89400234 	orhi	r5,r17,8
 400bf48:	10bfffc4 	addi	r2,r2,-1
 400bf4c:	b829883a 	mov	r20,r23
 400bf50:	288a703a 	and	r5,r5,r2
 400bf54:	4027883a 	mov	r19,r8
 400bf58:	003f6806 	br	400bcfc <__alt_data_end+0xfc00bcfc>
 400bf5c:	00800434 	movhi	r2,16
 400bf60:	81400234 	orhi	r5,r16,8
 400bf64:	10bfffc4 	addi	r2,r2,-1
 400bf68:	288a703a 	and	r5,r5,r2
 400bf6c:	003f6306 	br	400bcfc <__alt_data_end+0xfc00bcfc>
 400bf70:	10bff604 	addi	r2,r2,-40
 400bf74:	30a2983a 	sll	r17,r6,r2
 400bf78:	0011883a 	mov	r8,zero
 400bf7c:	003f4406 	br	400bc90 <__alt_data_end+0xfc00bc90>
 400bf80:	3009883a 	mov	r4,r6
 400bf84:	d9800215 	stw	r6,8(sp)
 400bf88:	da400115 	stw	r9,4(sp)
 400bf8c:	da800015 	stw	r10,0(sp)
 400bf90:	400cc000 	call	400cc00 <__clzsi2>
 400bf94:	10800804 	addi	r2,r2,32
 400bf98:	da800017 	ldw	r10,0(sp)
 400bf9c:	da400117 	ldw	r9,4(sp)
 400bfa0:	d9800217 	ldw	r6,8(sp)
 400bfa4:	003f3006 	br	400bc68 <__alt_data_end+0xfc00bc68>
 400bfa8:	10bff604 	addi	r2,r2,-40
 400bfac:	90a0983a 	sll	r16,r18,r2
 400bfb0:	0027883a 	mov	r19,zero
 400bfb4:	003f1606 	br	400bc10 <__alt_data_end+0xfc00bc10>
 400bfb8:	d9800215 	stw	r6,8(sp)
 400bfbc:	d9c00015 	stw	r7,0(sp)
 400bfc0:	da400115 	stw	r9,4(sp)
 400bfc4:	400cc000 	call	400cc00 <__clzsi2>
 400bfc8:	10800804 	addi	r2,r2,32
 400bfcc:	da400117 	ldw	r9,4(sp)
 400bfd0:	d9c00017 	ldw	r7,0(sp)
 400bfd4:	d9800217 	ldw	r6,8(sp)
 400bfd8:	003f0306 	br	400bbe8 <__alt_data_end+0xfc00bbe8>
 400bfdc:	00c00044 	movi	r3,1
 400bfe0:	1887c83a 	sub	r3,r3,r2
 400bfe4:	01000e04 	movi	r4,56
 400bfe8:	20feda16 	blt	r4,r3,400bb54 <__alt_data_end+0xfc00bb54>
 400bfec:	010007c4 	movi	r4,31
 400bff0:	20c01b16 	blt	r4,r3,400c060 <__muldf3+0x678>
 400bff4:	00800804 	movi	r2,32
 400bff8:	10c5c83a 	sub	r2,r2,r3
 400bffc:	888a983a 	sll	r5,r17,r2
 400c000:	40c8d83a 	srl	r4,r8,r3
 400c004:	4084983a 	sll	r2,r8,r2
 400c008:	88e2d83a 	srl	r17,r17,r3
 400c00c:	2906b03a 	or	r3,r5,r4
 400c010:	1004c03a 	cmpne	r2,r2,zero
 400c014:	1886b03a 	or	r3,r3,r2
 400c018:	188001cc 	andi	r2,r3,7
 400c01c:	10000726 	beq	r2,zero,400c03c <__muldf3+0x654>
 400c020:	188003cc 	andi	r2,r3,15
 400c024:	01000104 	movi	r4,4
 400c028:	11000426 	beq	r2,r4,400c03c <__muldf3+0x654>
 400c02c:	1805883a 	mov	r2,r3
 400c030:	10c00104 	addi	r3,r2,4
 400c034:	1885803a 	cmpltu	r2,r3,r2
 400c038:	88a3883a 	add	r17,r17,r2
 400c03c:	8880202c 	andhi	r2,r17,128
 400c040:	10001c26 	beq	r2,zero,400c0b4 <__muldf3+0x6cc>
 400c044:	b029883a 	mov	r20,r22
 400c048:	00800044 	movi	r2,1
 400c04c:	000b883a 	mov	r5,zero
 400c050:	0027883a 	mov	r19,zero
 400c054:	003ec306 	br	400bb64 <__alt_data_end+0xfc00bb64>
 400c058:	5809883a 	mov	r4,r11
 400c05c:	003f9906 	br	400bec4 <__alt_data_end+0xfc00bec4>
 400c060:	013ff844 	movi	r4,-31
 400c064:	2085c83a 	sub	r2,r4,r2
 400c068:	8888d83a 	srl	r4,r17,r2
 400c06c:	00800804 	movi	r2,32
 400c070:	18801a26 	beq	r3,r2,400c0dc <__muldf3+0x6f4>
 400c074:	00801004 	movi	r2,64
 400c078:	10c5c83a 	sub	r2,r2,r3
 400c07c:	8884983a 	sll	r2,r17,r2
 400c080:	1204b03a 	or	r2,r2,r8
 400c084:	1004c03a 	cmpne	r2,r2,zero
 400c088:	2084b03a 	or	r2,r4,r2
 400c08c:	144001cc 	andi	r17,r2,7
 400c090:	88000d1e 	bne	r17,zero,400c0c8 <__muldf3+0x6e0>
 400c094:	000b883a 	mov	r5,zero
 400c098:	1026d0fa 	srli	r19,r2,3
 400c09c:	b029883a 	mov	r20,r22
 400c0a0:	0005883a 	mov	r2,zero
 400c0a4:	9c66b03a 	or	r19,r19,r17
 400c0a8:	003eae06 	br	400bb64 <__alt_data_end+0xfc00bb64>
 400c0ac:	1007883a 	mov	r3,r2
 400c0b0:	0023883a 	mov	r17,zero
 400c0b4:	880a927a 	slli	r5,r17,9
 400c0b8:	1805883a 	mov	r2,r3
 400c0bc:	8822977a 	slli	r17,r17,29
 400c0c0:	280ad33a 	srli	r5,r5,12
 400c0c4:	003ff406 	br	400c098 <__alt_data_end+0xfc00c098>
 400c0c8:	10c003cc 	andi	r3,r2,15
 400c0cc:	01000104 	movi	r4,4
 400c0d0:	193ff626 	beq	r3,r4,400c0ac <__alt_data_end+0xfc00c0ac>
 400c0d4:	0023883a 	mov	r17,zero
 400c0d8:	003fd506 	br	400c030 <__alt_data_end+0xfc00c030>
 400c0dc:	0005883a 	mov	r2,zero
 400c0e0:	003fe706 	br	400c080 <__alt_data_end+0xfc00c080>
 400c0e4:	00800434 	movhi	r2,16
 400c0e8:	89400234 	orhi	r5,r17,8
 400c0ec:	10bfffc4 	addi	r2,r2,-1
 400c0f0:	b029883a 	mov	r20,r22
 400c0f4:	288a703a 	and	r5,r5,r2
 400c0f8:	4027883a 	mov	r19,r8
 400c0fc:	003eff06 	br	400bcfc <__alt_data_end+0xfc00bcfc>

0400c100 <__subdf3>:
 400c100:	02000434 	movhi	r8,16
 400c104:	423fffc4 	addi	r8,r8,-1
 400c108:	defffb04 	addi	sp,sp,-20
 400c10c:	2a14703a 	and	r10,r5,r8
 400c110:	3812d53a 	srli	r9,r7,20
 400c114:	3a10703a 	and	r8,r7,r8
 400c118:	2006d77a 	srli	r3,r4,29
 400c11c:	3004d77a 	srli	r2,r6,29
 400c120:	dc000015 	stw	r16,0(sp)
 400c124:	501490fa 	slli	r10,r10,3
 400c128:	2820d53a 	srli	r16,r5,20
 400c12c:	401090fa 	slli	r8,r8,3
 400c130:	dc800215 	stw	r18,8(sp)
 400c134:	dc400115 	stw	r17,4(sp)
 400c138:	dfc00415 	stw	ra,16(sp)
 400c13c:	202290fa 	slli	r17,r4,3
 400c140:	dcc00315 	stw	r19,12(sp)
 400c144:	4a41ffcc 	andi	r9,r9,2047
 400c148:	0101ffc4 	movi	r4,2047
 400c14c:	2824d7fa 	srli	r18,r5,31
 400c150:	8401ffcc 	andi	r16,r16,2047
 400c154:	50c6b03a 	or	r3,r10,r3
 400c158:	380ed7fa 	srli	r7,r7,31
 400c15c:	408ab03a 	or	r5,r8,r2
 400c160:	300c90fa 	slli	r6,r6,3
 400c164:	49009626 	beq	r9,r4,400c3c0 <__subdf3+0x2c0>
 400c168:	39c0005c 	xori	r7,r7,1
 400c16c:	8245c83a 	sub	r2,r16,r9
 400c170:	3c807426 	beq	r7,r18,400c344 <__subdf3+0x244>
 400c174:	0080af0e 	bge	zero,r2,400c434 <__subdf3+0x334>
 400c178:	48002a1e 	bne	r9,zero,400c224 <__subdf3+0x124>
 400c17c:	2988b03a 	or	r4,r5,r6
 400c180:	20009a1e 	bne	r4,zero,400c3ec <__subdf3+0x2ec>
 400c184:	888001cc 	andi	r2,r17,7
 400c188:	10000726 	beq	r2,zero,400c1a8 <__subdf3+0xa8>
 400c18c:	888003cc 	andi	r2,r17,15
 400c190:	01000104 	movi	r4,4
 400c194:	11000426 	beq	r2,r4,400c1a8 <__subdf3+0xa8>
 400c198:	890b883a 	add	r5,r17,r4
 400c19c:	2c63803a 	cmpltu	r17,r5,r17
 400c1a0:	1c47883a 	add	r3,r3,r17
 400c1a4:	2823883a 	mov	r17,r5
 400c1a8:	1880202c 	andhi	r2,r3,128
 400c1ac:	10005926 	beq	r2,zero,400c314 <__subdf3+0x214>
 400c1b0:	84000044 	addi	r16,r16,1
 400c1b4:	0081ffc4 	movi	r2,2047
 400c1b8:	8080be26 	beq	r16,r2,400c4b4 <__subdf3+0x3b4>
 400c1bc:	017fe034 	movhi	r5,65408
 400c1c0:	297fffc4 	addi	r5,r5,-1
 400c1c4:	1946703a 	and	r3,r3,r5
 400c1c8:	1804977a 	slli	r2,r3,29
 400c1cc:	1806927a 	slli	r3,r3,9
 400c1d0:	8822d0fa 	srli	r17,r17,3
 400c1d4:	8401ffcc 	andi	r16,r16,2047
 400c1d8:	180ad33a 	srli	r5,r3,12
 400c1dc:	9100004c 	andi	r4,r18,1
 400c1e0:	1444b03a 	or	r2,r2,r17
 400c1e4:	80c1ffcc 	andi	r3,r16,2047
 400c1e8:	1820953a 	slli	r16,r3,20
 400c1ec:	20c03fcc 	andi	r3,r4,255
 400c1f0:	180897fa 	slli	r4,r3,31
 400c1f4:	00c00434 	movhi	r3,16
 400c1f8:	18ffffc4 	addi	r3,r3,-1
 400c1fc:	28c6703a 	and	r3,r5,r3
 400c200:	1c06b03a 	or	r3,r3,r16
 400c204:	1906b03a 	or	r3,r3,r4
 400c208:	dfc00417 	ldw	ra,16(sp)
 400c20c:	dcc00317 	ldw	r19,12(sp)
 400c210:	dc800217 	ldw	r18,8(sp)
 400c214:	dc400117 	ldw	r17,4(sp)
 400c218:	dc000017 	ldw	r16,0(sp)
 400c21c:	dec00504 	addi	sp,sp,20
 400c220:	f800283a 	ret
 400c224:	0101ffc4 	movi	r4,2047
 400c228:	813fd626 	beq	r16,r4,400c184 <__alt_data_end+0xfc00c184>
 400c22c:	29402034 	orhi	r5,r5,128
 400c230:	01000e04 	movi	r4,56
 400c234:	2080a316 	blt	r4,r2,400c4c4 <__subdf3+0x3c4>
 400c238:	010007c4 	movi	r4,31
 400c23c:	2080c616 	blt	r4,r2,400c558 <__subdf3+0x458>
 400c240:	01000804 	movi	r4,32
 400c244:	2089c83a 	sub	r4,r4,r2
 400c248:	2910983a 	sll	r8,r5,r4
 400c24c:	308ed83a 	srl	r7,r6,r2
 400c250:	3108983a 	sll	r4,r6,r4
 400c254:	2884d83a 	srl	r2,r5,r2
 400c258:	41ccb03a 	or	r6,r8,r7
 400c25c:	2008c03a 	cmpne	r4,r4,zero
 400c260:	310cb03a 	or	r6,r6,r4
 400c264:	898dc83a 	sub	r6,r17,r6
 400c268:	89a3803a 	cmpltu	r17,r17,r6
 400c26c:	1887c83a 	sub	r3,r3,r2
 400c270:	1c47c83a 	sub	r3,r3,r17
 400c274:	3023883a 	mov	r17,r6
 400c278:	1880202c 	andhi	r2,r3,128
 400c27c:	10002326 	beq	r2,zero,400c30c <__subdf3+0x20c>
 400c280:	04c02034 	movhi	r19,128
 400c284:	9cffffc4 	addi	r19,r19,-1
 400c288:	1ce6703a 	and	r19,r3,r19
 400c28c:	98007a26 	beq	r19,zero,400c478 <__subdf3+0x378>
 400c290:	9809883a 	mov	r4,r19
 400c294:	400cc000 	call	400cc00 <__clzsi2>
 400c298:	113ffe04 	addi	r4,r2,-8
 400c29c:	00c007c4 	movi	r3,31
 400c2a0:	19007b16 	blt	r3,r4,400c490 <__subdf3+0x390>
 400c2a4:	00800804 	movi	r2,32
 400c2a8:	1105c83a 	sub	r2,r2,r4
 400c2ac:	8884d83a 	srl	r2,r17,r2
 400c2b0:	9906983a 	sll	r3,r19,r4
 400c2b4:	8922983a 	sll	r17,r17,r4
 400c2b8:	10c4b03a 	or	r2,r2,r3
 400c2bc:	24007816 	blt	r4,r16,400c4a0 <__subdf3+0x3a0>
 400c2c0:	2421c83a 	sub	r16,r4,r16
 400c2c4:	80c00044 	addi	r3,r16,1
 400c2c8:	010007c4 	movi	r4,31
 400c2cc:	20c09516 	blt	r4,r3,400c524 <__subdf3+0x424>
 400c2d0:	01400804 	movi	r5,32
 400c2d4:	28cbc83a 	sub	r5,r5,r3
 400c2d8:	88c8d83a 	srl	r4,r17,r3
 400c2dc:	8962983a 	sll	r17,r17,r5
 400c2e0:	114a983a 	sll	r5,r2,r5
 400c2e4:	10c6d83a 	srl	r3,r2,r3
 400c2e8:	8804c03a 	cmpne	r2,r17,zero
 400c2ec:	290ab03a 	or	r5,r5,r4
 400c2f0:	28a2b03a 	or	r17,r5,r2
 400c2f4:	0021883a 	mov	r16,zero
 400c2f8:	003fa206 	br	400c184 <__alt_data_end+0xfc00c184>
 400c2fc:	2090b03a 	or	r8,r4,r2
 400c300:	40018e26 	beq	r8,zero,400c93c <__subdf3+0x83c>
 400c304:	1007883a 	mov	r3,r2
 400c308:	2023883a 	mov	r17,r4
 400c30c:	888001cc 	andi	r2,r17,7
 400c310:	103f9e1e 	bne	r2,zero,400c18c <__alt_data_end+0xfc00c18c>
 400c314:	1804977a 	slli	r2,r3,29
 400c318:	8822d0fa 	srli	r17,r17,3
 400c31c:	1810d0fa 	srli	r8,r3,3
 400c320:	9100004c 	andi	r4,r18,1
 400c324:	1444b03a 	or	r2,r2,r17
 400c328:	00c1ffc4 	movi	r3,2047
 400c32c:	80c02826 	beq	r16,r3,400c3d0 <__subdf3+0x2d0>
 400c330:	01400434 	movhi	r5,16
 400c334:	297fffc4 	addi	r5,r5,-1
 400c338:	80e0703a 	and	r16,r16,r3
 400c33c:	414a703a 	and	r5,r8,r5
 400c340:	003fa806 	br	400c1e4 <__alt_data_end+0xfc00c1e4>
 400c344:	0080630e 	bge	zero,r2,400c4d4 <__subdf3+0x3d4>
 400c348:	48003026 	beq	r9,zero,400c40c <__subdf3+0x30c>
 400c34c:	0101ffc4 	movi	r4,2047
 400c350:	813f8c26 	beq	r16,r4,400c184 <__alt_data_end+0xfc00c184>
 400c354:	29402034 	orhi	r5,r5,128
 400c358:	01000e04 	movi	r4,56
 400c35c:	2080a90e 	bge	r4,r2,400c604 <__subdf3+0x504>
 400c360:	298cb03a 	or	r6,r5,r6
 400c364:	3012c03a 	cmpne	r9,r6,zero
 400c368:	0005883a 	mov	r2,zero
 400c36c:	4c53883a 	add	r9,r9,r17
 400c370:	4c63803a 	cmpltu	r17,r9,r17
 400c374:	10c7883a 	add	r3,r2,r3
 400c378:	88c7883a 	add	r3,r17,r3
 400c37c:	4823883a 	mov	r17,r9
 400c380:	1880202c 	andhi	r2,r3,128
 400c384:	1000d026 	beq	r2,zero,400c6c8 <__subdf3+0x5c8>
 400c388:	84000044 	addi	r16,r16,1
 400c38c:	0081ffc4 	movi	r2,2047
 400c390:	8080fe26 	beq	r16,r2,400c78c <__subdf3+0x68c>
 400c394:	00bfe034 	movhi	r2,65408
 400c398:	10bfffc4 	addi	r2,r2,-1
 400c39c:	1886703a 	and	r3,r3,r2
 400c3a0:	880ad07a 	srli	r5,r17,1
 400c3a4:	180497fa 	slli	r2,r3,31
 400c3a8:	8900004c 	andi	r4,r17,1
 400c3ac:	2922b03a 	or	r17,r5,r4
 400c3b0:	1806d07a 	srli	r3,r3,1
 400c3b4:	1462b03a 	or	r17,r2,r17
 400c3b8:	3825883a 	mov	r18,r7
 400c3bc:	003f7106 	br	400c184 <__alt_data_end+0xfc00c184>
 400c3c0:	2984b03a 	or	r2,r5,r6
 400c3c4:	103f6826 	beq	r2,zero,400c168 <__alt_data_end+0xfc00c168>
 400c3c8:	39c03fcc 	andi	r7,r7,255
 400c3cc:	003f6706 	br	400c16c <__alt_data_end+0xfc00c16c>
 400c3d0:	4086b03a 	or	r3,r8,r2
 400c3d4:	18015226 	beq	r3,zero,400c920 <__subdf3+0x820>
 400c3d8:	00c00434 	movhi	r3,16
 400c3dc:	41400234 	orhi	r5,r8,8
 400c3e0:	18ffffc4 	addi	r3,r3,-1
 400c3e4:	28ca703a 	and	r5,r5,r3
 400c3e8:	003f7e06 	br	400c1e4 <__alt_data_end+0xfc00c1e4>
 400c3ec:	10bfffc4 	addi	r2,r2,-1
 400c3f0:	1000491e 	bne	r2,zero,400c518 <__subdf3+0x418>
 400c3f4:	898fc83a 	sub	r7,r17,r6
 400c3f8:	89e3803a 	cmpltu	r17,r17,r7
 400c3fc:	1947c83a 	sub	r3,r3,r5
 400c400:	1c47c83a 	sub	r3,r3,r17
 400c404:	3823883a 	mov	r17,r7
 400c408:	003f9b06 	br	400c278 <__alt_data_end+0xfc00c278>
 400c40c:	2988b03a 	or	r4,r5,r6
 400c410:	203f5c26 	beq	r4,zero,400c184 <__alt_data_end+0xfc00c184>
 400c414:	10bfffc4 	addi	r2,r2,-1
 400c418:	1000931e 	bne	r2,zero,400c668 <__subdf3+0x568>
 400c41c:	898d883a 	add	r6,r17,r6
 400c420:	3463803a 	cmpltu	r17,r6,r17
 400c424:	1947883a 	add	r3,r3,r5
 400c428:	88c7883a 	add	r3,r17,r3
 400c42c:	3023883a 	mov	r17,r6
 400c430:	003fd306 	br	400c380 <__alt_data_end+0xfc00c380>
 400c434:	1000541e 	bne	r2,zero,400c588 <__subdf3+0x488>
 400c438:	80800044 	addi	r2,r16,1
 400c43c:	1081ffcc 	andi	r2,r2,2047
 400c440:	01000044 	movi	r4,1
 400c444:	2080a20e 	bge	r4,r2,400c6d0 <__subdf3+0x5d0>
 400c448:	8989c83a 	sub	r4,r17,r6
 400c44c:	8905803a 	cmpltu	r2,r17,r4
 400c450:	1967c83a 	sub	r19,r3,r5
 400c454:	98a7c83a 	sub	r19,r19,r2
 400c458:	9880202c 	andhi	r2,r19,128
 400c45c:	10006326 	beq	r2,zero,400c5ec <__subdf3+0x4ec>
 400c460:	3463c83a 	sub	r17,r6,r17
 400c464:	28c7c83a 	sub	r3,r5,r3
 400c468:	344d803a 	cmpltu	r6,r6,r17
 400c46c:	19a7c83a 	sub	r19,r3,r6
 400c470:	3825883a 	mov	r18,r7
 400c474:	983f861e 	bne	r19,zero,400c290 <__alt_data_end+0xfc00c290>
 400c478:	8809883a 	mov	r4,r17
 400c47c:	400cc000 	call	400cc00 <__clzsi2>
 400c480:	10800804 	addi	r2,r2,32
 400c484:	113ffe04 	addi	r4,r2,-8
 400c488:	00c007c4 	movi	r3,31
 400c48c:	193f850e 	bge	r3,r4,400c2a4 <__alt_data_end+0xfc00c2a4>
 400c490:	10bff604 	addi	r2,r2,-40
 400c494:	8884983a 	sll	r2,r17,r2
 400c498:	0023883a 	mov	r17,zero
 400c49c:	243f880e 	bge	r4,r16,400c2c0 <__alt_data_end+0xfc00c2c0>
 400c4a0:	00ffe034 	movhi	r3,65408
 400c4a4:	18ffffc4 	addi	r3,r3,-1
 400c4a8:	8121c83a 	sub	r16,r16,r4
 400c4ac:	10c6703a 	and	r3,r2,r3
 400c4b0:	003f3406 	br	400c184 <__alt_data_end+0xfc00c184>
 400c4b4:	9100004c 	andi	r4,r18,1
 400c4b8:	000b883a 	mov	r5,zero
 400c4bc:	0005883a 	mov	r2,zero
 400c4c0:	003f4806 	br	400c1e4 <__alt_data_end+0xfc00c1e4>
 400c4c4:	298cb03a 	or	r6,r5,r6
 400c4c8:	300cc03a 	cmpne	r6,r6,zero
 400c4cc:	0005883a 	mov	r2,zero
 400c4d0:	003f6406 	br	400c264 <__alt_data_end+0xfc00c264>
 400c4d4:	10009a1e 	bne	r2,zero,400c740 <__subdf3+0x640>
 400c4d8:	82400044 	addi	r9,r16,1
 400c4dc:	4881ffcc 	andi	r2,r9,2047
 400c4e0:	02800044 	movi	r10,1
 400c4e4:	5080670e 	bge	r10,r2,400c684 <__subdf3+0x584>
 400c4e8:	0081ffc4 	movi	r2,2047
 400c4ec:	4880af26 	beq	r9,r2,400c7ac <__subdf3+0x6ac>
 400c4f0:	898d883a 	add	r6,r17,r6
 400c4f4:	1945883a 	add	r2,r3,r5
 400c4f8:	3447803a 	cmpltu	r3,r6,r17
 400c4fc:	1887883a 	add	r3,r3,r2
 400c500:	182297fa 	slli	r17,r3,31
 400c504:	300cd07a 	srli	r6,r6,1
 400c508:	1806d07a 	srli	r3,r3,1
 400c50c:	4821883a 	mov	r16,r9
 400c510:	89a2b03a 	or	r17,r17,r6
 400c514:	003f1b06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c518:	0101ffc4 	movi	r4,2047
 400c51c:	813f441e 	bne	r16,r4,400c230 <__alt_data_end+0xfc00c230>
 400c520:	003f1806 	br	400c184 <__alt_data_end+0xfc00c184>
 400c524:	843ff844 	addi	r16,r16,-31
 400c528:	01400804 	movi	r5,32
 400c52c:	1408d83a 	srl	r4,r2,r16
 400c530:	19405026 	beq	r3,r5,400c674 <__subdf3+0x574>
 400c534:	01401004 	movi	r5,64
 400c538:	28c7c83a 	sub	r3,r5,r3
 400c53c:	10c4983a 	sll	r2,r2,r3
 400c540:	88a2b03a 	or	r17,r17,r2
 400c544:	8822c03a 	cmpne	r17,r17,zero
 400c548:	2462b03a 	or	r17,r4,r17
 400c54c:	0007883a 	mov	r3,zero
 400c550:	0021883a 	mov	r16,zero
 400c554:	003f6d06 	br	400c30c <__alt_data_end+0xfc00c30c>
 400c558:	11fff804 	addi	r7,r2,-32
 400c55c:	01000804 	movi	r4,32
 400c560:	29ced83a 	srl	r7,r5,r7
 400c564:	11004526 	beq	r2,r4,400c67c <__subdf3+0x57c>
 400c568:	01001004 	movi	r4,64
 400c56c:	2089c83a 	sub	r4,r4,r2
 400c570:	2904983a 	sll	r2,r5,r4
 400c574:	118cb03a 	or	r6,r2,r6
 400c578:	300cc03a 	cmpne	r6,r6,zero
 400c57c:	398cb03a 	or	r6,r7,r6
 400c580:	0005883a 	mov	r2,zero
 400c584:	003f3706 	br	400c264 <__alt_data_end+0xfc00c264>
 400c588:	80002a26 	beq	r16,zero,400c634 <__subdf3+0x534>
 400c58c:	0101ffc4 	movi	r4,2047
 400c590:	49006626 	beq	r9,r4,400c72c <__subdf3+0x62c>
 400c594:	0085c83a 	sub	r2,zero,r2
 400c598:	18c02034 	orhi	r3,r3,128
 400c59c:	01000e04 	movi	r4,56
 400c5a0:	20807e16 	blt	r4,r2,400c79c <__subdf3+0x69c>
 400c5a4:	010007c4 	movi	r4,31
 400c5a8:	2080e716 	blt	r4,r2,400c948 <__subdf3+0x848>
 400c5ac:	01000804 	movi	r4,32
 400c5b0:	2089c83a 	sub	r4,r4,r2
 400c5b4:	1914983a 	sll	r10,r3,r4
 400c5b8:	8890d83a 	srl	r8,r17,r2
 400c5bc:	8908983a 	sll	r4,r17,r4
 400c5c0:	1884d83a 	srl	r2,r3,r2
 400c5c4:	5222b03a 	or	r17,r10,r8
 400c5c8:	2006c03a 	cmpne	r3,r4,zero
 400c5cc:	88e2b03a 	or	r17,r17,r3
 400c5d0:	3463c83a 	sub	r17,r6,r17
 400c5d4:	2885c83a 	sub	r2,r5,r2
 400c5d8:	344d803a 	cmpltu	r6,r6,r17
 400c5dc:	1187c83a 	sub	r3,r2,r6
 400c5e0:	4821883a 	mov	r16,r9
 400c5e4:	3825883a 	mov	r18,r7
 400c5e8:	003f2306 	br	400c278 <__alt_data_end+0xfc00c278>
 400c5ec:	24d0b03a 	or	r8,r4,r19
 400c5f0:	40001b1e 	bne	r8,zero,400c660 <__subdf3+0x560>
 400c5f4:	0005883a 	mov	r2,zero
 400c5f8:	0009883a 	mov	r4,zero
 400c5fc:	0021883a 	mov	r16,zero
 400c600:	003f4906 	br	400c328 <__alt_data_end+0xfc00c328>
 400c604:	010007c4 	movi	r4,31
 400c608:	20803a16 	blt	r4,r2,400c6f4 <__subdf3+0x5f4>
 400c60c:	01000804 	movi	r4,32
 400c610:	2089c83a 	sub	r4,r4,r2
 400c614:	2912983a 	sll	r9,r5,r4
 400c618:	3090d83a 	srl	r8,r6,r2
 400c61c:	3108983a 	sll	r4,r6,r4
 400c620:	2884d83a 	srl	r2,r5,r2
 400c624:	4a12b03a 	or	r9,r9,r8
 400c628:	2008c03a 	cmpne	r4,r4,zero
 400c62c:	4912b03a 	or	r9,r9,r4
 400c630:	003f4e06 	br	400c36c <__alt_data_end+0xfc00c36c>
 400c634:	1c48b03a 	or	r4,r3,r17
 400c638:	20003c26 	beq	r4,zero,400c72c <__subdf3+0x62c>
 400c63c:	0084303a 	nor	r2,zero,r2
 400c640:	1000381e 	bne	r2,zero,400c724 <__subdf3+0x624>
 400c644:	3463c83a 	sub	r17,r6,r17
 400c648:	28c5c83a 	sub	r2,r5,r3
 400c64c:	344d803a 	cmpltu	r6,r6,r17
 400c650:	1187c83a 	sub	r3,r2,r6
 400c654:	4821883a 	mov	r16,r9
 400c658:	3825883a 	mov	r18,r7
 400c65c:	003f0606 	br	400c278 <__alt_data_end+0xfc00c278>
 400c660:	2023883a 	mov	r17,r4
 400c664:	003f0906 	br	400c28c <__alt_data_end+0xfc00c28c>
 400c668:	0101ffc4 	movi	r4,2047
 400c66c:	813f3a1e 	bne	r16,r4,400c358 <__alt_data_end+0xfc00c358>
 400c670:	003ec406 	br	400c184 <__alt_data_end+0xfc00c184>
 400c674:	0005883a 	mov	r2,zero
 400c678:	003fb106 	br	400c540 <__alt_data_end+0xfc00c540>
 400c67c:	0005883a 	mov	r2,zero
 400c680:	003fbc06 	br	400c574 <__alt_data_end+0xfc00c574>
 400c684:	1c44b03a 	or	r2,r3,r17
 400c688:	80008e1e 	bne	r16,zero,400c8c4 <__subdf3+0x7c4>
 400c68c:	1000c826 	beq	r2,zero,400c9b0 <__subdf3+0x8b0>
 400c690:	2984b03a 	or	r2,r5,r6
 400c694:	103ebb26 	beq	r2,zero,400c184 <__alt_data_end+0xfc00c184>
 400c698:	8989883a 	add	r4,r17,r6
 400c69c:	1945883a 	add	r2,r3,r5
 400c6a0:	2447803a 	cmpltu	r3,r4,r17
 400c6a4:	1887883a 	add	r3,r3,r2
 400c6a8:	1880202c 	andhi	r2,r3,128
 400c6ac:	2023883a 	mov	r17,r4
 400c6b0:	103f1626 	beq	r2,zero,400c30c <__alt_data_end+0xfc00c30c>
 400c6b4:	00bfe034 	movhi	r2,65408
 400c6b8:	10bfffc4 	addi	r2,r2,-1
 400c6bc:	5021883a 	mov	r16,r10
 400c6c0:	1886703a 	and	r3,r3,r2
 400c6c4:	003eaf06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c6c8:	3825883a 	mov	r18,r7
 400c6cc:	003f0f06 	br	400c30c <__alt_data_end+0xfc00c30c>
 400c6d0:	1c44b03a 	or	r2,r3,r17
 400c6d4:	8000251e 	bne	r16,zero,400c76c <__subdf3+0x66c>
 400c6d8:	1000661e 	bne	r2,zero,400c874 <__subdf3+0x774>
 400c6dc:	2990b03a 	or	r8,r5,r6
 400c6e0:	40009626 	beq	r8,zero,400c93c <__subdf3+0x83c>
 400c6e4:	2807883a 	mov	r3,r5
 400c6e8:	3023883a 	mov	r17,r6
 400c6ec:	3825883a 	mov	r18,r7
 400c6f0:	003ea406 	br	400c184 <__alt_data_end+0xfc00c184>
 400c6f4:	127ff804 	addi	r9,r2,-32
 400c6f8:	01000804 	movi	r4,32
 400c6fc:	2a52d83a 	srl	r9,r5,r9
 400c700:	11008c26 	beq	r2,r4,400c934 <__subdf3+0x834>
 400c704:	01001004 	movi	r4,64
 400c708:	2085c83a 	sub	r2,r4,r2
 400c70c:	2884983a 	sll	r2,r5,r2
 400c710:	118cb03a 	or	r6,r2,r6
 400c714:	300cc03a 	cmpne	r6,r6,zero
 400c718:	4992b03a 	or	r9,r9,r6
 400c71c:	0005883a 	mov	r2,zero
 400c720:	003f1206 	br	400c36c <__alt_data_end+0xfc00c36c>
 400c724:	0101ffc4 	movi	r4,2047
 400c728:	493f9c1e 	bne	r9,r4,400c59c <__alt_data_end+0xfc00c59c>
 400c72c:	2807883a 	mov	r3,r5
 400c730:	3023883a 	mov	r17,r6
 400c734:	4821883a 	mov	r16,r9
 400c738:	3825883a 	mov	r18,r7
 400c73c:	003e9106 	br	400c184 <__alt_data_end+0xfc00c184>
 400c740:	80001f1e 	bne	r16,zero,400c7c0 <__subdf3+0x6c0>
 400c744:	1c48b03a 	or	r4,r3,r17
 400c748:	20005a26 	beq	r4,zero,400c8b4 <__subdf3+0x7b4>
 400c74c:	0084303a 	nor	r2,zero,r2
 400c750:	1000561e 	bne	r2,zero,400c8ac <__subdf3+0x7ac>
 400c754:	89a3883a 	add	r17,r17,r6
 400c758:	1945883a 	add	r2,r3,r5
 400c75c:	898d803a 	cmpltu	r6,r17,r6
 400c760:	3087883a 	add	r3,r6,r2
 400c764:	4821883a 	mov	r16,r9
 400c768:	003f0506 	br	400c380 <__alt_data_end+0xfc00c380>
 400c76c:	10002b1e 	bne	r2,zero,400c81c <__subdf3+0x71c>
 400c770:	2984b03a 	or	r2,r5,r6
 400c774:	10008026 	beq	r2,zero,400c978 <__subdf3+0x878>
 400c778:	2807883a 	mov	r3,r5
 400c77c:	3023883a 	mov	r17,r6
 400c780:	3825883a 	mov	r18,r7
 400c784:	0401ffc4 	movi	r16,2047
 400c788:	003e7e06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c78c:	3809883a 	mov	r4,r7
 400c790:	0011883a 	mov	r8,zero
 400c794:	0005883a 	mov	r2,zero
 400c798:	003ee306 	br	400c328 <__alt_data_end+0xfc00c328>
 400c79c:	1c62b03a 	or	r17,r3,r17
 400c7a0:	8822c03a 	cmpne	r17,r17,zero
 400c7a4:	0005883a 	mov	r2,zero
 400c7a8:	003f8906 	br	400c5d0 <__alt_data_end+0xfc00c5d0>
 400c7ac:	3809883a 	mov	r4,r7
 400c7b0:	4821883a 	mov	r16,r9
 400c7b4:	0011883a 	mov	r8,zero
 400c7b8:	0005883a 	mov	r2,zero
 400c7bc:	003eda06 	br	400c328 <__alt_data_end+0xfc00c328>
 400c7c0:	0101ffc4 	movi	r4,2047
 400c7c4:	49003b26 	beq	r9,r4,400c8b4 <__subdf3+0x7b4>
 400c7c8:	0085c83a 	sub	r2,zero,r2
 400c7cc:	18c02034 	orhi	r3,r3,128
 400c7d0:	01000e04 	movi	r4,56
 400c7d4:	20806e16 	blt	r4,r2,400c990 <__subdf3+0x890>
 400c7d8:	010007c4 	movi	r4,31
 400c7dc:	20807716 	blt	r4,r2,400c9bc <__subdf3+0x8bc>
 400c7e0:	01000804 	movi	r4,32
 400c7e4:	2089c83a 	sub	r4,r4,r2
 400c7e8:	1914983a 	sll	r10,r3,r4
 400c7ec:	8890d83a 	srl	r8,r17,r2
 400c7f0:	8908983a 	sll	r4,r17,r4
 400c7f4:	1884d83a 	srl	r2,r3,r2
 400c7f8:	5222b03a 	or	r17,r10,r8
 400c7fc:	2006c03a 	cmpne	r3,r4,zero
 400c800:	88e2b03a 	or	r17,r17,r3
 400c804:	89a3883a 	add	r17,r17,r6
 400c808:	1145883a 	add	r2,r2,r5
 400c80c:	898d803a 	cmpltu	r6,r17,r6
 400c810:	3087883a 	add	r3,r6,r2
 400c814:	4821883a 	mov	r16,r9
 400c818:	003ed906 	br	400c380 <__alt_data_end+0xfc00c380>
 400c81c:	2984b03a 	or	r2,r5,r6
 400c820:	10004226 	beq	r2,zero,400c92c <__subdf3+0x82c>
 400c824:	1808d0fa 	srli	r4,r3,3
 400c828:	8822d0fa 	srli	r17,r17,3
 400c82c:	1806977a 	slli	r3,r3,29
 400c830:	2080022c 	andhi	r2,r4,8
 400c834:	1c62b03a 	or	r17,r3,r17
 400c838:	10000826 	beq	r2,zero,400c85c <__subdf3+0x75c>
 400c83c:	2812d0fa 	srli	r9,r5,3
 400c840:	4880022c 	andhi	r2,r9,8
 400c844:	1000051e 	bne	r2,zero,400c85c <__subdf3+0x75c>
 400c848:	300cd0fa 	srli	r6,r6,3
 400c84c:	2804977a 	slli	r2,r5,29
 400c850:	4809883a 	mov	r4,r9
 400c854:	3825883a 	mov	r18,r7
 400c858:	11a2b03a 	or	r17,r2,r6
 400c85c:	8806d77a 	srli	r3,r17,29
 400c860:	200890fa 	slli	r4,r4,3
 400c864:	882290fa 	slli	r17,r17,3
 400c868:	0401ffc4 	movi	r16,2047
 400c86c:	1906b03a 	or	r3,r3,r4
 400c870:	003e4406 	br	400c184 <__alt_data_end+0xfc00c184>
 400c874:	2984b03a 	or	r2,r5,r6
 400c878:	103e4226 	beq	r2,zero,400c184 <__alt_data_end+0xfc00c184>
 400c87c:	8989c83a 	sub	r4,r17,r6
 400c880:	8911803a 	cmpltu	r8,r17,r4
 400c884:	1945c83a 	sub	r2,r3,r5
 400c888:	1205c83a 	sub	r2,r2,r8
 400c88c:	1200202c 	andhi	r8,r2,128
 400c890:	403e9a26 	beq	r8,zero,400c2fc <__alt_data_end+0xfc00c2fc>
 400c894:	3463c83a 	sub	r17,r6,r17
 400c898:	28c5c83a 	sub	r2,r5,r3
 400c89c:	344d803a 	cmpltu	r6,r6,r17
 400c8a0:	1187c83a 	sub	r3,r2,r6
 400c8a4:	3825883a 	mov	r18,r7
 400c8a8:	003e3606 	br	400c184 <__alt_data_end+0xfc00c184>
 400c8ac:	0101ffc4 	movi	r4,2047
 400c8b0:	493fc71e 	bne	r9,r4,400c7d0 <__alt_data_end+0xfc00c7d0>
 400c8b4:	2807883a 	mov	r3,r5
 400c8b8:	3023883a 	mov	r17,r6
 400c8bc:	4821883a 	mov	r16,r9
 400c8c0:	003e3006 	br	400c184 <__alt_data_end+0xfc00c184>
 400c8c4:	10003626 	beq	r2,zero,400c9a0 <__subdf3+0x8a0>
 400c8c8:	2984b03a 	or	r2,r5,r6
 400c8cc:	10001726 	beq	r2,zero,400c92c <__subdf3+0x82c>
 400c8d0:	1808d0fa 	srli	r4,r3,3
 400c8d4:	8822d0fa 	srli	r17,r17,3
 400c8d8:	1806977a 	slli	r3,r3,29
 400c8dc:	2080022c 	andhi	r2,r4,8
 400c8e0:	1c62b03a 	or	r17,r3,r17
 400c8e4:	10000726 	beq	r2,zero,400c904 <__subdf3+0x804>
 400c8e8:	2812d0fa 	srli	r9,r5,3
 400c8ec:	4880022c 	andhi	r2,r9,8
 400c8f0:	1000041e 	bne	r2,zero,400c904 <__subdf3+0x804>
 400c8f4:	300cd0fa 	srli	r6,r6,3
 400c8f8:	2804977a 	slli	r2,r5,29
 400c8fc:	4809883a 	mov	r4,r9
 400c900:	11a2b03a 	or	r17,r2,r6
 400c904:	8806d77a 	srli	r3,r17,29
 400c908:	200890fa 	slli	r4,r4,3
 400c90c:	882290fa 	slli	r17,r17,3
 400c910:	3825883a 	mov	r18,r7
 400c914:	1906b03a 	or	r3,r3,r4
 400c918:	0401ffc4 	movi	r16,2047
 400c91c:	003e1906 	br	400c184 <__alt_data_end+0xfc00c184>
 400c920:	000b883a 	mov	r5,zero
 400c924:	0005883a 	mov	r2,zero
 400c928:	003e2e06 	br	400c1e4 <__alt_data_end+0xfc00c1e4>
 400c92c:	0401ffc4 	movi	r16,2047
 400c930:	003e1406 	br	400c184 <__alt_data_end+0xfc00c184>
 400c934:	0005883a 	mov	r2,zero
 400c938:	003f7506 	br	400c710 <__alt_data_end+0xfc00c710>
 400c93c:	0005883a 	mov	r2,zero
 400c940:	0009883a 	mov	r4,zero
 400c944:	003e7806 	br	400c328 <__alt_data_end+0xfc00c328>
 400c948:	123ff804 	addi	r8,r2,-32
 400c94c:	01000804 	movi	r4,32
 400c950:	1a10d83a 	srl	r8,r3,r8
 400c954:	11002526 	beq	r2,r4,400c9ec <__subdf3+0x8ec>
 400c958:	01001004 	movi	r4,64
 400c95c:	2085c83a 	sub	r2,r4,r2
 400c960:	1884983a 	sll	r2,r3,r2
 400c964:	1444b03a 	or	r2,r2,r17
 400c968:	1004c03a 	cmpne	r2,r2,zero
 400c96c:	40a2b03a 	or	r17,r8,r2
 400c970:	0005883a 	mov	r2,zero
 400c974:	003f1606 	br	400c5d0 <__alt_data_end+0xfc00c5d0>
 400c978:	02000434 	movhi	r8,16
 400c97c:	0009883a 	mov	r4,zero
 400c980:	423fffc4 	addi	r8,r8,-1
 400c984:	00bfffc4 	movi	r2,-1
 400c988:	0401ffc4 	movi	r16,2047
 400c98c:	003e6606 	br	400c328 <__alt_data_end+0xfc00c328>
 400c990:	1c62b03a 	or	r17,r3,r17
 400c994:	8822c03a 	cmpne	r17,r17,zero
 400c998:	0005883a 	mov	r2,zero
 400c99c:	003f9906 	br	400c804 <__alt_data_end+0xfc00c804>
 400c9a0:	2807883a 	mov	r3,r5
 400c9a4:	3023883a 	mov	r17,r6
 400c9a8:	0401ffc4 	movi	r16,2047
 400c9ac:	003df506 	br	400c184 <__alt_data_end+0xfc00c184>
 400c9b0:	2807883a 	mov	r3,r5
 400c9b4:	3023883a 	mov	r17,r6
 400c9b8:	003df206 	br	400c184 <__alt_data_end+0xfc00c184>
 400c9bc:	123ff804 	addi	r8,r2,-32
 400c9c0:	01000804 	movi	r4,32
 400c9c4:	1a10d83a 	srl	r8,r3,r8
 400c9c8:	11000a26 	beq	r2,r4,400c9f4 <__subdf3+0x8f4>
 400c9cc:	01001004 	movi	r4,64
 400c9d0:	2085c83a 	sub	r2,r4,r2
 400c9d4:	1884983a 	sll	r2,r3,r2
 400c9d8:	1444b03a 	or	r2,r2,r17
 400c9dc:	1004c03a 	cmpne	r2,r2,zero
 400c9e0:	40a2b03a 	or	r17,r8,r2
 400c9e4:	0005883a 	mov	r2,zero
 400c9e8:	003f8606 	br	400c804 <__alt_data_end+0xfc00c804>
 400c9ec:	0005883a 	mov	r2,zero
 400c9f0:	003fdc06 	br	400c964 <__alt_data_end+0xfc00c964>
 400c9f4:	0005883a 	mov	r2,zero
 400c9f8:	003ff706 	br	400c9d8 <__alt_data_end+0xfc00c9d8>

0400c9fc <__fixdfsi>:
 400c9fc:	280cd53a 	srli	r6,r5,20
 400ca00:	00c00434 	movhi	r3,16
 400ca04:	18ffffc4 	addi	r3,r3,-1
 400ca08:	3181ffcc 	andi	r6,r6,2047
 400ca0c:	01c0ff84 	movi	r7,1022
 400ca10:	28c6703a 	and	r3,r5,r3
 400ca14:	280ad7fa 	srli	r5,r5,31
 400ca18:	3980120e 	bge	r7,r6,400ca64 <__fixdfsi+0x68>
 400ca1c:	00810744 	movi	r2,1053
 400ca20:	11800c16 	blt	r2,r6,400ca54 <__fixdfsi+0x58>
 400ca24:	00810cc4 	movi	r2,1075
 400ca28:	1185c83a 	sub	r2,r2,r6
 400ca2c:	01c007c4 	movi	r7,31
 400ca30:	18c00434 	orhi	r3,r3,16
 400ca34:	38800d16 	blt	r7,r2,400ca6c <__fixdfsi+0x70>
 400ca38:	31befb44 	addi	r6,r6,-1043
 400ca3c:	2084d83a 	srl	r2,r4,r2
 400ca40:	1986983a 	sll	r3,r3,r6
 400ca44:	1884b03a 	or	r2,r3,r2
 400ca48:	28000726 	beq	r5,zero,400ca68 <__fixdfsi+0x6c>
 400ca4c:	0085c83a 	sub	r2,zero,r2
 400ca50:	f800283a 	ret
 400ca54:	00a00034 	movhi	r2,32768
 400ca58:	10bfffc4 	addi	r2,r2,-1
 400ca5c:	2885883a 	add	r2,r5,r2
 400ca60:	f800283a 	ret
 400ca64:	0005883a 	mov	r2,zero
 400ca68:	f800283a 	ret
 400ca6c:	008104c4 	movi	r2,1043
 400ca70:	1185c83a 	sub	r2,r2,r6
 400ca74:	1884d83a 	srl	r2,r3,r2
 400ca78:	003ff306 	br	400ca48 <__alt_data_end+0xfc00ca48>

0400ca7c <__floatsidf>:
 400ca7c:	defffd04 	addi	sp,sp,-12
 400ca80:	dfc00215 	stw	ra,8(sp)
 400ca84:	dc400115 	stw	r17,4(sp)
 400ca88:	dc000015 	stw	r16,0(sp)
 400ca8c:	20002b26 	beq	r4,zero,400cb3c <__floatsidf+0xc0>
 400ca90:	2023883a 	mov	r17,r4
 400ca94:	2020d7fa 	srli	r16,r4,31
 400ca98:	20002d16 	blt	r4,zero,400cb50 <__floatsidf+0xd4>
 400ca9c:	8809883a 	mov	r4,r17
 400caa0:	400cc000 	call	400cc00 <__clzsi2>
 400caa4:	01410784 	movi	r5,1054
 400caa8:	288bc83a 	sub	r5,r5,r2
 400caac:	01010cc4 	movi	r4,1075
 400cab0:	2149c83a 	sub	r4,r4,r5
 400cab4:	00c007c4 	movi	r3,31
 400cab8:	1900160e 	bge	r3,r4,400cb14 <__floatsidf+0x98>
 400cabc:	00c104c4 	movi	r3,1043
 400cac0:	1947c83a 	sub	r3,r3,r5
 400cac4:	88c6983a 	sll	r3,r17,r3
 400cac8:	00800434 	movhi	r2,16
 400cacc:	10bfffc4 	addi	r2,r2,-1
 400cad0:	1886703a 	and	r3,r3,r2
 400cad4:	2941ffcc 	andi	r5,r5,2047
 400cad8:	800d883a 	mov	r6,r16
 400cadc:	0005883a 	mov	r2,zero
 400cae0:	280a953a 	slli	r5,r5,20
 400cae4:	31803fcc 	andi	r6,r6,255
 400cae8:	01000434 	movhi	r4,16
 400caec:	300c97fa 	slli	r6,r6,31
 400caf0:	213fffc4 	addi	r4,r4,-1
 400caf4:	1906703a 	and	r3,r3,r4
 400caf8:	1946b03a 	or	r3,r3,r5
 400cafc:	1986b03a 	or	r3,r3,r6
 400cb00:	dfc00217 	ldw	ra,8(sp)
 400cb04:	dc400117 	ldw	r17,4(sp)
 400cb08:	dc000017 	ldw	r16,0(sp)
 400cb0c:	dec00304 	addi	sp,sp,12
 400cb10:	f800283a 	ret
 400cb14:	00c002c4 	movi	r3,11
 400cb18:	1887c83a 	sub	r3,r3,r2
 400cb1c:	88c6d83a 	srl	r3,r17,r3
 400cb20:	8904983a 	sll	r2,r17,r4
 400cb24:	01000434 	movhi	r4,16
 400cb28:	213fffc4 	addi	r4,r4,-1
 400cb2c:	2941ffcc 	andi	r5,r5,2047
 400cb30:	1906703a 	and	r3,r3,r4
 400cb34:	800d883a 	mov	r6,r16
 400cb38:	003fe906 	br	400cae0 <__alt_data_end+0xfc00cae0>
 400cb3c:	000d883a 	mov	r6,zero
 400cb40:	000b883a 	mov	r5,zero
 400cb44:	0007883a 	mov	r3,zero
 400cb48:	0005883a 	mov	r2,zero
 400cb4c:	003fe406 	br	400cae0 <__alt_data_end+0xfc00cae0>
 400cb50:	0123c83a 	sub	r17,zero,r4
 400cb54:	003fd106 	br	400ca9c <__alt_data_end+0xfc00ca9c>

0400cb58 <__floatunsidf>:
 400cb58:	defffe04 	addi	sp,sp,-8
 400cb5c:	dc000015 	stw	r16,0(sp)
 400cb60:	dfc00115 	stw	ra,4(sp)
 400cb64:	2021883a 	mov	r16,r4
 400cb68:	20002226 	beq	r4,zero,400cbf4 <__floatunsidf+0x9c>
 400cb6c:	400cc000 	call	400cc00 <__clzsi2>
 400cb70:	01010784 	movi	r4,1054
 400cb74:	2089c83a 	sub	r4,r4,r2
 400cb78:	01810cc4 	movi	r6,1075
 400cb7c:	310dc83a 	sub	r6,r6,r4
 400cb80:	00c007c4 	movi	r3,31
 400cb84:	1980120e 	bge	r3,r6,400cbd0 <__floatunsidf+0x78>
 400cb88:	00c104c4 	movi	r3,1043
 400cb8c:	1907c83a 	sub	r3,r3,r4
 400cb90:	80ca983a 	sll	r5,r16,r3
 400cb94:	00800434 	movhi	r2,16
 400cb98:	10bfffc4 	addi	r2,r2,-1
 400cb9c:	2101ffcc 	andi	r4,r4,2047
 400cba0:	0021883a 	mov	r16,zero
 400cba4:	288a703a 	and	r5,r5,r2
 400cba8:	2008953a 	slli	r4,r4,20
 400cbac:	00c00434 	movhi	r3,16
 400cbb0:	18ffffc4 	addi	r3,r3,-1
 400cbb4:	28c6703a 	and	r3,r5,r3
 400cbb8:	8005883a 	mov	r2,r16
 400cbbc:	1906b03a 	or	r3,r3,r4
 400cbc0:	dfc00117 	ldw	ra,4(sp)
 400cbc4:	dc000017 	ldw	r16,0(sp)
 400cbc8:	dec00204 	addi	sp,sp,8
 400cbcc:	f800283a 	ret
 400cbd0:	00c002c4 	movi	r3,11
 400cbd4:	188bc83a 	sub	r5,r3,r2
 400cbd8:	814ad83a 	srl	r5,r16,r5
 400cbdc:	00c00434 	movhi	r3,16
 400cbe0:	18ffffc4 	addi	r3,r3,-1
 400cbe4:	81a0983a 	sll	r16,r16,r6
 400cbe8:	2101ffcc 	andi	r4,r4,2047
 400cbec:	28ca703a 	and	r5,r5,r3
 400cbf0:	003fed06 	br	400cba8 <__alt_data_end+0xfc00cba8>
 400cbf4:	0009883a 	mov	r4,zero
 400cbf8:	000b883a 	mov	r5,zero
 400cbfc:	003fea06 	br	400cba8 <__alt_data_end+0xfc00cba8>

0400cc00 <__clzsi2>:
 400cc00:	00bfffd4 	movui	r2,65535
 400cc04:	11000536 	bltu	r2,r4,400cc1c <__clzsi2+0x1c>
 400cc08:	00803fc4 	movi	r2,255
 400cc0c:	11000f36 	bltu	r2,r4,400cc4c <__clzsi2+0x4c>
 400cc10:	00800804 	movi	r2,32
 400cc14:	0007883a 	mov	r3,zero
 400cc18:	00000506 	br	400cc30 <__clzsi2+0x30>
 400cc1c:	00804034 	movhi	r2,256
 400cc20:	10bfffc4 	addi	r2,r2,-1
 400cc24:	11000c2e 	bgeu	r2,r4,400cc58 <__clzsi2+0x58>
 400cc28:	00800204 	movi	r2,8
 400cc2c:	00c00604 	movi	r3,24
 400cc30:	20c8d83a 	srl	r4,r4,r3
 400cc34:	00c10074 	movhi	r3,1025
 400cc38:	18c0df04 	addi	r3,r3,892
 400cc3c:	1909883a 	add	r4,r3,r4
 400cc40:	20c00003 	ldbu	r3,0(r4)
 400cc44:	10c5c83a 	sub	r2,r2,r3
 400cc48:	f800283a 	ret
 400cc4c:	00800604 	movi	r2,24
 400cc50:	00c00204 	movi	r3,8
 400cc54:	003ff606 	br	400cc30 <__alt_data_end+0xfc00cc30>
 400cc58:	00800404 	movi	r2,16
 400cc5c:	1007883a 	mov	r3,r2
 400cc60:	003ff306 	br	400cc30 <__alt_data_end+0xfc00cc30>

0400cc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cc64:	defffe04 	addi	sp,sp,-8
 400cc68:	dfc00115 	stw	ra,4(sp)
 400cc6c:	df000015 	stw	fp,0(sp)
 400cc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cc74:	00810074 	movhi	r2,1025
 400cc78:	10880d04 	addi	r2,r2,8244
 400cc7c:	10800017 	ldw	r2,0(r2)
 400cc80:	10000526 	beq	r2,zero,400cc98 <alt_get_errno+0x34>
 400cc84:	00810074 	movhi	r2,1025
 400cc88:	10880d04 	addi	r2,r2,8244
 400cc8c:	10800017 	ldw	r2,0(r2)
 400cc90:	103ee83a 	callr	r2
 400cc94:	00000206 	br	400cca0 <alt_get_errno+0x3c>
 400cc98:	00810074 	movhi	r2,1025
 400cc9c:	108ef804 	addi	r2,r2,15328
}
 400cca0:	e037883a 	mov	sp,fp
 400cca4:	dfc00117 	ldw	ra,4(sp)
 400cca8:	df000017 	ldw	fp,0(sp)
 400ccac:	dec00204 	addi	sp,sp,8
 400ccb0:	f800283a 	ret

0400ccb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400ccb4:	defffb04 	addi	sp,sp,-20
 400ccb8:	dfc00415 	stw	ra,16(sp)
 400ccbc:	df000315 	stw	fp,12(sp)
 400ccc0:	df000304 	addi	fp,sp,12
 400ccc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ccc8:	e0bfff17 	ldw	r2,-4(fp)
 400cccc:	10000616 	blt	r2,zero,400cce8 <close+0x34>
 400ccd0:	e0bfff17 	ldw	r2,-4(fp)
 400ccd4:	10c00324 	muli	r3,r2,12
 400ccd8:	00810074 	movhi	r2,1025
 400ccdc:	10837004 	addi	r2,r2,3520
 400cce0:	1885883a 	add	r2,r3,r2
 400cce4:	00000106 	br	400ccec <close+0x38>
 400cce8:	0005883a 	mov	r2,zero
 400ccec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400ccf0:	e0bffd17 	ldw	r2,-12(fp)
 400ccf4:	10001926 	beq	r2,zero,400cd5c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400ccf8:	e0bffd17 	ldw	r2,-12(fp)
 400ccfc:	10800017 	ldw	r2,0(r2)
 400cd00:	10800417 	ldw	r2,16(r2)
 400cd04:	10000626 	beq	r2,zero,400cd20 <close+0x6c>
 400cd08:	e0bffd17 	ldw	r2,-12(fp)
 400cd0c:	10800017 	ldw	r2,0(r2)
 400cd10:	10800417 	ldw	r2,16(r2)
 400cd14:	e13ffd17 	ldw	r4,-12(fp)
 400cd18:	103ee83a 	callr	r2
 400cd1c:	00000106 	br	400cd24 <close+0x70>
 400cd20:	0005883a 	mov	r2,zero
 400cd24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400cd28:	e13fff17 	ldw	r4,-4(fp)
 400cd2c:	400d3c40 	call	400d3c4 <alt_release_fd>
    if (rval < 0)
 400cd30:	e0bffe17 	ldw	r2,-8(fp)
 400cd34:	1000070e 	bge	r2,zero,400cd54 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400cd38:	400cc640 	call	400cc64 <alt_get_errno>
 400cd3c:	1007883a 	mov	r3,r2
 400cd40:	e0bffe17 	ldw	r2,-8(fp)
 400cd44:	0085c83a 	sub	r2,zero,r2
 400cd48:	18800015 	stw	r2,0(r3)
      return -1;
 400cd4c:	00bfffc4 	movi	r2,-1
 400cd50:	00000706 	br	400cd70 <close+0xbc>
    }
    return 0;
 400cd54:	0005883a 	mov	r2,zero
 400cd58:	00000506 	br	400cd70 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400cd5c:	400cc640 	call	400cc64 <alt_get_errno>
 400cd60:	1007883a 	mov	r3,r2
 400cd64:	00801444 	movi	r2,81
 400cd68:	18800015 	stw	r2,0(r3)
    return -1;
 400cd6c:	00bfffc4 	movi	r2,-1
  }
}
 400cd70:	e037883a 	mov	sp,fp
 400cd74:	dfc00117 	ldw	ra,4(sp)
 400cd78:	df000017 	ldw	fp,0(sp)
 400cd7c:	dec00204 	addi	sp,sp,8
 400cd80:	f800283a 	ret

0400cd84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400cd84:	defffc04 	addi	sp,sp,-16
 400cd88:	df000315 	stw	fp,12(sp)
 400cd8c:	df000304 	addi	fp,sp,12
 400cd90:	e13ffd15 	stw	r4,-12(fp)
 400cd94:	e17ffe15 	stw	r5,-8(fp)
 400cd98:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400cd9c:	e0bfff17 	ldw	r2,-4(fp)
}
 400cda0:	e037883a 	mov	sp,fp
 400cda4:	df000017 	ldw	fp,0(sp)
 400cda8:	dec00104 	addi	sp,sp,4
 400cdac:	f800283a 	ret

0400cdb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cdb0:	defffe04 	addi	sp,sp,-8
 400cdb4:	dfc00115 	stw	ra,4(sp)
 400cdb8:	df000015 	stw	fp,0(sp)
 400cdbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cdc0:	00810074 	movhi	r2,1025
 400cdc4:	10880d04 	addi	r2,r2,8244
 400cdc8:	10800017 	ldw	r2,0(r2)
 400cdcc:	10000526 	beq	r2,zero,400cde4 <alt_get_errno+0x34>
 400cdd0:	00810074 	movhi	r2,1025
 400cdd4:	10880d04 	addi	r2,r2,8244
 400cdd8:	10800017 	ldw	r2,0(r2)
 400cddc:	103ee83a 	callr	r2
 400cde0:	00000206 	br	400cdec <alt_get_errno+0x3c>
 400cde4:	00810074 	movhi	r2,1025
 400cde8:	108ef804 	addi	r2,r2,15328
}
 400cdec:	e037883a 	mov	sp,fp
 400cdf0:	dfc00117 	ldw	ra,4(sp)
 400cdf4:	df000017 	ldw	fp,0(sp)
 400cdf8:	dec00204 	addi	sp,sp,8
 400cdfc:	f800283a 	ret

0400ce00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400ce00:	defffb04 	addi	sp,sp,-20
 400ce04:	dfc00415 	stw	ra,16(sp)
 400ce08:	df000315 	stw	fp,12(sp)
 400ce0c:	df000304 	addi	fp,sp,12
 400ce10:	e13ffe15 	stw	r4,-8(fp)
 400ce14:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ce18:	e0bffe17 	ldw	r2,-8(fp)
 400ce1c:	10000616 	blt	r2,zero,400ce38 <fstat+0x38>
 400ce20:	e0bffe17 	ldw	r2,-8(fp)
 400ce24:	10c00324 	muli	r3,r2,12
 400ce28:	00810074 	movhi	r2,1025
 400ce2c:	10837004 	addi	r2,r2,3520
 400ce30:	1885883a 	add	r2,r3,r2
 400ce34:	00000106 	br	400ce3c <fstat+0x3c>
 400ce38:	0005883a 	mov	r2,zero
 400ce3c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400ce40:	e0bffd17 	ldw	r2,-12(fp)
 400ce44:	10001026 	beq	r2,zero,400ce88 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400ce48:	e0bffd17 	ldw	r2,-12(fp)
 400ce4c:	10800017 	ldw	r2,0(r2)
 400ce50:	10800817 	ldw	r2,32(r2)
 400ce54:	10000726 	beq	r2,zero,400ce74 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400ce58:	e0bffd17 	ldw	r2,-12(fp)
 400ce5c:	10800017 	ldw	r2,0(r2)
 400ce60:	10800817 	ldw	r2,32(r2)
 400ce64:	e17fff17 	ldw	r5,-4(fp)
 400ce68:	e13ffd17 	ldw	r4,-12(fp)
 400ce6c:	103ee83a 	callr	r2
 400ce70:	00000a06 	br	400ce9c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ce74:	e0bfff17 	ldw	r2,-4(fp)
 400ce78:	00c80004 	movi	r3,8192
 400ce7c:	10c00115 	stw	r3,4(r2)
      return 0;
 400ce80:	0005883a 	mov	r2,zero
 400ce84:	00000506 	br	400ce9c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ce88:	400cdb00 	call	400cdb0 <alt_get_errno>
 400ce8c:	1007883a 	mov	r3,r2
 400ce90:	00801444 	movi	r2,81
 400ce94:	18800015 	stw	r2,0(r3)
    return -1;
 400ce98:	00bfffc4 	movi	r2,-1
  }
}
 400ce9c:	e037883a 	mov	sp,fp
 400cea0:	dfc00117 	ldw	ra,4(sp)
 400cea4:	df000017 	ldw	fp,0(sp)
 400cea8:	dec00204 	addi	sp,sp,8
 400ceac:	f800283a 	ret

0400ceb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ceb0:	defffe04 	addi	sp,sp,-8
 400ceb4:	dfc00115 	stw	ra,4(sp)
 400ceb8:	df000015 	stw	fp,0(sp)
 400cebc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cec0:	00810074 	movhi	r2,1025
 400cec4:	10880d04 	addi	r2,r2,8244
 400cec8:	10800017 	ldw	r2,0(r2)
 400cecc:	10000526 	beq	r2,zero,400cee4 <alt_get_errno+0x34>
 400ced0:	00810074 	movhi	r2,1025
 400ced4:	10880d04 	addi	r2,r2,8244
 400ced8:	10800017 	ldw	r2,0(r2)
 400cedc:	103ee83a 	callr	r2
 400cee0:	00000206 	br	400ceec <alt_get_errno+0x3c>
 400cee4:	00810074 	movhi	r2,1025
 400cee8:	108ef804 	addi	r2,r2,15328
}
 400ceec:	e037883a 	mov	sp,fp
 400cef0:	dfc00117 	ldw	ra,4(sp)
 400cef4:	df000017 	ldw	fp,0(sp)
 400cef8:	dec00204 	addi	sp,sp,8
 400cefc:	f800283a 	ret

0400cf00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400cf00:	deffed04 	addi	sp,sp,-76
 400cf04:	dfc01215 	stw	ra,72(sp)
 400cf08:	df001115 	stw	fp,68(sp)
 400cf0c:	df001104 	addi	fp,sp,68
 400cf10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400cf14:	e0bfff17 	ldw	r2,-4(fp)
 400cf18:	10000616 	blt	r2,zero,400cf34 <isatty+0x34>
 400cf1c:	e0bfff17 	ldw	r2,-4(fp)
 400cf20:	10c00324 	muli	r3,r2,12
 400cf24:	00810074 	movhi	r2,1025
 400cf28:	10837004 	addi	r2,r2,3520
 400cf2c:	1885883a 	add	r2,r3,r2
 400cf30:	00000106 	br	400cf38 <isatty+0x38>
 400cf34:	0005883a 	mov	r2,zero
 400cf38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400cf3c:	e0bfef17 	ldw	r2,-68(fp)
 400cf40:	10000e26 	beq	r2,zero,400cf7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400cf44:	e0bfef17 	ldw	r2,-68(fp)
 400cf48:	10800017 	ldw	r2,0(r2)
 400cf4c:	10800817 	ldw	r2,32(r2)
 400cf50:	1000021e 	bne	r2,zero,400cf5c <isatty+0x5c>
    {
      return 1;
 400cf54:	00800044 	movi	r2,1
 400cf58:	00000d06 	br	400cf90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400cf5c:	e0bff004 	addi	r2,fp,-64
 400cf60:	100b883a 	mov	r5,r2
 400cf64:	e13fff17 	ldw	r4,-4(fp)
 400cf68:	400ce000 	call	400ce00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400cf6c:	e0bff117 	ldw	r2,-60(fp)
 400cf70:	10880020 	cmpeqi	r2,r2,8192
 400cf74:	10803fcc 	andi	r2,r2,255
 400cf78:	00000506 	br	400cf90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400cf7c:	400ceb00 	call	400ceb0 <alt_get_errno>
 400cf80:	1007883a 	mov	r3,r2
 400cf84:	00801444 	movi	r2,81
 400cf88:	18800015 	stw	r2,0(r3)
    return 0;
 400cf8c:	0005883a 	mov	r2,zero
  }
}
 400cf90:	e037883a 	mov	sp,fp
 400cf94:	dfc00117 	ldw	ra,4(sp)
 400cf98:	df000017 	ldw	fp,0(sp)
 400cf9c:	dec00204 	addi	sp,sp,8
 400cfa0:	f800283a 	ret

0400cfa4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400cfa4:	defffc04 	addi	sp,sp,-16
 400cfa8:	df000315 	stw	fp,12(sp)
 400cfac:	df000304 	addi	fp,sp,12
 400cfb0:	e13ffd15 	stw	r4,-12(fp)
 400cfb4:	e17ffe15 	stw	r5,-8(fp)
 400cfb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400cfbc:	e0fffe17 	ldw	r3,-8(fp)
 400cfc0:	e0bffd17 	ldw	r2,-12(fp)
 400cfc4:	18800c26 	beq	r3,r2,400cff8 <alt_load_section+0x54>
  {
    while( to != end )
 400cfc8:	00000806 	br	400cfec <alt_load_section+0x48>
    {
      *to++ = *from++;
 400cfcc:	e0bffe17 	ldw	r2,-8(fp)
 400cfd0:	10c00104 	addi	r3,r2,4
 400cfd4:	e0fffe15 	stw	r3,-8(fp)
 400cfd8:	e0fffd17 	ldw	r3,-12(fp)
 400cfdc:	19000104 	addi	r4,r3,4
 400cfe0:	e13ffd15 	stw	r4,-12(fp)
 400cfe4:	18c00017 	ldw	r3,0(r3)
 400cfe8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400cfec:	e0fffe17 	ldw	r3,-8(fp)
 400cff0:	e0bfff17 	ldw	r2,-4(fp)
 400cff4:	18bff51e 	bne	r3,r2,400cfcc <__alt_data_end+0xfc00cfcc>
    {
      *to++ = *from++;
    }
  }
}
 400cff8:	0001883a 	nop
 400cffc:	e037883a 	mov	sp,fp
 400d000:	df000017 	ldw	fp,0(sp)
 400d004:	dec00104 	addi	sp,sp,4
 400d008:	f800283a 	ret

0400d00c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400d00c:	defffe04 	addi	sp,sp,-8
 400d010:	dfc00115 	stw	ra,4(sp)
 400d014:	df000015 	stw	fp,0(sp)
 400d018:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400d01c:	01810074 	movhi	r6,1025
 400d020:	31881604 	addi	r6,r6,8280
 400d024:	01410074 	movhi	r5,1025
 400d028:	29413a04 	addi	r5,r5,1256
 400d02c:	01010074 	movhi	r4,1025
 400d030:	21081604 	addi	r4,r4,8280
 400d034:	400cfa40 	call	400cfa4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400d038:	018000b4 	movhi	r6,2
 400d03c:	31809104 	addi	r6,r6,580
 400d040:	014000b4 	movhi	r5,2
 400d044:	29400804 	addi	r5,r5,32
 400d048:	01010034 	movhi	r4,1024
 400d04c:	21000004 	addi	r4,r4,0
 400d050:	400cfa40 	call	400cfa4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400d054:	01810074 	movhi	r6,1025
 400d058:	31813a04 	addi	r6,r6,1256
 400d05c:	01410074 	movhi	r5,1025
 400d060:	29405704 	addi	r5,r5,348
 400d064:	01010074 	movhi	r4,1025
 400d068:	21005704 	addi	r4,r4,348
 400d06c:	400cfa40 	call	400cfa4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400d070:	400efc80 	call	400efc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400d074:	400f2540 	call	400f254 <alt_icache_flush_all>
}
 400d078:	0001883a 	nop
 400d07c:	e037883a 	mov	sp,fp
 400d080:	dfc00117 	ldw	ra,4(sp)
 400d084:	df000017 	ldw	fp,0(sp)
 400d088:	dec00204 	addi	sp,sp,8
 400d08c:	f800283a 	ret

0400d090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d090:	defffe04 	addi	sp,sp,-8
 400d094:	dfc00115 	stw	ra,4(sp)
 400d098:	df000015 	stw	fp,0(sp)
 400d09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d0a0:	00810074 	movhi	r2,1025
 400d0a4:	10880d04 	addi	r2,r2,8244
 400d0a8:	10800017 	ldw	r2,0(r2)
 400d0ac:	10000526 	beq	r2,zero,400d0c4 <alt_get_errno+0x34>
 400d0b0:	00810074 	movhi	r2,1025
 400d0b4:	10880d04 	addi	r2,r2,8244
 400d0b8:	10800017 	ldw	r2,0(r2)
 400d0bc:	103ee83a 	callr	r2
 400d0c0:	00000206 	br	400d0cc <alt_get_errno+0x3c>
 400d0c4:	00810074 	movhi	r2,1025
 400d0c8:	108ef804 	addi	r2,r2,15328
}
 400d0cc:	e037883a 	mov	sp,fp
 400d0d0:	dfc00117 	ldw	ra,4(sp)
 400d0d4:	df000017 	ldw	fp,0(sp)
 400d0d8:	dec00204 	addi	sp,sp,8
 400d0dc:	f800283a 	ret

0400d0e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d0e0:	defff904 	addi	sp,sp,-28
 400d0e4:	dfc00615 	stw	ra,24(sp)
 400d0e8:	df000515 	stw	fp,20(sp)
 400d0ec:	df000504 	addi	fp,sp,20
 400d0f0:	e13ffd15 	stw	r4,-12(fp)
 400d0f4:	e17ffe15 	stw	r5,-8(fp)
 400d0f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400d0fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d100:	e0bffd17 	ldw	r2,-12(fp)
 400d104:	10000616 	blt	r2,zero,400d120 <lseek+0x40>
 400d108:	e0bffd17 	ldw	r2,-12(fp)
 400d10c:	10c00324 	muli	r3,r2,12
 400d110:	00810074 	movhi	r2,1025
 400d114:	10837004 	addi	r2,r2,3520
 400d118:	1885883a 	add	r2,r3,r2
 400d11c:	00000106 	br	400d124 <lseek+0x44>
 400d120:	0005883a 	mov	r2,zero
 400d124:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400d128:	e0bffc17 	ldw	r2,-16(fp)
 400d12c:	10001026 	beq	r2,zero,400d170 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400d130:	e0bffc17 	ldw	r2,-16(fp)
 400d134:	10800017 	ldw	r2,0(r2)
 400d138:	10800717 	ldw	r2,28(r2)
 400d13c:	10000926 	beq	r2,zero,400d164 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400d140:	e0bffc17 	ldw	r2,-16(fp)
 400d144:	10800017 	ldw	r2,0(r2)
 400d148:	10800717 	ldw	r2,28(r2)
 400d14c:	e1bfff17 	ldw	r6,-4(fp)
 400d150:	e17ffe17 	ldw	r5,-8(fp)
 400d154:	e13ffc17 	ldw	r4,-16(fp)
 400d158:	103ee83a 	callr	r2
 400d15c:	e0bffb15 	stw	r2,-20(fp)
 400d160:	00000506 	br	400d178 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400d164:	00bfde84 	movi	r2,-134
 400d168:	e0bffb15 	stw	r2,-20(fp)
 400d16c:	00000206 	br	400d178 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400d170:	00bfebc4 	movi	r2,-81
 400d174:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400d178:	e0bffb17 	ldw	r2,-20(fp)
 400d17c:	1000070e 	bge	r2,zero,400d19c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400d180:	400d0900 	call	400d090 <alt_get_errno>
 400d184:	1007883a 	mov	r3,r2
 400d188:	e0bffb17 	ldw	r2,-20(fp)
 400d18c:	0085c83a 	sub	r2,zero,r2
 400d190:	18800015 	stw	r2,0(r3)
    rc = -1;
 400d194:	00bfffc4 	movi	r2,-1
 400d198:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400d19c:	e0bffb17 	ldw	r2,-20(fp)
}
 400d1a0:	e037883a 	mov	sp,fp
 400d1a4:	dfc00117 	ldw	ra,4(sp)
 400d1a8:	df000017 	ldw	fp,0(sp)
 400d1ac:	dec00204 	addi	sp,sp,8
 400d1b0:	f800283a 	ret

0400d1b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d1b4:	defffd04 	addi	sp,sp,-12
 400d1b8:	dfc00215 	stw	ra,8(sp)
 400d1bc:	df000115 	stw	fp,4(sp)
 400d1c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d1c4:	0009883a 	mov	r4,zero
 400d1c8:	400d7140 	call	400d714 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400d1cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400d1d0:	400d74c0 	call	400d74c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400d1d4:	01810074 	movhi	r6,1025
 400d1d8:	31812204 	addi	r6,r6,1160
 400d1dc:	01410074 	movhi	r5,1025
 400d1e0:	29412204 	addi	r5,r5,1160
 400d1e4:	01010074 	movhi	r4,1025
 400d1e8:	21012204 	addi	r4,r4,1160
 400d1ec:	400f61c0 	call	400f61c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400d1f0:	400f1040 	call	400f104 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400d1f4:	01010074 	movhi	r4,1025
 400d1f8:	213c5904 	addi	r4,r4,-3740
 400d1fc:	400fdc80 	call	400fdc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d200:	d0a6f717 	ldw	r2,-25636(gp)
 400d204:	d0e6f817 	ldw	r3,-25632(gp)
 400d208:	d126f917 	ldw	r4,-25628(gp)
 400d20c:	200d883a 	mov	r6,r4
 400d210:	180b883a 	mov	r5,r3
 400d214:	1009883a 	mov	r4,r2
 400d218:	40002b40 	call	40002b4 <main>
 400d21c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400d220:	01000044 	movi	r4,1
 400d224:	400ccb40 	call	400ccb4 <close>
  exit (result);
 400d228:	e13fff17 	ldw	r4,-4(fp)
 400d22c:	400fddc0 	call	400fddc <exit>

0400d230 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400d230:	defffe04 	addi	sp,sp,-8
 400d234:	df000115 	stw	fp,4(sp)
 400d238:	df000104 	addi	fp,sp,4
 400d23c:	e13fff15 	stw	r4,-4(fp)
}
 400d240:	0001883a 	nop
 400d244:	e037883a 	mov	sp,fp
 400d248:	df000017 	ldw	fp,0(sp)
 400d24c:	dec00104 	addi	sp,sp,4
 400d250:	f800283a 	ret

0400d254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400d254:	defffe04 	addi	sp,sp,-8
 400d258:	df000115 	stw	fp,4(sp)
 400d25c:	df000104 	addi	fp,sp,4
 400d260:	e13fff15 	stw	r4,-4(fp)
}
 400d264:	0001883a 	nop
 400d268:	e037883a 	mov	sp,fp
 400d26c:	df000017 	ldw	fp,0(sp)
 400d270:	dec00104 	addi	sp,sp,4
 400d274:	f800283a 	ret

0400d278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d278:	defffe04 	addi	sp,sp,-8
 400d27c:	dfc00115 	stw	ra,4(sp)
 400d280:	df000015 	stw	fp,0(sp)
 400d284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d288:	00810074 	movhi	r2,1025
 400d28c:	10880d04 	addi	r2,r2,8244
 400d290:	10800017 	ldw	r2,0(r2)
 400d294:	10000526 	beq	r2,zero,400d2ac <alt_get_errno+0x34>
 400d298:	00810074 	movhi	r2,1025
 400d29c:	10880d04 	addi	r2,r2,8244
 400d2a0:	10800017 	ldw	r2,0(r2)
 400d2a4:	103ee83a 	callr	r2
 400d2a8:	00000206 	br	400d2b4 <alt_get_errno+0x3c>
 400d2ac:	00810074 	movhi	r2,1025
 400d2b0:	108ef804 	addi	r2,r2,15328
}
 400d2b4:	e037883a 	mov	sp,fp
 400d2b8:	dfc00117 	ldw	ra,4(sp)
 400d2bc:	df000017 	ldw	fp,0(sp)
 400d2c0:	dec00204 	addi	sp,sp,8
 400d2c4:	f800283a 	ret

0400d2c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400d2c8:	defff904 	addi	sp,sp,-28
 400d2cc:	dfc00615 	stw	ra,24(sp)
 400d2d0:	df000515 	stw	fp,20(sp)
 400d2d4:	df000504 	addi	fp,sp,20
 400d2d8:	e13ffd15 	stw	r4,-12(fp)
 400d2dc:	e17ffe15 	stw	r5,-8(fp)
 400d2e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d2e4:	e0bffd17 	ldw	r2,-12(fp)
 400d2e8:	10000616 	blt	r2,zero,400d304 <read+0x3c>
 400d2ec:	e0bffd17 	ldw	r2,-12(fp)
 400d2f0:	10c00324 	muli	r3,r2,12
 400d2f4:	00810074 	movhi	r2,1025
 400d2f8:	10837004 	addi	r2,r2,3520
 400d2fc:	1885883a 	add	r2,r3,r2
 400d300:	00000106 	br	400d308 <read+0x40>
 400d304:	0005883a 	mov	r2,zero
 400d308:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d30c:	e0bffb17 	ldw	r2,-20(fp)
 400d310:	10002226 	beq	r2,zero,400d39c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d314:	e0bffb17 	ldw	r2,-20(fp)
 400d318:	10800217 	ldw	r2,8(r2)
 400d31c:	108000cc 	andi	r2,r2,3
 400d320:	10800060 	cmpeqi	r2,r2,1
 400d324:	1000181e 	bne	r2,zero,400d388 <read+0xc0>
        (fd->dev->read))
 400d328:	e0bffb17 	ldw	r2,-20(fp)
 400d32c:	10800017 	ldw	r2,0(r2)
 400d330:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d334:	10001426 	beq	r2,zero,400d388 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400d338:	e0bffb17 	ldw	r2,-20(fp)
 400d33c:	10800017 	ldw	r2,0(r2)
 400d340:	10800517 	ldw	r2,20(r2)
 400d344:	e0ffff17 	ldw	r3,-4(fp)
 400d348:	180d883a 	mov	r6,r3
 400d34c:	e17ffe17 	ldw	r5,-8(fp)
 400d350:	e13ffb17 	ldw	r4,-20(fp)
 400d354:	103ee83a 	callr	r2
 400d358:	e0bffc15 	stw	r2,-16(fp)
 400d35c:	e0bffc17 	ldw	r2,-16(fp)
 400d360:	1000070e 	bge	r2,zero,400d380 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400d364:	400d2780 	call	400d278 <alt_get_errno>
 400d368:	1007883a 	mov	r3,r2
 400d36c:	e0bffc17 	ldw	r2,-16(fp)
 400d370:	0085c83a 	sub	r2,zero,r2
 400d374:	18800015 	stw	r2,0(r3)
          return -1;
 400d378:	00bfffc4 	movi	r2,-1
 400d37c:	00000c06 	br	400d3b0 <read+0xe8>
        }
        return rval;
 400d380:	e0bffc17 	ldw	r2,-16(fp)
 400d384:	00000a06 	br	400d3b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400d388:	400d2780 	call	400d278 <alt_get_errno>
 400d38c:	1007883a 	mov	r3,r2
 400d390:	00800344 	movi	r2,13
 400d394:	18800015 	stw	r2,0(r3)
 400d398:	00000406 	br	400d3ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400d39c:	400d2780 	call	400d278 <alt_get_errno>
 400d3a0:	1007883a 	mov	r3,r2
 400d3a4:	00801444 	movi	r2,81
 400d3a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d3ac:	00bfffc4 	movi	r2,-1
}
 400d3b0:	e037883a 	mov	sp,fp
 400d3b4:	dfc00117 	ldw	ra,4(sp)
 400d3b8:	df000017 	ldw	fp,0(sp)
 400d3bc:	dec00204 	addi	sp,sp,8
 400d3c0:	f800283a 	ret

0400d3c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400d3c4:	defffe04 	addi	sp,sp,-8
 400d3c8:	df000115 	stw	fp,4(sp)
 400d3cc:	df000104 	addi	fp,sp,4
 400d3d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400d3d4:	e0bfff17 	ldw	r2,-4(fp)
 400d3d8:	108000d0 	cmplti	r2,r2,3
 400d3dc:	10000d1e 	bne	r2,zero,400d414 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400d3e0:	00810074 	movhi	r2,1025
 400d3e4:	10837004 	addi	r2,r2,3520
 400d3e8:	e0ffff17 	ldw	r3,-4(fp)
 400d3ec:	18c00324 	muli	r3,r3,12
 400d3f0:	10c5883a 	add	r2,r2,r3
 400d3f4:	10800204 	addi	r2,r2,8
 400d3f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400d3fc:	00810074 	movhi	r2,1025
 400d400:	10837004 	addi	r2,r2,3520
 400d404:	e0ffff17 	ldw	r3,-4(fp)
 400d408:	18c00324 	muli	r3,r3,12
 400d40c:	10c5883a 	add	r2,r2,r3
 400d410:	10000015 	stw	zero,0(r2)
  }
}
 400d414:	0001883a 	nop
 400d418:	e037883a 	mov	sp,fp
 400d41c:	df000017 	ldw	fp,0(sp)
 400d420:	dec00104 	addi	sp,sp,4
 400d424:	f800283a 	ret

0400d428 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400d428:	defff904 	addi	sp,sp,-28
 400d42c:	df000615 	stw	fp,24(sp)
 400d430:	df000604 	addi	fp,sp,24
 400d434:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d438:	0005303a 	rdctl	r2,status
 400d43c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d440:	e0fffe17 	ldw	r3,-8(fp)
 400d444:	00bfff84 	movi	r2,-2
 400d448:	1884703a 	and	r2,r3,r2
 400d44c:	1001703a 	wrctl	status,r2
  
  return context;
 400d450:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400d454:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d458:	d0a00c17 	ldw	r2,-32720(gp)
 400d45c:	10c000c4 	addi	r3,r2,3
 400d460:	00bfff04 	movi	r2,-4
 400d464:	1884703a 	and	r2,r3,r2
 400d468:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d46c:	d0e00c17 	ldw	r3,-32720(gp)
 400d470:	e0bfff17 	ldw	r2,-4(fp)
 400d474:	1887883a 	add	r3,r3,r2
 400d478:	00820034 	movhi	r2,2048
 400d47c:	10800004 	addi	r2,r2,0
 400d480:	10c0062e 	bgeu	r2,r3,400d49c <sbrk+0x74>
 400d484:	e0bffb17 	ldw	r2,-20(fp)
 400d488:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d48c:	e0bffa17 	ldw	r2,-24(fp)
 400d490:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400d494:	00bfffc4 	movi	r2,-1
 400d498:	00000b06 	br	400d4c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400d49c:	d0a00c17 	ldw	r2,-32720(gp)
 400d4a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400d4a4:	d0e00c17 	ldw	r3,-32720(gp)
 400d4a8:	e0bfff17 	ldw	r2,-4(fp)
 400d4ac:	1885883a 	add	r2,r3,r2
 400d4b0:	d0a00c15 	stw	r2,-32720(gp)
 400d4b4:	e0bffb17 	ldw	r2,-20(fp)
 400d4b8:	e0bffc15 	stw	r2,-16(fp)
 400d4bc:	e0bffc17 	ldw	r2,-16(fp)
 400d4c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400d4c4:	e0bffd17 	ldw	r2,-12(fp)
} 
 400d4c8:	e037883a 	mov	sp,fp
 400d4cc:	df000017 	ldw	fp,0(sp)
 400d4d0:	dec00104 	addi	sp,sp,4
 400d4d4:	f800283a 	ret

0400d4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d4d8:	defffe04 	addi	sp,sp,-8
 400d4dc:	dfc00115 	stw	ra,4(sp)
 400d4e0:	df000015 	stw	fp,0(sp)
 400d4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d4e8:	00810074 	movhi	r2,1025
 400d4ec:	10880d04 	addi	r2,r2,8244
 400d4f0:	10800017 	ldw	r2,0(r2)
 400d4f4:	10000526 	beq	r2,zero,400d50c <alt_get_errno+0x34>
 400d4f8:	00810074 	movhi	r2,1025
 400d4fc:	10880d04 	addi	r2,r2,8244
 400d500:	10800017 	ldw	r2,0(r2)
 400d504:	103ee83a 	callr	r2
 400d508:	00000206 	br	400d514 <alt_get_errno+0x3c>
 400d50c:	00810074 	movhi	r2,1025
 400d510:	108ef804 	addi	r2,r2,15328
}
 400d514:	e037883a 	mov	sp,fp
 400d518:	dfc00117 	ldw	ra,4(sp)
 400d51c:	df000017 	ldw	fp,0(sp)
 400d520:	dec00204 	addi	sp,sp,8
 400d524:	f800283a 	ret

0400d528 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400d528:	defff904 	addi	sp,sp,-28
 400d52c:	dfc00615 	stw	ra,24(sp)
 400d530:	df000515 	stw	fp,20(sp)
 400d534:	df000504 	addi	fp,sp,20
 400d538:	e13ffd15 	stw	r4,-12(fp)
 400d53c:	e17ffe15 	stw	r5,-8(fp)
 400d540:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d544:	e0bffd17 	ldw	r2,-12(fp)
 400d548:	10000616 	blt	r2,zero,400d564 <write+0x3c>
 400d54c:	e0bffd17 	ldw	r2,-12(fp)
 400d550:	10c00324 	muli	r3,r2,12
 400d554:	00810074 	movhi	r2,1025
 400d558:	10837004 	addi	r2,r2,3520
 400d55c:	1885883a 	add	r2,r3,r2
 400d560:	00000106 	br	400d568 <write+0x40>
 400d564:	0005883a 	mov	r2,zero
 400d568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d56c:	e0bffb17 	ldw	r2,-20(fp)
 400d570:	10002126 	beq	r2,zero,400d5f8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400d574:	e0bffb17 	ldw	r2,-20(fp)
 400d578:	10800217 	ldw	r2,8(r2)
 400d57c:	108000cc 	andi	r2,r2,3
 400d580:	10001826 	beq	r2,zero,400d5e4 <write+0xbc>
 400d584:	e0bffb17 	ldw	r2,-20(fp)
 400d588:	10800017 	ldw	r2,0(r2)
 400d58c:	10800617 	ldw	r2,24(r2)
 400d590:	10001426 	beq	r2,zero,400d5e4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400d594:	e0bffb17 	ldw	r2,-20(fp)
 400d598:	10800017 	ldw	r2,0(r2)
 400d59c:	10800617 	ldw	r2,24(r2)
 400d5a0:	e0ffff17 	ldw	r3,-4(fp)
 400d5a4:	180d883a 	mov	r6,r3
 400d5a8:	e17ffe17 	ldw	r5,-8(fp)
 400d5ac:	e13ffb17 	ldw	r4,-20(fp)
 400d5b0:	103ee83a 	callr	r2
 400d5b4:	e0bffc15 	stw	r2,-16(fp)
 400d5b8:	e0bffc17 	ldw	r2,-16(fp)
 400d5bc:	1000070e 	bge	r2,zero,400d5dc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400d5c0:	400d4d80 	call	400d4d8 <alt_get_errno>
 400d5c4:	1007883a 	mov	r3,r2
 400d5c8:	e0bffc17 	ldw	r2,-16(fp)
 400d5cc:	0085c83a 	sub	r2,zero,r2
 400d5d0:	18800015 	stw	r2,0(r3)
        return -1;
 400d5d4:	00bfffc4 	movi	r2,-1
 400d5d8:	00000c06 	br	400d60c <write+0xe4>
      }
      return rval;
 400d5dc:	e0bffc17 	ldw	r2,-16(fp)
 400d5e0:	00000a06 	br	400d60c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400d5e4:	400d4d80 	call	400d4d8 <alt_get_errno>
 400d5e8:	1007883a 	mov	r3,r2
 400d5ec:	00800344 	movi	r2,13
 400d5f0:	18800015 	stw	r2,0(r3)
 400d5f4:	00000406 	br	400d608 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400d5f8:	400d4d80 	call	400d4d8 <alt_get_errno>
 400d5fc:	1007883a 	mov	r3,r2
 400d600:	00801444 	movi	r2,81
 400d604:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d608:	00bfffc4 	movi	r2,-1
}
 400d60c:	e037883a 	mov	sp,fp
 400d610:	dfc00117 	ldw	ra,4(sp)
 400d614:	df000017 	ldw	fp,0(sp)
 400d618:	dec00204 	addi	sp,sp,8
 400d61c:	f800283a 	ret

0400d620 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400d620:	defffd04 	addi	sp,sp,-12
 400d624:	dfc00215 	stw	ra,8(sp)
 400d628:	df000115 	stw	fp,4(sp)
 400d62c:	df000104 	addi	fp,sp,4
 400d630:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400d634:	01410074 	movhi	r5,1025
 400d638:	29480a04 	addi	r5,r5,8232
 400d63c:	e13fff17 	ldw	r4,-4(fp)
 400d640:	400f0600 	call	400f060 <alt_dev_llist_insert>
}
 400d644:	e037883a 	mov	sp,fp
 400d648:	dfc00117 	ldw	ra,4(sp)
 400d64c:	df000017 	ldw	fp,0(sp)
 400d650:	dec00204 	addi	sp,sp,8
 400d654:	f800283a 	ret

0400d658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d658:	defffe04 	addi	sp,sp,-8
 400d65c:	dfc00115 	stw	ra,4(sp)
 400d660:	df000015 	stw	fp,0(sp)
 400d664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d668:	00810074 	movhi	r2,1025
 400d66c:	10880d04 	addi	r2,r2,8244
 400d670:	10800017 	ldw	r2,0(r2)
 400d674:	10000526 	beq	r2,zero,400d68c <alt_get_errno+0x34>
 400d678:	00810074 	movhi	r2,1025
 400d67c:	10880d04 	addi	r2,r2,8244
 400d680:	10800017 	ldw	r2,0(r2)
 400d684:	103ee83a 	callr	r2
 400d688:	00000206 	br	400d694 <alt_get_errno+0x3c>
 400d68c:	00810074 	movhi	r2,1025
 400d690:	108ef804 	addi	r2,r2,15328
}
 400d694:	e037883a 	mov	sp,fp
 400d698:	dfc00117 	ldw	ra,4(sp)
 400d69c:	df000017 	ldw	fp,0(sp)
 400d6a0:	dec00204 	addi	sp,sp,8
 400d6a4:	f800283a 	ret

0400d6a8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 400d6a8:	defffc04 	addi	sp,sp,-16
 400d6ac:	dfc00315 	stw	ra,12(sp)
 400d6b0:	df000215 	stw	fp,8(sp)
 400d6b4:	df000204 	addi	fp,sp,8
 400d6b8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400d6bc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 400d6c0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 400d6c4:	e0bffe17 	ldw	r2,-8(fp)
 400d6c8:	1000061e 	bne	r2,zero,400d6e4 <alt_avalon_mutex_reg+0x3c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 400d6cc:	01410074 	movhi	r5,1025
 400d6d0:	29481104 	addi	r5,r5,8260
 400d6d4:	e13fff17 	ldw	r4,-4(fp)
 400d6d8:	400f0600 	call	400f060 <alt_dev_llist_insert>
 400d6dc:	e0bffe15 	stw	r2,-8(fp)
 400d6e0:	00000606 	br	400d6fc <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 400d6e4:	400d6580 	call	400d658 <alt_get_errno>
 400d6e8:	1007883a 	mov	r3,r2
 400d6ec:	00800304 	movi	r2,12
 400d6f0:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 400d6f4:	00bffd04 	movi	r2,-12
 400d6f8:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 400d6fc:	e0bffe17 	ldw	r2,-8(fp)
}
 400d700:	e037883a 	mov	sp,fp
 400d704:	dfc00117 	ldw	ra,4(sp)
 400d708:	df000017 	ldw	fp,0(sp)
 400d70c:	dec00204 	addi	sp,sp,8
 400d710:	f800283a 	ret

0400d714 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400d714:	defffd04 	addi	sp,sp,-12
 400d718:	dfc00215 	stw	ra,8(sp)
 400d71c:	df000115 	stw	fp,4(sp)
 400d720:	df000104 	addi	fp,sp,4
 400d724:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 400d728:	400fab00 	call	400fab0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400d72c:	00800044 	movi	r2,1
 400d730:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400d734:	0001883a 	nop
 400d738:	e037883a 	mov	sp,fp
 400d73c:	dfc00117 	ldw	ra,4(sp)
 400d740:	df000017 	ldw	fp,0(sp)
 400d744:	dec00204 	addi	sp,sp,8
 400d748:	f800283a 	ret

0400d74c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400d74c:	defffe04 	addi	sp,sp,-8
 400d750:	dfc00115 	stw	ra,4(sp)
 400d754:	df000015 	stw	fp,0(sp)
 400d758:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400d75c:	01800084 	movi	r6,2
 400d760:	000b883a 	mov	r5,zero
 400d764:	01010074 	movhi	r4,1025
 400d768:	2103da04 	addi	r4,r4,3944
 400d76c:	400d9340 	call	400d934 <altera_avalon_jtag_uart_init>
 400d770:	01010074 	movhi	r4,1025
 400d774:	2103d004 	addi	r4,r4,3904
 400d778:	400d6200 	call	400d620 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 400d77c:	000d883a 	mov	r6,zero
 400d780:	000b883a 	mov	r5,zero
 400d784:	01010074 	movhi	r4,1025
 400d788:	2107e804 	addi	r4,r4,8096
 400d78c:	400e5300 	call	400e530 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 400d790:	01010074 	movhi	r4,1025
 400d794:	2107fa04 	addi	r4,r4,8168
 400d798:	400d6a80 	call	400d6a8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 400d79c:	01010074 	movhi	r4,1025
 400d7a0:	2107fe04 	addi	r4,r4,8184
 400d7a4:	400d6a80 	call	400d6a8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_1, performance_counter_1);
 400d7a8:	00c00044 	movi	r3,1
 400d7ac:	00800134 	movhi	r2,4
 400d7b0:	10840004 	addi	r2,r2,4096
 400d7b4:	10c00035 	stwio	r3,0(r2)
}
 400d7b8:	0001883a 	nop
 400d7bc:	e037883a 	mov	sp,fp
 400d7c0:	dfc00117 	ldw	ra,4(sp)
 400d7c4:	df000017 	ldw	fp,0(sp)
 400d7c8:	dec00204 	addi	sp,sp,8
 400d7cc:	f800283a 	ret

0400d7d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400d7d0:	defffa04 	addi	sp,sp,-24
 400d7d4:	dfc00515 	stw	ra,20(sp)
 400d7d8:	df000415 	stw	fp,16(sp)
 400d7dc:	df000404 	addi	fp,sp,16
 400d7e0:	e13ffd15 	stw	r4,-12(fp)
 400d7e4:	e17ffe15 	stw	r5,-8(fp)
 400d7e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400d7ec:	e0bffd17 	ldw	r2,-12(fp)
 400d7f0:	10800017 	ldw	r2,0(r2)
 400d7f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400d7f8:	e0bffc17 	ldw	r2,-16(fp)
 400d7fc:	10c00a04 	addi	r3,r2,40
 400d800:	e0bffd17 	ldw	r2,-12(fp)
 400d804:	10800217 	ldw	r2,8(r2)
 400d808:	100f883a 	mov	r7,r2
 400d80c:	e1bfff17 	ldw	r6,-4(fp)
 400d810:	e17ffe17 	ldw	r5,-8(fp)
 400d814:	1809883a 	mov	r4,r3
 400d818:	400de080 	call	400de08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400d81c:	e037883a 	mov	sp,fp
 400d820:	dfc00117 	ldw	ra,4(sp)
 400d824:	df000017 	ldw	fp,0(sp)
 400d828:	dec00204 	addi	sp,sp,8
 400d82c:	f800283a 	ret

0400d830 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400d830:	defffa04 	addi	sp,sp,-24
 400d834:	dfc00515 	stw	ra,20(sp)
 400d838:	df000415 	stw	fp,16(sp)
 400d83c:	df000404 	addi	fp,sp,16
 400d840:	e13ffd15 	stw	r4,-12(fp)
 400d844:	e17ffe15 	stw	r5,-8(fp)
 400d848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400d84c:	e0bffd17 	ldw	r2,-12(fp)
 400d850:	10800017 	ldw	r2,0(r2)
 400d854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400d858:	e0bffc17 	ldw	r2,-16(fp)
 400d85c:	10c00a04 	addi	r3,r2,40
 400d860:	e0bffd17 	ldw	r2,-12(fp)
 400d864:	10800217 	ldw	r2,8(r2)
 400d868:	100f883a 	mov	r7,r2
 400d86c:	e1bfff17 	ldw	r6,-4(fp)
 400d870:	e17ffe17 	ldw	r5,-8(fp)
 400d874:	1809883a 	mov	r4,r3
 400d878:	400e0240 	call	400e024 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400d87c:	e037883a 	mov	sp,fp
 400d880:	dfc00117 	ldw	ra,4(sp)
 400d884:	df000017 	ldw	fp,0(sp)
 400d888:	dec00204 	addi	sp,sp,8
 400d88c:	f800283a 	ret

0400d890 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400d890:	defffc04 	addi	sp,sp,-16
 400d894:	dfc00315 	stw	ra,12(sp)
 400d898:	df000215 	stw	fp,8(sp)
 400d89c:	df000204 	addi	fp,sp,8
 400d8a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400d8a4:	e0bfff17 	ldw	r2,-4(fp)
 400d8a8:	10800017 	ldw	r2,0(r2)
 400d8ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400d8b0:	e0bffe17 	ldw	r2,-8(fp)
 400d8b4:	10c00a04 	addi	r3,r2,40
 400d8b8:	e0bfff17 	ldw	r2,-4(fp)
 400d8bc:	10800217 	ldw	r2,8(r2)
 400d8c0:	100b883a 	mov	r5,r2
 400d8c4:	1809883a 	mov	r4,r3
 400d8c8:	400dcb00 	call	400dcb0 <altera_avalon_jtag_uart_close>
}
 400d8cc:	e037883a 	mov	sp,fp
 400d8d0:	dfc00117 	ldw	ra,4(sp)
 400d8d4:	df000017 	ldw	fp,0(sp)
 400d8d8:	dec00204 	addi	sp,sp,8
 400d8dc:	f800283a 	ret

0400d8e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400d8e0:	defffa04 	addi	sp,sp,-24
 400d8e4:	dfc00515 	stw	ra,20(sp)
 400d8e8:	df000415 	stw	fp,16(sp)
 400d8ec:	df000404 	addi	fp,sp,16
 400d8f0:	e13ffd15 	stw	r4,-12(fp)
 400d8f4:	e17ffe15 	stw	r5,-8(fp)
 400d8f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400d8fc:	e0bffd17 	ldw	r2,-12(fp)
 400d900:	10800017 	ldw	r2,0(r2)
 400d904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400d908:	e0bffc17 	ldw	r2,-16(fp)
 400d90c:	10800a04 	addi	r2,r2,40
 400d910:	e1bfff17 	ldw	r6,-4(fp)
 400d914:	e17ffe17 	ldw	r5,-8(fp)
 400d918:	1009883a 	mov	r4,r2
 400d91c:	400dd180 	call	400dd18 <altera_avalon_jtag_uart_ioctl>
}
 400d920:	e037883a 	mov	sp,fp
 400d924:	dfc00117 	ldw	ra,4(sp)
 400d928:	df000017 	ldw	fp,0(sp)
 400d92c:	dec00204 	addi	sp,sp,8
 400d930:	f800283a 	ret

0400d934 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400d934:	defffa04 	addi	sp,sp,-24
 400d938:	dfc00515 	stw	ra,20(sp)
 400d93c:	df000415 	stw	fp,16(sp)
 400d940:	df000404 	addi	fp,sp,16
 400d944:	e13ffd15 	stw	r4,-12(fp)
 400d948:	e17ffe15 	stw	r5,-8(fp)
 400d94c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400d950:	e0bffd17 	ldw	r2,-12(fp)
 400d954:	00c00044 	movi	r3,1
 400d958:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400d95c:	e0bffd17 	ldw	r2,-12(fp)
 400d960:	10800017 	ldw	r2,0(r2)
 400d964:	10800104 	addi	r2,r2,4
 400d968:	1007883a 	mov	r3,r2
 400d96c:	e0bffd17 	ldw	r2,-12(fp)
 400d970:	10800817 	ldw	r2,32(r2)
 400d974:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400d978:	e0bffe17 	ldw	r2,-8(fp)
 400d97c:	e0ffff17 	ldw	r3,-4(fp)
 400d980:	d8000015 	stw	zero,0(sp)
 400d984:	e1fffd17 	ldw	r7,-12(fp)
 400d988:	01810074 	movhi	r6,1025
 400d98c:	31b67f04 	addi	r6,r6,-9732
 400d990:	180b883a 	mov	r5,r3
 400d994:	1009883a 	mov	r4,r2
 400d998:	400f2880 	call	400f288 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400d99c:	e0bffd17 	ldw	r2,-12(fp)
 400d9a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400d9a4:	e0bffd17 	ldw	r2,-12(fp)
 400d9a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400d9ac:	00810074 	movhi	r2,1025
 400d9b0:	108efd04 	addi	r2,r2,15348
 400d9b4:	10800017 	ldw	r2,0(r2)
 400d9b8:	e1fffd17 	ldw	r7,-12(fp)
 400d9bc:	01810074 	movhi	r6,1025
 400d9c0:	31b70204 	addi	r6,r6,-9208
 400d9c4:	100b883a 	mov	r5,r2
 400d9c8:	1809883a 	mov	r4,r3
 400d9cc:	400ee880 	call	400ee88 <alt_alarm_start>
 400d9d0:	1000040e 	bge	r2,zero,400d9e4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400d9d4:	e0fffd17 	ldw	r3,-12(fp)
 400d9d8:	00a00034 	movhi	r2,32768
 400d9dc:	10bfffc4 	addi	r2,r2,-1
 400d9e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400d9e4:	0001883a 	nop
 400d9e8:	e037883a 	mov	sp,fp
 400d9ec:	dfc00117 	ldw	ra,4(sp)
 400d9f0:	df000017 	ldw	fp,0(sp)
 400d9f4:	dec00204 	addi	sp,sp,8
 400d9f8:	f800283a 	ret

0400d9fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400d9fc:	defff804 	addi	sp,sp,-32
 400da00:	df000715 	stw	fp,28(sp)
 400da04:	df000704 	addi	fp,sp,28
 400da08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400da0c:	e0bfff17 	ldw	r2,-4(fp)
 400da10:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400da14:	e0bffb17 	ldw	r2,-20(fp)
 400da18:	10800017 	ldw	r2,0(r2)
 400da1c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400da20:	e0bffc17 	ldw	r2,-16(fp)
 400da24:	10800104 	addi	r2,r2,4
 400da28:	10800037 	ldwio	r2,0(r2)
 400da2c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400da30:	e0bffd17 	ldw	r2,-12(fp)
 400da34:	1080c00c 	andi	r2,r2,768
 400da38:	10006d26 	beq	r2,zero,400dbf0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400da3c:	e0bffd17 	ldw	r2,-12(fp)
 400da40:	1080400c 	andi	r2,r2,256
 400da44:	10003526 	beq	r2,zero,400db1c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400da48:	00800074 	movhi	r2,1
 400da4c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400da50:	e0bffb17 	ldw	r2,-20(fp)
 400da54:	10800a17 	ldw	r2,40(r2)
 400da58:	10800044 	addi	r2,r2,1
 400da5c:	1081ffcc 	andi	r2,r2,2047
 400da60:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400da64:	e0bffb17 	ldw	r2,-20(fp)
 400da68:	10c00b17 	ldw	r3,44(r2)
 400da6c:	e0bffe17 	ldw	r2,-8(fp)
 400da70:	18801526 	beq	r3,r2,400dac8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400da74:	e0bffc17 	ldw	r2,-16(fp)
 400da78:	10800037 	ldwio	r2,0(r2)
 400da7c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400da80:	e0bff917 	ldw	r2,-28(fp)
 400da84:	10a0000c 	andi	r2,r2,32768
 400da88:	10001126 	beq	r2,zero,400dad0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400da8c:	e0bffb17 	ldw	r2,-20(fp)
 400da90:	10800a17 	ldw	r2,40(r2)
 400da94:	e0fff917 	ldw	r3,-28(fp)
 400da98:	1809883a 	mov	r4,r3
 400da9c:	e0fffb17 	ldw	r3,-20(fp)
 400daa0:	1885883a 	add	r2,r3,r2
 400daa4:	10800e04 	addi	r2,r2,56
 400daa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400daac:	e0bffb17 	ldw	r2,-20(fp)
 400dab0:	10800a17 	ldw	r2,40(r2)
 400dab4:	10800044 	addi	r2,r2,1
 400dab8:	10c1ffcc 	andi	r3,r2,2047
 400dabc:	e0bffb17 	ldw	r2,-20(fp)
 400dac0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400dac4:	003fe206 	br	400da50 <__alt_data_end+0xfc00da50>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400dac8:	0001883a 	nop
 400dacc:	00000106 	br	400dad4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400dad0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400dad4:	e0bff917 	ldw	r2,-28(fp)
 400dad8:	10bfffec 	andhi	r2,r2,65535
 400dadc:	10000f26 	beq	r2,zero,400db1c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400dae0:	e0bffb17 	ldw	r2,-20(fp)
 400dae4:	10c00817 	ldw	r3,32(r2)
 400dae8:	00bfff84 	movi	r2,-2
 400daec:	1886703a 	and	r3,r3,r2
 400daf0:	e0bffb17 	ldw	r2,-20(fp)
 400daf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400daf8:	e0bffc17 	ldw	r2,-16(fp)
 400dafc:	10800104 	addi	r2,r2,4
 400db00:	1007883a 	mov	r3,r2
 400db04:	e0bffb17 	ldw	r2,-20(fp)
 400db08:	10800817 	ldw	r2,32(r2)
 400db0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400db10:	e0bffc17 	ldw	r2,-16(fp)
 400db14:	10800104 	addi	r2,r2,4
 400db18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400db1c:	e0bffd17 	ldw	r2,-12(fp)
 400db20:	1080800c 	andi	r2,r2,512
 400db24:	103fbe26 	beq	r2,zero,400da20 <__alt_data_end+0xfc00da20>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400db28:	e0bffd17 	ldw	r2,-12(fp)
 400db2c:	1004d43a 	srli	r2,r2,16
 400db30:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400db34:	00001406 	br	400db88 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400db38:	e0bffc17 	ldw	r2,-16(fp)
 400db3c:	e0fffb17 	ldw	r3,-20(fp)
 400db40:	18c00d17 	ldw	r3,52(r3)
 400db44:	e13ffb17 	ldw	r4,-20(fp)
 400db48:	20c7883a 	add	r3,r4,r3
 400db4c:	18c20e04 	addi	r3,r3,2104
 400db50:	18c00003 	ldbu	r3,0(r3)
 400db54:	18c03fcc 	andi	r3,r3,255
 400db58:	18c0201c 	xori	r3,r3,128
 400db5c:	18ffe004 	addi	r3,r3,-128
 400db60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400db64:	e0bffb17 	ldw	r2,-20(fp)
 400db68:	10800d17 	ldw	r2,52(r2)
 400db6c:	10800044 	addi	r2,r2,1
 400db70:	10c1ffcc 	andi	r3,r2,2047
 400db74:	e0bffb17 	ldw	r2,-20(fp)
 400db78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400db7c:	e0bffa17 	ldw	r2,-24(fp)
 400db80:	10bfffc4 	addi	r2,r2,-1
 400db84:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400db88:	e0bffa17 	ldw	r2,-24(fp)
 400db8c:	10000526 	beq	r2,zero,400dba4 <altera_avalon_jtag_uart_irq+0x1a8>
 400db90:	e0bffb17 	ldw	r2,-20(fp)
 400db94:	10c00d17 	ldw	r3,52(r2)
 400db98:	e0bffb17 	ldw	r2,-20(fp)
 400db9c:	10800c17 	ldw	r2,48(r2)
 400dba0:	18bfe51e 	bne	r3,r2,400db38 <__alt_data_end+0xfc00db38>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400dba4:	e0bffa17 	ldw	r2,-24(fp)
 400dba8:	103f9d26 	beq	r2,zero,400da20 <__alt_data_end+0xfc00da20>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400dbac:	e0bffb17 	ldw	r2,-20(fp)
 400dbb0:	10c00817 	ldw	r3,32(r2)
 400dbb4:	00bfff44 	movi	r2,-3
 400dbb8:	1886703a 	and	r3,r3,r2
 400dbbc:	e0bffb17 	ldw	r2,-20(fp)
 400dbc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400dbc4:	e0bffb17 	ldw	r2,-20(fp)
 400dbc8:	10800017 	ldw	r2,0(r2)
 400dbcc:	10800104 	addi	r2,r2,4
 400dbd0:	1007883a 	mov	r3,r2
 400dbd4:	e0bffb17 	ldw	r2,-20(fp)
 400dbd8:	10800817 	ldw	r2,32(r2)
 400dbdc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400dbe0:	e0bffc17 	ldw	r2,-16(fp)
 400dbe4:	10800104 	addi	r2,r2,4
 400dbe8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400dbec:	003f8c06 	br	400da20 <__alt_data_end+0xfc00da20>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400dbf0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400dbf4:	0001883a 	nop
 400dbf8:	e037883a 	mov	sp,fp
 400dbfc:	df000017 	ldw	fp,0(sp)
 400dc00:	dec00104 	addi	sp,sp,4
 400dc04:	f800283a 	ret

0400dc08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400dc08:	defff804 	addi	sp,sp,-32
 400dc0c:	df000715 	stw	fp,28(sp)
 400dc10:	df000704 	addi	fp,sp,28
 400dc14:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400dc18:	e0bffb17 	ldw	r2,-20(fp)
 400dc1c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400dc20:	e0bff917 	ldw	r2,-28(fp)
 400dc24:	10800017 	ldw	r2,0(r2)
 400dc28:	10800104 	addi	r2,r2,4
 400dc2c:	10800037 	ldwio	r2,0(r2)
 400dc30:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400dc34:	e0bffa17 	ldw	r2,-24(fp)
 400dc38:	1081000c 	andi	r2,r2,1024
 400dc3c:	10000b26 	beq	r2,zero,400dc6c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400dc40:	e0bff917 	ldw	r2,-28(fp)
 400dc44:	10800017 	ldw	r2,0(r2)
 400dc48:	10800104 	addi	r2,r2,4
 400dc4c:	1007883a 	mov	r3,r2
 400dc50:	e0bff917 	ldw	r2,-28(fp)
 400dc54:	10800817 	ldw	r2,32(r2)
 400dc58:	10810014 	ori	r2,r2,1024
 400dc5c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400dc60:	e0bff917 	ldw	r2,-28(fp)
 400dc64:	10000915 	stw	zero,36(r2)
 400dc68:	00000a06 	br	400dc94 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400dc6c:	e0bff917 	ldw	r2,-28(fp)
 400dc70:	10c00917 	ldw	r3,36(r2)
 400dc74:	00a00034 	movhi	r2,32768
 400dc78:	10bfff04 	addi	r2,r2,-4
 400dc7c:	10c00536 	bltu	r2,r3,400dc94 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400dc80:	e0bff917 	ldw	r2,-28(fp)
 400dc84:	10800917 	ldw	r2,36(r2)
 400dc88:	10c00044 	addi	r3,r2,1
 400dc8c:	e0bff917 	ldw	r2,-28(fp)
 400dc90:	10c00915 	stw	r3,36(r2)
 400dc94:	00810074 	movhi	r2,1025
 400dc98:	108efd04 	addi	r2,r2,15348
 400dc9c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400dca0:	e037883a 	mov	sp,fp
 400dca4:	df000017 	ldw	fp,0(sp)
 400dca8:	dec00104 	addi	sp,sp,4
 400dcac:	f800283a 	ret

0400dcb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400dcb0:	defffd04 	addi	sp,sp,-12
 400dcb4:	df000215 	stw	fp,8(sp)
 400dcb8:	df000204 	addi	fp,sp,8
 400dcbc:	e13ffe15 	stw	r4,-8(fp)
 400dcc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400dcc4:	00000506 	br	400dcdc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400dcc8:	e0bfff17 	ldw	r2,-4(fp)
 400dccc:	1090000c 	andi	r2,r2,16384
 400dcd0:	10000226 	beq	r2,zero,400dcdc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400dcd4:	00bffd44 	movi	r2,-11
 400dcd8:	00000b06 	br	400dd08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400dcdc:	e0bffe17 	ldw	r2,-8(fp)
 400dce0:	10c00d17 	ldw	r3,52(r2)
 400dce4:	e0bffe17 	ldw	r2,-8(fp)
 400dce8:	10800c17 	ldw	r2,48(r2)
 400dcec:	18800526 	beq	r3,r2,400dd04 <altera_avalon_jtag_uart_close+0x54>
 400dcf0:	e0bffe17 	ldw	r2,-8(fp)
 400dcf4:	10c00917 	ldw	r3,36(r2)
 400dcf8:	e0bffe17 	ldw	r2,-8(fp)
 400dcfc:	10800117 	ldw	r2,4(r2)
 400dd00:	18bff136 	bltu	r3,r2,400dcc8 <__alt_data_end+0xfc00dcc8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400dd04:	0005883a 	mov	r2,zero
}
 400dd08:	e037883a 	mov	sp,fp
 400dd0c:	df000017 	ldw	fp,0(sp)
 400dd10:	dec00104 	addi	sp,sp,4
 400dd14:	f800283a 	ret

0400dd18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400dd18:	defffa04 	addi	sp,sp,-24
 400dd1c:	df000515 	stw	fp,20(sp)
 400dd20:	df000504 	addi	fp,sp,20
 400dd24:	e13ffd15 	stw	r4,-12(fp)
 400dd28:	e17ffe15 	stw	r5,-8(fp)
 400dd2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400dd30:	00bff9c4 	movi	r2,-25
 400dd34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400dd38:	e0bffe17 	ldw	r2,-8(fp)
 400dd3c:	10da8060 	cmpeqi	r3,r2,27137
 400dd40:	1800031e 	bne	r3,zero,400dd50 <altera_avalon_jtag_uart_ioctl+0x38>
 400dd44:	109a80a0 	cmpeqi	r2,r2,27138
 400dd48:	1000181e 	bne	r2,zero,400ddac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400dd4c:	00002906 	br	400ddf4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400dd50:	e0bffd17 	ldw	r2,-12(fp)
 400dd54:	10c00117 	ldw	r3,4(r2)
 400dd58:	00a00034 	movhi	r2,32768
 400dd5c:	10bfffc4 	addi	r2,r2,-1
 400dd60:	18802126 	beq	r3,r2,400dde8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400dd64:	e0bfff17 	ldw	r2,-4(fp)
 400dd68:	10800017 	ldw	r2,0(r2)
 400dd6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400dd70:	e0bffc17 	ldw	r2,-16(fp)
 400dd74:	10800090 	cmplti	r2,r2,2
 400dd78:	1000061e 	bne	r2,zero,400dd94 <altera_avalon_jtag_uart_ioctl+0x7c>
 400dd7c:	e0fffc17 	ldw	r3,-16(fp)
 400dd80:	00a00034 	movhi	r2,32768
 400dd84:	10bfffc4 	addi	r2,r2,-1
 400dd88:	18800226 	beq	r3,r2,400dd94 <altera_avalon_jtag_uart_ioctl+0x7c>
 400dd8c:	e0bffc17 	ldw	r2,-16(fp)
 400dd90:	00000206 	br	400dd9c <altera_avalon_jtag_uart_ioctl+0x84>
 400dd94:	00a00034 	movhi	r2,32768
 400dd98:	10bfff84 	addi	r2,r2,-2
 400dd9c:	e0fffd17 	ldw	r3,-12(fp)
 400dda0:	18800115 	stw	r2,4(r3)
      rc = 0;
 400dda4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400dda8:	00000f06 	br	400dde8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400ddac:	e0bffd17 	ldw	r2,-12(fp)
 400ddb0:	10c00117 	ldw	r3,4(r2)
 400ddb4:	00a00034 	movhi	r2,32768
 400ddb8:	10bfffc4 	addi	r2,r2,-1
 400ddbc:	18800c26 	beq	r3,r2,400ddf0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400ddc0:	e0bffd17 	ldw	r2,-12(fp)
 400ddc4:	10c00917 	ldw	r3,36(r2)
 400ddc8:	e0bffd17 	ldw	r2,-12(fp)
 400ddcc:	10800117 	ldw	r2,4(r2)
 400ddd0:	1885803a 	cmpltu	r2,r3,r2
 400ddd4:	10c03fcc 	andi	r3,r2,255
 400ddd8:	e0bfff17 	ldw	r2,-4(fp)
 400dddc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400dde0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400dde4:	00000206 	br	400ddf0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400dde8:	0001883a 	nop
 400ddec:	00000106 	br	400ddf4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400ddf0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400ddf4:	e0bffb17 	ldw	r2,-20(fp)
}
 400ddf8:	e037883a 	mov	sp,fp
 400ddfc:	df000017 	ldw	fp,0(sp)
 400de00:	dec00104 	addi	sp,sp,4
 400de04:	f800283a 	ret

0400de08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400de08:	defff304 	addi	sp,sp,-52
 400de0c:	dfc00c15 	stw	ra,48(sp)
 400de10:	df000b15 	stw	fp,44(sp)
 400de14:	df000b04 	addi	fp,sp,44
 400de18:	e13ffc15 	stw	r4,-16(fp)
 400de1c:	e17ffd15 	stw	r5,-12(fp)
 400de20:	e1bffe15 	stw	r6,-8(fp)
 400de24:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400de28:	e0bffd17 	ldw	r2,-12(fp)
 400de2c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400de30:	00004706 	br	400df50 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400de34:	e0bffc17 	ldw	r2,-16(fp)
 400de38:	10800a17 	ldw	r2,40(r2)
 400de3c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400de40:	e0bffc17 	ldw	r2,-16(fp)
 400de44:	10800b17 	ldw	r2,44(r2)
 400de48:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400de4c:	e0fff717 	ldw	r3,-36(fp)
 400de50:	e0bff817 	ldw	r2,-32(fp)
 400de54:	18800536 	bltu	r3,r2,400de6c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400de58:	e0fff717 	ldw	r3,-36(fp)
 400de5c:	e0bff817 	ldw	r2,-32(fp)
 400de60:	1885c83a 	sub	r2,r3,r2
 400de64:	e0bff615 	stw	r2,-40(fp)
 400de68:	00000406 	br	400de7c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400de6c:	00c20004 	movi	r3,2048
 400de70:	e0bff817 	ldw	r2,-32(fp)
 400de74:	1885c83a 	sub	r2,r3,r2
 400de78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400de7c:	e0bff617 	ldw	r2,-40(fp)
 400de80:	10001e26 	beq	r2,zero,400defc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400de84:	e0fffe17 	ldw	r3,-8(fp)
 400de88:	e0bff617 	ldw	r2,-40(fp)
 400de8c:	1880022e 	bgeu	r3,r2,400de98 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400de90:	e0bffe17 	ldw	r2,-8(fp)
 400de94:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400de98:	e0bffc17 	ldw	r2,-16(fp)
 400de9c:	10c00e04 	addi	r3,r2,56
 400dea0:	e0bff817 	ldw	r2,-32(fp)
 400dea4:	1885883a 	add	r2,r3,r2
 400dea8:	e1bff617 	ldw	r6,-40(fp)
 400deac:	100b883a 	mov	r5,r2
 400deb0:	e13ff517 	ldw	r4,-44(fp)
 400deb4:	40058bc0 	call	40058bc <memcpy>
      ptr   += n;
 400deb8:	e0fff517 	ldw	r3,-44(fp)
 400debc:	e0bff617 	ldw	r2,-40(fp)
 400dec0:	1885883a 	add	r2,r3,r2
 400dec4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400dec8:	e0fffe17 	ldw	r3,-8(fp)
 400decc:	e0bff617 	ldw	r2,-40(fp)
 400ded0:	1885c83a 	sub	r2,r3,r2
 400ded4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ded8:	e0fff817 	ldw	r3,-32(fp)
 400dedc:	e0bff617 	ldw	r2,-40(fp)
 400dee0:	1885883a 	add	r2,r3,r2
 400dee4:	10c1ffcc 	andi	r3,r2,2047
 400dee8:	e0bffc17 	ldw	r2,-16(fp)
 400deec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400def0:	e0bffe17 	ldw	r2,-8(fp)
 400def4:	00bfcf16 	blt	zero,r2,400de34 <__alt_data_end+0xfc00de34>
 400def8:	00000106 	br	400df00 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400defc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400df00:	e0fff517 	ldw	r3,-44(fp)
 400df04:	e0bffd17 	ldw	r2,-12(fp)
 400df08:	1880141e 	bne	r3,r2,400df5c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400df0c:	e0bfff17 	ldw	r2,-4(fp)
 400df10:	1090000c 	andi	r2,r2,16384
 400df14:	1000131e 	bne	r2,zero,400df64 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400df18:	0001883a 	nop
 400df1c:	e0bffc17 	ldw	r2,-16(fp)
 400df20:	10c00a17 	ldw	r3,40(r2)
 400df24:	e0bff717 	ldw	r2,-36(fp)
 400df28:	1880051e 	bne	r3,r2,400df40 <altera_avalon_jtag_uart_read+0x138>
 400df2c:	e0bffc17 	ldw	r2,-16(fp)
 400df30:	10c00917 	ldw	r3,36(r2)
 400df34:	e0bffc17 	ldw	r2,-16(fp)
 400df38:	10800117 	ldw	r2,4(r2)
 400df3c:	18bff736 	bltu	r3,r2,400df1c <__alt_data_end+0xfc00df1c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400df40:	e0bffc17 	ldw	r2,-16(fp)
 400df44:	10c00a17 	ldw	r3,40(r2)
 400df48:	e0bff717 	ldw	r2,-36(fp)
 400df4c:	18800726 	beq	r3,r2,400df6c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400df50:	e0bffe17 	ldw	r2,-8(fp)
 400df54:	00bfb716 	blt	zero,r2,400de34 <__alt_data_end+0xfc00de34>
 400df58:	00000506 	br	400df70 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400df5c:	0001883a 	nop
 400df60:	00000306 	br	400df70 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400df64:	0001883a 	nop
 400df68:	00000106 	br	400df70 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400df6c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400df70:	e0fff517 	ldw	r3,-44(fp)
 400df74:	e0bffd17 	ldw	r2,-12(fp)
 400df78:	18801826 	beq	r3,r2,400dfdc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400df7c:	0005303a 	rdctl	r2,status
 400df80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400df84:	e0fffb17 	ldw	r3,-20(fp)
 400df88:	00bfff84 	movi	r2,-2
 400df8c:	1884703a 	and	r2,r3,r2
 400df90:	1001703a 	wrctl	status,r2
  
  return context;
 400df94:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400df98:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400df9c:	e0bffc17 	ldw	r2,-16(fp)
 400dfa0:	10800817 	ldw	r2,32(r2)
 400dfa4:	10c00054 	ori	r3,r2,1
 400dfa8:	e0bffc17 	ldw	r2,-16(fp)
 400dfac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400dfb0:	e0bffc17 	ldw	r2,-16(fp)
 400dfb4:	10800017 	ldw	r2,0(r2)
 400dfb8:	10800104 	addi	r2,r2,4
 400dfbc:	1007883a 	mov	r3,r2
 400dfc0:	e0bffc17 	ldw	r2,-16(fp)
 400dfc4:	10800817 	ldw	r2,32(r2)
 400dfc8:	18800035 	stwio	r2,0(r3)
 400dfcc:	e0bffa17 	ldw	r2,-24(fp)
 400dfd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400dfd4:	e0bff917 	ldw	r2,-28(fp)
 400dfd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400dfdc:	e0fff517 	ldw	r3,-44(fp)
 400dfe0:	e0bffd17 	ldw	r2,-12(fp)
 400dfe4:	18800426 	beq	r3,r2,400dff8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400dfe8:	e0fff517 	ldw	r3,-44(fp)
 400dfec:	e0bffd17 	ldw	r2,-12(fp)
 400dff0:	1885c83a 	sub	r2,r3,r2
 400dff4:	00000606 	br	400e010 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400dff8:	e0bfff17 	ldw	r2,-4(fp)
 400dffc:	1090000c 	andi	r2,r2,16384
 400e000:	10000226 	beq	r2,zero,400e00c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400e004:	00bffd44 	movi	r2,-11
 400e008:	00000106 	br	400e010 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400e00c:	00bffec4 	movi	r2,-5
}
 400e010:	e037883a 	mov	sp,fp
 400e014:	dfc00117 	ldw	ra,4(sp)
 400e018:	df000017 	ldw	fp,0(sp)
 400e01c:	dec00204 	addi	sp,sp,8
 400e020:	f800283a 	ret

0400e024 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400e024:	defff304 	addi	sp,sp,-52
 400e028:	dfc00c15 	stw	ra,48(sp)
 400e02c:	df000b15 	stw	fp,44(sp)
 400e030:	df000b04 	addi	fp,sp,44
 400e034:	e13ffc15 	stw	r4,-16(fp)
 400e038:	e17ffd15 	stw	r5,-12(fp)
 400e03c:	e1bffe15 	stw	r6,-8(fp)
 400e040:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400e044:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400e048:	e0bffd17 	ldw	r2,-12(fp)
 400e04c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400e050:	00003706 	br	400e130 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400e054:	e0bffc17 	ldw	r2,-16(fp)
 400e058:	10800c17 	ldw	r2,48(r2)
 400e05c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400e060:	e0bffc17 	ldw	r2,-16(fp)
 400e064:	10800d17 	ldw	r2,52(r2)
 400e068:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400e06c:	e0fff917 	ldw	r3,-28(fp)
 400e070:	e0bff517 	ldw	r2,-44(fp)
 400e074:	1880062e 	bgeu	r3,r2,400e090 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400e078:	e0fff517 	ldw	r3,-44(fp)
 400e07c:	e0bff917 	ldw	r2,-28(fp)
 400e080:	1885c83a 	sub	r2,r3,r2
 400e084:	10bfffc4 	addi	r2,r2,-1
 400e088:	e0bff615 	stw	r2,-40(fp)
 400e08c:	00000b06 	br	400e0bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400e090:	e0bff517 	ldw	r2,-44(fp)
 400e094:	10000526 	beq	r2,zero,400e0ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400e098:	00c20004 	movi	r3,2048
 400e09c:	e0bff917 	ldw	r2,-28(fp)
 400e0a0:	1885c83a 	sub	r2,r3,r2
 400e0a4:	e0bff615 	stw	r2,-40(fp)
 400e0a8:	00000406 	br	400e0bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400e0ac:	00c1ffc4 	movi	r3,2047
 400e0b0:	e0bff917 	ldw	r2,-28(fp)
 400e0b4:	1885c83a 	sub	r2,r3,r2
 400e0b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400e0bc:	e0bff617 	ldw	r2,-40(fp)
 400e0c0:	10001e26 	beq	r2,zero,400e13c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400e0c4:	e0fffe17 	ldw	r3,-8(fp)
 400e0c8:	e0bff617 	ldw	r2,-40(fp)
 400e0cc:	1880022e 	bgeu	r3,r2,400e0d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400e0d0:	e0bffe17 	ldw	r2,-8(fp)
 400e0d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400e0d8:	e0bffc17 	ldw	r2,-16(fp)
 400e0dc:	10c20e04 	addi	r3,r2,2104
 400e0e0:	e0bff917 	ldw	r2,-28(fp)
 400e0e4:	1885883a 	add	r2,r3,r2
 400e0e8:	e1bff617 	ldw	r6,-40(fp)
 400e0ec:	e17ffd17 	ldw	r5,-12(fp)
 400e0f0:	1009883a 	mov	r4,r2
 400e0f4:	40058bc0 	call	40058bc <memcpy>
      ptr   += n;
 400e0f8:	e0fffd17 	ldw	r3,-12(fp)
 400e0fc:	e0bff617 	ldw	r2,-40(fp)
 400e100:	1885883a 	add	r2,r3,r2
 400e104:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400e108:	e0fffe17 	ldw	r3,-8(fp)
 400e10c:	e0bff617 	ldw	r2,-40(fp)
 400e110:	1885c83a 	sub	r2,r3,r2
 400e114:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e118:	e0fff917 	ldw	r3,-28(fp)
 400e11c:	e0bff617 	ldw	r2,-40(fp)
 400e120:	1885883a 	add	r2,r3,r2
 400e124:	10c1ffcc 	andi	r3,r2,2047
 400e128:	e0bffc17 	ldw	r2,-16(fp)
 400e12c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400e130:	e0bffe17 	ldw	r2,-8(fp)
 400e134:	00bfc716 	blt	zero,r2,400e054 <__alt_data_end+0xfc00e054>
 400e138:	00000106 	br	400e140 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400e13c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e140:	0005303a 	rdctl	r2,status
 400e144:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e148:	e0fffb17 	ldw	r3,-20(fp)
 400e14c:	00bfff84 	movi	r2,-2
 400e150:	1884703a 	and	r2,r3,r2
 400e154:	1001703a 	wrctl	status,r2
  
  return context;
 400e158:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400e15c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400e160:	e0bffc17 	ldw	r2,-16(fp)
 400e164:	10800817 	ldw	r2,32(r2)
 400e168:	10c00094 	ori	r3,r2,2
 400e16c:	e0bffc17 	ldw	r2,-16(fp)
 400e170:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e174:	e0bffc17 	ldw	r2,-16(fp)
 400e178:	10800017 	ldw	r2,0(r2)
 400e17c:	10800104 	addi	r2,r2,4
 400e180:	1007883a 	mov	r3,r2
 400e184:	e0bffc17 	ldw	r2,-16(fp)
 400e188:	10800817 	ldw	r2,32(r2)
 400e18c:	18800035 	stwio	r2,0(r3)
 400e190:	e0bffa17 	ldw	r2,-24(fp)
 400e194:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e198:	e0bff817 	ldw	r2,-32(fp)
 400e19c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400e1a0:	e0bffe17 	ldw	r2,-8(fp)
 400e1a4:	0080100e 	bge	zero,r2,400e1e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400e1a8:	e0bfff17 	ldw	r2,-4(fp)
 400e1ac:	1090000c 	andi	r2,r2,16384
 400e1b0:	1000101e 	bne	r2,zero,400e1f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400e1b4:	0001883a 	nop
 400e1b8:	e0bffc17 	ldw	r2,-16(fp)
 400e1bc:	10c00d17 	ldw	r3,52(r2)
 400e1c0:	e0bff517 	ldw	r2,-44(fp)
 400e1c4:	1880051e 	bne	r3,r2,400e1dc <altera_avalon_jtag_uart_write+0x1b8>
 400e1c8:	e0bffc17 	ldw	r2,-16(fp)
 400e1cc:	10c00917 	ldw	r3,36(r2)
 400e1d0:	e0bffc17 	ldw	r2,-16(fp)
 400e1d4:	10800117 	ldw	r2,4(r2)
 400e1d8:	18bff736 	bltu	r3,r2,400e1b8 <__alt_data_end+0xfc00e1b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400e1dc:	e0bffc17 	ldw	r2,-16(fp)
 400e1e0:	10800917 	ldw	r2,36(r2)
 400e1e4:	1000051e 	bne	r2,zero,400e1fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400e1e8:	e0bffe17 	ldw	r2,-8(fp)
 400e1ec:	00bfd016 	blt	zero,r2,400e130 <__alt_data_end+0xfc00e130>
 400e1f0:	00000306 	br	400e200 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400e1f4:	0001883a 	nop
 400e1f8:	00000106 	br	400e200 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400e1fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400e200:	e0fffd17 	ldw	r3,-12(fp)
 400e204:	e0bff717 	ldw	r2,-36(fp)
 400e208:	18800426 	beq	r3,r2,400e21c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400e20c:	e0fffd17 	ldw	r3,-12(fp)
 400e210:	e0bff717 	ldw	r2,-36(fp)
 400e214:	1885c83a 	sub	r2,r3,r2
 400e218:	00000606 	br	400e234 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400e21c:	e0bfff17 	ldw	r2,-4(fp)
 400e220:	1090000c 	andi	r2,r2,16384
 400e224:	10000226 	beq	r2,zero,400e230 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400e228:	00bffd44 	movi	r2,-11
 400e22c:	00000106 	br	400e234 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400e230:	00bffec4 	movi	r2,-5
}
 400e234:	e037883a 	mov	sp,fp
 400e238:	dfc00117 	ldw	ra,4(sp)
 400e23c:	df000017 	ldw	fp,0(sp)
 400e240:	dec00204 	addi	sp,sp,8
 400e244:	f800283a 	ret

0400e248 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 400e248:	defffd04 	addi	sp,sp,-12
 400e24c:	df000215 	stw	fp,8(sp)
 400e250:	df000204 	addi	fp,sp,8
 400e254:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 400e258:	008e84b4 	movhi	r2,14866
 400e25c:	10ac1144 	addi	r2,r2,-20411
 400e260:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 400e264:	e0bfff17 	ldw	r2,-4(fp)
 400e268:	10800a17 	ldw	r2,40(r2)
 400e26c:	10800104 	addi	r2,r2,4
 400e270:	1007883a 	mov	r3,r2
 400e274:	e0bffe17 	ldw	r2,-8(fp)
 400e278:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 400e27c:	e0bfff17 	ldw	r2,-4(fp)
 400e280:	10800a17 	ldw	r2,40(r2)
 400e284:	10800104 	addi	r2,r2,4
 400e288:	10800037 	ldwio	r2,0(r2)
 400e28c:	1007883a 	mov	r3,r2
 400e290:	e0bffe17 	ldw	r2,-8(fp)
 400e294:	1880081e 	bne	r3,r2,400e2b8 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 400e298:	e0bfff17 	ldw	r2,-4(fp)
 400e29c:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 400e2a0:	e0bfff17 	ldw	r2,-4(fp)
 400e2a4:	10800a17 	ldw	r2,40(r2)
 400e2a8:	10800104 	addi	r2,r2,4
 400e2ac:	0007883a 	mov	r3,zero
 400e2b0:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 400e2b4:	00000306 	br	400e2c4 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 400e2b8:	e0bfff17 	ldw	r2,-4(fp)
 400e2bc:	00c00044 	movi	r3,1
 400e2c0:	10c00f15 	stw	r3,60(r2)
    }
}
 400e2c4:	0001883a 	nop
 400e2c8:	e037883a 	mov	sp,fp
 400e2cc:	df000017 	ldw	fp,0(sp)
 400e2d0:	dec00104 	addi	sp,sp,4
 400e2d4:	f800283a 	ret

0400e2d8 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 400e2d8:	defffc04 	addi	sp,sp,-16
 400e2dc:	df000315 	stw	fp,12(sp)
 400e2e0:	df000304 	addi	fp,sp,12
 400e2e4:	e13ffe15 	stw	r4,-8(fp)
 400e2e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 400e2ec:	e0bfff17 	ldw	r2,-4(fp)
 400e2f0:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 400e2f4:	e0bffd17 	ldw	r2,-12(fp)
 400e2f8:	10001026 	beq	r2,zero,400e33c <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 400e2fc:	e0bffe17 	ldw	r2,-8(fp)
 400e300:	10800a17 	ldw	r2,40(r2)
 400e304:	10800104 	addi	r2,r2,4
 400e308:	1007883a 	mov	r3,r2
 400e30c:	e0bffd17 	ldw	r2,-12(fp)
 400e310:	10800104 	addi	r2,r2,4
 400e314:	10800017 	ldw	r2,0(r2)
 400e318:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 400e31c:	e0bffe17 	ldw	r2,-8(fp)
 400e320:	10800a17 	ldw	r2,40(r2)
 400e324:	1007883a 	mov	r3,r2
 400e328:	e0bffd17 	ldw	r2,-12(fp)
 400e32c:	10800017 	ldw	r2,0(r2)
 400e330:	18800035 	stwio	r2,0(r3)
        return 0;
 400e334:	0005883a 	mov	r2,zero
 400e338:	00000106 	br	400e340 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 400e33c:	00bffa84 	movi	r2,-22
}
 400e340:	e037883a 	mov	sp,fp
 400e344:	df000017 	ldw	fp,0(sp)
 400e348:	dec00104 	addi	sp,sp,4
 400e34c:	f800283a 	ret

0400e350 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 400e350:	defff604 	addi	sp,sp,-40
 400e354:	dfc00915 	stw	ra,36(sp)
 400e358:	df000815 	stw	fp,32(sp)
 400e35c:	df000804 	addi	fp,sp,32
 400e360:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400e364:	e0bfff17 	ldw	r2,-4(fp)
 400e368:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 400e36c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 400e370:	e0bff817 	ldw	r2,-32(fp)
 400e374:	10801017 	ldw	r2,64(r2)
 400e378:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400e37c:	e0bff817 	ldw	r2,-32(fp)
 400e380:	10800a17 	ldw	r2,40(r2)
 400e384:	10800304 	addi	r2,r2,12
 400e388:	10800037 	ldwio	r2,0(r2)
 400e38c:	1007883a 	mov	r3,r2
 400e390:	00bfff44 	movi	r2,-3
 400e394:	1884703a 	and	r2,r3,r2
 400e398:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400e39c:	e0bff817 	ldw	r2,-32(fp)
 400e3a0:	10800a17 	ldw	r2,40(r2)
 400e3a4:	10800304 	addi	r2,r2,12
 400e3a8:	1007883a 	mov	r3,r2
 400e3ac:	e0bffb17 	ldw	r2,-20(fp)
 400e3b0:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 400e3b4:	e0bffa17 	ldw	r2,-24(fp)
 400e3b8:	10002d26 	beq	r2,zero,400e470 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 400e3bc:	e0bff817 	ldw	r2,-32(fp)
 400e3c0:	10800a17 	ldw	r2,40(r2)
 400e3c4:	10800104 	addi	r2,r2,4
 400e3c8:	1007883a 	mov	r3,r2
 400e3cc:	e0bffa17 	ldw	r2,-24(fp)
 400e3d0:	10800104 	addi	r2,r2,4
 400e3d4:	10800017 	ldw	r2,0(r2)
 400e3d8:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 400e3dc:	e0bff817 	ldw	r2,-32(fp)
 400e3e0:	10800a17 	ldw	r2,40(r2)
 400e3e4:	1007883a 	mov	r3,r2
 400e3e8:	e0bffa17 	ldw	r2,-24(fp)
 400e3ec:	10800017 	ldw	r2,0(r2)
 400e3f0:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400e3f4:	e0bff817 	ldw	r2,-32(fp)
 400e3f8:	10800a17 	ldw	r2,40(r2)
 400e3fc:	10800204 	addi	r2,r2,8
 400e400:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400e404:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400e408:	1005d07a 	srai	r2,r2,1
 400e40c:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 400e410:	e0bff817 	ldw	r2,-32(fp)
 400e414:	10800d17 	ldw	r2,52(r2)
 400e418:	10001126 	beq	r2,zero,400e460 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e41c:	0005303a 	rdctl	r2,status
 400e420:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e424:	e0fffd17 	ldw	r3,-12(fp)
 400e428:	00bfff84 	movi	r2,-2
 400e42c:	1884703a 	and	r2,r3,r2
 400e430:	1001703a 	wrctl	status,r2
  
  return context;
 400e434:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 400e438:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 400e43c:	e0bff817 	ldw	r2,-32(fp)
 400e440:	10800d17 	ldw	r2,52(r2)
 400e444:	e17ff917 	ldw	r5,-28(fp)
 400e448:	e13ffa17 	ldw	r4,-24(fp)
 400e44c:	103ee83a 	callr	r2
 400e450:	e0bffc17 	ldw	r2,-16(fp)
 400e454:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e458:	e0bffe17 	ldw	r2,-8(fp)
 400e45c:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400e460:	e0bff817 	ldw	r2,-32(fp)
 400e464:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 400e468:	e0bff817 	ldw	r2,-32(fp)
 400e46c:	10001105 	stb	zero,68(r2)
    }
}
 400e470:	0001883a 	nop
 400e474:	e037883a 	mov	sp,fp
 400e478:	dfc00117 	ldw	ra,4(sp)
 400e47c:	df000017 	ldw	fp,0(sp)
 400e480:	dec00204 	addi	sp,sp,8
 400e484:	f800283a 	ret

0400e488 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 400e488:	defff704 	addi	sp,sp,-36
 400e48c:	dfc00815 	stw	ra,32(sp)
 400e490:	df000715 	stw	fp,28(sp)
 400e494:	df000704 	addi	fp,sp,28
 400e498:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400e49c:	e0bfff17 	ldw	r2,-4(fp)
 400e4a0:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400e4a4:	e0bff917 	ldw	r2,-28(fp)
 400e4a8:	10800a17 	ldw	r2,40(r2)
 400e4ac:	10800104 	addi	r2,r2,4
 400e4b0:	10800037 	ldwio	r2,0(r2)
 400e4b4:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400e4b8:	e0bff917 	ldw	r2,-28(fp)
 400e4bc:	10800a17 	ldw	r2,40(r2)
 400e4c0:	10800037 	ldwio	r2,0(r2)
 400e4c4:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 400e4c8:	e0bff917 	ldw	r2,-28(fp)
 400e4cc:	10800e17 	ldw	r2,56(r2)
 400e4d0:	10001126 	beq	r2,zero,400e518 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e4d4:	0005303a 	rdctl	r2,status
 400e4d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e4dc:	e0fffb17 	ldw	r3,-20(fp)
 400e4e0:	00bfff84 	movi	r2,-2
 400e4e4:	1884703a 	and	r2,r3,r2
 400e4e8:	1001703a 	wrctl	status,r2
  
  return context;
 400e4ec:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400e4f0:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 400e4f4:	e0bff917 	ldw	r2,-28(fp)
 400e4f8:	10800e17 	ldw	r2,56(r2)
 400e4fc:	e0fffd04 	addi	r3,fp,-12
 400e500:	1809883a 	mov	r4,r3
 400e504:	103ee83a 	callr	r2
 400e508:	e0bffa17 	ldw	r2,-24(fp)
 400e50c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e510:	e0bffc17 	ldw	r2,-16(fp)
 400e514:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 400e518:	0001883a 	nop
 400e51c:	e037883a 	mov	sp,fp
 400e520:	dfc00117 	ldw	ra,4(sp)
 400e524:	df000017 	ldw	fp,0(sp)
 400e528:	dec00204 	addi	sp,sp,8
 400e52c:	f800283a 	ret

0400e530 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 400e530:	defffb04 	addi	sp,sp,-20
 400e534:	dfc00415 	stw	ra,16(sp)
 400e538:	df000315 	stw	fp,12(sp)
 400e53c:	df000304 	addi	fp,sp,12
 400e540:	e13ffd15 	stw	r4,-12(fp)
 400e544:	e17ffe15 	stw	r5,-8(fp)
 400e548:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 400e54c:	d1600d04 	addi	r5,gp,-32716
 400e550:	e13ffd17 	ldw	r4,-12(fp)
 400e554:	400f0600 	call	400f060 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 400e558:	e0ffff17 	ldw	r3,-4(fp)
 400e55c:	e0bffd17 	ldw	r2,-12(fp)
 400e560:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 400e564:	e0fffe17 	ldw	r3,-8(fp)
 400e568:	e0bffd17 	ldw	r2,-12(fp)
 400e56c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 400e570:	e0bffd17 	ldw	r2,-12(fp)
 400e574:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 400e578:	e0bffd17 	ldw	r2,-12(fp)
 400e57c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 400e580:	e0bffd17 	ldw	r2,-12(fp)
 400e584:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 400e588:	e13ffd17 	ldw	r4,-12(fp)
 400e58c:	400e2480 	call	400e248 <altera_avalon_mailbox_identify>
}
 400e590:	0001883a 	nop
 400e594:	e037883a 	mov	sp,fp
 400e598:	dfc00117 	ldw	ra,4(sp)
 400e59c:	df000017 	ldw	fp,0(sp)
 400e5a0:	dec00204 	addi	sp,sp,8
 400e5a4:	f800283a 	ret

0400e5a8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 400e5a8:	defff804 	addi	sp,sp,-32
 400e5ac:	dfc00715 	stw	ra,28(sp)
 400e5b0:	df000615 	stw	fp,24(sp)
 400e5b4:	df000604 	addi	fp,sp,24
 400e5b8:	e13ffd15 	stw	r4,-12(fp)
 400e5bc:	e17ffe15 	stw	r5,-8(fp)
 400e5c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 400e5c4:	d1600d04 	addi	r5,gp,-32716
 400e5c8:	e13ffd17 	ldw	r4,-12(fp)
 400e5cc:	400f1c40 	call	400f1c4 <alt_find_dev>
 400e5d0:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 400e5d4:	e0bffb17 	ldw	r2,-20(fp)
 400e5d8:	1000021e 	bne	r2,zero,400e5e4 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 400e5dc:	0005883a 	mov	r2,zero
 400e5e0:	00006506 	br	400e778 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400e5e4:	e0bffb17 	ldw	r2,-20(fp)
 400e5e8:	10800a17 	ldw	r2,40(r2)
 400e5ec:	10800304 	addi	r2,r2,12
 400e5f0:	10800037 	ldwio	r2,0(r2)
 400e5f4:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 400e5f8:	e0bffb17 	ldw	r2,-20(fp)
 400e5fc:	10800f17 	ldw	r2,60(r2)
 400e600:	1000081e 	bne	r2,zero,400e624 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400e604:	e0bffb17 	ldw	r2,-20(fp)
 400e608:	10800a17 	ldw	r2,40(r2)
 400e60c:	10800304 	addi	r2,r2,12
 400e610:	1009883a 	mov	r4,r2
 400e614:	e0fffc17 	ldw	r3,-16(fp)
 400e618:	00bfff44 	movi	r2,-3
 400e61c:	1884703a 	and	r2,r3,r2
 400e620:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 400e624:	e0bffb17 	ldw	r2,-20(fp)
 400e628:	10800f17 	ldw	r2,60(r2)
 400e62c:	10800058 	cmpnei	r2,r2,1
 400e630:	1000081e 	bne	r2,zero,400e654 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400e634:	e0bffb17 	ldw	r2,-20(fp)
 400e638:	10800a17 	ldw	r2,40(r2)
 400e63c:	10800304 	addi	r2,r2,12
 400e640:	1009883a 	mov	r4,r2
 400e644:	e0fffc17 	ldw	r3,-16(fp)
 400e648:	00bfff84 	movi	r2,-2
 400e64c:	1884703a 	and	r2,r3,r2
 400e650:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 400e654:	e0bffb17 	ldw	r2,-20(fp)
 400e658:	10800b17 	ldw	r2,44(r2)
 400e65c:	10bfffd8 	cmpnei	r2,r2,-1
 400e660:	1000021e 	bne	r2,zero,400e66c <altera_avalon_mailbox_open+0xc4>
        return dev;
 400e664:	e0bffb17 	ldw	r2,-20(fp)
 400e668:	00004306 	br	400e778 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 400e66c:	e0bffe17 	ldw	r2,-8(fp)
 400e670:	1000041e 	bne	r2,zero,400e684 <altera_avalon_mailbox_open+0xdc>
 400e674:	e0bfff17 	ldw	r2,-4(fp)
 400e678:	1000021e 	bne	r2,zero,400e684 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 400e67c:	e0bffb17 	ldw	r2,-20(fp)
 400e680:	00003d06 	br	400e778 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400e684:	e0bffb17 	ldw	r2,-20(fp)
 400e688:	10800f17 	ldw	r2,60(r2)
 400e68c:	1000021e 	bne	r2,zero,400e698 <altera_avalon_mailbox_open+0xf0>
 400e690:	e0bfff17 	ldw	r2,-4(fp)
 400e694:	1000061e 	bne	r2,zero,400e6b0 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400e698:	e0bffb17 	ldw	r2,-20(fp)
 400e69c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400e6a0:	10800058 	cmpnei	r2,r2,1
 400e6a4:	1000041e 	bne	r2,zero,400e6b8 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400e6a8:	e0bffe17 	ldw	r2,-8(fp)
 400e6ac:	10000226 	beq	r2,zero,400e6b8 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 400e6b0:	0005883a 	mov	r2,zero
 400e6b4:	00003006 	br	400e778 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 400e6b8:	e0bffb17 	ldw	r2,-20(fp)
 400e6bc:	e0fffe17 	ldw	r3,-8(fp)
 400e6c0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 400e6c4:	e0bffb17 	ldw	r2,-20(fp)
 400e6c8:	e0ffff17 	ldw	r3,-4(fp)
 400e6cc:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 400e6d0:	e0bffb17 	ldw	r2,-20(fp)
 400e6d4:	10800f17 	ldw	r2,60(r2)
 400e6d8:	10000b1e 	bne	r2,zero,400e708 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 400e6dc:	e0bffb17 	ldw	r2,-20(fp)
 400e6e0:	10c00c17 	ldw	r3,48(r2)
 400e6e4:	e0bffb17 	ldw	r2,-20(fp)
 400e6e8:	10800b17 	ldw	r2,44(r2)
 400e6ec:	d8000015 	stw	zero,0(sp)
 400e6f0:	e1fffb17 	ldw	r7,-20(fp)
 400e6f4:	01810074 	movhi	r6,1025
 400e6f8:	31b8d404 	addi	r6,r6,-7344
 400e6fc:	100b883a 	mov	r5,r2
 400e700:	1809883a 	mov	r4,r3
 400e704:	400f2880 	call	400f288 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 400e708:	e0bffb17 	ldw	r2,-20(fp)
 400e70c:	10800f17 	ldw	r2,60(r2)
 400e710:	10800058 	cmpnei	r2,r2,1
 400e714:	1000171e 	bne	r2,zero,400e774 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 400e718:	e0bffb17 	ldw	r2,-20(fp)
 400e71c:	10c00c17 	ldw	r3,48(r2)
 400e720:	e0bffb17 	ldw	r2,-20(fp)
 400e724:	10800b17 	ldw	r2,44(r2)
 400e728:	d8000015 	stw	zero,0(sp)
 400e72c:	e1fffb17 	ldw	r7,-20(fp)
 400e730:	01810074 	movhi	r6,1025
 400e734:	31b92204 	addi	r6,r6,-7032
 400e738:	100b883a 	mov	r5,r2
 400e73c:	1809883a 	mov	r4,r3
 400e740:	400f2880 	call	400f288 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400e744:	e0bffb17 	ldw	r2,-20(fp)
 400e748:	10800a17 	ldw	r2,40(r2)
 400e74c:	10800304 	addi	r2,r2,12
 400e750:	10800037 	ldwio	r2,0(r2)
 400e754:	10800054 	ori	r2,r2,1
 400e758:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400e75c:	e0bffb17 	ldw	r2,-20(fp)
 400e760:	10800a17 	ldw	r2,40(r2)
 400e764:	10800304 	addi	r2,r2,12
 400e768:	1007883a 	mov	r3,r2
 400e76c:	e0bffc17 	ldw	r2,-16(fp)
 400e770:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 400e774:	e0bffb17 	ldw	r2,-20(fp)
}
 400e778:	e037883a 	mov	sp,fp
 400e77c:	dfc00117 	ldw	ra,4(sp)
 400e780:	df000017 	ldw	fp,0(sp)
 400e784:	dec00204 	addi	sp,sp,8
 400e788:	f800283a 	ret

0400e78c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 400e78c:	defffb04 	addi	sp,sp,-20
 400e790:	dfc00415 	stw	ra,16(sp)
 400e794:	df000315 	stw	fp,12(sp)
 400e798:	df000304 	addi	fp,sp,12
 400e79c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 400e7a0:	e0bfff17 	ldw	r2,-4(fp)
 400e7a4:	10003926 	beq	r2,zero,400e88c <altera_avalon_mailbox_close+0x100>
 400e7a8:	e0bfff17 	ldw	r2,-4(fp)
 400e7ac:	10800b17 	ldw	r2,44(r2)
 400e7b0:	10bfffe0 	cmpeqi	r2,r2,-1
 400e7b4:	1000351e 	bne	r2,zero,400e88c <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 400e7b8:	e0bfff17 	ldw	r2,-4(fp)
 400e7bc:	10800f17 	ldw	r2,60(r2)
 400e7c0:	10000e1e 	bne	r2,zero,400e7fc <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400e7c4:	e0bfff17 	ldw	r2,-4(fp)
 400e7c8:	10800a17 	ldw	r2,40(r2)
 400e7cc:	10800304 	addi	r2,r2,12
 400e7d0:	10800037 	ldwio	r2,0(r2)
 400e7d4:	1007883a 	mov	r3,r2
 400e7d8:	00bfff44 	movi	r2,-3
 400e7dc:	1884703a 	and	r2,r3,r2
 400e7e0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400e7e4:	e0bfff17 	ldw	r2,-4(fp)
 400e7e8:	10800a17 	ldw	r2,40(r2)
 400e7ec:	10800304 	addi	r2,r2,12
 400e7f0:	1007883a 	mov	r3,r2
 400e7f4:	e0bffe17 	ldw	r2,-8(fp)
 400e7f8:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 400e7fc:	e0bfff17 	ldw	r2,-4(fp)
 400e800:	10800f17 	ldw	r2,60(r2)
 400e804:	10800058 	cmpnei	r2,r2,1
 400e808:	10000e1e 	bne	r2,zero,400e844 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400e80c:	e0bfff17 	ldw	r2,-4(fp)
 400e810:	10800a17 	ldw	r2,40(r2)
 400e814:	10800304 	addi	r2,r2,12
 400e818:	10800037 	ldwio	r2,0(r2)
 400e81c:	1007883a 	mov	r3,r2
 400e820:	00bfff84 	movi	r2,-2
 400e824:	1884703a 	and	r2,r3,r2
 400e828:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400e82c:	e0bfff17 	ldw	r2,-4(fp)
 400e830:	10800a17 	ldw	r2,40(r2)
 400e834:	10800304 	addi	r2,r2,12
 400e838:	1007883a 	mov	r3,r2
 400e83c:	e0bffe17 	ldw	r2,-8(fp)
 400e840:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 400e844:	e0bfff17 	ldw	r2,-4(fp)
 400e848:	10800b17 	ldw	r2,44(r2)
 400e84c:	10bfffe0 	cmpeqi	r2,r2,-1
 400e850:	10000a1e 	bne	r2,zero,400e87c <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 400e854:	e0bfff17 	ldw	r2,-4(fp)
 400e858:	10c00c17 	ldw	r3,48(r2)
 400e85c:	e0bfff17 	ldw	r2,-4(fp)
 400e860:	10800b17 	ldw	r2,44(r2)
 400e864:	d8000015 	stw	zero,0(sp)
 400e868:	e1ffff17 	ldw	r7,-4(fp)
 400e86c:	000d883a 	mov	r6,zero
 400e870:	100b883a 	mov	r5,r2
 400e874:	1809883a 	mov	r4,r3
 400e878:	400f2880 	call	400f288 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 400e87c:	e0bfff17 	ldw	r2,-4(fp)
 400e880:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 400e884:	e0bfff17 	ldw	r2,-4(fp)
 400e888:	10000e15 	stw	zero,56(r2)
    }
}
 400e88c:	0001883a 	nop
 400e890:	e037883a 	mov	sp,fp
 400e894:	dfc00117 	ldw	ra,4(sp)
 400e898:	df000017 	ldw	fp,0(sp)
 400e89c:	dec00204 	addi	sp,sp,8
 400e8a0:	f800283a 	ret

0400e8a4 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 400e8a4:	defffd04 	addi	sp,sp,-12
 400e8a8:	df000215 	stw	fp,8(sp)
 400e8ac:	df000204 	addi	fp,sp,8
 400e8b0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 400e8b4:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 400e8b8:	e0bfff17 	ldw	r2,-4(fp)
 400e8bc:	10800a17 	ldw	r2,40(r2)
 400e8c0:	10800204 	addi	r2,r2,8
 400e8c4:	10800037 	ldwio	r2,0(r2)
 400e8c8:	108000cc 	andi	r2,r2,3
 400e8cc:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 400e8d0:	e0bfff17 	ldw	r2,-4(fp)
 400e8d4:	10800f17 	ldw	r2,60(r2)
 400e8d8:	1000041e 	bne	r2,zero,400e8ec <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400e8dc:	e0bffe17 	ldw	r2,-8(fp)
 400e8e0:	1080008c 	andi	r2,r2,2
 400e8e4:	1004d07a 	srli	r2,r2,1
 400e8e8:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 400e8ec:	e0bfff17 	ldw	r2,-4(fp)
 400e8f0:	10800f17 	ldw	r2,60(r2)
 400e8f4:	10800058 	cmpnei	r2,r2,1
 400e8f8:	1000031e 	bne	r2,zero,400e908 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 400e8fc:	e0bffe17 	ldw	r2,-8(fp)
 400e900:	1080004c 	andi	r2,r2,1
 400e904:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 400e908:	e0bffe17 	ldw	r2,-8(fp)
}
 400e90c:	e037883a 	mov	sp,fp
 400e910:	df000017 	ldw	fp,0(sp)
 400e914:	dec00104 	addi	sp,sp,4
 400e918:	f800283a 	ret

0400e91c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 400e91c:	defff704 	addi	sp,sp,-36
 400e920:	dfc00815 	stw	ra,32(sp)
 400e924:	df000715 	stw	fp,28(sp)
 400e928:	df000704 	addi	fp,sp,28
 400e92c:	e13ffc15 	stw	r4,-16(fp)
 400e930:	e17ffd15 	stw	r5,-12(fp)
 400e934:	e1bffe15 	stw	r6,-8(fp)
 400e938:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 400e93c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400e940:	e0bffc17 	ldw	r2,-16(fp)
 400e944:	10801103 	ldbu	r2,68(r2)
 400e948:	10803fcc 	andi	r2,r2,255
 400e94c:	1000061e 	bne	r2,zero,400e968 <altera_avalon_mailbox_send+0x4c>
 400e950:	e0bffc17 	ldw	r2,-16(fp)
 400e954:	10800a17 	ldw	r2,40(r2)
 400e958:	10800204 	addi	r2,r2,8
 400e95c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 400e960:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400e964:	10000226 	beq	r2,zero,400e970 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 400e968:	00bfffc4 	movi	r2,-1
 400e96c:	00003a06 	br	400ea58 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 400e970:	e0bffc17 	ldw	r2,-16(fp)
 400e974:	e0fffd17 	ldw	r3,-12(fp)
 400e978:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 400e97c:	e0bffc17 	ldw	r2,-16(fp)
 400e980:	00c00044 	movi	r3,1
 400e984:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 400e988:	e0bffc17 	ldw	r2,-16(fp)
 400e98c:	10800b17 	ldw	r2,44(r2)
 400e990:	10bfffe0 	cmpeqi	r2,r2,-1
 400e994:	1000031e 	bne	r2,zero,400e9a4 <altera_avalon_mailbox_send+0x88>
 400e998:	e0bfff17 	ldw	r2,-4(fp)
 400e99c:	10800058 	cmpnei	r2,r2,1
 400e9a0:	1000201e 	bne	r2,zero,400ea24 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 400e9a4:	e0bffe17 	ldw	r2,-8(fp)
 400e9a8:	1000061e 	bne	r2,zero,400e9c4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400e9ac:	e13ffc17 	ldw	r4,-16(fp)
 400e9b0:	400e8a40 	call	400e8a4 <altera_avalon_mailbox_status>
 400e9b4:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 400e9b8:	e0bffb17 	ldw	r2,-20(fp)
 400e9bc:	103ffb1e 	bne	r2,zero,400e9ac <__alt_data_end+0xfc00e9ac>
 400e9c0:	00000e06 	br	400e9fc <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400e9c4:	e13ffc17 	ldw	r4,-16(fp)
 400e9c8:	400e8a40 	call	400e8a4 <altera_avalon_mailbox_status>
 400e9cc:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 400e9d0:	e0bffe17 	ldw	r2,-8(fp)
 400e9d4:	10bfffc4 	addi	r2,r2,-1
 400e9d8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 400e9dc:	e0bffb17 	ldw	r2,-20(fp)
 400e9e0:	10000226 	beq	r2,zero,400e9ec <altera_avalon_mailbox_send+0xd0>
 400e9e4:	e0bffe17 	ldw	r2,-8(fp)
 400e9e8:	103ff61e 	bne	r2,zero,400e9c4 <__alt_data_end+0xfc00e9c4>
            if (timeout == 0)
 400e9ec:	e0bffe17 	ldw	r2,-8(fp)
 400e9f0:	1000021e 	bne	r2,zero,400e9fc <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 400e9f4:	00bff084 	movi	r2,-62
 400e9f8:	00001706 	br	400ea58 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 400e9fc:	e17ffd17 	ldw	r5,-12(fp)
 400ea00:	e13ffc17 	ldw	r4,-16(fp)
 400ea04:	400e2d80 	call	400e2d8 <altera_avalon_mailbox_post>
 400ea08:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400ea0c:	e0bffc17 	ldw	r2,-16(fp)
 400ea10:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 400ea14:	e0bffc17 	ldw	r2,-16(fp)
 400ea18:	10001105 	stb	zero,68(r2)
        return status;
 400ea1c:	e0bff917 	ldw	r2,-28(fp)
 400ea20:	00000d06 	br	400ea58 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400ea24:	e0bffc17 	ldw	r2,-16(fp)
 400ea28:	10800a17 	ldw	r2,40(r2)
 400ea2c:	10800304 	addi	r2,r2,12
 400ea30:	10800037 	ldwio	r2,0(r2)
 400ea34:	10800094 	ori	r2,r2,2
 400ea38:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400ea3c:	e0bffc17 	ldw	r2,-16(fp)
 400ea40:	10800a17 	ldw	r2,40(r2)
 400ea44:	10800304 	addi	r2,r2,12
 400ea48:	1007883a 	mov	r3,r2
 400ea4c:	e0bffa17 	ldw	r2,-24(fp)
 400ea50:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 400ea54:	0005883a 	mov	r2,zero
}
 400ea58:	e037883a 	mov	sp,fp
 400ea5c:	dfc00117 	ldw	ra,4(sp)
 400ea60:	df000017 	ldw	fp,0(sp)
 400ea64:	dec00204 	addi	sp,sp,8
 400ea68:	f800283a 	ret

0400ea6c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 400ea6c:	defff904 	addi	sp,sp,-28
 400ea70:	dfc00615 	stw	ra,24(sp)
 400ea74:	df000515 	stw	fp,20(sp)
 400ea78:	df000504 	addi	fp,sp,20
 400ea7c:	e13ffd15 	stw	r4,-12(fp)
 400ea80:	e17ffe15 	stw	r5,-8(fp)
 400ea84:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 400ea88:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 400ea8c:	e0bffd17 	ldw	r2,-12(fp)
 400ea90:	10003a26 	beq	r2,zero,400eb7c <altera_avalon_mailbox_retrieve_poll+0x110>
 400ea94:	e0bffe17 	ldw	r2,-8(fp)
 400ea98:	10003826 	beq	r2,zero,400eb7c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400ea9c:	e0bffd17 	ldw	r2,-12(fp)
 400eaa0:	10800a17 	ldw	r2,40(r2)
 400eaa4:	10800304 	addi	r2,r2,12
 400eaa8:	10800037 	ldwio	r2,0(r2)
 400eaac:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 400eab0:	e0bffd17 	ldw	r2,-12(fp)
 400eab4:	10800a17 	ldw	r2,40(r2)
 400eab8:	10800304 	addi	r2,r2,12
 400eabc:	1009883a 	mov	r4,r2
 400eac0:	e0fffc17 	ldw	r3,-16(fp)
 400eac4:	00bfff84 	movi	r2,-2
 400eac8:	1884703a 	and	r2,r3,r2
 400eacc:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 400ead0:	e0bfff17 	ldw	r2,-4(fp)
 400ead4:	1000061e 	bne	r2,zero,400eaf0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 400ead8:	e13ffd17 	ldw	r4,-12(fp)
 400eadc:	400e8a40 	call	400e8a4 <altera_avalon_mailbox_status>
 400eae0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 400eae4:	e0bffb17 	ldw	r2,-20(fp)
 400eae8:	103ffb26 	beq	r2,zero,400ead8 <__alt_data_end+0xfc00ead8>
 400eaec:	00000a06 	br	400eb18 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 400eaf0:	e13ffd17 	ldw	r4,-12(fp)
 400eaf4:	400e8a40 	call	400e8a4 <altera_avalon_mailbox_status>
 400eaf8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 400eafc:	e0bfff17 	ldw	r2,-4(fp)
 400eb00:	10bfffc4 	addi	r2,r2,-1
 400eb04:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 400eb08:	e0bffb17 	ldw	r2,-20(fp)
 400eb0c:	1000021e 	bne	r2,zero,400eb18 <altera_avalon_mailbox_retrieve_poll+0xac>
 400eb10:	e0bfff17 	ldw	r2,-4(fp)
 400eb14:	103ff61e 	bne	r2,zero,400eaf0 <__alt_data_end+0xfc00eaf0>
        }

        /* if timeout, status remain 0 */
        if (status)
 400eb18:	e0bffb17 	ldw	r2,-20(fp)
 400eb1c:	10000d26 	beq	r2,zero,400eb54 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400eb20:	e0bffe17 	ldw	r2,-8(fp)
 400eb24:	10800104 	addi	r2,r2,4
 400eb28:	e0fffd17 	ldw	r3,-12(fp)
 400eb2c:	18c00a17 	ldw	r3,40(r3)
 400eb30:	18c00104 	addi	r3,r3,4
 400eb34:	18c00037 	ldwio	r3,0(r3)
 400eb38:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400eb3c:	e0bffd17 	ldw	r2,-12(fp)
 400eb40:	10800a17 	ldw	r2,40(r2)
 400eb44:	10800037 	ldwio	r2,0(r2)
 400eb48:	1007883a 	mov	r3,r2
 400eb4c:	e0bffe17 	ldw	r2,-8(fp)
 400eb50:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400eb54:	e0bffd17 	ldw	r2,-12(fp)
 400eb58:	10800a17 	ldw	r2,40(r2)
 400eb5c:	10800304 	addi	r2,r2,12
 400eb60:	1007883a 	mov	r3,r2
 400eb64:	e0bffc17 	ldw	r2,-16(fp)
 400eb68:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 400eb6c:	e0bffb17 	ldw	r2,-20(fp)
 400eb70:	10000226 	beq	r2,zero,400eb7c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 400eb74:	0005883a 	mov	r2,zero
 400eb78:	00000606 	br	400eb94 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 400eb7c:	e0bffe17 	ldw	r2,-8(fp)
 400eb80:	10800104 	addi	r2,r2,4
 400eb84:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 400eb88:	e0bffe17 	ldw	r2,-8(fp)
 400eb8c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 400eb90:	00bffa84 	movi	r2,-22
}
 400eb94:	e037883a 	mov	sp,fp
 400eb98:	dfc00117 	ldw	ra,4(sp)
 400eb9c:	df000017 	ldw	fp,0(sp)
 400eba0:	dec00204 	addi	sp,sp,8
 400eba4:	f800283a 	ret

0400eba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eba8:	defffe04 	addi	sp,sp,-8
 400ebac:	dfc00115 	stw	ra,4(sp)
 400ebb0:	df000015 	stw	fp,0(sp)
 400ebb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ebb8:	00810074 	movhi	r2,1025
 400ebbc:	10880d04 	addi	r2,r2,8244
 400ebc0:	10800017 	ldw	r2,0(r2)
 400ebc4:	10000526 	beq	r2,zero,400ebdc <alt_get_errno+0x34>
 400ebc8:	00810074 	movhi	r2,1025
 400ebcc:	10880d04 	addi	r2,r2,8244
 400ebd0:	10800017 	ldw	r2,0(r2)
 400ebd4:	103ee83a 	callr	r2
 400ebd8:	00000206 	br	400ebe4 <alt_get_errno+0x3c>
 400ebdc:	00810074 	movhi	r2,1025
 400ebe0:	108ef804 	addi	r2,r2,15328
}
 400ebe4:	e037883a 	mov	sp,fp
 400ebe8:	dfc00117 	ldw	ra,4(sp)
 400ebec:	df000017 	ldw	fp,0(sp)
 400ebf0:	dec00204 	addi	sp,sp,8
 400ebf4:	f800283a 	ret

0400ebf8 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400ebf8:	defff904 	addi	sp,sp,-28
 400ebfc:	df000615 	stw	fp,24(sp)
 400ec00:	df000604 	addi	fp,sp,24
 400ec04:	e13ffe15 	stw	r4,-8(fp)
 400ec08:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 400ec0c:	00bfffc4 	movi	r2,-1
 400ec10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 400ec14:	0005317a 	rdctl	r2,cpuid
 400ec18:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400ec1c:	e0bffb17 	ldw	r2,-20(fp)
 400ec20:	1006943a 	slli	r3,r2,16
 400ec24:	e0bfff17 	ldw	r2,-4(fp)
 400ec28:	1884b03a 	or	r2,r3,r2
 400ec2c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 400ec30:	e0bffe17 	ldw	r2,-8(fp)
 400ec34:	10800317 	ldw	r2,12(r2)
 400ec38:	e0fffc17 	ldw	r3,-16(fp)
 400ec3c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400ec40:	e0bffe17 	ldw	r2,-8(fp)
 400ec44:	10800317 	ldw	r2,12(r2)
 400ec48:	10800037 	ldwio	r2,0(r2)
 400ec4c:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 400ec50:	e0fffd17 	ldw	r3,-12(fp)
 400ec54:	e0bffc17 	ldw	r2,-16(fp)
 400ec58:	1880011e 	bne	r3,r2,400ec60 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 400ec5c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 400ec60:	e0bffa17 	ldw	r2,-24(fp)
}
 400ec64:	e037883a 	mov	sp,fp
 400ec68:	df000017 	ldw	fp,0(sp)
 400ec6c:	dec00104 	addi	sp,sp,4
 400ec70:	f800283a 	ret

0400ec74 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 400ec74:	defffc04 	addi	sp,sp,-16
 400ec78:	dfc00315 	stw	ra,12(sp)
 400ec7c:	df000215 	stw	fp,8(sp)
 400ec80:	df000204 	addi	fp,sp,8
 400ec84:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400ec88:	d1600f04 	addi	r5,gp,-32708
 400ec8c:	e13fff17 	ldw	r4,-4(fp)
 400ec90:	400f1c40 	call	400f1c4 <alt_find_dev>
 400ec94:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 400ec98:	e0bffe17 	ldw	r2,-8(fp)
 400ec9c:	1000041e 	bne	r2,zero,400ecb0 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 400eca0:	400eba80 	call	400eba8 <alt_get_errno>
 400eca4:	1007883a 	mov	r3,r2
 400eca8:	008004c4 	movi	r2,19
 400ecac:	18800015 	stw	r2,0(r3)
  }

  return dev;
 400ecb0:	e0bffe17 	ldw	r2,-8(fp)
}
 400ecb4:	e037883a 	mov	sp,fp
 400ecb8:	dfc00117 	ldw	ra,4(sp)
 400ecbc:	df000017 	ldw	fp,0(sp)
 400ecc0:	dec00204 	addi	sp,sp,8
 400ecc4:	f800283a 	ret

0400ecc8 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400ecc8:	defffe04 	addi	sp,sp,-8
 400eccc:	df000115 	stw	fp,4(sp)
 400ecd0:	df000104 	addi	fp,sp,4
 400ecd4:	e13fff15 	stw	r4,-4(fp)
  return;
 400ecd8:	0001883a 	nop
}
 400ecdc:	e037883a 	mov	sp,fp
 400ece0:	df000017 	ldw	fp,0(sp)
 400ece4:	dec00104 	addi	sp,sp,4
 400ece8:	f800283a 	ret

0400ecec <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 400ecec:	defffc04 	addi	sp,sp,-16
 400ecf0:	dfc00315 	stw	ra,12(sp)
 400ecf4:	df000215 	stw	fp,8(sp)
 400ecf8:	df000204 	addi	fp,sp,8
 400ecfc:	e13ffe15 	stw	r4,-8(fp)
 400ed00:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 400ed04:	0001883a 	nop
 400ed08:	e17fff17 	ldw	r5,-4(fp)
 400ed0c:	e13ffe17 	ldw	r4,-8(fp)
 400ed10:	400ebf80 	call	400ebf8 <alt_mutex_trylock>
 400ed14:	103ffc1e 	bne	r2,zero,400ed08 <__alt_data_end+0xfc00ed08>
}
 400ed18:	0001883a 	nop
 400ed1c:	e037883a 	mov	sp,fp
 400ed20:	dfc00117 	ldw	ra,4(sp)
 400ed24:	df000017 	ldw	fp,0(sp)
 400ed28:	dec00204 	addi	sp,sp,8
 400ed2c:	f800283a 	ret

0400ed30 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400ed30:	defffa04 	addi	sp,sp,-24
 400ed34:	dfc00515 	stw	ra,20(sp)
 400ed38:	df000415 	stw	fp,16(sp)
 400ed3c:	df000404 	addi	fp,sp,16
 400ed40:	e13ffd15 	stw	r4,-12(fp)
 400ed44:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 400ed48:	e17ffe17 	ldw	r5,-8(fp)
 400ed4c:	e13ffd17 	ldw	r4,-12(fp)
 400ed50:	400ebf80 	call	400ebf8 <alt_mutex_trylock>
 400ed54:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 400ed58:	e0bffc17 	ldw	r2,-16(fp)
}
 400ed5c:	e037883a 	mov	sp,fp
 400ed60:	dfc00117 	ldw	ra,4(sp)
 400ed64:	df000017 	ldw	fp,0(sp)
 400ed68:	dec00204 	addi	sp,sp,8
 400ed6c:	f800283a 	ret

0400ed70 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 400ed70:	defffd04 	addi	sp,sp,-12
 400ed74:	df000215 	stw	fp,8(sp)
 400ed78:	df000204 	addi	fp,sp,8
 400ed7c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 400ed80:	0005317a 	rdctl	r2,cpuid
 400ed84:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 400ed88:	e0bfff17 	ldw	r2,-4(fp)
 400ed8c:	10800317 	ldw	r2,12(r2)
 400ed90:	10800104 	addi	r2,r2,4
 400ed94:	00c00044 	movi	r3,1
 400ed98:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 400ed9c:	e0bfff17 	ldw	r2,-4(fp)
 400eda0:	10800317 	ldw	r2,12(r2)
 400eda4:	e0fffe17 	ldw	r3,-8(fp)
 400eda8:	1806943a 	slli	r3,r3,16
 400edac:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 400edb0:	0001883a 	nop
 400edb4:	e037883a 	mov	sp,fp
 400edb8:	df000017 	ldw	fp,0(sp)
 400edbc:	dec00104 	addi	sp,sp,4
 400edc0:	f800283a 	ret

0400edc4 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 400edc4:	defff904 	addi	sp,sp,-28
 400edc8:	df000615 	stw	fp,24(sp)
 400edcc:	df000604 	addi	fp,sp,24
 400edd0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 400edd4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 400edd8:	0005317a 	rdctl	r2,cpuid
 400eddc:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400ede0:	e0bfff17 	ldw	r2,-4(fp)
 400ede4:	10800317 	ldw	r2,12(r2)
 400ede8:	10800037 	ldwio	r2,0(r2)
 400edec:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 400edf0:	e0bffc17 	ldw	r2,-16(fp)
 400edf4:	1004d43a 	srli	r2,r2,16
 400edf8:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 400edfc:	e0fffd17 	ldw	r3,-12(fp)
 400ee00:	e0bffb17 	ldw	r2,-20(fp)
 400ee04:	1880071e 	bne	r3,r2,400ee24 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 400ee08:	e0bffc17 	ldw	r2,-16(fp)
 400ee0c:	10bfffcc 	andi	r2,r2,65535
 400ee10:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 400ee14:	e0bffe17 	ldw	r2,-8(fp)
 400ee18:	10000226 	beq	r2,zero,400ee24 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 400ee1c:	00800044 	movi	r2,1
 400ee20:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 400ee24:	e0bffa17 	ldw	r2,-24(fp)
}
 400ee28:	e037883a 	mov	sp,fp
 400ee2c:	df000017 	ldw	fp,0(sp)
 400ee30:	dec00104 	addi	sp,sp,4
 400ee34:	f800283a 	ret

0400ee38 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 400ee38:	defffc04 	addi	sp,sp,-16
 400ee3c:	df000315 	stw	fp,12(sp)
 400ee40:	df000304 	addi	fp,sp,12
 400ee44:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 400ee48:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 400ee4c:	e0bfff17 	ldw	r2,-4(fp)
 400ee50:	10800317 	ldw	r2,12(r2)
 400ee54:	10800104 	addi	r2,r2,4
 400ee58:	10800037 	ldwio	r2,0(r2)
 400ee5c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 400ee60:	e0bffe17 	ldw	r2,-8(fp)
 400ee64:	1080004c 	andi	r2,r2,1
 400ee68:	10000226 	beq	r2,zero,400ee74 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 400ee6c:	00800044 	movi	r2,1
 400ee70:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 400ee74:	e0bffd17 	ldw	r2,-12(fp)
}
 400ee78:	e037883a 	mov	sp,fp
 400ee7c:	df000017 	ldw	fp,0(sp)
 400ee80:	dec00104 	addi	sp,sp,4
 400ee84:	f800283a 	ret

0400ee88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400ee88:	defff504 	addi	sp,sp,-44
 400ee8c:	df000a15 	stw	fp,40(sp)
 400ee90:	df000a04 	addi	fp,sp,40
 400ee94:	e13ffc15 	stw	r4,-16(fp)
 400ee98:	e17ffd15 	stw	r5,-12(fp)
 400ee9c:	e1bffe15 	stw	r6,-8(fp)
 400eea0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400eea4:	e03ff615 	stw	zero,-40(fp)
 400eea8:	00810074 	movhi	r2,1025
 400eeac:	108efd04 	addi	r2,r2,15348
 400eeb0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400eeb4:	10003f26 	beq	r2,zero,400efb4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 400eeb8:	e0bffc17 	ldw	r2,-16(fp)
 400eebc:	10003b26 	beq	r2,zero,400efac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 400eec0:	e0bffc17 	ldw	r2,-16(fp)
 400eec4:	e0fffe17 	ldw	r3,-8(fp)
 400eec8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400eecc:	e0bffc17 	ldw	r2,-16(fp)
 400eed0:	e0ffff17 	ldw	r3,-4(fp)
 400eed4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eed8:	0005303a 	rdctl	r2,status
 400eedc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eee0:	e0fff917 	ldw	r3,-28(fp)
 400eee4:	00bfff84 	movi	r2,-2
 400eee8:	1884703a 	and	r2,r3,r2
 400eeec:	1001703a 	wrctl	status,r2
  
  return context;
 400eef0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400eef4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400eef8:	00810074 	movhi	r2,1025
 400eefc:	108efe04 	addi	r2,r2,15352
 400ef00:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400ef04:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400ef08:	e0fffd17 	ldw	r3,-12(fp)
 400ef0c:	e0bff617 	ldw	r2,-40(fp)
 400ef10:	1885883a 	add	r2,r3,r2
 400ef14:	10c00044 	addi	r3,r2,1
 400ef18:	e0bffc17 	ldw	r2,-16(fp)
 400ef1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400ef20:	e0bffc17 	ldw	r2,-16(fp)
 400ef24:	10c00217 	ldw	r3,8(r2)
 400ef28:	e0bff617 	ldw	r2,-40(fp)
 400ef2c:	1880042e 	bgeu	r3,r2,400ef40 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 400ef30:	e0bffc17 	ldw	r2,-16(fp)
 400ef34:	00c00044 	movi	r3,1
 400ef38:	10c00405 	stb	r3,16(r2)
 400ef3c:	00000206 	br	400ef48 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 400ef40:	e0bffc17 	ldw	r2,-16(fp)
 400ef44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400ef48:	e0fffc17 	ldw	r3,-16(fp)
 400ef4c:	00810074 	movhi	r2,1025
 400ef50:	10881404 	addi	r2,r2,8272
 400ef54:	e0bffa15 	stw	r2,-24(fp)
 400ef58:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ef5c:	e0bffb17 	ldw	r2,-20(fp)
 400ef60:	e0fffa17 	ldw	r3,-24(fp)
 400ef64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400ef68:	e0bffa17 	ldw	r2,-24(fp)
 400ef6c:	10c00017 	ldw	r3,0(r2)
 400ef70:	e0bffb17 	ldw	r2,-20(fp)
 400ef74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ef78:	e0bffa17 	ldw	r2,-24(fp)
 400ef7c:	10800017 	ldw	r2,0(r2)
 400ef80:	e0fffb17 	ldw	r3,-20(fp)
 400ef84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400ef88:	e0bffa17 	ldw	r2,-24(fp)
 400ef8c:	e0fffb17 	ldw	r3,-20(fp)
 400ef90:	10c00015 	stw	r3,0(r2)
 400ef94:	e0bff817 	ldw	r2,-32(fp)
 400ef98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef9c:	e0bff717 	ldw	r2,-36(fp)
 400efa0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400efa4:	0005883a 	mov	r2,zero
 400efa8:	00000306 	br	400efb8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 400efac:	00bffa84 	movi	r2,-22
 400efb0:	00000106 	br	400efb8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 400efb4:	00bfde84 	movi	r2,-134
  }
}
 400efb8:	e037883a 	mov	sp,fp
 400efbc:	df000017 	ldw	fp,0(sp)
 400efc0:	dec00104 	addi	sp,sp,4
 400efc4:	f800283a 	ret

0400efc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400efc8:	defffe04 	addi	sp,sp,-8
 400efcc:	df000115 	stw	fp,4(sp)
 400efd0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400efd4:	e03fff15 	stw	zero,-4(fp)
 400efd8:	00000506 	br	400eff0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400efdc:	e0bfff17 	ldw	r2,-4(fp)
 400efe0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400efe4:	e0bfff17 	ldw	r2,-4(fp)
 400efe8:	10800804 	addi	r2,r2,32
 400efec:	e0bfff15 	stw	r2,-4(fp)
 400eff0:	e0bfff17 	ldw	r2,-4(fp)
 400eff4:	10820030 	cmpltui	r2,r2,2048
 400eff8:	103ff81e 	bne	r2,zero,400efdc <__alt_data_end+0xfc00efdc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400effc:	0001883a 	nop
 400f000:	e037883a 	mov	sp,fp
 400f004:	df000017 	ldw	fp,0(sp)
 400f008:	dec00104 	addi	sp,sp,4
 400f00c:	f800283a 	ret

0400f010 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f010:	defffe04 	addi	sp,sp,-8
 400f014:	dfc00115 	stw	ra,4(sp)
 400f018:	df000015 	stw	fp,0(sp)
 400f01c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f020:	00810074 	movhi	r2,1025
 400f024:	10880d04 	addi	r2,r2,8244
 400f028:	10800017 	ldw	r2,0(r2)
 400f02c:	10000526 	beq	r2,zero,400f044 <alt_get_errno+0x34>
 400f030:	00810074 	movhi	r2,1025
 400f034:	10880d04 	addi	r2,r2,8244
 400f038:	10800017 	ldw	r2,0(r2)
 400f03c:	103ee83a 	callr	r2
 400f040:	00000206 	br	400f04c <alt_get_errno+0x3c>
 400f044:	00810074 	movhi	r2,1025
 400f048:	108ef804 	addi	r2,r2,15328
}
 400f04c:	e037883a 	mov	sp,fp
 400f050:	dfc00117 	ldw	ra,4(sp)
 400f054:	df000017 	ldw	fp,0(sp)
 400f058:	dec00204 	addi	sp,sp,8
 400f05c:	f800283a 	ret

0400f060 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400f060:	defffa04 	addi	sp,sp,-24
 400f064:	dfc00515 	stw	ra,20(sp)
 400f068:	df000415 	stw	fp,16(sp)
 400f06c:	df000404 	addi	fp,sp,16
 400f070:	e13ffe15 	stw	r4,-8(fp)
 400f074:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400f078:	e0bffe17 	ldw	r2,-8(fp)
 400f07c:	10000326 	beq	r2,zero,400f08c <alt_dev_llist_insert+0x2c>
 400f080:	e0bffe17 	ldw	r2,-8(fp)
 400f084:	10800217 	ldw	r2,8(r2)
 400f088:	1000061e 	bne	r2,zero,400f0a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400f08c:	400f0100 	call	400f010 <alt_get_errno>
 400f090:	1007883a 	mov	r3,r2
 400f094:	00800584 	movi	r2,22
 400f098:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400f09c:	00bffa84 	movi	r2,-22
 400f0a0:	00001306 	br	400f0f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400f0a4:	e0bffe17 	ldw	r2,-8(fp)
 400f0a8:	e0ffff17 	ldw	r3,-4(fp)
 400f0ac:	e0fffc15 	stw	r3,-16(fp)
 400f0b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400f0b4:	e0bffd17 	ldw	r2,-12(fp)
 400f0b8:	e0fffc17 	ldw	r3,-16(fp)
 400f0bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400f0c0:	e0bffc17 	ldw	r2,-16(fp)
 400f0c4:	10c00017 	ldw	r3,0(r2)
 400f0c8:	e0bffd17 	ldw	r2,-12(fp)
 400f0cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400f0d0:	e0bffc17 	ldw	r2,-16(fp)
 400f0d4:	10800017 	ldw	r2,0(r2)
 400f0d8:	e0fffd17 	ldw	r3,-12(fp)
 400f0dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400f0e0:	e0bffc17 	ldw	r2,-16(fp)
 400f0e4:	e0fffd17 	ldw	r3,-12(fp)
 400f0e8:	10c00015 	stw	r3,0(r2)

  return 0;  
 400f0ec:	0005883a 	mov	r2,zero
}
 400f0f0:	e037883a 	mov	sp,fp
 400f0f4:	dfc00117 	ldw	ra,4(sp)
 400f0f8:	df000017 	ldw	fp,0(sp)
 400f0fc:	dec00204 	addi	sp,sp,8
 400f100:	f800283a 	ret

0400f104 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400f104:	defffd04 	addi	sp,sp,-12
 400f108:	dfc00215 	stw	ra,8(sp)
 400f10c:	df000115 	stw	fp,4(sp)
 400f110:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400f114:	00810074 	movhi	r2,1025
 400f118:	10805604 	addi	r2,r2,344
 400f11c:	e0bfff15 	stw	r2,-4(fp)
 400f120:	00000606 	br	400f13c <_do_ctors+0x38>
        (*ctor) (); 
 400f124:	e0bfff17 	ldw	r2,-4(fp)
 400f128:	10800017 	ldw	r2,0(r2)
 400f12c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400f130:	e0bfff17 	ldw	r2,-4(fp)
 400f134:	10bfff04 	addi	r2,r2,-4
 400f138:	e0bfff15 	stw	r2,-4(fp)
 400f13c:	e0ffff17 	ldw	r3,-4(fp)
 400f140:	00810074 	movhi	r2,1025
 400f144:	10805704 	addi	r2,r2,348
 400f148:	18bff62e 	bgeu	r3,r2,400f124 <__alt_data_end+0xfc00f124>
        (*ctor) (); 
}
 400f14c:	0001883a 	nop
 400f150:	e037883a 	mov	sp,fp
 400f154:	dfc00117 	ldw	ra,4(sp)
 400f158:	df000017 	ldw	fp,0(sp)
 400f15c:	dec00204 	addi	sp,sp,8
 400f160:	f800283a 	ret

0400f164 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400f164:	defffd04 	addi	sp,sp,-12
 400f168:	dfc00215 	stw	ra,8(sp)
 400f16c:	df000115 	stw	fp,4(sp)
 400f170:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400f174:	00810074 	movhi	r2,1025
 400f178:	10805604 	addi	r2,r2,344
 400f17c:	e0bfff15 	stw	r2,-4(fp)
 400f180:	00000606 	br	400f19c <_do_dtors+0x38>
        (*dtor) (); 
 400f184:	e0bfff17 	ldw	r2,-4(fp)
 400f188:	10800017 	ldw	r2,0(r2)
 400f18c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400f190:	e0bfff17 	ldw	r2,-4(fp)
 400f194:	10bfff04 	addi	r2,r2,-4
 400f198:	e0bfff15 	stw	r2,-4(fp)
 400f19c:	e0ffff17 	ldw	r3,-4(fp)
 400f1a0:	00810074 	movhi	r2,1025
 400f1a4:	10805704 	addi	r2,r2,348
 400f1a8:	18bff62e 	bgeu	r3,r2,400f184 <__alt_data_end+0xfc00f184>
        (*dtor) (); 
}
 400f1ac:	0001883a 	nop
 400f1b0:	e037883a 	mov	sp,fp
 400f1b4:	dfc00117 	ldw	ra,4(sp)
 400f1b8:	df000017 	ldw	fp,0(sp)
 400f1bc:	dec00204 	addi	sp,sp,8
 400f1c0:	f800283a 	ret

0400f1c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400f1c4:	defffa04 	addi	sp,sp,-24
 400f1c8:	dfc00515 	stw	ra,20(sp)
 400f1cc:	df000415 	stw	fp,16(sp)
 400f1d0:	df000404 	addi	fp,sp,16
 400f1d4:	e13ffe15 	stw	r4,-8(fp)
 400f1d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400f1dc:	e0bfff17 	ldw	r2,-4(fp)
 400f1e0:	10800017 	ldw	r2,0(r2)
 400f1e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400f1e8:	e13ffe17 	ldw	r4,-8(fp)
 400f1ec:	4006e080 	call	4006e08 <strlen>
 400f1f0:	10800044 	addi	r2,r2,1
 400f1f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f1f8:	00000d06 	br	400f230 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400f1fc:	e0bffc17 	ldw	r2,-16(fp)
 400f200:	10800217 	ldw	r2,8(r2)
 400f204:	e0fffd17 	ldw	r3,-12(fp)
 400f208:	180d883a 	mov	r6,r3
 400f20c:	e17ffe17 	ldw	r5,-8(fp)
 400f210:	1009883a 	mov	r4,r2
 400f214:	400fe140 	call	400fe14 <memcmp>
 400f218:	1000021e 	bne	r2,zero,400f224 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400f21c:	e0bffc17 	ldw	r2,-16(fp)
 400f220:	00000706 	br	400f240 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400f224:	e0bffc17 	ldw	r2,-16(fp)
 400f228:	10800017 	ldw	r2,0(r2)
 400f22c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f230:	e0fffc17 	ldw	r3,-16(fp)
 400f234:	e0bfff17 	ldw	r2,-4(fp)
 400f238:	18bff01e 	bne	r3,r2,400f1fc <__alt_data_end+0xfc00f1fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400f23c:	0005883a 	mov	r2,zero
}
 400f240:	e037883a 	mov	sp,fp
 400f244:	dfc00117 	ldw	ra,4(sp)
 400f248:	df000017 	ldw	fp,0(sp)
 400f24c:	dec00204 	addi	sp,sp,8
 400f250:	f800283a 	ret

0400f254 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400f254:	defffe04 	addi	sp,sp,-8
 400f258:	dfc00115 	stw	ra,4(sp)
 400f25c:	df000015 	stw	fp,0(sp)
 400f260:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400f264:	01440004 	movi	r5,4096
 400f268:	0009883a 	mov	r4,zero
 400f26c:	400fc9c0 	call	400fc9c <alt_icache_flush>
#endif
}
 400f270:	0001883a 	nop
 400f274:	e037883a 	mov	sp,fp
 400f278:	dfc00117 	ldw	ra,4(sp)
 400f27c:	df000017 	ldw	fp,0(sp)
 400f280:	dec00204 	addi	sp,sp,8
 400f284:	f800283a 	ret

0400f288 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f288:	defff904 	addi	sp,sp,-28
 400f28c:	dfc00615 	stw	ra,24(sp)
 400f290:	df000515 	stw	fp,20(sp)
 400f294:	df000504 	addi	fp,sp,20
 400f298:	e13ffc15 	stw	r4,-16(fp)
 400f29c:	e17ffd15 	stw	r5,-12(fp)
 400f2a0:	e1bffe15 	stw	r6,-8(fp)
 400f2a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400f2a8:	e0800217 	ldw	r2,8(fp)
 400f2ac:	d8800015 	stw	r2,0(sp)
 400f2b0:	e1ffff17 	ldw	r7,-4(fp)
 400f2b4:	e1bffe17 	ldw	r6,-8(fp)
 400f2b8:	e17ffd17 	ldw	r5,-12(fp)
 400f2bc:	e13ffc17 	ldw	r4,-16(fp)
 400f2c0:	400f4680 	call	400f468 <alt_iic_isr_register>
}  
 400f2c4:	e037883a 	mov	sp,fp
 400f2c8:	dfc00117 	ldw	ra,4(sp)
 400f2cc:	df000017 	ldw	fp,0(sp)
 400f2d0:	dec00204 	addi	sp,sp,8
 400f2d4:	f800283a 	ret

0400f2d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400f2d8:	defff904 	addi	sp,sp,-28
 400f2dc:	df000615 	stw	fp,24(sp)
 400f2e0:	df000604 	addi	fp,sp,24
 400f2e4:	e13ffe15 	stw	r4,-8(fp)
 400f2e8:	e17fff15 	stw	r5,-4(fp)
 400f2ec:	e0bfff17 	ldw	r2,-4(fp)
 400f2f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f2f4:	0005303a 	rdctl	r2,status
 400f2f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f2fc:	e0fffb17 	ldw	r3,-20(fp)
 400f300:	00bfff84 	movi	r2,-2
 400f304:	1884703a 	and	r2,r3,r2
 400f308:	1001703a 	wrctl	status,r2
  
  return context;
 400f30c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f310:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400f314:	00c00044 	movi	r3,1
 400f318:	e0bffa17 	ldw	r2,-24(fp)
 400f31c:	1884983a 	sll	r2,r3,r2
 400f320:	1007883a 	mov	r3,r2
 400f324:	00810074 	movhi	r2,1025
 400f328:	108efc04 	addi	r2,r2,15344
 400f32c:	10800017 	ldw	r2,0(r2)
 400f330:	1886b03a 	or	r3,r3,r2
 400f334:	00810074 	movhi	r2,1025
 400f338:	108efc04 	addi	r2,r2,15344
 400f33c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f340:	00810074 	movhi	r2,1025
 400f344:	108efc04 	addi	r2,r2,15344
 400f348:	10800017 	ldw	r2,0(r2)
 400f34c:	100170fa 	wrctl	ienable,r2
 400f350:	e0bffc17 	ldw	r2,-16(fp)
 400f354:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f358:	e0bffd17 	ldw	r2,-12(fp)
 400f35c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f360:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400f364:	0001883a 	nop
}
 400f368:	e037883a 	mov	sp,fp
 400f36c:	df000017 	ldw	fp,0(sp)
 400f370:	dec00104 	addi	sp,sp,4
 400f374:	f800283a 	ret

0400f378 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400f378:	defff904 	addi	sp,sp,-28
 400f37c:	df000615 	stw	fp,24(sp)
 400f380:	df000604 	addi	fp,sp,24
 400f384:	e13ffe15 	stw	r4,-8(fp)
 400f388:	e17fff15 	stw	r5,-4(fp)
 400f38c:	e0bfff17 	ldw	r2,-4(fp)
 400f390:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f394:	0005303a 	rdctl	r2,status
 400f398:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f39c:	e0fffb17 	ldw	r3,-20(fp)
 400f3a0:	00bfff84 	movi	r2,-2
 400f3a4:	1884703a 	and	r2,r3,r2
 400f3a8:	1001703a 	wrctl	status,r2
  
  return context;
 400f3ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f3b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400f3b4:	00c00044 	movi	r3,1
 400f3b8:	e0bffa17 	ldw	r2,-24(fp)
 400f3bc:	1884983a 	sll	r2,r3,r2
 400f3c0:	0084303a 	nor	r2,zero,r2
 400f3c4:	1007883a 	mov	r3,r2
 400f3c8:	00810074 	movhi	r2,1025
 400f3cc:	108efc04 	addi	r2,r2,15344
 400f3d0:	10800017 	ldw	r2,0(r2)
 400f3d4:	1886703a 	and	r3,r3,r2
 400f3d8:	00810074 	movhi	r2,1025
 400f3dc:	108efc04 	addi	r2,r2,15344
 400f3e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f3e4:	00810074 	movhi	r2,1025
 400f3e8:	108efc04 	addi	r2,r2,15344
 400f3ec:	10800017 	ldw	r2,0(r2)
 400f3f0:	100170fa 	wrctl	ienable,r2
 400f3f4:	e0bffc17 	ldw	r2,-16(fp)
 400f3f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f3fc:	e0bffd17 	ldw	r2,-12(fp)
 400f400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f404:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400f408:	0001883a 	nop
}
 400f40c:	e037883a 	mov	sp,fp
 400f410:	df000017 	ldw	fp,0(sp)
 400f414:	dec00104 	addi	sp,sp,4
 400f418:	f800283a 	ret

0400f41c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400f41c:	defffc04 	addi	sp,sp,-16
 400f420:	df000315 	stw	fp,12(sp)
 400f424:	df000304 	addi	fp,sp,12
 400f428:	e13ffe15 	stw	r4,-8(fp)
 400f42c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400f430:	000530fa 	rdctl	r2,ienable
 400f434:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400f438:	00c00044 	movi	r3,1
 400f43c:	e0bfff17 	ldw	r2,-4(fp)
 400f440:	1884983a 	sll	r2,r3,r2
 400f444:	1007883a 	mov	r3,r2
 400f448:	e0bffd17 	ldw	r2,-12(fp)
 400f44c:	1884703a 	and	r2,r3,r2
 400f450:	1004c03a 	cmpne	r2,r2,zero
 400f454:	10803fcc 	andi	r2,r2,255
}
 400f458:	e037883a 	mov	sp,fp
 400f45c:	df000017 	ldw	fp,0(sp)
 400f460:	dec00104 	addi	sp,sp,4
 400f464:	f800283a 	ret

0400f468 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f468:	defff504 	addi	sp,sp,-44
 400f46c:	dfc00a15 	stw	ra,40(sp)
 400f470:	df000915 	stw	fp,36(sp)
 400f474:	df000904 	addi	fp,sp,36
 400f478:	e13ffc15 	stw	r4,-16(fp)
 400f47c:	e17ffd15 	stw	r5,-12(fp)
 400f480:	e1bffe15 	stw	r6,-8(fp)
 400f484:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400f488:	00bffa84 	movi	r2,-22
 400f48c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400f490:	e0bffd17 	ldw	r2,-12(fp)
 400f494:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400f498:	e0bff817 	ldw	r2,-32(fp)
 400f49c:	10800808 	cmpgei	r2,r2,32
 400f4a0:	1000271e 	bne	r2,zero,400f540 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f4a4:	0005303a 	rdctl	r2,status
 400f4a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f4ac:	e0fffb17 	ldw	r3,-20(fp)
 400f4b0:	00bfff84 	movi	r2,-2
 400f4b4:	1884703a 	and	r2,r3,r2
 400f4b8:	1001703a 	wrctl	status,r2
  
  return context;
 400f4bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400f4c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400f4c4:	00810074 	movhi	r2,1025
 400f4c8:	108f0a04 	addi	r2,r2,15400
 400f4cc:	e0fff817 	ldw	r3,-32(fp)
 400f4d0:	180690fa 	slli	r3,r3,3
 400f4d4:	10c5883a 	add	r2,r2,r3
 400f4d8:	e0fffe17 	ldw	r3,-8(fp)
 400f4dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400f4e0:	00810074 	movhi	r2,1025
 400f4e4:	108f0a04 	addi	r2,r2,15400
 400f4e8:	e0fff817 	ldw	r3,-32(fp)
 400f4ec:	180690fa 	slli	r3,r3,3
 400f4f0:	10c5883a 	add	r2,r2,r3
 400f4f4:	10800104 	addi	r2,r2,4
 400f4f8:	e0ffff17 	ldw	r3,-4(fp)
 400f4fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400f500:	e0bffe17 	ldw	r2,-8(fp)
 400f504:	10000526 	beq	r2,zero,400f51c <alt_iic_isr_register+0xb4>
 400f508:	e0bff817 	ldw	r2,-32(fp)
 400f50c:	100b883a 	mov	r5,r2
 400f510:	e13ffc17 	ldw	r4,-16(fp)
 400f514:	400f2d80 	call	400f2d8 <alt_ic_irq_enable>
 400f518:	00000406 	br	400f52c <alt_iic_isr_register+0xc4>
 400f51c:	e0bff817 	ldw	r2,-32(fp)
 400f520:	100b883a 	mov	r5,r2
 400f524:	e13ffc17 	ldw	r4,-16(fp)
 400f528:	400f3780 	call	400f378 <alt_ic_irq_disable>
 400f52c:	e0bff715 	stw	r2,-36(fp)
 400f530:	e0bffa17 	ldw	r2,-24(fp)
 400f534:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f538:	e0bff917 	ldw	r2,-28(fp)
 400f53c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400f540:	e0bff717 	ldw	r2,-36(fp)
}
 400f544:	e037883a 	mov	sp,fp
 400f548:	dfc00117 	ldw	ra,4(sp)
 400f54c:	df000017 	ldw	fp,0(sp)
 400f550:	dec00204 	addi	sp,sp,8
 400f554:	f800283a 	ret

0400f558 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400f558:	defff904 	addi	sp,sp,-28
 400f55c:	dfc00615 	stw	ra,24(sp)
 400f560:	df000515 	stw	fp,20(sp)
 400f564:	df000504 	addi	fp,sp,20
 400f568:	e13ffc15 	stw	r4,-16(fp)
 400f56c:	e17ffd15 	stw	r5,-12(fp)
 400f570:	e1bffe15 	stw	r6,-8(fp)
 400f574:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400f578:	e1bfff17 	ldw	r6,-4(fp)
 400f57c:	e17ffe17 	ldw	r5,-8(fp)
 400f580:	e13ffd17 	ldw	r4,-12(fp)
 400f584:	400f7b40 	call	400f7b4 <open>
 400f588:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400f58c:	e0bffb17 	ldw	r2,-20(fp)
 400f590:	10001c16 	blt	r2,zero,400f604 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400f594:	00810074 	movhi	r2,1025
 400f598:	10837004 	addi	r2,r2,3520
 400f59c:	e0fffb17 	ldw	r3,-20(fp)
 400f5a0:	18c00324 	muli	r3,r3,12
 400f5a4:	10c5883a 	add	r2,r2,r3
 400f5a8:	10c00017 	ldw	r3,0(r2)
 400f5ac:	e0bffc17 	ldw	r2,-16(fp)
 400f5b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400f5b4:	00810074 	movhi	r2,1025
 400f5b8:	10837004 	addi	r2,r2,3520
 400f5bc:	e0fffb17 	ldw	r3,-20(fp)
 400f5c0:	18c00324 	muli	r3,r3,12
 400f5c4:	10c5883a 	add	r2,r2,r3
 400f5c8:	10800104 	addi	r2,r2,4
 400f5cc:	10c00017 	ldw	r3,0(r2)
 400f5d0:	e0bffc17 	ldw	r2,-16(fp)
 400f5d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400f5d8:	00810074 	movhi	r2,1025
 400f5dc:	10837004 	addi	r2,r2,3520
 400f5e0:	e0fffb17 	ldw	r3,-20(fp)
 400f5e4:	18c00324 	muli	r3,r3,12
 400f5e8:	10c5883a 	add	r2,r2,r3
 400f5ec:	10800204 	addi	r2,r2,8
 400f5f0:	10c00017 	ldw	r3,0(r2)
 400f5f4:	e0bffc17 	ldw	r2,-16(fp)
 400f5f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400f5fc:	e13ffb17 	ldw	r4,-20(fp)
 400f600:	400d3c40 	call	400d3c4 <alt_release_fd>
  }
} 
 400f604:	0001883a 	nop
 400f608:	e037883a 	mov	sp,fp
 400f60c:	dfc00117 	ldw	ra,4(sp)
 400f610:	df000017 	ldw	fp,0(sp)
 400f614:	dec00204 	addi	sp,sp,8
 400f618:	f800283a 	ret

0400f61c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400f61c:	defffb04 	addi	sp,sp,-20
 400f620:	dfc00415 	stw	ra,16(sp)
 400f624:	df000315 	stw	fp,12(sp)
 400f628:	df000304 	addi	fp,sp,12
 400f62c:	e13ffd15 	stw	r4,-12(fp)
 400f630:	e17ffe15 	stw	r5,-8(fp)
 400f634:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400f638:	01c07fc4 	movi	r7,511
 400f63c:	01800044 	movi	r6,1
 400f640:	e17ffd17 	ldw	r5,-12(fp)
 400f644:	01010074 	movhi	r4,1025
 400f648:	21037304 	addi	r4,r4,3532
 400f64c:	400f5580 	call	400f558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400f650:	01c07fc4 	movi	r7,511
 400f654:	000d883a 	mov	r6,zero
 400f658:	e17ffe17 	ldw	r5,-8(fp)
 400f65c:	01010074 	movhi	r4,1025
 400f660:	21037004 	addi	r4,r4,3520
 400f664:	400f5580 	call	400f558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400f668:	01c07fc4 	movi	r7,511
 400f66c:	01800044 	movi	r6,1
 400f670:	e17fff17 	ldw	r5,-4(fp)
 400f674:	01010074 	movhi	r4,1025
 400f678:	21037604 	addi	r4,r4,3544
 400f67c:	400f5580 	call	400f558 <alt_open_fd>
}  
 400f680:	0001883a 	nop
 400f684:	e037883a 	mov	sp,fp
 400f688:	dfc00117 	ldw	ra,4(sp)
 400f68c:	df000017 	ldw	fp,0(sp)
 400f690:	dec00204 	addi	sp,sp,8
 400f694:	f800283a 	ret

0400f698 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f698:	defffe04 	addi	sp,sp,-8
 400f69c:	dfc00115 	stw	ra,4(sp)
 400f6a0:	df000015 	stw	fp,0(sp)
 400f6a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f6a8:	00810074 	movhi	r2,1025
 400f6ac:	10880d04 	addi	r2,r2,8244
 400f6b0:	10800017 	ldw	r2,0(r2)
 400f6b4:	10000526 	beq	r2,zero,400f6cc <alt_get_errno+0x34>
 400f6b8:	00810074 	movhi	r2,1025
 400f6bc:	10880d04 	addi	r2,r2,8244
 400f6c0:	10800017 	ldw	r2,0(r2)
 400f6c4:	103ee83a 	callr	r2
 400f6c8:	00000206 	br	400f6d4 <alt_get_errno+0x3c>
 400f6cc:	00810074 	movhi	r2,1025
 400f6d0:	108ef804 	addi	r2,r2,15328
}
 400f6d4:	e037883a 	mov	sp,fp
 400f6d8:	dfc00117 	ldw	ra,4(sp)
 400f6dc:	df000017 	ldw	fp,0(sp)
 400f6e0:	dec00204 	addi	sp,sp,8
 400f6e4:	f800283a 	ret

0400f6e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400f6e8:	defffd04 	addi	sp,sp,-12
 400f6ec:	df000215 	stw	fp,8(sp)
 400f6f0:	df000204 	addi	fp,sp,8
 400f6f4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400f6f8:	e0bfff17 	ldw	r2,-4(fp)
 400f6fc:	10800217 	ldw	r2,8(r2)
 400f700:	10d00034 	orhi	r3,r2,16384
 400f704:	e0bfff17 	ldw	r2,-4(fp)
 400f708:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f70c:	e03ffe15 	stw	zero,-8(fp)
 400f710:	00001d06 	br	400f788 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f714:	00810074 	movhi	r2,1025
 400f718:	10837004 	addi	r2,r2,3520
 400f71c:	e0fffe17 	ldw	r3,-8(fp)
 400f720:	18c00324 	muli	r3,r3,12
 400f724:	10c5883a 	add	r2,r2,r3
 400f728:	10c00017 	ldw	r3,0(r2)
 400f72c:	e0bfff17 	ldw	r2,-4(fp)
 400f730:	10800017 	ldw	r2,0(r2)
 400f734:	1880111e 	bne	r3,r2,400f77c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f738:	00810074 	movhi	r2,1025
 400f73c:	10837004 	addi	r2,r2,3520
 400f740:	e0fffe17 	ldw	r3,-8(fp)
 400f744:	18c00324 	muli	r3,r3,12
 400f748:	10c5883a 	add	r2,r2,r3
 400f74c:	10800204 	addi	r2,r2,8
 400f750:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f754:	1000090e 	bge	r2,zero,400f77c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400f758:	e0bffe17 	ldw	r2,-8(fp)
 400f75c:	10c00324 	muli	r3,r2,12
 400f760:	00810074 	movhi	r2,1025
 400f764:	10837004 	addi	r2,r2,3520
 400f768:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f76c:	e0bfff17 	ldw	r2,-4(fp)
 400f770:	18800226 	beq	r3,r2,400f77c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400f774:	00bffcc4 	movi	r2,-13
 400f778:	00000a06 	br	400f7a4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f77c:	e0bffe17 	ldw	r2,-8(fp)
 400f780:	10800044 	addi	r2,r2,1
 400f784:	e0bffe15 	stw	r2,-8(fp)
 400f788:	00810074 	movhi	r2,1025
 400f78c:	10880c04 	addi	r2,r2,8240
 400f790:	10800017 	ldw	r2,0(r2)
 400f794:	1007883a 	mov	r3,r2
 400f798:	e0bffe17 	ldw	r2,-8(fp)
 400f79c:	18bfdd2e 	bgeu	r3,r2,400f714 <__alt_data_end+0xfc00f714>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400f7a0:	0005883a 	mov	r2,zero
}
 400f7a4:	e037883a 	mov	sp,fp
 400f7a8:	df000017 	ldw	fp,0(sp)
 400f7ac:	dec00104 	addi	sp,sp,4
 400f7b0:	f800283a 	ret

0400f7b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400f7b4:	defff604 	addi	sp,sp,-40
 400f7b8:	dfc00915 	stw	ra,36(sp)
 400f7bc:	df000815 	stw	fp,32(sp)
 400f7c0:	df000804 	addi	fp,sp,32
 400f7c4:	e13ffd15 	stw	r4,-12(fp)
 400f7c8:	e17ffe15 	stw	r5,-8(fp)
 400f7cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400f7d0:	00bfffc4 	movi	r2,-1
 400f7d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400f7d8:	00bffb44 	movi	r2,-19
 400f7dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400f7e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400f7e4:	01410074 	movhi	r5,1025
 400f7e8:	29480a04 	addi	r5,r5,8232
 400f7ec:	e13ffd17 	ldw	r4,-12(fp)
 400f7f0:	400f1c40 	call	400f1c4 <alt_find_dev>
 400f7f4:	e0bff815 	stw	r2,-32(fp)
 400f7f8:	e0bff817 	ldw	r2,-32(fp)
 400f7fc:	1000051e 	bne	r2,zero,400f814 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400f800:	e13ffd17 	ldw	r4,-12(fp)
 400f804:	400fad40 	call	400fad4 <alt_find_file>
 400f808:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400f80c:	00800044 	movi	r2,1
 400f810:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400f814:	e0bff817 	ldw	r2,-32(fp)
 400f818:	10002926 	beq	r2,zero,400f8c0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400f81c:	e13ff817 	ldw	r4,-32(fp)
 400f820:	400fbe80 	call	400fbe8 <alt_get_fd>
 400f824:	e0bff915 	stw	r2,-28(fp)
 400f828:	e0bff917 	ldw	r2,-28(fp)
 400f82c:	1000030e 	bge	r2,zero,400f83c <open+0x88>
    {
      status = index;
 400f830:	e0bff917 	ldw	r2,-28(fp)
 400f834:	e0bffa15 	stw	r2,-24(fp)
 400f838:	00002306 	br	400f8c8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 400f83c:	e0bff917 	ldw	r2,-28(fp)
 400f840:	10c00324 	muli	r3,r2,12
 400f844:	00810074 	movhi	r2,1025
 400f848:	10837004 	addi	r2,r2,3520
 400f84c:	1885883a 	add	r2,r3,r2
 400f850:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400f854:	e0fffe17 	ldw	r3,-8(fp)
 400f858:	00900034 	movhi	r2,16384
 400f85c:	10bfffc4 	addi	r2,r2,-1
 400f860:	1886703a 	and	r3,r3,r2
 400f864:	e0bffc17 	ldw	r2,-16(fp)
 400f868:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400f86c:	e0bffb17 	ldw	r2,-20(fp)
 400f870:	1000051e 	bne	r2,zero,400f888 <open+0xd4>
 400f874:	e13ffc17 	ldw	r4,-16(fp)
 400f878:	400f6e80 	call	400f6e8 <alt_file_locked>
 400f87c:	e0bffa15 	stw	r2,-24(fp)
 400f880:	e0bffa17 	ldw	r2,-24(fp)
 400f884:	10001016 	blt	r2,zero,400f8c8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400f888:	e0bff817 	ldw	r2,-32(fp)
 400f88c:	10800317 	ldw	r2,12(r2)
 400f890:	10000826 	beq	r2,zero,400f8b4 <open+0x100>
 400f894:	e0bff817 	ldw	r2,-32(fp)
 400f898:	10800317 	ldw	r2,12(r2)
 400f89c:	e1ffff17 	ldw	r7,-4(fp)
 400f8a0:	e1bffe17 	ldw	r6,-8(fp)
 400f8a4:	e17ffd17 	ldw	r5,-12(fp)
 400f8a8:	e13ffc17 	ldw	r4,-16(fp)
 400f8ac:	103ee83a 	callr	r2
 400f8b0:	00000106 	br	400f8b8 <open+0x104>
 400f8b4:	0005883a 	mov	r2,zero
 400f8b8:	e0bffa15 	stw	r2,-24(fp)
 400f8bc:	00000206 	br	400f8c8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400f8c0:	00bffb44 	movi	r2,-19
 400f8c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400f8c8:	e0bffa17 	ldw	r2,-24(fp)
 400f8cc:	1000090e 	bge	r2,zero,400f8f4 <open+0x140>
  {
    alt_release_fd (index);  
 400f8d0:	e13ff917 	ldw	r4,-28(fp)
 400f8d4:	400d3c40 	call	400d3c4 <alt_release_fd>
    ALT_ERRNO = -status;
 400f8d8:	400f6980 	call	400f698 <alt_get_errno>
 400f8dc:	1007883a 	mov	r3,r2
 400f8e0:	e0bffa17 	ldw	r2,-24(fp)
 400f8e4:	0085c83a 	sub	r2,zero,r2
 400f8e8:	18800015 	stw	r2,0(r3)
    return -1;
 400f8ec:	00bfffc4 	movi	r2,-1
 400f8f0:	00000106 	br	400f8f8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 400f8f4:	e0bff917 	ldw	r2,-28(fp)
}
 400f8f8:	e037883a 	mov	sp,fp
 400f8fc:	dfc00117 	ldw	ra,4(sp)
 400f900:	df000017 	ldw	fp,0(sp)
 400f904:	dec00204 	addi	sp,sp,8
 400f908:	f800283a 	ret

0400f90c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400f90c:	defffa04 	addi	sp,sp,-24
 400f910:	df000515 	stw	fp,20(sp)
 400f914:	df000504 	addi	fp,sp,20
 400f918:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f91c:	0005303a 	rdctl	r2,status
 400f920:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f924:	e0fffc17 	ldw	r3,-16(fp)
 400f928:	00bfff84 	movi	r2,-2
 400f92c:	1884703a 	and	r2,r3,r2
 400f930:	1001703a 	wrctl	status,r2
  
  return context;
 400f934:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400f938:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400f93c:	e0bfff17 	ldw	r2,-4(fp)
 400f940:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400f944:	e0bffd17 	ldw	r2,-12(fp)
 400f948:	10800017 	ldw	r2,0(r2)
 400f94c:	e0fffd17 	ldw	r3,-12(fp)
 400f950:	18c00117 	ldw	r3,4(r3)
 400f954:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400f958:	e0bffd17 	ldw	r2,-12(fp)
 400f95c:	10800117 	ldw	r2,4(r2)
 400f960:	e0fffd17 	ldw	r3,-12(fp)
 400f964:	18c00017 	ldw	r3,0(r3)
 400f968:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400f96c:	e0bffd17 	ldw	r2,-12(fp)
 400f970:	e0fffd17 	ldw	r3,-12(fp)
 400f974:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400f978:	e0bffd17 	ldw	r2,-12(fp)
 400f97c:	e0fffd17 	ldw	r3,-12(fp)
 400f980:	10c00015 	stw	r3,0(r2)
 400f984:	e0bffb17 	ldw	r2,-20(fp)
 400f988:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f98c:	e0bffe17 	ldw	r2,-8(fp)
 400f990:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400f994:	0001883a 	nop
 400f998:	e037883a 	mov	sp,fp
 400f99c:	df000017 	ldw	fp,0(sp)
 400f9a0:	dec00104 	addi	sp,sp,4
 400f9a4:	f800283a 	ret

0400f9a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400f9a8:	defffb04 	addi	sp,sp,-20
 400f9ac:	dfc00415 	stw	ra,16(sp)
 400f9b0:	df000315 	stw	fp,12(sp)
 400f9b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400f9b8:	d0a01217 	ldw	r2,-32696(gp)
 400f9bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400f9c0:	d0a6fc17 	ldw	r2,-25616(gp)
 400f9c4:	10800044 	addi	r2,r2,1
 400f9c8:	d0a6fc15 	stw	r2,-25616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f9cc:	00002e06 	br	400fa88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400f9d0:	e0bffd17 	ldw	r2,-12(fp)
 400f9d4:	10800017 	ldw	r2,0(r2)
 400f9d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400f9dc:	e0bffd17 	ldw	r2,-12(fp)
 400f9e0:	10800403 	ldbu	r2,16(r2)
 400f9e4:	10803fcc 	andi	r2,r2,255
 400f9e8:	10000426 	beq	r2,zero,400f9fc <alt_tick+0x54>
 400f9ec:	d0a6fc17 	ldw	r2,-25616(gp)
 400f9f0:	1000021e 	bne	r2,zero,400f9fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400f9f4:	e0bffd17 	ldw	r2,-12(fp)
 400f9f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400f9fc:	e0bffd17 	ldw	r2,-12(fp)
 400fa00:	10800217 	ldw	r2,8(r2)
 400fa04:	d0e6fc17 	ldw	r3,-25616(gp)
 400fa08:	18801d36 	bltu	r3,r2,400fa80 <alt_tick+0xd8>
 400fa0c:	e0bffd17 	ldw	r2,-12(fp)
 400fa10:	10800403 	ldbu	r2,16(r2)
 400fa14:	10803fcc 	andi	r2,r2,255
 400fa18:	1000191e 	bne	r2,zero,400fa80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400fa1c:	e0bffd17 	ldw	r2,-12(fp)
 400fa20:	10800317 	ldw	r2,12(r2)
 400fa24:	e0fffd17 	ldw	r3,-12(fp)
 400fa28:	18c00517 	ldw	r3,20(r3)
 400fa2c:	1809883a 	mov	r4,r3
 400fa30:	103ee83a 	callr	r2
 400fa34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400fa38:	e0bfff17 	ldw	r2,-4(fp)
 400fa3c:	1000031e 	bne	r2,zero,400fa4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400fa40:	e13ffd17 	ldw	r4,-12(fp)
 400fa44:	400f90c0 	call	400f90c <alt_alarm_stop>
 400fa48:	00000d06 	br	400fa80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400fa4c:	e0bffd17 	ldw	r2,-12(fp)
 400fa50:	10c00217 	ldw	r3,8(r2)
 400fa54:	e0bfff17 	ldw	r2,-4(fp)
 400fa58:	1887883a 	add	r3,r3,r2
 400fa5c:	e0bffd17 	ldw	r2,-12(fp)
 400fa60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400fa64:	e0bffd17 	ldw	r2,-12(fp)
 400fa68:	10c00217 	ldw	r3,8(r2)
 400fa6c:	d0a6fc17 	ldw	r2,-25616(gp)
 400fa70:	1880032e 	bgeu	r3,r2,400fa80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400fa74:	e0bffd17 	ldw	r2,-12(fp)
 400fa78:	00c00044 	movi	r3,1
 400fa7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400fa80:	e0bffe17 	ldw	r2,-8(fp)
 400fa84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400fa88:	e0fffd17 	ldw	r3,-12(fp)
 400fa8c:	d0a01204 	addi	r2,gp,-32696
 400fa90:	18bfcf1e 	bne	r3,r2,400f9d0 <__alt_data_end+0xfc00f9d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400fa94:	0001883a 	nop
}
 400fa98:	0001883a 	nop
 400fa9c:	e037883a 	mov	sp,fp
 400faa0:	dfc00117 	ldw	ra,4(sp)
 400faa4:	df000017 	ldw	fp,0(sp)
 400faa8:	dec00204 	addi	sp,sp,8
 400faac:	f800283a 	ret

0400fab0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400fab0:	deffff04 	addi	sp,sp,-4
 400fab4:	df000015 	stw	fp,0(sp)
 400fab8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400fabc:	000170fa 	wrctl	ienable,zero
}
 400fac0:	0001883a 	nop
 400fac4:	e037883a 	mov	sp,fp
 400fac8:	df000017 	ldw	fp,0(sp)
 400facc:	dec00104 	addi	sp,sp,4
 400fad0:	f800283a 	ret

0400fad4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400fad4:	defffb04 	addi	sp,sp,-20
 400fad8:	dfc00415 	stw	ra,16(sp)
 400fadc:	df000315 	stw	fp,12(sp)
 400fae0:	df000304 	addi	fp,sp,12
 400fae4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400fae8:	00810074 	movhi	r2,1025
 400faec:	10880804 	addi	r2,r2,8224
 400faf0:	10800017 	ldw	r2,0(r2)
 400faf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400faf8:	00003106 	br	400fbc0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 400fafc:	e0bffd17 	ldw	r2,-12(fp)
 400fb00:	10800217 	ldw	r2,8(r2)
 400fb04:	1009883a 	mov	r4,r2
 400fb08:	4006e080 	call	4006e08 <strlen>
 400fb0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400fb10:	e0bffd17 	ldw	r2,-12(fp)
 400fb14:	10c00217 	ldw	r3,8(r2)
 400fb18:	e0bffe17 	ldw	r2,-8(fp)
 400fb1c:	10bfffc4 	addi	r2,r2,-1
 400fb20:	1885883a 	add	r2,r3,r2
 400fb24:	10800003 	ldbu	r2,0(r2)
 400fb28:	10803fcc 	andi	r2,r2,255
 400fb2c:	1080201c 	xori	r2,r2,128
 400fb30:	10bfe004 	addi	r2,r2,-128
 400fb34:	10800bd8 	cmpnei	r2,r2,47
 400fb38:	1000031e 	bne	r2,zero,400fb48 <alt_find_file+0x74>
    {
      len -= 1;
 400fb3c:	e0bffe17 	ldw	r2,-8(fp)
 400fb40:	10bfffc4 	addi	r2,r2,-1
 400fb44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400fb48:	e0bffe17 	ldw	r2,-8(fp)
 400fb4c:	e0ffff17 	ldw	r3,-4(fp)
 400fb50:	1885883a 	add	r2,r3,r2
 400fb54:	10800003 	ldbu	r2,0(r2)
 400fb58:	10803fcc 	andi	r2,r2,255
 400fb5c:	1080201c 	xori	r2,r2,128
 400fb60:	10bfe004 	addi	r2,r2,-128
 400fb64:	10800be0 	cmpeqi	r2,r2,47
 400fb68:	1000081e 	bne	r2,zero,400fb8c <alt_find_file+0xb8>
 400fb6c:	e0bffe17 	ldw	r2,-8(fp)
 400fb70:	e0ffff17 	ldw	r3,-4(fp)
 400fb74:	1885883a 	add	r2,r3,r2
 400fb78:	10800003 	ldbu	r2,0(r2)
 400fb7c:	10803fcc 	andi	r2,r2,255
 400fb80:	1080201c 	xori	r2,r2,128
 400fb84:	10bfe004 	addi	r2,r2,-128
 400fb88:	10000a1e 	bne	r2,zero,400fbb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 400fb8c:	e0bffd17 	ldw	r2,-12(fp)
 400fb90:	10800217 	ldw	r2,8(r2)
 400fb94:	e0fffe17 	ldw	r3,-8(fp)
 400fb98:	180d883a 	mov	r6,r3
 400fb9c:	e17fff17 	ldw	r5,-4(fp)
 400fba0:	1009883a 	mov	r4,r2
 400fba4:	400fe140 	call	400fe14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400fba8:	1000021e 	bne	r2,zero,400fbb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400fbac:	e0bffd17 	ldw	r2,-12(fp)
 400fbb0:	00000806 	br	400fbd4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400fbb4:	e0bffd17 	ldw	r2,-12(fp)
 400fbb8:	10800017 	ldw	r2,0(r2)
 400fbbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400fbc0:	e0fffd17 	ldw	r3,-12(fp)
 400fbc4:	00810074 	movhi	r2,1025
 400fbc8:	10880804 	addi	r2,r2,8224
 400fbcc:	18bfcb1e 	bne	r3,r2,400fafc <__alt_data_end+0xfc00fafc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400fbd0:	0005883a 	mov	r2,zero
}
 400fbd4:	e037883a 	mov	sp,fp
 400fbd8:	dfc00117 	ldw	ra,4(sp)
 400fbdc:	df000017 	ldw	fp,0(sp)
 400fbe0:	dec00204 	addi	sp,sp,8
 400fbe4:	f800283a 	ret

0400fbe8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400fbe8:	defffc04 	addi	sp,sp,-16
 400fbec:	df000315 	stw	fp,12(sp)
 400fbf0:	df000304 	addi	fp,sp,12
 400fbf4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400fbf8:	00bffa04 	movi	r2,-24
 400fbfc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400fc00:	e03ffd15 	stw	zero,-12(fp)
 400fc04:	00001d06 	br	400fc7c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 400fc08:	00810074 	movhi	r2,1025
 400fc0c:	10837004 	addi	r2,r2,3520
 400fc10:	e0fffd17 	ldw	r3,-12(fp)
 400fc14:	18c00324 	muli	r3,r3,12
 400fc18:	10c5883a 	add	r2,r2,r3
 400fc1c:	10800017 	ldw	r2,0(r2)
 400fc20:	1000131e 	bne	r2,zero,400fc70 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 400fc24:	00810074 	movhi	r2,1025
 400fc28:	10837004 	addi	r2,r2,3520
 400fc2c:	e0fffd17 	ldw	r3,-12(fp)
 400fc30:	18c00324 	muli	r3,r3,12
 400fc34:	10c5883a 	add	r2,r2,r3
 400fc38:	e0ffff17 	ldw	r3,-4(fp)
 400fc3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400fc40:	00810074 	movhi	r2,1025
 400fc44:	10880c04 	addi	r2,r2,8240
 400fc48:	10c00017 	ldw	r3,0(r2)
 400fc4c:	e0bffd17 	ldw	r2,-12(fp)
 400fc50:	1880040e 	bge	r3,r2,400fc64 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 400fc54:	00810074 	movhi	r2,1025
 400fc58:	10880c04 	addi	r2,r2,8240
 400fc5c:	e0fffd17 	ldw	r3,-12(fp)
 400fc60:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400fc64:	e0bffd17 	ldw	r2,-12(fp)
 400fc68:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400fc6c:	00000606 	br	400fc88 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400fc70:	e0bffd17 	ldw	r2,-12(fp)
 400fc74:	10800044 	addi	r2,r2,1
 400fc78:	e0bffd15 	stw	r2,-12(fp)
 400fc7c:	e0bffd17 	ldw	r2,-12(fp)
 400fc80:	10800810 	cmplti	r2,r2,32
 400fc84:	103fe01e 	bne	r2,zero,400fc08 <__alt_data_end+0xfc00fc08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400fc88:	e0bffe17 	ldw	r2,-8(fp)
}
 400fc8c:	e037883a 	mov	sp,fp
 400fc90:	df000017 	ldw	fp,0(sp)
 400fc94:	dec00104 	addi	sp,sp,4
 400fc98:	f800283a 	ret

0400fc9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400fc9c:	defffb04 	addi	sp,sp,-20
 400fca0:	df000415 	stw	fp,16(sp)
 400fca4:	df000404 	addi	fp,sp,16
 400fca8:	e13ffe15 	stw	r4,-8(fp)
 400fcac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400fcb0:	e0bfff17 	ldw	r2,-4(fp)
 400fcb4:	10840070 	cmpltui	r2,r2,4097
 400fcb8:	1000021e 	bne	r2,zero,400fcc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400fcbc:	00840004 	movi	r2,4096
 400fcc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400fcc4:	e0fffe17 	ldw	r3,-8(fp)
 400fcc8:	e0bfff17 	ldw	r2,-4(fp)
 400fccc:	1885883a 	add	r2,r3,r2
 400fcd0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400fcd4:	e0bffe17 	ldw	r2,-8(fp)
 400fcd8:	e0bffc15 	stw	r2,-16(fp)
 400fcdc:	00000506 	br	400fcf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400fce0:	e0bffc17 	ldw	r2,-16(fp)
 400fce4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400fce8:	e0bffc17 	ldw	r2,-16(fp)
 400fcec:	10800804 	addi	r2,r2,32
 400fcf0:	e0bffc15 	stw	r2,-16(fp)
 400fcf4:	e0fffc17 	ldw	r3,-16(fp)
 400fcf8:	e0bffd17 	ldw	r2,-12(fp)
 400fcfc:	18bff836 	bltu	r3,r2,400fce0 <__alt_data_end+0xfc00fce0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400fd00:	e0bffe17 	ldw	r2,-8(fp)
 400fd04:	108007cc 	andi	r2,r2,31
 400fd08:	10000226 	beq	r2,zero,400fd14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400fd0c:	e0bffc17 	ldw	r2,-16(fp)
 400fd10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400fd14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400fd18:	0001883a 	nop
 400fd1c:	e037883a 	mov	sp,fp
 400fd20:	df000017 	ldw	fp,0(sp)
 400fd24:	dec00104 	addi	sp,sp,4
 400fd28:	f800283a 	ret

0400fd2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400fd2c:	defffe04 	addi	sp,sp,-8
 400fd30:	df000115 	stw	fp,4(sp)
 400fd34:	df000104 	addi	fp,sp,4
 400fd38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400fd3c:	e0bfff17 	ldw	r2,-4(fp)
 400fd40:	10bffe84 	addi	r2,r2,-6
 400fd44:	10c00428 	cmpgeui	r3,r2,16
 400fd48:	18001a1e 	bne	r3,zero,400fdb4 <alt_exception_cause_generated_bad_addr+0x88>
 400fd4c:	100690ba 	slli	r3,r2,2
 400fd50:	00810074 	movhi	r2,1025
 400fd54:	10bf5904 	addi	r2,r2,-668
 400fd58:	1885883a 	add	r2,r3,r2
 400fd5c:	10800017 	ldw	r2,0(r2)
 400fd60:	1000683a 	jmp	r2
 400fd64:	0400fda4 	muli	r16,zero,1014
 400fd68:	0400fda4 	muli	r16,zero,1014
 400fd6c:	0400fdb4 	movhi	r16,1014
 400fd70:	0400fdb4 	movhi	r16,1014
 400fd74:	0400fdb4 	movhi	r16,1014
 400fd78:	0400fda4 	muli	r16,zero,1014
 400fd7c:	0400fdac 	andhi	r16,zero,1014
 400fd80:	0400fdb4 	movhi	r16,1014
 400fd84:	0400fda4 	muli	r16,zero,1014
 400fd88:	0400fda4 	muli	r16,zero,1014
 400fd8c:	0400fdb4 	movhi	r16,1014
 400fd90:	0400fda4 	muli	r16,zero,1014
 400fd94:	0400fdac 	andhi	r16,zero,1014
 400fd98:	0400fdb4 	movhi	r16,1014
 400fd9c:	0400fdb4 	movhi	r16,1014
 400fda0:	0400fda4 	muli	r16,zero,1014
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400fda4:	00800044 	movi	r2,1
 400fda8:	00000306 	br	400fdb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400fdac:	0005883a 	mov	r2,zero
 400fdb0:	00000106 	br	400fdb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400fdb4:	0005883a 	mov	r2,zero
  }
}
 400fdb8:	e037883a 	mov	sp,fp
 400fdbc:	df000017 	ldw	fp,0(sp)
 400fdc0:	dec00104 	addi	sp,sp,4
 400fdc4:	f800283a 	ret

0400fdc8 <atexit>:
 400fdc8:	200b883a 	mov	r5,r4
 400fdcc:	000f883a 	mov	r7,zero
 400fdd0:	000d883a 	mov	r6,zero
 400fdd4:	0009883a 	mov	r4,zero
 400fdd8:	400fe901 	jmpi	400fe90 <__register_exitproc>

0400fddc <exit>:
 400fddc:	defffe04 	addi	sp,sp,-8
 400fde0:	000b883a 	mov	r5,zero
 400fde4:	dc000015 	stw	r16,0(sp)
 400fde8:	dfc00115 	stw	ra,4(sp)
 400fdec:	2021883a 	mov	r16,r4
 400fdf0:	400ffa80 	call	400ffa8 <__call_exitprocs>
 400fdf4:	00810074 	movhi	r2,1025
 400fdf8:	10880204 	addi	r2,r2,8200
 400fdfc:	11000017 	ldw	r4,0(r2)
 400fe00:	20800f17 	ldw	r2,60(r4)
 400fe04:	10000126 	beq	r2,zero,400fe0c <exit+0x30>
 400fe08:	103ee83a 	callr	r2
 400fe0c:	8009883a 	mov	r4,r16
 400fe10:	40101280 	call	4010128 <_exit>

0400fe14 <memcmp>:
 400fe14:	01c000c4 	movi	r7,3
 400fe18:	3980192e 	bgeu	r7,r6,400fe80 <memcmp+0x6c>
 400fe1c:	2144b03a 	or	r2,r4,r5
 400fe20:	11c4703a 	and	r2,r2,r7
 400fe24:	10000f26 	beq	r2,zero,400fe64 <memcmp+0x50>
 400fe28:	20800003 	ldbu	r2,0(r4)
 400fe2c:	28c00003 	ldbu	r3,0(r5)
 400fe30:	10c0151e 	bne	r2,r3,400fe88 <memcmp+0x74>
 400fe34:	31bfff84 	addi	r6,r6,-2
 400fe38:	01ffffc4 	movi	r7,-1
 400fe3c:	00000406 	br	400fe50 <memcmp+0x3c>
 400fe40:	20800003 	ldbu	r2,0(r4)
 400fe44:	28c00003 	ldbu	r3,0(r5)
 400fe48:	31bfffc4 	addi	r6,r6,-1
 400fe4c:	10c00e1e 	bne	r2,r3,400fe88 <memcmp+0x74>
 400fe50:	21000044 	addi	r4,r4,1
 400fe54:	29400044 	addi	r5,r5,1
 400fe58:	31fff91e 	bne	r6,r7,400fe40 <__alt_data_end+0xfc00fe40>
 400fe5c:	0005883a 	mov	r2,zero
 400fe60:	f800283a 	ret
 400fe64:	20c00017 	ldw	r3,0(r4)
 400fe68:	28800017 	ldw	r2,0(r5)
 400fe6c:	18bfee1e 	bne	r3,r2,400fe28 <__alt_data_end+0xfc00fe28>
 400fe70:	31bfff04 	addi	r6,r6,-4
 400fe74:	21000104 	addi	r4,r4,4
 400fe78:	29400104 	addi	r5,r5,4
 400fe7c:	39bff936 	bltu	r7,r6,400fe64 <__alt_data_end+0xfc00fe64>
 400fe80:	303fe91e 	bne	r6,zero,400fe28 <__alt_data_end+0xfc00fe28>
 400fe84:	003ff506 	br	400fe5c <__alt_data_end+0xfc00fe5c>
 400fe88:	10c5c83a 	sub	r2,r2,r3
 400fe8c:	f800283a 	ret

0400fe90 <__register_exitproc>:
 400fe90:	defffa04 	addi	sp,sp,-24
 400fe94:	dc000315 	stw	r16,12(sp)
 400fe98:	04010074 	movhi	r16,1025
 400fe9c:	84080204 	addi	r16,r16,8200
 400fea0:	80c00017 	ldw	r3,0(r16)
 400fea4:	dc400415 	stw	r17,16(sp)
 400fea8:	dfc00515 	stw	ra,20(sp)
 400feac:	18805217 	ldw	r2,328(r3)
 400feb0:	2023883a 	mov	r17,r4
 400feb4:	10003726 	beq	r2,zero,400ff94 <__register_exitproc+0x104>
 400feb8:	10c00117 	ldw	r3,4(r2)
 400febc:	010007c4 	movi	r4,31
 400fec0:	20c00e16 	blt	r4,r3,400fefc <__register_exitproc+0x6c>
 400fec4:	1a000044 	addi	r8,r3,1
 400fec8:	8800221e 	bne	r17,zero,400ff54 <__register_exitproc+0xc4>
 400fecc:	18c00084 	addi	r3,r3,2
 400fed0:	18c7883a 	add	r3,r3,r3
 400fed4:	18c7883a 	add	r3,r3,r3
 400fed8:	12000115 	stw	r8,4(r2)
 400fedc:	10c7883a 	add	r3,r2,r3
 400fee0:	19400015 	stw	r5,0(r3)
 400fee4:	0005883a 	mov	r2,zero
 400fee8:	dfc00517 	ldw	ra,20(sp)
 400feec:	dc400417 	ldw	r17,16(sp)
 400fef0:	dc000317 	ldw	r16,12(sp)
 400fef4:	dec00604 	addi	sp,sp,24
 400fef8:	f800283a 	ret
 400fefc:	00800034 	movhi	r2,0
 400ff00:	10800004 	addi	r2,r2,0
 400ff04:	10002626 	beq	r2,zero,400ffa0 <__register_exitproc+0x110>
 400ff08:	01006404 	movi	r4,400
 400ff0c:	d9400015 	stw	r5,0(sp)
 400ff10:	d9800115 	stw	r6,4(sp)
 400ff14:	d9c00215 	stw	r7,8(sp)
 400ff18:	00000000 	call	0 <__reset-0x20000>
 400ff1c:	d9400017 	ldw	r5,0(sp)
 400ff20:	d9800117 	ldw	r6,4(sp)
 400ff24:	d9c00217 	ldw	r7,8(sp)
 400ff28:	10001d26 	beq	r2,zero,400ffa0 <__register_exitproc+0x110>
 400ff2c:	81000017 	ldw	r4,0(r16)
 400ff30:	10000115 	stw	zero,4(r2)
 400ff34:	02000044 	movi	r8,1
 400ff38:	22405217 	ldw	r9,328(r4)
 400ff3c:	0007883a 	mov	r3,zero
 400ff40:	12400015 	stw	r9,0(r2)
 400ff44:	20805215 	stw	r2,328(r4)
 400ff48:	10006215 	stw	zero,392(r2)
 400ff4c:	10006315 	stw	zero,396(r2)
 400ff50:	883fde26 	beq	r17,zero,400fecc <__alt_data_end+0xfc00fecc>
 400ff54:	18c9883a 	add	r4,r3,r3
 400ff58:	2109883a 	add	r4,r4,r4
 400ff5c:	1109883a 	add	r4,r2,r4
 400ff60:	21802215 	stw	r6,136(r4)
 400ff64:	01800044 	movi	r6,1
 400ff68:	12406217 	ldw	r9,392(r2)
 400ff6c:	30cc983a 	sll	r6,r6,r3
 400ff70:	4992b03a 	or	r9,r9,r6
 400ff74:	12406215 	stw	r9,392(r2)
 400ff78:	21c04215 	stw	r7,264(r4)
 400ff7c:	01000084 	movi	r4,2
 400ff80:	893fd21e 	bne	r17,r4,400fecc <__alt_data_end+0xfc00fecc>
 400ff84:	11006317 	ldw	r4,396(r2)
 400ff88:	218cb03a 	or	r6,r4,r6
 400ff8c:	11806315 	stw	r6,396(r2)
 400ff90:	003fce06 	br	400fecc <__alt_data_end+0xfc00fecc>
 400ff94:	18805304 	addi	r2,r3,332
 400ff98:	18805215 	stw	r2,328(r3)
 400ff9c:	003fc606 	br	400feb8 <__alt_data_end+0xfc00feb8>
 400ffa0:	00bfffc4 	movi	r2,-1
 400ffa4:	003fd006 	br	400fee8 <__alt_data_end+0xfc00fee8>

0400ffa8 <__call_exitprocs>:
 400ffa8:	defff504 	addi	sp,sp,-44
 400ffac:	df000915 	stw	fp,36(sp)
 400ffb0:	dd400615 	stw	r21,24(sp)
 400ffb4:	dc800315 	stw	r18,12(sp)
 400ffb8:	dfc00a15 	stw	ra,40(sp)
 400ffbc:	ddc00815 	stw	r23,32(sp)
 400ffc0:	dd800715 	stw	r22,28(sp)
 400ffc4:	dd000515 	stw	r20,20(sp)
 400ffc8:	dcc00415 	stw	r19,16(sp)
 400ffcc:	dc400215 	stw	r17,8(sp)
 400ffd0:	dc000115 	stw	r16,4(sp)
 400ffd4:	d9000015 	stw	r4,0(sp)
 400ffd8:	2839883a 	mov	fp,r5
 400ffdc:	04800044 	movi	r18,1
 400ffe0:	057fffc4 	movi	r21,-1
 400ffe4:	00810074 	movhi	r2,1025
 400ffe8:	10880204 	addi	r2,r2,8200
 400ffec:	12000017 	ldw	r8,0(r2)
 400fff0:	45005217 	ldw	r20,328(r8)
 400fff4:	44c05204 	addi	r19,r8,328
 400fff8:	a0001c26 	beq	r20,zero,401006c <__call_exitprocs+0xc4>
 400fffc:	a0800117 	ldw	r2,4(r20)
 4010000:	15ffffc4 	addi	r23,r2,-1
 4010004:	b8000d16 	blt	r23,zero,401003c <__call_exitprocs+0x94>
 4010008:	14000044 	addi	r16,r2,1
 401000c:	8421883a 	add	r16,r16,r16
 4010010:	8421883a 	add	r16,r16,r16
 4010014:	84402004 	addi	r17,r16,128
 4010018:	a463883a 	add	r17,r20,r17
 401001c:	a421883a 	add	r16,r20,r16
 4010020:	e0001e26 	beq	fp,zero,401009c <__call_exitprocs+0xf4>
 4010024:	80804017 	ldw	r2,256(r16)
 4010028:	e0801c26 	beq	fp,r2,401009c <__call_exitprocs+0xf4>
 401002c:	bdffffc4 	addi	r23,r23,-1
 4010030:	843fff04 	addi	r16,r16,-4
 4010034:	8c7fff04 	addi	r17,r17,-4
 4010038:	bd7ff91e 	bne	r23,r21,4010020 <__alt_data_end+0xfc010020>
 401003c:	00800034 	movhi	r2,0
 4010040:	10800004 	addi	r2,r2,0
 4010044:	10000926 	beq	r2,zero,401006c <__call_exitprocs+0xc4>
 4010048:	a0800117 	ldw	r2,4(r20)
 401004c:	1000301e 	bne	r2,zero,4010110 <__call_exitprocs+0x168>
 4010050:	a0800017 	ldw	r2,0(r20)
 4010054:	10003226 	beq	r2,zero,4010120 <__call_exitprocs+0x178>
 4010058:	a009883a 	mov	r4,r20
 401005c:	98800015 	stw	r2,0(r19)
 4010060:	00000000 	call	0 <__reset-0x20000>
 4010064:	9d000017 	ldw	r20,0(r19)
 4010068:	a03fe41e 	bne	r20,zero,400fffc <__alt_data_end+0xfc00fffc>
 401006c:	dfc00a17 	ldw	ra,40(sp)
 4010070:	df000917 	ldw	fp,36(sp)
 4010074:	ddc00817 	ldw	r23,32(sp)
 4010078:	dd800717 	ldw	r22,28(sp)
 401007c:	dd400617 	ldw	r21,24(sp)
 4010080:	dd000517 	ldw	r20,20(sp)
 4010084:	dcc00417 	ldw	r19,16(sp)
 4010088:	dc800317 	ldw	r18,12(sp)
 401008c:	dc400217 	ldw	r17,8(sp)
 4010090:	dc000117 	ldw	r16,4(sp)
 4010094:	dec00b04 	addi	sp,sp,44
 4010098:	f800283a 	ret
 401009c:	a0800117 	ldw	r2,4(r20)
 40100a0:	80c00017 	ldw	r3,0(r16)
 40100a4:	10bfffc4 	addi	r2,r2,-1
 40100a8:	15c01426 	beq	r2,r23,40100fc <__call_exitprocs+0x154>
 40100ac:	80000015 	stw	zero,0(r16)
 40100b0:	183fde26 	beq	r3,zero,401002c <__alt_data_end+0xfc01002c>
 40100b4:	95c8983a 	sll	r4,r18,r23
 40100b8:	a0806217 	ldw	r2,392(r20)
 40100bc:	a5800117 	ldw	r22,4(r20)
 40100c0:	2084703a 	and	r2,r4,r2
 40100c4:	10000b26 	beq	r2,zero,40100f4 <__call_exitprocs+0x14c>
 40100c8:	a0806317 	ldw	r2,396(r20)
 40100cc:	2088703a 	and	r4,r4,r2
 40100d0:	20000c1e 	bne	r4,zero,4010104 <__call_exitprocs+0x15c>
 40100d4:	89400017 	ldw	r5,0(r17)
 40100d8:	d9000017 	ldw	r4,0(sp)
 40100dc:	183ee83a 	callr	r3
 40100e0:	a0800117 	ldw	r2,4(r20)
 40100e4:	15bfbf1e 	bne	r2,r22,400ffe4 <__alt_data_end+0xfc00ffe4>
 40100e8:	98800017 	ldw	r2,0(r19)
 40100ec:	153fcf26 	beq	r2,r20,401002c <__alt_data_end+0xfc01002c>
 40100f0:	003fbc06 	br	400ffe4 <__alt_data_end+0xfc00ffe4>
 40100f4:	183ee83a 	callr	r3
 40100f8:	003ff906 	br	40100e0 <__alt_data_end+0xfc0100e0>
 40100fc:	a5c00115 	stw	r23,4(r20)
 4010100:	003feb06 	br	40100b0 <__alt_data_end+0xfc0100b0>
 4010104:	89000017 	ldw	r4,0(r17)
 4010108:	183ee83a 	callr	r3
 401010c:	003ff406 	br	40100e0 <__alt_data_end+0xfc0100e0>
 4010110:	a0800017 	ldw	r2,0(r20)
 4010114:	a027883a 	mov	r19,r20
 4010118:	1029883a 	mov	r20,r2
 401011c:	003fb606 	br	400fff8 <__alt_data_end+0xfc00fff8>
 4010120:	0005883a 	mov	r2,zero
 4010124:	003ffb06 	br	4010114 <__alt_data_end+0xfc010114>

04010128 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4010128:	defffd04 	addi	sp,sp,-12
 401012c:	df000215 	stw	fp,8(sp)
 4010130:	df000204 	addi	fp,sp,8
 4010134:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4010138:	0001883a 	nop
 401013c:	e0bfff17 	ldw	r2,-4(fp)
 4010140:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4010144:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4010148:	10000226 	beq	r2,zero,4010154 <_exit+0x2c>
    ALT_SIM_FAIL();
 401014c:	002af070 	cmpltui	zero,zero,43969
 4010150:	00000106 	br	4010158 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4010154:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4010158:	003fff06 	br	4010158 <__alt_data_end+0xfc010158>
